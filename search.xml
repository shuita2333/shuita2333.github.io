<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Latex语法学习</title>
    <url>/2023/09/19/Software%20and%20App/Latex_study/</url>
    <content><![CDATA[<h1 id="Latex介绍"><a href="#Latex介绍" class="headerlink" title="Latex介绍"></a>Latex介绍</h1><p>Latex（LATEX，音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由 TEX 所提供的强大功能，能在几天、甚至几小时内生成很多具有书籍质量的印刷品。</p>
<p>它构筑在 TEX 的基础之上，并加进了很多的功能以使得使用者可以更为方便的利用 TEX 的强大功能。使用Latex基本上不需要使用者自己设计命令和宏等，因为Latex已经替你做好了。</p>
<p>对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学类文档。</p>
<p>这个系统同样适用于生成从简单的信件、精致的简历、优雅的幻灯片到完整书籍的所有其他种类的文档。</p>
<h1 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h1><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/9/1/2/91205e81c98c486418902c88d5c396f5355491f1.png" alt="$\pm$"></td>
<td>\pm</td>
<td><img src="https://latex.artofproblemsolving.com/1/9/d/19dcb590e43ac06de8bf64daabdcae351c51ebe6.png" alt="$\mp$"></td>
<td>\mp</td>
<td><img src="https://latex.artofproblemsolving.com/b/a/c/bac4dbe1c696d11e8dc43dd7f613199b2120daa1.png" alt="$\times$"></td>
<td>\times</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/1/c/8/1c81486a525ba08192aab8546dbe9a32bdbe0c07.png" alt="$\div$"></td>
<td>\div</td>
<td><img src="https://latex.artofproblemsolving.com/8/f/1/8f1fb66751f2ee2626c75303485dba473c39a2f2.png" alt="$\cdot$"></td>
<td>\cdot</td>
<td><img src="https://latex.artofproblemsolving.com/2/7/8/278afa87a7dfa8e2b3f40e608884a690fb1325f6.png" alt="$\ast$"></td>
<td>\ast</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/1/7/d17950ad2ab63c764778b133f95a03dcf2969d57.png" alt="$\star$"></td>
<td>\star</td>
<td><img src="https://latex.artofproblemsolving.com/7/5/f/75fbdfd4148a2d76b66583eb07a05c0e1853e5ed.png" alt="$\dagger$"></td>
<td>\dagger</td>
<td><img src="https://latex.artofproblemsolving.com/1/e/e/1eee3cf7655b7f97127bfaf93851960caf8aa62f.png" alt="$\ddagger$"></td>
<td>\ddagger</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/e/4/3/e43da851ce02ac27ab36f6708edf6c313febd609.png" alt="$\amalg$"></td>
<td>\amalg</td>
<td><img src="https://latex.artofproblemsolving.com/c/0/f/c0f2b8e02812dd6278501da3698b07563864df3d.png" alt="$\cap$"></td>
<td>\cap</td>
<td><img src="https://latex.artofproblemsolving.com/a/6/c/a6cef8fd2bc2c7f9f1e27327b739f2cd7baa31ac.png" alt="$\cup$"></td>
<td>\cup</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/7/9/0/7909c20a66b5e6fa43a1a26710a8ebcfb82527ff.png" alt="$\uplus$"></td>
<td>\uplus</td>
<td><img src="https://latex.artofproblemsolving.com/f/1/7/f17c91e4f44cf3cef16793582abe63eea7b8d0b1.png" alt="$\sqcap$"></td>
<td>\sqcap</td>
<td><img src="https://latex.artofproblemsolving.com/1/4/e/14e23edff0ebfb9a1d7976b6d3553ce54c7c413a.png" alt="$\sqcup$"></td>
<td>\sqcup</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/1/3/f/13f3b223fb942219e3d77d9dfa86ad0933513882.png" alt="$\vee$"></td>
<td>\vee</td>
<td><img src="https://latex.artofproblemsolving.com/b/d/8/bd8dcc3cdcaa4d91ba26f8bfb9c339862f7c0047.png" alt="$\wedge$"></td>
<td>\wedge</td>
<td><img src="https://latex.artofproblemsolving.com/f/7/c/f7c581af3f7cf7ed3abe62da090534eb4d1bd00f.png" alt="$\oplus$"></td>
<td>\oplus</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/1/e/b/1eb5abf6a4d5640740fa3b2cd04b4044f2af4447.png" alt="$\ominus$"></td>
<td>\ominus</td>
<td><img src="https://latex.artofproblemsolving.com/b/8/8/b88c462e5d9319a7d2181ad94863658fa0a24736.png" alt="$\otimes$"></td>
<td>\otimes</td>
<td><img src="https://latex.artofproblemsolving.com/7/f/3/7f3b4ea3b8abe9ced6095c7d75f207a1127ee843.png" alt="$\circ$"></td>
<td>\circ</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/5/3/d534b942086dae501cbdce030206adb87567bb07.png" alt="$\bullet$"></td>
<td>\bullet</td>
<td><img src="https://latex.artofproblemsolving.com/a/6/4/a64597fa971a2a89feef230c4a309e18d2bb0c8f.png" alt="$\diamond$"></td>
<td>\diamond</td>
<td><img src="https://latex.artofproblemsolving.com/a/1/5/a15fb2b22303748b71b538562bc38cf2f3d9c036.png" alt="$\lhd$"></td>
<td>\lhd</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/3/7/2/372fab12125c6ece78ebae1fa64389c7bd788166.png" alt="$\rhd$"></td>
<td>\rhd</td>
<td><img src="https://latex.artofproblemsolving.com/b/c/4/bc4897ff6faf49b2f2ac26351bca603e931e7ec8.png" alt="$\unlhd$"></td>
<td>\unlhd</td>
<td><img src="https://latex.artofproblemsolving.com/b/d/d/bdd81dbaedba0355750058c7c6a2e40a015e28bb.png" alt="$\unrhd$"></td>
<td>\unrhd</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/f/b/b/fbb803c0fc7f72787184624d4f91e71a171baa1f.png" alt="$\oslash$"></td>
<td>\oslash</td>
<td><img src="https://latex.artofproblemsolving.com/9/c/b/9cb84f78e824963c5609a057214128b8c7776183.png" alt="$\odot$"></td>
<td>\odot</td>
<td><img src="https://latex.artofproblemsolving.com/b/1/3/b1352e2dc4380ca6efe5d978cb4bfa2745354e11.png" alt="$\bigcirc$"></td>
<td>\bigcirc</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/a/a/b/aab16e702194ef1900cf09684c138f410ef995e8.png" alt="$\triangleleft$"></td>
<td>\triangleleft</td>
<td><img src="https://latex.artofproblemsolving.com/7/6/e/76edde10cd8ffa25ad5bf5689c032fdf78aeef28.png" alt="$\Diamond$"></td>
<td>\Diamond</td>
<td><img src="https://latex.artofproblemsolving.com/5/d/0/5d0a21de4d02a9c17e9f716bc93020cb300dc335.png" alt="$\bigtriangleup$"></td>
<td>\bigtriangleup</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/5/2/a/52a23e3c2f527965b4d5461bf5981ef112d51a2f.png" alt="$\bigtriangledown$"></td>
<td>\bigtriangledown</td>
<td><img src="https://latex.artofproblemsolving.com/c/1/2/c12dda010ebddef028cda1ec9d14986f4a26d07e.png" alt="$\Box$"></td>
<td>\Box</td>
<td><img src="https://latex.artofproblemsolving.com/c/1/7/c1731dedb14bb1b4781dc9a30b95f58825a50fa9.png" alt="$\triangleright$"></td>
<td>\triangleright</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/8/a/a/8aa91c965a8fe7e59c49e1e97bc7d5828dc4d120.png" alt="$\setminus$"></td>
<td>\setminus</td>
<td><img src="https://latex.artofproblemsolving.com/3/4/1/341afd98eab5dbcdd2128223e84e2d9f1bb63365.png" alt="$\wr$"></td>
<td>\wr</td>
<td><img src="https://latex.artofproblemsolving.com/4/8/0/4805dddb4e6911989af8be91da334b5ba2054757.png" alt="$\sqrt{x}$"></td>
<td>\sqrt{x}</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/a/9/da9bb652e84532a7cddad7b633cb769bc6946d4e.png" alt="$x^{\circ}$"></td>
<td>x^{\circ}</td>
<td><img src="https://latex.artofproblemsolving.com/8/4/8/848003f6d0389cb141c2bf3b624734556c9f746a.png" alt="$\triangledown$"></td>
<td>\triangledown</td>
<td><img src="https://latex.artofproblemsolving.com/0/2/d/02d35112ae0400463779b8c3320f3bc597d81374.png" alt="$\sqrt[n]{x}$"></td>
<td>\sqrt[n]{x}</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/d/e/ddee543f04d6fbac4ab70309ce7aa5b8760aa897.png" alt="$a^x$"></td>
<td>a^x</td>
<td><img src="https://latex.artofproblemsolving.com/c/6/9/c690994d239dc33c27fd53c79940a75330eaf41e.png" alt="$a^{xyz}$"></td>
<td>a^{xyz}</td>
<td><img src="https://latex.artofproblemsolving.com/9/a/5/9a5af51cfec649afb7d8bf2c8b7080b58ba69830.png" alt="$a_x$"></td>
<td>a_x</td>
</tr>
</tbody></table>
<h2 id="关系符"><a href="#关系符" class="headerlink" title="关系符"></a>关系符</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/3/b/4/3b4cd01885cb569775f5d1143bc5139fff104bdc.png" alt="$\le$"></td>
<td>\le</td>
<td><img src="https://latex.artofproblemsolving.com/0/0/c/00c3863a5ca53a1be38db8921ae7b5bfbfbe1dc6.png" alt="$\ge$"></td>
<td>\ge</td>
<td><img src="https://latex.artofproblemsolving.com/e/3/4/e34abf3c7601f491cde20e6c318f54030b0237a2.png" alt="$\neq$"></td>
<td>\neq</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/e/5/5/e55156a4008b0944ad00d5bc71bc5aa6315aabb7.png" alt="$\sim$"></td>
<td>\sim</td>
<td><img src="https://latex.artofproblemsolving.com/1/e/4/1e4d154223e7171ad7ae3b398a849d0152b575ad.png" alt="$\ll$"></td>
<td>\ll</td>
<td><img src="https://latex.artofproblemsolving.com/b/5/e/b5e95a72274f434ba9984d67dba7438a286158f3.png" alt="$\gg$"></td>
<td>\gg</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/a/8/f/a8fa91f83671b6f0f19a4bb1b0839d1fc06ffbf9.png" alt="$\doteq$"></td>
<td>\doteq</td>
<td><img src="https://latex.artofproblemsolving.com/5/e/4/5e46ba9c72f86769fb14a32f8eb271bc440e2061.png" alt="$\simeq$"></td>
<td>\simeq</td>
<td><img src="https://latex.artofproblemsolving.com/e/6/f/e6ffbe0cb0b8d47bd10eec85fb336adf7694f896.png" alt="$\subset$"></td>
<td>\subset</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/f/5/4/f5451590e41b731933710d9f34b93b6dd2994139.png" alt="$\supset$"></td>
<td>\supset</td>
<td><img src="https://latex.artofproblemsolving.com/a/c/b/acbc54ef8feabfc5d0a2329f0cfbd10af8a6a809.png" alt="$\approx$"></td>
<td>\approx</td>
<td><img src="https://latex.artofproblemsolving.com/c/6/d/c6dd6b322a1d042d13b2ceba7a6f45be7eb8de6c.png" alt="$\asymp$"></td>
<td>\asymp</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/7/a/f/7af4f46fd0cf5cdbed23e67e7896f64cb380ee52.png" alt="$\subseteq$"></td>
<td>\subseteq</td>
<td><img src="https://latex.artofproblemsolving.com/a/5/5/a5544786abebf78b0ef72b5241cdb1196effabd2.png" alt="$\supseteq$"></td>
<td>\supseteq</td>
<td><img src="https://latex.artofproblemsolving.com/b/9/9/b9904282b277d5afca7b6fb12f3bb7c5ff616510.png" alt="$\cong$"></td>
<td>\cong</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/b/9/d/b9d7bc7cf4a44200f381f9b8f7f09b27ba728018.png" alt="$\smile$"></td>
<td>\smile</td>
<td><img src="https://latex.artofproblemsolving.com/1/2/4/124b77b4b0cc873e5c027a76ab58cd5c7fed0ca1.png" alt="$\sqsubset$"></td>
<td>\sqsubset</td>
<td><img src="https://latex.artofproblemsolving.com/2/3/1/231bddf0e59b26209b1b6815d9a41f91d04ea701.png" alt="$\sqsupset$"></td>
<td>\sqsupset</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/1/1/6/1165e91155febc4bc88785c5504eb52efe4f8c51.png" alt="$\equiv$"></td>
<td>\equiv</td>
<td><img src="https://latex.artofproblemsolving.com/c/d/0/cd0780b55db44ebfc68e984c2354c579314de704.png" alt="$\frown$"></td>
<td>\frown</td>
<td><img src="https://latex.artofproblemsolving.com/d/6/e/d6ee2b442ac5f3d7940a33c1eba386e93fc3381f.png" alt="$\sqsubseteq$"></td>
<td>\sqsubseteq</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/6/9/3/693c0332817f1be148c7b691a1d419e0cdc971ed.png" alt="$\sqsupseteq$"></td>
<td>\sqsupseteq</td>
<td><img src="https://latex.artofproblemsolving.com/1/1/3/11303cd923877716bbb6fde144d09687260910fb.png" alt="$\propto$"></td>
<td>\propto</td>
<td><img src="https://latex.artofproblemsolving.com/c/5/a/c5a172ca1f59801643929daf4b59d0a225604ca7.png" alt="$\bowtie$"></td>
<td>\bowtie</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/1/3/4/134004c561e4c0cca193dbf5122e5ca963dd5b7f.png" alt="$\in$"></td>
<td>\in</td>
<td><img src="https://latex.artofproblemsolving.com/8/9/d/89db07258d2e7a1c9aac138b7c1846645bdf79eb.png" alt="$\ni$"></td>
<td>\ni</td>
<td><img src="https://latex.artofproblemsolving.com/c/c/1/cc1075b75dff8acde28b91201acc216d0a343fce.png" alt="$\prec$"></td>
<td>\prec</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/f/0/d/f0da9cf8e29547352b0d8a30fedb96f71f5def8b.png" alt="$\succ$"></td>
<td>\succ</td>
<td><img src="https://latex.artofproblemsolving.com/8/1/2/81226dce386555032afda7e4739639feabbc801a.png" alt="$\vdash$"></td>
<td>\vdash</td>
<td><img src="https://latex.artofproblemsolving.com/f/f/d/ffdb8a7364423bb7904d60840d7b7f9047dee450.png" alt="$\dashv$"></td>
<td>\dashv</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/e/a/c/eac91ff45cea31243210756d0af2ecd0867f9dae.png" alt="$\preceq$"></td>
<td>\preceq</td>
<td><img src="https://latex.artofproblemsolving.com/d/b/0/db0f05af17a329d387f5234730350c6227d4ca0d.png" alt="$\succeq$"></td>
<td>\succeq</td>
<td><img src="https://latex.artofproblemsolving.com/3/1/a/31a65b06843b33bfe53a87920e8de3a8a40d93e4.png" alt="$\models$"></td>
<td>\models</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/2/9/5/29501a90018e83d6d3e88b1f83bdfb71e692561e.png" alt="$\perp$"></td>
<td>\perp</td>
<td><img src="https://latex.artofproblemsolving.com/7/0/0/700b2122c7a66766d80c3dfe5109de9b58e65a66.png" alt="$\parallel$"></td>
<td>\parallel</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>只要将not放在符号前面或者在 \ 和单词之间插入一个 n ，就可以形成许多这些关系的否定形式，这里有一些例子，加上一些其他的否定，它也适用于许多其他的。</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/8/3/b/83b17e0f7af5b49594ac16587442fe5f12a475fd.png" alt="$\nmid$"></td>
<td>\nmid</td>
<td><img src="https://latex.artofproblemsolving.com/c/6/8/c681d35dfe1a4f53de0ebda66832aa0fc286cbd0.png" alt="$\nleq$"></td>
<td>\nleq</td>
<td><img src="https://latex.artofproblemsolving.com/a/5/e/a5ea08782633e9e1db55ada7df9ec3cb1e74e212.png" alt="$\ngeq$"></td>
<td>\ngeq</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/9/8/e/98e9b5dcdf4cef4c9a6eba2f89b79dbab6589f40.png" alt="$\nsim$"></td>
<td>\nsim</td>
<td><img src="https://latex.artofproblemsolving.com/e/f/2/ef2f2d4b87a19a87d9c6aae23f3515c44f49c5e4.png" alt="$\ncong$"></td>
<td>\ncong</td>
<td><img src="https://latex.artofproblemsolving.com/6/6/4/66459c2921421baabb23ba674f1c38644bfb94ae.png" alt="$\nparallel$"></td>
<td>\nparallel</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/b/e/5/be5b21d425b39063889ffc39302122c302187840.png" alt="$\not&lt;$"></td>
<td>\not&lt;</td>
<td><img src="https://latex.artofproblemsolving.com/4/1/4/41484799e848722804569891f3c9f8f6ba85be72.png" alt="$\not&gt;$"></td>
<td>\not&gt;</td>
<td><img src="https://latex.artofproblemsolving.com/b/5/2/b52e41fffd6f799febf06948db4857add0cafdf5.png" alt="$\not=$"></td>
<td>\not&#x3D; or \neq or \ne</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/8/8/0/8804323a929802098f7d5135effe13df72f99fe3.png" alt="$\not\le$"></td>
<td>\not\le</td>
<td><img src="https://latex.artofproblemsolving.com/c/3/6/c36f3836d4cf8e908a3e63d0640dbe5f3f6b3aac.png" alt="$\not\ge$"></td>
<td>\not\ge</td>
<td><img src="https://latex.artofproblemsolving.com/3/2/8/328e7366713d3594c6decd9a16c71d38ff66d24e.png" alt="$\not\sim$"></td>
<td>\not\sim</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/1/4/c/14cef4209cbb6781580b82fcb49c5cabf42110b5.png" alt="$\not \approx$"></td>
<td>\not\approx</td>
<td><img src="https://latex.artofproblemsolving.com/9/d/b/9dba3e1547b02e8cfb16e73174d313ce3c44991d.png" alt="$\not\cong$"></td>
<td>\not\cong</td>
<td><img src="https://latex.artofproblemsolving.com/7/5/2/7524371d49900f0a110e8c41a6a626449310999d.png" alt="$\not\equiv$"></td>
<td>\not\equiv</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/1/0/b/10babfcf66e652715e5ee499b569c4afaff8e347.png" alt="$\not\parallel$"></td>
<td>\not\parallel</td>
<td><img src="https://latex.artofproblemsolving.com/1/1/e/11ed3742359426af546f0f2c588934cc3d27d9a7.png" alt="$\nless$"></td>
<td>\nless</td>
<td><img src="https://latex.artofproblemsolving.com/8/0/e/80e8acc7c1a52a13f0b46fcdb855501582c1f258.png" alt="$\ngtr$"></td>
<td>\ngtr</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/0/1/c/01cbbfb6098409250bba1da5cd3702a4f91b1062.png" alt="$\lneq$"></td>
<td>\lneq</td>
<td><img src="https://latex.artofproblemsolving.com/5/0/2/502aba7f2ebb4e5b0c07f1fc727f09a20c4b4bc6.png" alt="$\gneq$"></td>
<td>\gneq</td>
<td><img src="https://latex.artofproblemsolving.com/2/c/e/2ce172633b8db32cdba9196efe3d5912628e73db.png" alt="$\lnsim$"></td>
<td>\lnsim</td>
</tr>
</tbody></table>
<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/4/e/a/4eab2b4c3730f6ca28b181105160f87f84c49a08.png" alt="$\sum  \textstyle\sum$"></td>
<td>\sum</td>
<td><img src="https://latex.artofproblemsolving.com/6/d/1/6d14592f0872a308caf69a5d695581b8f56adaf4.png" alt="$\int  \textstyle\int$"></td>
<td>\int</td>
<td><img src="https://latex.artofproblemsolving.com/b/1/d/b1d46ca41500b244afd17f827dda9a43a1c606c1.png" alt="$\oint  \textstyle\oint$"></td>
<td>\oint</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/e/8/c/e8cb398f2e1c14f174456af12526d1380de93042.png" alt="$\prod  \textstyle\prod$"></td>
<td>\prod</td>
<td><img src="https://latex.artofproblemsolving.com/7/f/f/7ff985aaf9cdb0a46821e8ca45369ea50dab16bf.png" alt="$\coprod  \textstyle\coprod$"></td>
<td>\coprod</td>
<td><img src="https://latex.artofproblemsolving.com/0/f/2/0f2b6687b87eba9a1b15c64bf1a510f3d8962533.png" alt="$\bigcap  \textstyle\bigcap$"></td>
<td>\bigcap</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/c/3/dc3622235b09bd67ccd61d51706be0cdba8cde4a.png" alt="$\bigcup  \textstyle\bigcup$"></td>
<td>\bigcup</td>
<td><img src="https://latex.artofproblemsolving.com/4/c/1/4c1715b7d4bedcd82804947fff2234e526e67b9a.png" alt="$\bigsqcup  \textstyle\bigsqcup$"></td>
<td>\bigsqcup</td>
<td><img src="https://latex.artofproblemsolving.com/f/8/2/f8270dc629acde682ea1e18f9cee677e58c29cbb.png" alt="$\bigvee  \textstyle\bigvee$"></td>
<td>\bigvee</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/e/b/b/ebb4ab4fbe044c44a446fe1bf274d3a80048284c.png" alt="$\bigwedge  \textstyle\bigwedge$"></td>
<td>\bigwedge</td>
<td><img src="https://latex.artofproblemsolving.com/e/3/1/e31ae477e5b4dc90514e2099723ae7faaef6fc3b.png" alt="$\bigodot  \textstyle\bigodot$"></td>
<td>\bigodot</td>
<td><img src="https://latex.artofproblemsolving.com/b/1/2/b12e4a1447f71f823eefb562ecac1e11ebd63915.png" alt="$\bigotimes  \textstyle\bigotimes$"></td>
<td>\bigotimes</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/6/c/1/6c1138601b152c42594b90596c293aee1ee69840.png" alt="$\bigoplus  \textstyle\bigoplus$"></td>
<td>\bigoplus</td>
<td><img src="https://latex.artofproblemsolving.com/2/2/0/220392b0536ae9431accdeec479897a2247f4a4d.png" alt="$\biguplus  \textstyle\biguplus$"></td>
<td>\biguplus</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="古希腊字母"><a href="#古希腊字母" class="headerlink" title="古希腊字母"></a>古希腊字母</h2><p>小写</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/1/0/f/10f32377ac67d94f764f12a15ea987e88c85d3e1.png" alt="$\alpha$"></td>
<td>\alpha</td>
<td><img src="https://latex.artofproblemsolving.com/f/d/b/fdb63b9e51abe6bbb16acfb5d7b773ddbb5bf4a8.png" alt="$\beta$"></td>
<td>\beta</td>
<td><img src="https://latex.artofproblemsolving.com/6/6/9/66981fa3920210c6ad8dbe5e968783d5dd7520c3.png" alt="$\gamma$"></td>
<td>\gamma</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/e/a/f/eaf4418fbe935c15a606516d8f55dc380cd8e822.png" alt="$\epsilon$"></td>
<td>\epsilon</td>
<td><img src="https://latex.artofproblemsolving.com/e/2/a/e2a63918a6fa75b62ad87ad17aaf65f782d71546.png" alt="$\varepsilon$"></td>
<td>\varepsilon</td>
<td><img src="https://latex.artofproblemsolving.com/f/d/a/fda38f45a64bbd4451aedeeb4584e01d91239172.png" alt="$\zeta$"></td>
<td>\zeta</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/5/2/e/52e8ed7a3ba22130ad3984eb2cd413406475a689.png" alt="$\theta$"></td>
<td>\theta</td>
<td><img src="https://latex.artofproblemsolving.com/9/a/3/9a32e414f13071a85f52c90ce88e25332fd2152c.png" alt="$\vartheta$"></td>
<td>\vartheta</td>
<td><img src="https://latex.artofproblemsolving.com/e/3/9/e394d1efd05a00d1e561e3dfa8deb80488d8a1a5.png" alt="$\iota$"></td>
<td>\iota</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/c/e/4/ce4588fd900d02afcbd260bc07f54cce49a7dc4a.png" alt="$\lambda$"></td>
<td>\lambda</td>
<td><img src="https://latex.artofproblemsolving.com/2/d/8/2d8c833ed800824727cd7bd2fb9de1a12ad7e674.png" alt="$\mu$"></td>
<td>\mu</td>
<td><img src="https://latex.artofproblemsolving.com/d/6/a/d6a7ccf879c4a4fe694033606332cb83806db296.png" alt="$\nu$"></td>
<td>\nu</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/f/2/c/f2ca003a7da0de4994b4733e203b74ff52d42553.png" alt="$\pi$"></td>
<td>\pi</td>
<td><img src="https://latex.artofproblemsolving.com/0/8/b/08b37549addb92da83c1b842518c22328f331746.png" alt="$\varpi$"></td>
<td>\varpi</td>
<td><img src="https://latex.artofproblemsolving.com/0/0/2/0027034d8a10372a06deaf4f4084c01956587479.png" alt="$\rho$"></td>
<td>\rho</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/f/a/3/fa35d9fc104207e09a712110ac81612c5b279a6c.png" alt="$\sigma$"></td>
<td>\sigma</td>
<td><img src="https://latex.artofproblemsolving.com/4/f/b/4fb382b5e56d61bc1669509bfc060c8deb1d71ef.png" alt="$\varsigma$"></td>
<td>\varsigma</td>
<td><img src="https://latex.artofproblemsolving.com/1/d/c/1dc1c0119a604b91be9142370dc3159b6a9bbcb9.png" alt="$\tau$"></td>
<td>\tau</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/2/c/1/2c175f60eecef1de7560c3bdea495d69f26f719d.png" alt="$\phi$"></td>
<td>\phi</td>
<td><img src="https://latex.artofproblemsolving.com/9/2/1/921aade3100afbc11d0d13f71cdd7e68d83ad52e.png" alt="$\varphi$"></td>
<td>\varphi</td>
<td><img src="https://latex.artofproblemsolving.com/6/d/c/6dcb9b88aaa5f14312835145edf06fb2d0823c29.png" alt="$\chi$"></td>
<td>\chi</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/5/4/d/54d7d48553f4d9e7ab418118607ea324cbfddfda.png" alt="$\omega$"></td>
<td>\omega</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>大写</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/9/1/3/913e49ea63c6c130bb8d9d1c3556b052ecc404f8.png" alt="$\Gamma$"></td>
<td>\Gamma</td>
<td><img src="https://latex.artofproblemsolving.com/0/a/7/0a737670d481129e2ead6d7223437f3cf70ea53f.png" alt="$\Delta$"></td>
<td>\Delta</td>
<td><img src="https://latex.artofproblemsolving.com/a/3/2/a321d1b883ba985b1f59ca076beaaf17aa8ab06c.png" alt="$\Theta$"></td>
<td>\Theta</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/0/9/d091cd93291a02d01c92bdc835e0b73f7faed864.png" alt="$\Xi$"></td>
<td>\Xi</td>
<td><img src="https://latex.artofproblemsolving.com/c/3/e/c3e77f8dac39bd44cff4ca15469c871bab27c02e.png" alt="$\Pi$"></td>
<td>\Pi</td>
<td><img src="https://latex.artofproblemsolving.com/c/8/f/c8f77e3035db5fe9a4975967750ac1a6454bda8c.png" alt="$\Sigma$"></td>
<td>\Sigma</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/b/8/5/b85bbfb165b853d6f5f9734be4cdabbb453f4e43.png" alt="$\Phi$"></td>
<td>\Phi</td>
<td><img src="https://latex.artofproblemsolving.com/8/6/6/866f0204648be9ca6b10e14dd72295295dd53a79.png" alt="$\Psi$"></td>
<td>\Psi</td>
<td><img src="https://latex.artofproblemsolving.com/9/e/2/9e2b196e9b7e57d1ec99f6534c581ea9759d2170.png" alt="$\Omega$"></td>
<td>\Omega</td>
</tr>
</tbody></table>
<h2 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/7/6/d/76d08618ef0d890aaf8294c65225e6314ef5be97.png" alt="$\gets$"></td>
<td>\gets</td>
<td><img src="https://latex.artofproblemsolving.com/b/8/e/b8ea4e52bb41fa9c0a1f8a387ea39b5b9c993b74.png" alt="$\to$"></td>
<td>\to</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/5/f/d5f9d8910bf9b877d37f48c842c045883c51300b.png" alt="$\leftarrow$"></td>
<td>\leftarrow</td>
<td><img src="https://latex.artofproblemsolving.com/d/7/7/d773375e7bd7f973b121cd9403ad90d3806d6996.png" alt="$\Leftarrow$"></td>
<td>\Leftarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/e/1/2/e12b6767375342ed57d27678e3ea1cdb97f47e15.png" alt="$\rightarrow$"></td>
<td>\rightarrow</td>
<td><img src="https://latex.artofproblemsolving.com/8/4/3/843622567e12d686e4e2f94ddfcb444e8ecde0d2.png" alt="$\Rightarrow$"></td>
<td>\Rightarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/4/5/d4563ad8c3bc2ead402d6ffc50768b0269bf073a.png" alt="$\leftrightarrow$"></td>
<td>\leftrightarrow</td>
<td><img src="https://latex.artofproblemsolving.com/a/6/e/a6ec0db174f3b705df19623976bf4b88ff502f3a.png" alt="$\Leftrightarrow$"></td>
<td>\Leftrightarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/2/3/5/2353b98d531c2da713a987ce5f2c39c566b621c8.png" alt="$\mapsto$"></td>
<td>\mapsto</td>
<td><img src="https://latex.artofproblemsolving.com/d/5/7/d57eef1a90f496dda224bb28c705b4cd6f75f38f.png" alt="$\hookleftarrow$"></td>
<td>\hookleftarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/b/3/9/b39c5d94ce0f366d4816ca9e22cdf213306167b4.png" alt="$\leftharpoonup$"></td>
<td>\leftharpoonup</td>
<td><img src="https://latex.artofproblemsolving.com/6/c/5/6c5a2cbfcd98ba58231d2cafa9ae6c4ef12fb125.png" alt="$\leftharpoondown$"></td>
<td>\leftharpoondown</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/f/9/5/f95723e1bf335f9d1cfc3aeba7f8c6dd45a8b6c4.png" alt="$\rightleftharpoons$"></td>
<td>\rightleftharpoons</td>
<td><img src="https://latex.artofproblemsolving.com/c/4/0/c405b7ae3c69d93bd1b753f1cd3b49251283bd0f.png" alt="$\longleftarrow$"></td>
<td>\longleftarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/f/0/f/f0faeb12503890b80128f8ea8e99eab1ebb0d0b4.png" alt="$\Longleftarrow$"></td>
<td>\Longleftarrow</td>
<td><img src="https://latex.artofproblemsolving.com/3/d/6/3d6e222dc751bc632a3e4a0c1a87e7691ec86bba.png" alt="$\longrightarrow$"></td>
<td>\longrightarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/9/8/1/981cc6a2adc50878a6da811d05c34e5cfaf6cef7.png" alt="$\Longrightarrow$"></td>
<td>\Longrightarrow</td>
<td><img src="https://latex.artofproblemsolving.com/5/b/9/5b925f6b5359af8f3536c2139177aaded2f93757.png" alt="$\longleftrightarrow$"></td>
<td>\longleftrightarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/0/3/1/031f544836c18f6f1b3ce1fcab250a2e7b372203.png" alt="$\Longleftrightarrow$"></td>
<td>\Longleftrightarrow</td>
<td><img src="https://latex.artofproblemsolving.com/e/4/8/e48117c9370176c975b0cc0f3781ac51fdb420ea.png" alt="$\longmapsto$"></td>
<td>\longmapsto</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/2/3/c/23c35a20a0d1a302656aaf89da7921f4f58df625.png" alt="$\hookrightarrow$"></td>
<td>\hookrightarrow</td>
<td><img src="https://latex.artofproblemsolving.com/b/6/0/b602fa4b55dcf9f3437a9e8fd72152ac371b5bba.png" alt="$\rightharpoonup$"></td>
<td>\rightharpoonup</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/3/7/0/370fb1af83e5d67016f89663081f0f09eb7d296f.png" alt="$\rightharpoondown$"></td>
<td>\rightharpoondown</td>
<td><img src="https://latex.artofproblemsolving.com/5/f/b/5fbd98454ee144f57ef122f596384eaa5bf81fad.png" alt="$\leadsto$"></td>
<td>\leadsto</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/3/9/d39cad522ccbe5a31209793365754665a4d65556.png" alt="$\uparrow$"></td>
<td>\uparrow</td>
<td><img src="https://latex.artofproblemsolving.com/1/c/b/1cbe1a0d9a674d0d0bbc0c5572b8e609f9e64437.png" alt="$\Uparrow$"></td>
<td>\Uparrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/9/5/d95bdb4067e8005d19d15bfbd4e83d8980336c65.png" alt="$\downarrow$"></td>
<td>\downarrow</td>
<td><img src="https://latex.artofproblemsolving.com/c/d/9/cd90d68c14531a18fb1309c26d5cb62e9216da54.png" alt="$\Downarrow$"></td>
<td>\Downarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/c/7/4/c749573a62fd745696f1159c7ba3a9c4ee2b9951.png" alt="$\updownarrow$"></td>
<td>\updownarrow</td>
<td><img src="https://latex.artofproblemsolving.com/3/e/d/3edded002dccdd7b08329a57491d4047c8306717.png" alt="$\Updownarrow$"></td>
<td>\Updownarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/9/a/c/9ac7c661ed7237c252514b09cd4640d998e37511.png" alt="$\nearrow$"></td>
<td>\nearrow</td>
<td><img src="https://latex.artofproblemsolving.com/9/6/1/9619c49478e6be29b664a3b3edb8cf9b6fb9ec70.png" alt="$\searrow$"></td>
<td>\searrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/a/d/4/ad4d3d05f5a30dc16128c8477a1dc2ff4b259320.png" alt="$\swarrow$"></td>
<td>\swarrow</td>
<td><img src="https://latex.artofproblemsolving.com/e/3/9/e399241c1cd2d58d0a397fd94728a5d6f60022d0.png" alt="$\nwarrow$"></td>
<td>\nwarrow</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/a/8/d/a8dfbb08d2b4dac0825dded0c20a373dd129bd35.png" alt="$\overrightarrow{AB}$"></td>
<td>\overrightarrow{AB}</td>
<td><img src="https://latex.artofproblemsolving.com/8/a/0/8a0abef9be73c81cc0d02d1f1a0d4d99dc684fc5.png" alt="$\overleftarrow{AB}$"></td>
<td>\overleftarrow{AB}</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/8/8/2/8820cdb9ddec09011a25ab50173aa7cd580c8240.png" alt="$\overleftrightarrow{AB}$"></td>
<td>\overleftrightarrow{AB}</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="点"><a href="#点" class="headerlink" title="点"></a>点</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/8/f/1/8f1fb66751f2ee2626c75303485dba473c39a2f2.png" alt="$\cdot$"></td>
<td>\cdot</td>
<td><img src="https://latex.artofproblemsolving.com/6/9/c/69cdf7ec84ff918cbe7f21acf7543bf1bd243080.png" alt="$\vdots$"></td>
<td>\vdots</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/6/4/6/64683f315744c851898c8d65dace1a8aa31b93ab.png" alt="$\dots$"></td>
<td>\dots</td>
<td><img src="https://latex.artofproblemsolving.com/9/1/b/91bc8b7d1415c5dbd9a3c232b323bde68dd8199c.png" alt="$\ddots$"></td>
<td>\ddots</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/0/8/7/087594ea26fa196b8e61bc20a36228270dc695f8.png" alt="$\cdots$"></td>
<td>\cdots</td>
<td><img src="https://latex.artofproblemsolving.com/e/b/0/eb041173faa89f826c1e6e4a81194e2901ea334e.png" alt="$\iddots$"></td>
<td>\iddots</td>
</tr>
</tbody></table>
<h2 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/4/7/6/4766b2cc3bd23afdfaa7ab46ebb5f2d0e0fd8b80.png" alt="$\hat{x}$"></td>
<td>\hat{x}</td>
<td><img src="https://latex.artofproblemsolving.com/1/9/a/19a5ff1cef4a98be4cbf3fadacd8e1784fa82ce0.png" alt="$\check{x}$"></td>
<td>\check{x}</td>
<td><img src="https://latex.artofproblemsolving.com/f/c/a/fcafbe903244d22c4dcd94f46f57e617baf47ad1.png" alt="$\dot{x}$"></td>
<td>\dot{x}</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/1/7/c/17c5e14151dfe2f18740a32ba63870c7db167368.png" alt="$\breve{x}$"></td>
<td>\breve{x}</td>
<td><img src="https://latex.artofproblemsolving.com/a/3/a/a3aa851fec30dc95fc20220ce6e45fc4327d3ab0.png" alt="$\acute{x}$"></td>
<td>\acute{x}</td>
<td><img src="https://latex.artofproblemsolving.com/1/4/6/146440b27437438126da946e8e88924762c49b10.png" alt="$\ddot{x}$"></td>
<td>\ddot{x}</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/0/d/f/0df1054a87870c7611e7a9224a310ab4524bfca6.png" alt="$\grave{x}$"></td>
<td>\grave{x}</td>
<td><img src="https://latex.artofproblemsolving.com/c/2/7/c27ef249f820f799c441683c186b5b97b7f93833.png" alt="$\tilde{x}$"></td>
<td>\tilde{x}</td>
<td><img src="https://latex.artofproblemsolving.com/c/1/6/c166329f174b82bee3440f1c1473a74f52938572.png" alt="$\mathring{x}$"></td>
<td>\mathring{x}</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/f/0/6/f06e84fe84a6c63a9c2c392af11652f6e0d72cf4.png" alt="$\bar{x}$"></td>
<td>\bar{x}</td>
<td><img src="https://latex.artofproblemsolving.com/f/5/e/f5ec636e755349d4409f910e27d381c6da764230.png" alt="$\vec{x}$"></td>
<td>\vec{x}</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="其他符号"><a href="#其他符号" class="headerlink" title="其他符号"></a>其他符号</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/b/6/7/b671f1bb7e4ee86584347d5d22f1dc8abdb5bef2.png" alt="$\infty$"></td>
<td>\infty</td>
<td><img src="https://latex.artofproblemsolving.com/0/0/9/009cf3eeb0ff3789cc057632947cadb200ab4663.png" alt="$\triangle$"></td>
<td>\triangle</td>
<td><img src="https://latex.artofproblemsolving.com/4/4/b/44b090a5a288a97413c95d2550887b0d15989112.png" alt="$\angle$"></td>
<td>\angle</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/6/7/c/67c1fbfe4cf9dc91e7ba469a235b0bad54d6a5ab.png" alt="$\aleph$"></td>
<td>\aleph</td>
<td><img src="https://latex.artofproblemsolving.com/0/6/7/0678e85c9374aaebeb3099f934cb8a7e452c75da.png" alt="$\hbar$"></td>
<td>\hbar</td>
<td><img src="https://latex.artofproblemsolving.com/5/e/9/5e991343f163f34bab751574a500ee9ff3e759e4.png" alt="$\imath$"></td>
<td>\imath</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/0/0/2/002ca021db0654c4009563a2ce9a16636cfdc1ac.png" alt="$\jmath$"></td>
<td>\jmath</td>
<td><img src="https://latex.artofproblemsolving.com/6/3/c/63c17c295325f731666c7d74952b563a01e00fcc.png" alt="$\ell$"></td>
<td>\ell</td>
<td><img src="https://latex.artofproblemsolving.com/b/c/f/bcf1dd80910fd624e03574ad36bd73d8f79f65ad.png" alt="$\wp$"></td>
<td>\wp</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/1/2/e/12e3412ce1c7f9e9be5b98ec0dc7a513787fbbac.png" alt="$\Re$"></td>
<td>\Re</td>
<td><img src="https://latex.artofproblemsolving.com/b/1/6/b16edda9eb3f50e6bfcf5dc5fe307789444f321c.png" alt="$\Im$"></td>
<td>\Im</td>
<td><img src="https://latex.artofproblemsolving.com/9/c/f/9cfb316b7b1f6a9cf1e42272cd90a4c28bafa543.png" alt="$\mho$"></td>
<td>\mho</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/c/6/8/c68e6a060376d1105a2fda31e4c447d4a5d7aa66.png" alt="$\prime$"></td>
<td>\prime</td>
<td><img src="https://latex.artofproblemsolving.com/8/4/2/84241c448cbf497968ba86136beecf766431a3ff.png" alt="$\emptyset$"></td>
<td>\emptyset</td>
<td><img src="https://latex.artofproblemsolving.com/5/3/1/53196dddfbaf8145fd14be11cf568c5154588ed5.png" alt="$\nabla$"></td>
<td>\nabla</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/b/1/0/b10061a42e5fbda320e5ccef97d80f42166b05dc.png" alt="$\surd$"></td>
<td>\surd</td>
<td><img src="https://latex.artofproblemsolving.com/3/4/1/341d567d759ce5d4b0005bca4ce4a0a22c5f0f86.png" alt="$\partial$"></td>
<td>\partial</td>
<td><img src="https://latex.artofproblemsolving.com/9/8/9/98908d2f5a52e4be6e2e88e80b92993f42b36973.png" alt="$\top$"></td>
<td>\top</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/b/f/0/bf09b3494b43408e17d842ee8dcda1edc17cc649.png" alt="$\bot$"></td>
<td>\bot</td>
<td><img src="https://latex.artofproblemsolving.com/8/1/2/81226dce386555032afda7e4739639feabbc801a.png" alt="$\vdash$"></td>
<td>\vdash</td>
<td><img src="https://latex.artofproblemsolving.com/f/f/d/ffdb8a7364423bb7904d60840d7b7f9047dee450.png" alt="$\dashv$"></td>
<td>\dashv</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/5/3/6/536ba5a392431e74fec5a8db2257504c85fcc206.png" alt="$\forall$"></td>
<td>\forall</td>
<td><img src="https://latex.artofproblemsolving.com/4/e/c/4ecf8666cca5f1d089b9c656be83f9e09d0abd5c.png" alt="$\exists$"></td>
<td>\exists</td>
<td><img src="https://latex.artofproblemsolving.com/a/3/a/a3a70722f337e1529068359b303e4f0776ff68de.png" alt="$\neg$"></td>
<td>\neg</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/d/8/d/d8db7bfbb234b4f05ddfd93d031375cb02a799b4.png" alt="$\flat$"></td>
<td>\flat</td>
<td><img src="https://latex.artofproblemsolving.com/3/b/d/3bdea32d3d98eca872e1c4562eac7553ee6a4d34.png" alt="$\natural$"></td>
<td>\natural</td>
<td><img src="https://latex.artofproblemsolving.com/9/f/0/9f0f728ec995ff8379cf1a72c0ff1416a2c60177.png" alt="$\sharp$"></td>
<td>\sharp</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/3/8/5/385adced1eac31db28232371c6e5afb832d82bf7.png" alt="$\backslash$"></td>
<td>\backslash</td>
<td><img src="https://latex.artofproblemsolving.com/c/1/2/c12dda010ebddef028cda1ec9d14986f4a26d07e.png" alt="$\Box$"></td>
<td>\Box</td>
<td><img src="https://latex.artofproblemsolving.com/7/6/e/76edde10cd8ffa25ad5bf5689c032fdf78aeef28.png" alt="$\Diamond$"></td>
<td>\Diamond</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/3/9/7/397606372567ab31725033a4d12d00c0276ba086.png" alt="$\clubsuit$"></td>
<td>\clubsuit</td>
<td><img src="https://latex.artofproblemsolving.com/c/6/d/c6dda9b4c504bad80fd4308d62fb52fb41f3aefc.png" alt="$\diamondsuit$"></td>
<td>\diamondsuit</td>
<td><img src="https://latex.artofproblemsolving.com/3/8/c/38c6b4ac9e30aa1bbcdf4529130bc58e4b392e83.png" alt="$\heartsuit$"></td>
<td>\heartsuit</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/f/1/0/f10b174b6672f53772ffe28260f4390a3cd405fa.png" alt="$\spadesuit$"></td>
<td>\spadesuit</td>
<td><img src="https://latex.artofproblemsolving.com/4/0/2/40268aa589c2ba619a6d521d716bf781a15e4ba8.png" alt="$\Join$"></td>
<td>\Join</td>
<td><img src="https://latex.artofproblemsolving.com/3/b/b/3bbb9e25e5be095e317771a9c5d00877ee9c8012.png" alt="$\blacksquare$"></td>
<td>\blacksquare</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/c/6/d/c6dda9b4c504bad80fd4308d62fb52fb41f3aefc.png" alt="$\diamondsuit$"></td>
<td>\diamondsuit</td>
<td><img src="https://latex.artofproblemsolving.com/d/b/d/dbde8771334ba4faa03348ac847c8a22c6a54667.png" alt="$\copyright$"></td>
<td>\copyright</td>
<td><img src="https://latex.artofproblemsolving.com/8/3/2/83259bd181bf4d79689381cabcdc71eafbf9baff.png" alt="$\underarc{XYZ}$"></td>
<td>\underarc{XYZ}</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/3/8/c/38c6b4ac9e30aa1bbcdf4529130bc58e4b392e83.png" alt="$\heartsuit$"></td>
<td>\heartsuit</td>
<td><img src="https://latex.artofproblemsolving.com/f/4/8/f482b34d198de478979b7c60c9bf1c8668dd5aa8.png" alt="$\overarc{ABC}$"></td>
<td>\overarc{ABC}</td>
<td><img src="https://latex.artofproblemsolving.com/a/6/c/a6cef8fd2bc2c7f9f1e27327b739f2cd7baa31ac.png" alt="$\cup$"></td>
<td>\cup</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/4/e/0/4e0058658154f5e64eebcb3d40abab723ee34e30.png" alt="$\S$"></td>
<td>\S</td>
<td><img src="https://latex.artofproblemsolving.com/a/4/0/a4029f0a93f99c97102b9f06ee47f4a56847bfbf.png" alt="$\P$"></td>
<td>\P</td>
<td><img src="https://latex.artofproblemsolving.com/3/2/f/32fc4e30bd315982f54d13b5950a592032632df4.png" alt="$\Vdash$"></td>
<td>\Vdash</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/7/2/f/72f6e08a2df0af40956a32686a1340a14d9fb98e.png" alt="$\pounds$"></td>
<td>\pounds</td>
<td><img src="https://latex.artofproblemsolving.com/1/3/4/134004c561e4c0cca193dbf5122e5ca963dd5b7f.png" alt="$\in$"></td>
<td>\in</td>
<td><img src="https://latex.artofproblemsolving.com/7/3/8/7387d7454e276c5802d261da5fc7bb08debcd544.png" alt="$\vDash$"></td>
<td>\vDash</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/4/3/0/4302e3b4e7057984ac3eb2e9018a9b64002550b8.png" alt="$\bigstar$"></td>
<td>\bigstar</td>
<td><img src="https://latex.artofproblemsolving.com/e/f/4/ef48ac956824fcaea163a530a717e6df694aa006.png" alt="$\implies$"></td>
<td>\implies</td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/b/6/c/b6cf65b1f2fbdf388e3daeff9b96b34d3399d777.png" alt="$\square$"></td>
<td>\square</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/5/4/1/541e9aef85db57b7dbef677e59a04d09b2e8b58a.png" alt="$\smiley$"></td>
<td>\smiley</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/9/0/6/906fddead65545297c74bbc2ca83cd01f3f9ecc9.png" alt="$\mathbb{R}$"></td>
<td>\mathbb{R} (represents all real numbers)</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/6/0/e/60ed020e037834e10ccbcc412e3386653ec9e847.png" alt="$\checkmark$"></td>
<td>\checkmark</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/9/8/9/98943cb2d464a45e72c3a3376e74814399699cb3.png" alt="$\cancer$"></td>
<td>\cancer</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="命令符"><a href="#命令符" class="headerlink" title="命令符"></a>命令符</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/3/4/7/347d5d8ccef965291225560dfe843b447c59955e.png" alt="$\textdollar$"></td>
<td>\textdollar or $</td>
<td><img src="https://latex.artofproblemsolving.com/e/9/d/e9d9da5bde70fea3385da94b7d04efa5b3f963ca.png" alt="$\&amp;$"></td>
<td>&amp;</td>
<td><img src="https://latex.artofproblemsolving.com/c/4/3/c4393de50075e05c3363369d39412b341e39cc7d.png" alt="$\%$"></td>
<td>%</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/0/c/c/0ccb3853aade8501b9dcca60bfbdbb8d9a598aa8.png" alt="$\_$"></td>
<td>_</td>
<td><img src="https://latex.artofproblemsolving.com/4/a/1/4a1a0fbdb39b7129d2fc98698c68ff5533405755.png" alt="$\{$"></td>
<td>{</td>
<td><img src="https://latex.artofproblemsolving.com/6/5/e/65e2585c1b1cd632b41a41481fd2ad44456aeec4.png" alt="$\}$"></td>
<td>}</td>
</tr>
</tbody></table>
<h2 id="欧洲符号"><a href="#欧洲符号" class="headerlink" title="欧洲符号"></a>欧洲符号</h2><table>
<thead>
<tr>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
<th>Symbol</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://latex.artofproblemsolving.com/3/8/e/38e06a1df4e81b48091aa311d9c0f5cba9432256.png" alt="${\oe}$"></td>
<td>{\oe}</td>
<td><img src="https://latex.artofproblemsolving.com/4/5/0/4509653d8d7b806fe06a94dbde93e872f40892ba.png" alt="${\ae}$"></td>
<td>{\ae}</td>
<td><img src="https://latex.artofproblemsolving.com/0/6/9/0693f302e79847db7dc8cbe2baf0ab2c7dea2ee3.png" alt="${\o}$"></td>
<td>{\o}</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/2/d/9/2d90a26f53f0bffc49df20cca0623b183c9b013f.png" alt="${\OE}$"></td>
<td>{\OE}</td>
<td><img src="https://latex.artofproblemsolving.com/a/8/4/a84a715a1e45bd844d83b49e076ee5e306a7413a.png" alt="${\AE}$"></td>
<td>{\AE}</td>
<td><img src="https://latex.artofproblemsolving.com/d/8/8/d8804db9d6d9d9c54c9dcbbee11d300073f7e471.png" alt="${\AA}$"></td>
<td>{\AA}</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/8/e/a/8ea86382077c0260f1743eb0b3555370aaa89be0.png" alt="${\l}$"></td>
<td>{\l}</td>
<td><img src="https://latex.artofproblemsolving.com/b/a/4/ba40dd86e8e6766c5417744046f0aed2feeb4c6b.png" alt="${\ss}$"></td>
<td>{\ss}</td>
<td>![$\text{!&#96;}$](<a href="https://latex.artofproblemsolving.com/0/b/3/0b3e889945a6c124ae6b86f0e764a6741643cec2.png">https://latex.artofproblemsolving.com/0/b/3/0b3e889945a6c124ae6b86f0e764a6741643cec2.png</a>)</td>
<td>!&#96;</td>
</tr>
<tr>
<td><img src="https://latex.artofproblemsolving.com/3/d/9/3d929efdcf5e4cc9ed64c2e7980dccf4d50d5c24.png" alt="${\L}$"></td>
<td>{\L}</td>
<td><img src="https://latex.artofproblemsolving.com/3/3/3/3337194236d3707955d2524f98d806a931b881e9.png" alt="${\SS}$"></td>
<td>{\SS}</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件学习</category>
      </categories>
      <tags>
        <tag>软件学习</tag>
        <tag>程序安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下安装Docker</title>
    <url>/2023/09/14/Software%20and%20App/Windows_docker/</url>
    <content><![CDATA[<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><h2 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2</h2><blockquote>
<p>WSL，即Windows Subsystem on Linux，中文叫“适用于 Linux 的 Windows 子系统”。可以在windows里，直接启动一个linux系统。因为docker依赖linux内核，只能在linux下使用，windows就需要安装linux虚拟机来运行，而微软已经在win10内置了一个轻量级虚拟机，WSL2 便是运行在虚拟机上的一个完整的 linux 内核，所以需要利用WSL2安装docker。</p>
</blockquote>
<p>微软要求 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 </p>
<p>设置-&gt;更新和安全-&gt;操作系统内部版本信息</p>
<p>下载wsl2需要的linux内核：</p>
<blockquote>
<p>网址： [<a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel]">https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel]</a>(<a href="https://blog.csdn.net/m0_68988603/article/details/123884239?ops_request_misc=%7B%22request_id%22:%22169422368816800226549539%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169422368816800226549539&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123884239-null-null.142%5Ev93%5EchatsearchT3_2&utm_term=docker">https://blog.csdn.net/m0_68988603/article/details/123884239?ops_request_misc={&quot;request_id&quot;%3A&quot;169422368816800226549539&quot;%2C&quot;scm&quot;%3A&quot;20140713.130102334..&quot;}&amp;request_id=169422368816800226549539&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123884239-null-null.142^v93^chatsearchT3_2&amp;utm_term=docker</a> Windows&amp;spm&#x3D;1018.2226.3001.4187)</p>
<p>点击下载最新的更新包，下好后双击运行安装即可。</p>
</blockquote>
<p>打开系统虚拟机平台和WSL</p>
<p>控制面板-&gt;程序-&gt;启用或关闭Windows功能-&gt;</p>
<p>勾选 适用于Linux的Windows子系统</p>
<p>勾选 虚拟机平台</p>
<p>将WSL2设置为默认版本：管理员身份运行Windows PowerShell，运行下面的命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>

<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230914170116226.png" alt="image-20230914170116226"></p>
<h2 id="安装Docker-Desktop-for-Windows"><a href="#安装Docker-Desktop-for-Windows" class="headerlink" title="安装Docker Desktop for Windows"></a>安装Docker Desktop for Windows</h2><p>网上有的教程是先在WSL2里面安装了linux，然后再装docker。我暂时还没有很多实际使用需求，所以我认为应该直接安装windows版就可以了。</p>
<p>官网下载安装程序：<a href="https://www.docker.com/get-started/">https://www.docker.com/get-started/</a></p>
<p> 下好后直接双击运行安装即可（建议安装时不要使用校园网，不然有可能会出现一些问题，我放在后面解释）。</p>
<p>设置里勾选基于wsl2的引擎（我的默认勾选了）</p>
<p>用PowerShell运行 <code>wsl -l -v</code>会发现已经创建了两个发行版了</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230914171039958.png" alt="image-20230914171039958"></p>
<h2 id="更改数据存储位置"><a href="#更改数据存储位置" class="headerlink" title="更改数据存储位置"></a>更改数据存储位置</h2><blockquote>
<p>Windows下的docker默认安装在C盘，所以为了拯救我们可怜的C盘，就需要把数据存储到其他盘。</p>
</blockquote>
<h3 id="1-停止docker服务"><a href="#1-停止docker服务" class="headerlink" title="1.停止docker服务"></a>1.停止docker服务</h3><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230914171749005.png" alt="image-20230914171749005"></p>
<h3 id="2-备份数据到另一个文件夹"><a href="#2-备份数据到另一个文件夹" class="headerlink" title="2.备份数据到另一个文件夹"></a>2.备份数据到另一个文件夹</h3><p>PowerShell运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --export docker-desktop-data &quot;D:\work\study\BUPT\computer\DockerData\docker-desktop-data.tar&quot;</span><br></pre></td></tr></table></figure>

<h3 id="3-删除原有数据"><a href="#3-删除原有数据" class="headerlink" title="3.删除原有数据"></a>3.删除原有数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --unregister docker-desktop-data</span><br></pre></td></tr></table></figure>

<h3 id="4-更改数据存储盘并恢复数据"><a href="#4-更改数据存储盘并恢复数据" class="headerlink" title="4.更改数据存储盘并恢复数据"></a>4.更改数据存储盘并恢复数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --import docker-desktop-data &quot;D:\work\study\BUPT\computer\DockerData&quot; &quot;D:\work\study\BUPT\computer\DockerData\docker-desktop-data.tar&quot; --version 2</span><br></pre></td></tr></table></figure>

<p>即将备份数据导入到新的虚拟盘，且指定虚拟盘的存放路径为E:\DockerData，导入完成后在该目录下会存在一个ext4.vhdx的虚拟磁盘路径</p>
<p>然后启动docker就可以啦</p>
<h1 id="实验环境配置"><a href="#实验环境配置" class="headerlink" title="实验环境配置"></a><strong>实验环境配置</strong></h1><p>安装docker后，由于国内从官方的dockerHub拉取镜像速度较慢，可以利用国内的镜像源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://1nj0zren.mirror.aliyuncs.com&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;http://f1361db2.m.daocloud.io&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;insecure-registries&quot;: [],</span><br><span class="line">  &quot;debug&quot;: true,</span><br><span class="line">  &quot;experimental&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>在本机创建一个文件夹专门存放<code>lab</code>及<code>project</code>，路径中不要包含中文</li>
<li>编辑<code>./docker_script/docker-compose.yml</code>，将替换为第一步中的路径 注意：如假设路径为</li>
</ol>
<p><code>E:\buptcompiler</code>，替换的路径应为 <code>/e/buptcompiler</code></p>
<ol start="3">
<li><p>创建<code>image</code>并部署<code>container：</code>进入<code>docker_script</code>目录下，CMD运行 <code>docker-compose up -d</code></p>
</li>
<li><p><code>docker desktop</code>中启动部署好的<code>container</code>，该<code>container</code>应该是<code>docker_script</code>下的<code>compiler</code></p>
</li>
<li><p>执行<code>container：</code>在CMD运行 <code>docker exec -it compiler /bin/sh</code></p>
</li>
<li><p><code>compiler</code>中的<code>/mnt/Workspace</code>即为挂载的共享目录（主机上为<code>E:\buptcompiler</code>）</p>
</li>
<li><p><code>lab</code>和<code>project</code>作业下载后放到主机的共享目录中，推荐使用<code>VSCode</code>编写，然后在<code>compiler</code>中编译、运行测试</p>
</li>
<li><p>部署好实验环境后，再次进行实验时执行第4、5步即可运行容器，进入实验环境，第5步中不一定在CMD运行命令，可以利用VSCode的终端运行命令。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>网络安全实验</category>
      </categories>
      <tags>
        <tag>软件学习</tag>
        <tag>程序安装</tag>
        <tag>北邮信安</tag>
      </tags>
  </entry>
  <entry>
    <title>北邮网安大类课程介绍（21级）</title>
    <url>/2023/07/31/BUPT_note/BUPT_SCSS_introduce/</url>
    <content><![CDATA[<blockquote>
<p>如有补充或想说的，欢迎在评论区评论。我会及时填补各课程信息~</p>
</blockquote>
<p>由于网安院建院时间较短，培养方案还在不断更改，每一届的同学所学课程的顺序都有可能发生变化，以下内容仅供参考。本人平时成绩一般，主要靠考前突击，奉劝大家平时还是要好好学习，期末突击不可靠。</p>
<p>部分文件资料放在百度网盘，往年试卷可能比较旧（小卖部卖的现在也很旧），不过还有一定参考性。</p>
<blockquote>
<p>Tip 如果链接过期请使用各种方式联系，我会在收到邮件的第一时间更新!</p>
</blockquote>
<p>百度网盘链接已更新至每个科目后</p>
<p><a href="https://pan.baidu.com/s/1L04eEFHov47_75qQhFyDIw?pwd=BUPT">学长流传资料汇总</a></p>
<h1 id="大一上"><a href="#大一上" class="headerlink" title="大一上"></a>大一上</h1><p>大一上的课可以说的相当的少，好好感受下快乐的大学生活吧。</p>
<h1 id="大学生心理健康"><a href="#大学生心理健康" class="headerlink" title="大学生心理健康"></a>大学生心理健康</h1><p>这门课比较水，没留下什么文件，最后应该是考察不是考试。可以轻松通过，绩点占比也不多。</p>
<h1 id="计算导论与程序设计"><a href="#计算导论与程序设计" class="headerlink" title="计算导论与程序设计"></a>计算导论与程序设计</h1><p>快乐寄导，主要学习的是c语言，难度不大非常基础，好像讲到了链表和文件处理，后面就没再讲。建议好好学习，可以为以后的其他语言学习打下很好的基础。课上留的都是oj的题好像，多做几遍就明白了，不要不做作业。我的oj题放在CSDN里面了，有需要可以查阅。此外还可以做一些简单的洛谷题。期末考试是机考和笔试，机考考到指针，笔试范围稍微大点，其中笔试分值较高，主要是方便老师捞人。</p>
<p><a href="https://pan.baidu.com/s/1wr2hZo7T6Slate0k80AUXw?pwd=BUPT">https://pan.baidu.com/s/1wr2hZo7T6Slate0k80AUXw?pwd=BUPT</a></p>
<ol>
<li>CSDN可以自行搜索习题答案，我的答案应该在这里（不太记得了）<a href="https://blog.csdn.net/weixin_62495164/category_11517327.html"> 简单的c语言基础 <em>呆呆水獭</em>-CSDN博客</a></li>
<li>百度网盘有部分oj例题</li>
<li>百度网盘有21级ppt</li>
</ol>
<h1 id="网络空间安全导论"><a href="#网络空间安全导论" class="headerlink" title="网络空间安全导论"></a>网络空间安全导论</h1><p>印象不是很深了，主要将网安的基础知识，像科普一样也没有作业。最后会有考试，但是很容易通过。<br><a href="https://pan.baidu.com/s/1BVg9GqBK_lv70XH2d3_ZFQ?pwd=BUPT">https://pan.baidu.com/s/1BVg9GqBK_lv70XH2d3_ZFQ?pwd=BUPT</a></p>
<h1 id="思想道德修养与法律基础"><a href="#思想道德修养与法律基础" class="headerlink" title="思想道德修养与法律基础"></a>思想道德修养与法律基础</h1><p>每学期都会有一门政治类课程，一共四学期。但是思修是不会闭卷考试的，最后应该是写论文结课。课程中间会有一些调研类的作业，找好组员一起去完成叭（如果合得来的话，这个整治小组可能会一直贯穿四门政治课，主要还是看组员的个人意愿）。</p>
<p><a href="https://pan.baidu.com/s/1t9QWChuvaWua0jmxGDvF6Q?pwd=BUPT">https://pan.baidu.com/s/1t9QWChuvaWua0jmxGDvF6Q?pwd=BUPT</a></p>
<ol>
<li>百度网盘：21级期末考试要求、课程期间本组实践作业</li>
</ol>
<h1 id="高等数学A-上"><a href="#高等数学A-上" class="headerlink" title="高等数学A(上)"></a>高等数学A(上)</h1><p>大一魔鬼课！难度指数级增长，前面学的很容易，但一定要把基础打好，不然越学越不会。高数上的期中考试有时候会出的很难，让大家都不及格，主要是为了让刚入学的同学加强重视好好学习。期中考试占比低无伤大雅，期末好好考试就可以了。作业一定要认真做，把题型摸透，不要到了考试的时候还有没见过的题型。</p>
<p><a href="https://pan.baidu.com/s/1tzebUOlGVi6rZRgTMVn-_w?pwd=BUPT">https://pan.baidu.com/s/1tzebUOlGVi6rZRgTMVn-_w?pwd=BUPT</a> </p>
<ol>
<li>百度网盘：一些数学公式</li>
<li>百度网盘-学长流传：高等数学试题集_14103538：北邮出品，历年真题。</li>
<li>百度网盘-学长流传：其他pdf版的早年间考题，都是老师发的。</li>
<li>百度网盘-学长流传：高数（上）老师手写笔记。</li>
<li>百度网盘-学长流传：重积分和曲线曲面积分.jpg 线性代数</li>
</ol>
<h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><p>又一大难点，也是要平时好好做作业、多做题。考前看一看往年例题。</p>
<p><a href="https://pan.baidu.com/s/1qg74AIQN1V8DmJg89JH2ow?pwd=BUPT">https://pan.baidu.com/s/1qg74AIQN1V8DmJg89JH2ow?pwd=BUPT</a></p>
<ol>
<li>百度网盘：课件ppt、复习课（讨论课）讲案</li>
<li>百度网盘-学长流传：线代绿皮书，北邮出品，历年真题。题型和位置都是一样的！</li>
<li>百度网盘-学长流传：2018-2019线性代数期末考试A卷。</li>
</ol>
<h1 id="大一下"><a href="#大一下" class="headerlink" title="大一下"></a>大一下</h1><p>课程开始多起来了，但是我们赶上了疫情，由于线上教学，好多课程的考核都降低了难度。</p>
<h1 id="数字逻辑与数字系统"><a href="#数字逻辑与数字系统" class="headerlink" title="数字逻辑与数字系统"></a>数字逻辑与数字系统</h1><p>这门课东西还是比较多的，但是考试题型比较固定，就考那些东西。平时把作业看懂就行了，有时候会感觉作业看上去和上课将的不太一样，这是正常现象。</p>
<p>实验和考试无关，能做出来就行。唯一不好就是实验赶上了期末周，要合理分配时间。</p>
<p><a href="https://pan.baidu.com/s/1QQ67U2aLYeVwvG-JWAhjFQ?pwd=BUPT">https://pan.baidu.com/s/1QQ67U2aLYeVwvG-JWAhjFQ?pwd=BUPT</a></p>
<ol>
<li>百度网盘：课件ppt</li>
<li>百度网盘：21级期中考试卷子</li>
<li>百度网盘：我的复习笔记</li>
<li>百度网盘：实验报告书</li>
<li>百度网盘-学长流传：期中-2020.pptx，期中原题，按照去年前年的题来看，会有祖传题。</li>
<li>百度网盘-学长流传：带书签-数字逻辑学习辅导11529796，很好的刷题练习册，从中找做错的题型多练几道。</li>
<li>百度网盘-学长流传：课件，非常好的ppt。</li>
<li>百度网盘-学长流传：实验，很完整的整理出来了。</li>
<li>懒得去百度网盘找实验可以直接看我发在博客里的<a href="https://zhangyuanhe.top/categories/%E4%BF%A1%E5%AE%89%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/">数字逻辑实验报告</a></li>
</ol>
<h1 id="C-高级语言程序设计"><a href="#C-高级语言程序设计" class="headerlink" title="C++高级语言程序设计"></a>C++高级语言程序设计</h1><p>选修课，可以在c++，Java，python中三选一。课程太难，和c的重合度比较高，多讲到了链表部分。给分也还可以，学期中有小组作业，期末好像是手写代码。强度不是很高，推荐选。<br><a href="https://pan.baidu.com/s/1gjLq6bRe7x--1dGjmSEO0A?pwd=BUPT">https://pan.baidu.com/s/1gjLq6bRe7x--1dGjmSEO0A?pwd=BUPT</a></p>
<ol>
<li>百度网盘：作业代码、课件ppt、小组作业代码</li>
<li>CSDN：部分作业代码已上传，可直接查看<a href="https://blog.csdn.net/weixin_62495164/category_11755373.html">c++从入门到入坟</a></li>
</ol>
<h1 id="JAVA高级语言程序设计"><a href="#JAVA高级语言程序设计" class="headerlink" title="JAVA高级语言程序设计"></a>JAVA高级语言程序设计</h1><p>这三门课开始放在一起说吧，java应该是大二上学习，整体思路上可以用c的学习思路进行学习，难度适中。据说给分比较高，但是我的不是很高，所以请大家自行考量。22年改为闭卷考试了。</p>
<p><a href="https://pan.baidu.com/s/128b7QomTt2mjeglbyzC57Q?pwd=BUPT">https://pan.baidu.com/s/128b7QomTt2mjeglbyzC57Q?pwd=BUPT</a></p>
<ol>
<li>百度网盘：作业代码、实验代码、课件ppt</li>
<li>CSDN：部分作业代码已上传，可直接查看<a href="https://blog.csdn.net/weixin_62495164/category_12033379.html">Java从入门到入土</a></li>
<li>22年期末：代码段分析题考设计面板中间有圆，可以改变圆的颜色，同时鼠标进入圆后改变颜色的代码实现；repaint（）引用的什么方法</li>
</ol>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>这门课我没选，是大二下学习。以上三门课是至少选一门学习（培养方案可能会改）。</p>
<p>python听室友说是有实验写爬虫脚本，期末卷子考试。要是有基础学起来应该不难。在后续的各种代码应用中python确实是用到最多的。我现在（到大二结束）偶尔还会见到c++，Java是学完没再见过。脚本基本都是python的，不过也不需要看懂，能配环境用就行。所以有兴趣的同学建议可以直接学python。</p>
<h1 id="网络空间安全导论实践"><a href="#网络空间安全导论实践" class="headerlink" title="网络空间安全导论实践"></a>网络空间安全导论实践</h1><p>印象不深了，好像是做了一堆虚拟平台上的实验。期末也没考试，略过略过~</p>
<p><a href="https://pan.baidu.com/s/1JrBW6vd26lrd0OAlKzlXHw?pwd=BUPT">https://pan.baidu.com/s/1JrBW6vd26lrd0OAlKzlXHw?pwd=BUPT</a></p>
<ol>
<li>百度网盘：实验报告</li>
<li>可以直接查看实验报告：<a href="https://zhangyuanhe.top/categories/%E4%BF%A1%E5%AE%89%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C/">分类：网络安全实验 | ZYH’s blog (zhangyuanhe.top)</a></li>
</ol>
<h1 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h1><p>纯英语授课，有一点痛苦。知识点涵盖范围相当大，杂而不难，把几个关键的算法和理论记住就可以了，经常会考，期中考完了期末可能会再考一遍。前半学期相对轻松，难度小同时和数字逻辑有重复部分，会给人感觉好几门课在讲一毛一样的东西。考前复习一下就可以。</p>
<p><a href="https://pan.baidu.com/s/1Ga-viE4iqRUGV_VHPapiTg?pwd=BUPT">https://pan.baidu.com/s/1Ga-viE4iqRUGV_VHPapiTg?pwd=BUPT</a></p>
<ol>
<li>百度网盘：教材电子版</li>
<li>百度网盘：课件ppt，期中考试卷，作业</li>
<li>百度网盘-学长流传：早年间的卷子</li>
</ol>
<h1 id="中国近现代史纲要"><a href="#中国近现代史纲要" class="headerlink" title="中国近现代史纲要"></a>中国近现代史纲要</h1><p>历史内容比较多，比四门政治课好理解的。期末考试写一个读书报告+论文（疫情原因）就完事了。学期里会有小组作业和近代史实践课的实践作业。</p>
<p><a href="https://pan.baidu.com/s/1TNqPPsxfKeA8_HuWWaX8Yg?pwd=BUPT">https://pan.baidu.com/s/1TNqPPsxfKeA8_HuWWaX8Yg?pwd=BUPT</a></p>
<ol>
<li>百度网盘：小组作业、期末论文题目</li>
<li>百度网盘-学长流传：复习资料（注意可能会有改版）</li>
</ol>
<h1 id="习近平新时代中国特色社会主义思想概论"><a href="#习近平新时代中国特色社会主义思想概论" class="headerlink" title="习近平新时代中国特色社会主义思想概论"></a>习近平新时代中国特色社会主义思想概论</h1><p>以前是开卷考试，我们因为疫情改成了论文，但以后也可能改成闭卷考试。虽然可能没有闭卷考，但还是最好多少听一些，因为大二下的毛中特里面还会有习思想的内容，上课会略过不讲，但是期末可能会考一两道题。</p>
<p><a href="https://pan.baidu.com/s/1ZdFs9_aPMrXuSBpUMsFqlQ?pwd=BUPT">https://pan.baidu.com/s/1ZdFs9_aPMrXuSBpUMsFqlQ?pwd=BUPT</a></p>
<ol>
<li>百度网盘：课件ppt、期中期末题目</li>
</ol>
<h1 id="高等数学A-下"><a href="#高等数学A-下" class="headerlink" title="高等数学A(下)"></a>高等数学A(下)</h1><p>高数的延续，好好学吧。（高数老师好像收手写作业，不交电子版）</p>
<p><a href="https://pan.baidu.com/s/1I_ffxz-klg-QnvO5JGIn4g?pwd=BUPT">https://pan.baidu.com/s/1I_ffxz-klg-QnvO5JGIn4g?pwd=BUPT</a></p>
<ol>
<li>百度网盘：笔记、一些习题</li>
</ol>
<h1 id="大学物理C"><a href="#大学物理C" class="headerlink" title="大学物理C"></a>大学物理C</h1><p>大物。。。   名字摆在这了</p>
<p> 考试中大部分以电磁学为主，更像是微积分应用的感觉，考前应试那就多背二级结论和电磁的模型，写在张纸上背下来很管用。期末考试受疫情影响我们是闭卷全选择，但是大物会出原题，多看作业和往年题。大物语速超级快，讲的内容也快，最好上完课在过一遍</p>
<p><a href="https://pan.baidu.com/s/1O-Fpz7tWwsgmjVI0j9YfhA?pwd=BUPT">https://pan.baidu.com/s/1O-Fpz7tWwsgmjVI0j9YfhA?pwd=BUPT</a></p>
<ol>
<li>百度网盘：笔记、课件ppt</li>
<li>百度网盘-学长流传：早年间大物期末试题</li>
</ol>
<h1 id="物理实验A"><a href="#物理实验A" class="headerlink" title="物理实验A"></a>物理实验A</h1><p>挺复杂的，老容易出问题。受设备型号不同影响大有时候不知道该干什么。看着视频照着做吧</p>
<p><a href="https://pan.baidu.com/s/1gWHRo8KizJHC6tRrvpd-0A?pwd=BUPT">https://pan.baidu.com/s/1gWHRo8KizJHC6tRrvpd-0A?pwd=BUPT</a></p>
<ol>
<li>b站：李传国老师，有很多视频实验一模一样，照做就可以<a href="https://space.bilibili.com/477710704">物理老师李传国的个人空间_哔哩哔哩_bilibili</a></li>
<li>百度网盘：一些实验报告</li>
</ol>
<h1 id="大二上"><a href="#大二上" class="headerlink" title="大二上"></a>大二上</h1><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>比较重要的一门专业课，学的内容不会有教材里的那么多，主要是前面的内容，后面大概率略讲也不会考。学的时候以概念方法为主，不是很注重代码实现，期末考试也是闭卷，有个别代码要手写。</p>
<p><a href="https://pan.baidu.com/s/1rGv_I_3uyQljZAM2CCSQtw?pwd=BUPT">https://pan.baidu.com/s/1rGv_I_3uyQljZAM2CCSQtw?pwd=BUPT</a></p>
<ol>
<li>百度网盘：课件ppt、作业和答案</li>
<li>百度网盘-学长流传：一些复习资料</li>
</ol>
<h1 id="计算机组成与系统结构"><a href="#计算机组成与系统结构" class="headerlink" title="计算机组成与系统结构"></a>计算机组成与系统结构</h1><p>作为专业课也很重要，但是不会很难，属于比较好过的，作业也不多。就是会有实验，仪器操作复杂，要跟着说明来做。</p>
<p><a href="https://pan.baidu.com/s/1hlB0QcL4jDQ2S0cbUxYP1Q?pwd=BUPT">https://pan.baidu.com/s/1hlB0QcL4jDQ2S0cbUxYP1Q?pwd=BUPT</a></p>
<ol>
<li>百度网盘：课件ppt、作业和答案、实验报告</li>
</ol>
<h1 id="信息安全数学基础"><a href="#信息安全数学基础" class="headerlink" title="信息安全数学基础"></a>信息安全数学基础</h1><p>非常头大的一门课，讲的非常数学，上课听的人也不多。想听要坐前排认真听，很容易走神听不进去。上课疯狂灌概念知识点。不过考试还算友善，历年应该是闭卷的。归纳题型总结，学得多考的少。</p>
<p><a href="https://pan.baidu.com/s/1sKEqtEzqUdScUuNCFdpR9Q?pwd=BUPT">https://pan.baidu.com/s/1sKEqtEzqUdScUuNCFdpR9Q?pwd=BUPT</a></p>
<ol>
<li>百度网盘：课件ppt、作业和答案、期末卷子</li>
<li>百度网盘-学长流传：期末卷子、知识点</li>
</ol>
<h1 id="信息安全心理学"><a href="#信息安全心理学" class="headerlink" title="信息安全心理学"></a>信息安全心理学</h1><p>科普性的课，不多解释，期末是论文。但是助教签到比较严</p>
<p><a href="https://pan.baidu.com/s/1gfUs78FC2hQbh1cYisuIOw?pwd=BUPT">https://pan.baidu.com/s/1gfUs78FC2hQbh1cYisuIOw?pwd=BUPT</a></p>
<h1 id="马克思主义基本原理概论"><a href="#马克思主义基本原理概论" class="headerlink" title="马克思主义基本原理概论"></a>马克思主义基本原理概论</h1><p>在树洞没封的时候，没到秋季学期期末都可以看见有大批痛苦孩子在背马原。所以准备好期末闭卷考试吧。会有一些小组作业，不难。</p>
<p><a href="https://pan.baidu.com/s/1ycOeyDRZ6e1MhH7fs4nxVg?pwd=BUPT">https://pan.baidu.com/s/1ycOeyDRZ6e1MhH7fs4nxVg?pwd=BUPT</a></p>
<ol>
<li>百度网盘：小组作业</li>
</ol>
<h1 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h1><p>有点小麻烦，属于理科课程，我们老师上课时手写板书没有ppt，有点痛苦但是讲的很细。期末闭卷考试，还会有一个小论文作业，关于生活中概率论与数理统计。概率论与数理统计习题全解指南这本书挺好，作业答案解析上面都有。</p>
<p><a href="https://pan.baidu.com/s/1YRH8csxO-PBRlagK7pifnA?pwd=BUPT">https://pan.baidu.com/s/1YRH8csxO-PBRlagK7pifnA?pwd=BUPT</a></p>
<ol>
<li>百度网盘：作业、复习资料</li>
<li>百度网盘-学长流传：早年间期末试题</li>
<li>百度网盘-学长流传：概率论与数理统计习题全解指南</li>
<li>b站：宋浩速通概率论，<a href="https://www.bilibili.com/video/BV1ot411y7mU/">《概率论与数理统计》教学视频全集</a></li>
</ol>
<h1 id="大二下"><a href="#大二下" class="headerlink" title="大二下"></a>大二下</h1><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>老师很好，讲的知识很多，填鸭式讲解得慢慢理解。好在期末考试比较简单，不会挂科。开学会写一篇小论文，期末闭卷考试。</p>
<p><a href="https://pan.baidu.com/s/1XCcFpTNypS9qZo1I7nrP-g?pwd=BUPT">https://pan.baidu.com/s/1XCcFpTNypS9qZo1I7nrP-g?pwd=BUPT</a></p>
<ol>
<li>b站：速通流必备<a href="https://www.bilibili.com/video/BV1YE411D7nH/?share_source=copy_web">王道计算机考研</a></li>
<li>百度网盘：小论文、课件、作业</li>
<li>百度网盘-学长流传：早年间的卷子、实验（我们好像都没做过）</li>
</ol>
<h1 id="数据库技术与应用"><a href="#数据库技术与应用" class="headerlink" title="数据库技术与应用"></a>数据库技术与应用</h1><p>讲的是数据库的各种知识，考试的时候还是SQL考的比较多。教学用的是SQL server，不要用mySQL，不然作业都不好做。是可以考前突击出来的课，但是每年考题变化还是不小的。</p>
<p><a href="https://pan.baidu.com/s/1ZwfBdilDiqfE-LA5-tzD9g?pwd=BUPT">https://pan.baidu.com/s/1ZwfBdilDiqfE-LA5-tzD9g?pwd=BUPT</a></p>
<ol>
<li>百度网盘：笔记、课件、作业、实验</li>
<li>百度网盘-学长流传：早年间的卷子</li>
</ol>
<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p>挺重要的一门课，会按五层结构一层一层讲，考前疯狂背协议和每层的功能。期末考试比较难，每年都是，但是题型还算固定。会有实验要做</p>
<p><a href="https://pan.baidu.com/s/1fGJ237Dk6nnrnoFeLc70Gg?pwd=BUPT">https://pan.baidu.com/s/1fGJ237Dk6nnrnoFeLc70Gg?pwd=BUPT</a></p>
<ol>
<li>b站：速通流必备[王道计算机考研](<a href="https://www.bilibili.com/video/BV19E411D78Q/?vd_source=845dacbec2fc56dd00bc736f8d842991">王道计算机考研 计算机网络_</a></li>
<li>百度网盘：笔记、课件、作业</li>
<li>百度网盘-学长流传：早年间的卷子、实验（我们好像都没做过）</li>
<li>实验可以直接看博客：<a href="https://zhangyuanhe.top/categories/%E4%BF%A1%E5%AE%89%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C/">分类：计算机网络实验 </a></li>
</ol>
<h1 id="汇编语言与逆向工程"><a href="#汇编语言与逆向工程" class="headerlink" title="汇编语言与逆向工程"></a>汇编语言与逆向工程</h1><p>非常实验的一门课，上课讲的都逆向工程的方法。期末是开卷闭网考试，5道逆向题目，每个都是获取flag并简单说明下如何解题。还是需要看应试技巧，期末题目不是按难易排序的。考的知识点还算固定，复习考试范围就可以。</p>
<p><a href="https://pan.baidu.com/s/1Db1sywAQ9s1WDefHxLvt5A?pwd=BUPT">https://pan.baidu.com/s/1Db1sywAQ9s1WDefHxLvt5A?pwd=BUPT</a></p>
<ol>
<li>百度网盘：解题思路、ppt、练习题、作业题</li>
<li>百度网盘-学长流传：视频资料、一些工具</li>
<li>博客准备开一个板块放逆向的内容，以后可能会放链接</li>
<li><a href="https://zhangyuanhe.top/categories/%E4%BF%A1%E5%AE%89%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/">分类：汇编语言 | ZYH’s blog (zhangyuanhe.top)</a></li>
</ol>
<h1 id="现代密码学"><a href="#现代密码学" class="headerlink" title="现代密码学"></a>现代密码学</h1><p>经典专业课+1，从古典密码一直到现代加密通信。要记的东西不少，学起来有点痛苦。考试题目偏理论，闭卷考试。</p>
<p><a href="https://pan.baidu.com/s/1uHfWRBCwYojWgPRNwDWCpQ?pwd=BUPT">https://pan.baidu.com/s/1uHfWRBCwYojWgPRNwDWCpQ?pwd=BUPT</a></p>
<ol>
<li>百度网盘：ppt、笔记、作业题</li>
<li>百度网盘-学长流传：教材电子版</li>
</ol>
<h1 id="数字内容安全"><a href="#数字内容安全" class="headerlink" title="数字内容安全"></a>数字内容安全</h1><p>科普类课程，但是有闭卷考试，主要靠考前画的知识点用几个小时突击。最后一个月会有实验，实验比较复杂而且每一届好像不太一样。</p>
<p><a href="https://pan.baidu.com/s/1hm4EhAVhHhn4ANX45NaQ-A?pwd=BUPT">https://pan.baidu.com/s/1hm4EhAVhHhn4ANX45NaQ-A?pwd=BUPT</a></p>
<ol>
<li>百度网盘：ppt、实验报告</li>
<li><a href="https://zhangyuanhe.top/categories/%E4%BF%A1%E5%AE%89%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/%E6%95%B0%E5%AD%97%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C/">分类：数字内容安全实验 | ZYH’s blog (zhangyuanhe.top)</a></li>
</ol>
<h1 id="毛泽东思想和中国特色社会主义理论体系概论"><a href="#毛泽东思想和中国特色社会主义理论体系概论" class="headerlink" title="毛泽东思想和中国特色社会主义理论体系概论"></a>毛泽东思想和中国特色社会主义理论体系概论</h1><p>毛中特，最后一门政治课，会画大题考点，重点看这几个考点就够了。有小组作业，还有实践调研。每节课同学自愿报名上台点评热点新闻，期末有一定加分。</p>
<p><a href="https://pan.baidu.com/s/1NC_jdv4E1nEWqeg2WWF-kg?pwd=BUPT">https://pan.baidu.com/s/1NC_jdv4E1nEWqeg2WWF-kg?pwd=BUPT</a></p>
<ol>
<li>百度网盘：实践作业、小组作业、思维导图</li>
</ol>
<h1 id="数学建模与模拟"><a href="#数学建模与模拟" class="headerlink" title="数学建模与模拟"></a>数学建模与模拟</h1><p>限选课之一，相较于另外两门，这一个算是最友善的。没有期末考试，讲的内容也能够理解。需要使用matlab工具。</p>
<p><a href="https://pan.baidu.com/s/15YqeHZ0QosTK4BKnNGpzQA?pwd=BUPT">https://pan.baidu.com/s/15YqeHZ0QosTK4BKnNGpzQA?pwd=BUPT</a></p>
<ol>
<li>百度网盘：作业、课件</li>
<li><a href="https://zhangyuanhe.top/categories/%E4%BF%A1%E5%AE%89%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E5%AE%9E%E9%AA%8C/">分类：数学建模实验 | ZYH’s blog (zhangyuanhe.top)</a></li>
</ol>
<h1 id="大三上"><a href="#大三上" class="headerlink" title="大三上"></a>大三上</h1><p>大三上度过的很痛苦，实验非常多，各种各样的实验基本没停过，从开学做到期末。</p>
<h1 id="信息论与编码"><a href="#信息论与编码" class="headerlink" title="信息论与编码"></a>信息论与编码</h1><p>平时40%，期末开卷60%</p>
<p>这门课讲的内容很多，我们排课在了周一早八，所以选的人不多。平时上课很随意但是有签到。期末开卷考试都是原题，好好看一遍ppt就能拿高分。推荐选择</p>
<p><a href="https://pan.baidu.com/s/1WzfsemIninHRAU7s_ksdmQ?pwd=BUPT">https://pan.baidu.com/s/1WzfsemIninHRAU7s_ksdmQ?pwd=BUPT</a></p>
<ol>
<li>百度网盘：课件ppt、教材、往年样题</li>
<li>博客：学习笔记</li>
</ol>
<h1 id="信息系统安全"><a href="#信息系统安全" class="headerlink" title="信息系统安全"></a>信息系统安全</h1><p>期末考试40%，四次实验报告40%，两次作业20%</p>
<p>这门课很难，非常难，超级难。理论课是周亚建老师教，课程知识点很多很杂，ppt全是重点，不论是知识点还是例子都是重点，每年期末的考题都不一样，全都是新题。实验课很简单，实验部分会有高分。作业问题也不大。就是考试周要抽出时间大量背诵。</p>
<p><a href="https://pan.baidu.com/s/1TKTin0b3kskzNnA4aOc7MQ?pwd=BUPT">https://pan.baidu.com/s/1TKTin0b3kskzNnA4aOc7MQ?pwd=BUPT</a></p>
<ol>
<li>百度网盘：课件、思考题总结、期末考试范围、往年样题、期末复习总结</li>
<li>期末复习总结：<a href="https://zhangyuanhe.top/2024/01/01/BUPT_note/Review_of_Information_System_Security/">信息系统安全期末复习总结</a></li>
</ol>
<h1 id="复杂网络"><a href="#复杂网络" class="headerlink" title="复杂网络"></a>复杂网络</h1><p>平时40%，期末开卷60%</p>
<p>讲的内容有点超前，可能不太好懂，但是肯定能够理解。期末考试开卷，会提前划重点，按照重点提前准备一下完全没问题。</p>
<p><a href="https://pan.baidu.com/s/1T4zvlmOg0Oovln2cqBB9IA?pwd=BUPT">https://pan.baidu.com/s/1T4zvlmOg0Oovln2cqBB9IA?pwd=BUPT</a></p>
<ol>
<li>百度网盘：作业、ppt、期末复习资料</li>
<li>博客中期末复习总结：<a href="https://zhangyuanhe.top/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/">课程笔记</a></li>
</ol>
<h1 id="网络安全法"><a href="#网络安全法" class="headerlink" title="网络安全法"></a>网络安全法</h1><p>考勤20%，课堂汇报15分钟或两篇读书报告3000字二选一20%，期末论文5000字60%</p>
<p>很中规中矩的课，但是在早八。我们这门课是三选一里面的，与他平行的两门限选课也是期末论文，但好像论文占比100%。选择汇报会比读书报告分数高一些。</p>
<p><a href="https://pan.baidu.com/s/1QuS-u7mmlmxPT87OUAld-Q?pwd=BUPT">https://pan.baidu.com/s/1QuS-u7mmlmxPT87OUAld-Q?pwd=BUPT</a></p>
<ol>
<li>百度网盘：ppt</li>
</ol>
<h1 id="软件安全"><a href="#软件安全" class="headerlink" title="软件安全"></a>软件安全</h1><p>期末考试闭卷50%</p>
<p>这个课有点难，会留四次实验，都不太好做。期末考试知识点很全，会考整个学期学到的东西，期末前两节课的东西最难，但不会减少考题的侧重。</p>
<p><a href="https://pan.baidu.com/s/1abXsaXSRBgn6YEiLixnVCQ?pwd=BUPT">https://pan.baidu.com/s/1abXsaXSRBgn6YEiLixnVCQ?pwd=BUPT</a></p>
<ol>
<li>百度网盘：实验虚拟机、ppt</li>
<li>博客：实验报告</li>
</ol>
<h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><p>项目20%，作业+实验30%，期末开卷50%</p>
<p>又是一个重量级课程，我们是第一年改成必修课，以前都是选修。英文授课，期末双语卷子，以后可能会改为纯英闭卷。平时有作业和实验，还有大项目，如果不会做可以多到网上搜搜，可以找到参考。期末题量很大，没有做完</p>
<p><a href="https://pan.baidu.com/s/1ftlcXICYs2RcuV-Se1ytmw?pwd=BUPT">https://pan.baidu.com/s/1ftlcXICYs2RcuV-Se1ytmw?pwd=BUPT</a></p>
<ol>
<li>百度网盘：作业、课件、计算机学院试题（参考性不大）</li>
<li>博客：实验报告、项目</li>
</ol>
<h1 id="信息隐藏与数字水印"><a href="#信息隐藏与数字水印" class="headerlink" title="信息隐藏与数字水印"></a>信息隐藏与数字水印</h1><p>平时成绩60%三次实验报告，期末开卷填空、选择、判断、名词解释、综合设计40%</p>
<p>课程很人性化，实验说明书也非常详细，但是雷老师很注重格式要求，要注意细节。期末也很简单，班级平均分95+。</p>
<p><a href="https://pan.baidu.com/s/1e5g_NvN2BDvp5A-mG7qhPQ?pwd=BUPT">https://pan.baidu.com/s/1e5g_NvN2BDvp5A-mG7qhPQ?pwd=BUPT</a></p>
<ol>
<li>百度网盘：实验、期末复习</li>
<li>博客：实验报告</li>
</ol>
<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><p>又是早八课，课程难度还好，但是会有一个大项目，对小米便签进行功能添加。老师在介绍这个项目的时候非常笼统，要自己注意时间赶进度做，和小学期一样。偶尔会有作业，期末的题型包括作业，复习时要注意。</p>
<p><a href="https://pan.baidu.com/s/1S0eiN6IfWP6L5RZdt7dyHA?pwd=BUPT">https://pan.baidu.com/s/1S0eiN6IfWP6L5RZdt7dyHA?pwd=BUPT</a></p>
<ol>
<li>百度网盘：作业、ppt</li>
</ol>
<h1 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h1><p>这个课平时还好，上课也不会点名签到。期末闭卷考试有点痛苦，要好好复习，哐哐背。</p>
<p><a href="https://pan.baidu.com/s/1iD6G8qAZidB23jhtpJFJMg?pwd=BUPT">https://pan.baidu.com/s/1iD6G8qAZidB23jhtpJFJMg?pwd=BUPT</a></p>
<ol>
<li>百度网盘：课件、笔记</li>
</ol>
<h1 id="算法设计与分析"><a href="#算法设计与分析" class="headerlink" title="算法设计与分析"></a>算法设计与分析</h1><p>平时、期末闭卷 37开46开55开64开都有可能</p>
<p>课程前紧后松、中间两个单元最难，动态规划不好理解、贪心选择考试不给数据结构、需要背数据结构。回溯会考带剪枝的算法。考试时对手写代码和书上的相似度比较高，不光要理解算法逻辑，还得知道书上的具体实现。都是原题</p>
<p><a href="https://pan.baidu.com/s/1QEUhlPIvwLDywjqxtoiFMg?pwd=BUPT">https://pan.baidu.com/s/1QEUhlPIvwLDywjqxtoiFMg?pwd=BUPT</a></p>
<ol>
<li>百度网盘：期末复习、ppt</li>
</ol>
<h1 id="公选课"><a href="#公选课" class="headerlink" title="公选课"></a>公选课</h1><p>公选课属于自行选修课程，最后不会算在保研排名中，无法靠公选课拉绩点哦！</p>
<h2 id="中国古建筑文化与鉴赏（在线课程）"><a href="#中国古建筑文化与鉴赏（在线课程）" class="headerlink" title="中国古建筑文化与鉴赏（在线课程）"></a>中国古建筑文化与鉴赏（在线课程）</h2><p>非常水的智慧树网课，很好通过。期末是在线考试选择题，可以在网上查到成套的往年题，一边考试一边借鉴就可。智慧树一般开课比较晚，会比正常学期完一个月左右，不要着急。</p>
<h2 id="趣味密码学"><a href="#趣味密码学" class="headerlink" title="趣味密码学"></a>趣味密码学</h2><p>这门课当时也是线上课，听的不是很认真。不过建议大家在大一上或者下可以选课听一听，对大二的现代密码学有一些帮助。最后的考核是开卷5道笔答题，可以搜到。</p>
<h2 id="大学美学"><a href="#大学美学" class="headerlink" title="大学美学"></a>大学美学</h2><p>分数相当高，网课讲解像讲故事一样，期末论文或者开卷考试，非常水。</p>
<h2 id="敏捷与精益开发（双创）"><a href="#敏捷与精益开发（双创）" class="headerlink" title="敏捷与精益开发（双创）"></a>敏捷与精益开发（双创）</h2><p>一门经营管理类的创新课，听着还比较有意思，基本没有小作业，没有考试。用来当双创分还是可以的</p>
<h2 id="食品安全（在线课程）"><a href="#食品安全（在线课程）" class="headerlink" title="食品安全（在线课程）"></a>食品安全（在线课程）</h2><p>水课啦~和古建筑一样，智慧树听一听就完事。别忘了做期末考试的题哦</p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>学习笔记</tag>
        <tag>课程总结</tag>
      </tags>
  </entry>
  <entry>
    <title>算法设计与分析课程笔记</title>
    <url>/2024/01/09/BUPT_note/Notes%20on%20Algorithm%20Design%20and%20Analysis/</url>
    <content><![CDATA[<h1 id="算法设计与分析-王东滨"><a href="#算法设计与分析-王东滨" class="headerlink" title="算法设计与分析 王东滨"></a>算法设计与分析 王东滨</h1><h1 id="第一章-算法概述"><a href="#第一章-算法概述" class="headerlink" title="第一章 算法概述"></a>第一章 算法概述</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>能够对一定规范的输入，在有限时间内活的所要求的输出。</p>
<p>不同的算法可能用不同的时间、空间或效率解决问题。</p>
<p>算法是有穷的指令序列：</p>
<ul>
<li>输入：有零或若干个外部提供的量作为算法的输入</li>
<li>输出：算法产生至少一个量作为输出</li>
<li>确定性：组成算法的每条指令是清晰，无歧义的</li>
<li>有穷性：算法中每条指令的执行次数是有限的，执行每条指令的时间也是有限的</li>
</ul>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>程序是算法用某种程序设计语言的具体实现</p>
<p>程序可能不满足算法的性质。</p>
<p>操作系统是在一个无限循环中执行的程序，因而不是一个算法</p>
<h2 id="问题求解"><a href="#问题求解" class="headerlink" title="问题求解"></a>问题求解</h2><p>理解问题→精确解或近似解选择数据结构算法设计策略→设计算法→证明正确性→分析算法→设计程序</p>
<h2 id="算法复杂性"><a href="#算法复杂性" class="headerlink" title="算法复杂性"></a>算法复杂性</h2><p><strong><strong>算法复杂性 &#x3D; 算法所需要的计算机资源</strong></strong></p>
<p>算法时间复杂性T(n)</p>
<p>算法空间复杂性S(n)</p>
<p><strong>其中<em>n</em>是问题的规模（输入大小）</strong></p>
<p>C&#x3D;F(N,I,A)</p>
<p>C：算法复杂性</p>
<p>N：解的问题的规模</p>
<p>I：算法的输入</p>
<p>A：算法本身</p>
<p>*F( N，I，A )*：由参数确定的三元函数</p>
<p>***<em>时间复杂性 <em>T&#x3D; T ( N，I，A ) ；</em>空间复杂性 <em>S&#x3D; S ( N，I，A )</em></em>*</p>
<p>通常A隐含在复杂性函数名当中，简写为：</p>
<p><strong>T&#x3D; T ( N，I) ；S&#x3D;S ( N，I)</strong></p>
<h2 id="算法的时间复杂性"><a href="#算法的时间复杂性" class="headerlink" title="算法的时间复杂性"></a><strong><strong>算法的时间复杂性</strong></strong></h2><p>1）<strong>最坏情况</strong>下的时间复杂性</p>
<p>$$<br>T_{\max}(n)&#x3D;\max {T(I)|\mathrm{size}(I)＝n}<br>$$</p>
<p>2）<strong>最好情况</strong>下的时间复杂性</p>
<p>$$<br>T_{\min}(n)&#x3D;\min {T(I)|\mathrm{size}(I)＝n}<br>$$</p>
<p>3）<strong>平均情况</strong>下的时间复杂性</p>
<p>$$<br>T_{\min}(n)&#x3D;\sum_\mathrm{size(I)&#x3D;n} p(I)T(I)<br>$$</p>
<p>其中I是问题的规模为<em>n</em>的实例，<em>p</em>(I)是实 例I出现的概率算法渐进复杂性</p>
<h2 id="算法渐近复杂性"><a href="#算法渐近复杂性" class="headerlink" title="算法渐近复杂性"></a><strong><strong>算法渐近复杂性</strong></strong></h2><p>$$<br>T(n)\rightarrow \infty \<br>$$</p>
<p>$$<br>(T(n)-t(n))&#x2F;T(n)\rightarrow 0 , \mathrm{as}\ n \rightarrow \infty<br>$$</p>
<p><em>t</em>(<em>n</em>)是<em>T</em>(<em>n</em>)的渐近性态，为算法的渐近复杂性。在数学上，<em>t</em>(<em>n</em>)是<em>T</em>(<em>n</em>)的渐近表达式，是<em>T</em>(<em>n</em>)略去低阶项留下的主项</p>
<p>$$<br>\mathrm{as}\ n \rightarrow \infty<br>$$</p>
<p> <em>t</em>(<em>n</em>)渐进于<em>T</em>(<em>n</em>)， <em>t</em>(<em>n</em>)替代<em>T</em>(<em>n</em>)作为算法的复杂性度量</p>
<h2 id="渐近分析的记号"><a href="#渐近分析的记号" class="headerlink" title="渐近分析的记号"></a><strong><strong>渐近分析的记号</strong></strong></h2><h3 id="渐进上界记号O"><a href="#渐进上界记号O" class="headerlink" title="渐进上界记号O"></a><em><strong><em>渐进上界记号</em>O</strong></em></h3><p><em>f</em>(<em>n</em>) &#x3D; <em>O</em>(<em>g</em>(<em>n</em>))</p>
<dl><dt>$$<br>{存在正常数c和n_0,使得对所有n\ge n_0有</dt><dd>0 \le cg(n) \le f(n) }<br>$$</dd></dl><h3 id="渐进下界记号Ω"><a href="#渐进下界记号Ω" class="headerlink" title="渐进下界记号Ω"></a><strong><strong>渐进下界记号Ω</strong></strong></h3><p><strong><em>f</em>(<em>n</em>) &#x3D;Ω(<em>g</em>(<em>n</em>))</strong></p>
<dl><dt>$$<br>{存在正常数c和n_0,使得对所有n\ge n_0有</dt><dd>0 \le f(n) \le cg(n) }<br>$$</dd></dl><h3 id="非紧上界记号o"><a href="#非紧上界记号o" class="headerlink" title="非紧上界记号o"></a><em><strong><em>非紧上界记号</em>o</strong></em></h3><p><em>f</em>(<em>n</em>) &#x3D; o(<em>g</em>(<em>n</em>))</p>
<p>$$<br>{<br>对于任何正常数c&gt;0，存在正数和n_0 \ge 0<br>使得对所有n \ge n_0有: 0 \le cg(n) &lt; f(n) }\</p>
<p>等价于  \frac{f(n)}{g(n)} \rightarrow c\ ,\ as \ n \rightarrow \infty<br>$$</p>
<h3 id="非紧下界记号ω"><a href="#非紧下界记号ω" class="headerlink" title="非紧下界记号ω"></a><strong><strong>非紧下界记号ω</strong></strong></h3><p><em>f</em>(<em>n</em>) &#x3D; <strong><strong>ω</strong></strong>(<em>g</em>(<em>n</em>))</p>
<p>$$<br>{对于任何正常数c&gt;0，存在正数和n_0 \ge 0使得对所有n \ge n_0有: 0 \le f(n) &lt; bcg(n) }<br>\<br>等价于\frac{f(n)}{g(n)} \rightarrow c\ ,\ as \ n \rightarrow \infty<br>$$</p>
<p>$$<br>f(n) \in \omega(g(n))\Leftrightarrow g(n) \in o(f(n))<br>$$</p>
<p><strong><strong>紧渐近界记号Θ</strong></strong></p>
<p><em><strong>f(n) &#x3D;* Θ *(g(n))</strong></em></p>
<p><em><em>当且仅当</em>f*(<em>n</em>) &#x3D; <em>O</em>(<em>g</em>(<em>n</em>))且*f</em>(<em>n</em>) &#x3D;ω(<em>g</em>(<em>n</em>)) ， <em>f(n) 与g(n)<em>同阶</em></em></p>
<p>$$<br>{存在正常数c_1,c_2和n_0使得对所有n \ge n_0有：c_1g(n) \le f(n)<br>\le c2g(n) }<br>$$</p>
<h3 id="定理1："><a href="#定理1：" class="headerlink" title="定理1："></a>定理1：</h3><p>$$<br>\Theta(g(n)) &#x3D; O(g(n)) \cap \omega(g(n))<br>$$</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>$$<br>算法复杂度定义、 O(g(n))、 \omega(g(n))<br>$$</p>
<h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>$$<br>O(f(n))+O(g(n)) &#x3D; O(max{f(n),g(n)}) \<br>O(f(n))+O(g(n)) &#x3D; O(f(n)+g(n)) \<br>O(f(n))*O(g(n)) &#x3D; O(f(n)*g(n))<br>$$</p>
<h1 id="第二章-递归与分治策略"><a href="#第二章-递归与分治策略" class="headerlink" title="第二章 递归与分治策略"></a>第二章 递归与分治策略</h1><blockquote>
<p>分治法的设计思想是，将一个难以直接解决的大问题， 分割成一些规模较小的相同问题，以便各个击破，分而治之。</p>
</blockquote>
<h2 id="递归的概念"><a href="#递归的概念" class="headerlink" title="递归的概念"></a>递归的概念</h2><p>直接或间接地调用自身的算法称为<strong>递归算法</strong>。 </p>
<p>用函数自身给出定义的函数称为<strong>递归函数</strong>。</p>
<p>例1 阶乘函数</p>
<p>阶乘函数</p>
<p>$$<br>n!&#x3D;\begin{cases}1 &amp;&amp; n&#x3D;0\ n(n-1)!&amp;&amp; n&gt;0\end{cases}<br>$$</p>
<p>边界条件与递归方程是递归函数的二个要素，递归函 数只有具备了这两个要素，才能在有限次计算后得出 结果。</p>
<p>例2 Fibonacci数列</p>
<p>无穷数列1,1,2,3,5, 8 , 13 , 21 , 34 , 55 , … … , 称 为Fibonacci数列。它可以递归地定义为：</p>
<p>$$<br>F(n)&#x3D;\begin{cases}1 &amp;&amp; n&#x3D;0\ 1&amp;&amp; n&#x3D;1\ F(n-1)+F(n-2)&amp;&amp; n&gt;1\end{cases}<br>$$</p>
<p>前面例中的函数都可以找到相应的非递归方式定义：</p>
<p>$$<br>n!&#x3D;1 ·2 · 3 … …(n- 1) ·n\ F(n)&#x3D;\frac{1}{\sqrt{5}}((\frac{1+\sqrt{5}}{2})^{n+1}-\frac{1-\sqrt{5}}{2})^{n+1})<br>$$</p>
<p>例3 Ackerman函数</p>
<p>当一个函数及它的一个变量是由函数自身定义时，称这个函数是双递归函数。Ackerman 函数A(n,m) 定义如下：</p>
<p>$$<br>A(1,0)&#x3D;2\ A(0,m)&#x3D;1 \qquad m\ge 0\ A(n,0)&#x3D;n+2 \qquad n\ge 2\ A(n,m)&#x3D;A(A(n-1,m),m-1)\qquad  n,m\ge 1<br>$$</p>
<p>A(n,m) 的自变量m 的每一个值都定义了一个单变量函数：<br>■ M&#x3D;0 时， A(n,0)&#x3D;n+2<br>■ M&#x3D;1 时 ，A(n,1)&#x3D;A(A(n-1,1),0)&#x3D;A(n-1,1)+2, 和A(1,1)&#x3D;2故 A(n,1)&#x3D;2*n<br>■ M&#x3D;2 时， A(n,2)&#x3D;A(A(n-1,2),1)&#x3D;2A(n-1,2), 和A(1,2)&#x3D;A(A(0,2),1)&#x3D;A(1,1)&#x3D;2, 故A(n,2)&#x3D; 2^n。</p>
<p>■ M&#x3D;3 时，类似的可以推出</p>
<p>$$<br>2^{2^{2^{ \dots^{2} }}}<br>$$</p>
<p>■ M&#x3D;4 时， A(n,4)的增长速度非常快，以至于没有适当的数学式 子来表示这一函数。</p>
<p><strong>本例中的Ackerman 函数却无法找到非递归的定义。</strong></p>
<p>例4 排列问题</p>
<p>设计一个递归算法生成n个元素{r,r₂ ,…,r}的全排列。<br>设R&#x3D;{r₁ ,r₂…,rn}是要进行排列的n个元素， Ri&#x3D;R- {ri}。 集合X中元素的全排列记为perm(X)。<br>(r)perm(X) 表示在全排列perm(X) 的每一个排列前加上前 缀得到的排列。 R 的全排列可归纳定义如下：</p>
<p>当n&#x3D;1 时， perm(R)&#x3D;(r), 其 中r是集合R 中唯一的元素；<br>当n&gt;1 时， perm(R) 由(r₁)perm(R₁),(r₂)perm(R₂),., (rn)perm(Rn)构成。</p>
<p>例5 整数划分问题</p>
<p>将正整数n表示成一系列正整数之和： n&#x3D;n₁+n₂+…+nk, 其中n₁ ≥n₂ ≥… ≥nx≥1,k≥1。<br>正整数n的这种表示称为正整数n的划分。求正整数n的不 同划分个数。</p>
<blockquote>
<p>例如正整数6有如下11种不同的划分：<br>6;<br>5+1;<br>4+2,4+1+1;<br>3+3,3+2+1,3+1+1+1;<br>2+2+2,2+2+1+1,2+1+1+1+1;<br>1+1+1+1+1+1。</p>
</blockquote>
<p>在本例中，如果设p(n)为正整数n的划分数，则难以找到递归关 系，因此考虑增加一个自变量：将最大加数n 不大于m 的划分 个数记作q(n,m)。 可以建立q(n,m)的如下递归关系。<br>q(n,n)&#x3D;1+q(n,n- 1);<br>正整数n的划分由n₁&#x3D;n 的划分和n≤n-1 的划分组成。</p>
<p>q(n,m)&#x3D;q(n,m- 1)+q(n-m,m),n&gt;m&gt;1;<br>正整数n的最大加数n,不大于m 的划分由n₁&#x3D;m 的划分和 n₁ ≤m-1 的划分组成。</p>
<p>$$<br>q(n,m)&#x3D;\begin{cases}1&amp;&amp; n&#x3D;1,m&#x3D;1 \q(n,n) &amp;&amp; n&lt;m\ 1+q(n,n-1)&amp;&amp; n&#x3D;m\ q(n,m-1)+q(n-m,m)&amp;&amp; n&gt;m&gt;1\end{cases}<br>$$</p>
<p>例6 Hanoi塔问题</p>
<p>设a,b,c是3个塔座。开始时，在塔座a上有一叠共n个圆盘，,这 些圆盘自下而上、由大到小地叠在一起。各圆盘从小到大编号 为1,2 n, 现要求将塔座a上的这一叠圆盘移到塔座b 上，并仍按同样顺序叠置。在移动圆盘时应遵守以下移动规则：</p>
<p>规则1:每次只能移动1个圆盘；</p>
<p>规则2:任何时刻都不允许将较大的圆盘压在较小的圆盘之上；</p>
<p>规则3:在满足移动规则1和2的前提下，可将圆盘移至a,b,c中 任一塔座上。</p>
<h2 id="递归小结"><a href="#递归小结" class="headerlink" title="递归小结"></a>递归小结</h2><p><strong>优点：</strong> 结构清晰，可读性强，而且容易用 数学归纳法来证明算法的正确性，因此它 为设计算法、调试程序带来很天方便。<br><strong>缺点：</strong> 递归算法的运行效率较低，无论是 耗费的讦算时间还是占用的存储空间都比非递归算法要多。</p>
<p><strong>解决方法</strong>：在递归算法中消除递归调用，使其转化为非递归算法。<br>1 、 采用一个用户定义的栈来模拟系统的递归调用工作栈。该方法通用性强，但本质上还是递归，只不过人工做了本来由编译器做的事情， 优化效果不明显。<br>2、 用递推来实现递归函数。<br>3 、通过变换能将一些递归转化为尾递归，从而迭代求出结果。<br>后两种方法在时空复杂度上均有较大改善， 但其适用范围有限。</p>
<h2 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h2><h3 id="分治法的适用条件"><a href="#分治法的适用条件" class="headerlink" title="分治法的适用条件"></a>分治法的适用条件</h3><p>分治法所能解决的问题一般具有以下几个特征：<br>1)该问题的规模缩小到一定的程度就可以容易地解决；<br>2)该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质<br>3)利用该问题分解出的子问题的解可以合并为该问题的解；<br>4)该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题。</p>
<blockquote>
<p>人们从大量实践中发现，在用分治法设计算法时， 最好使子问题的规模大致相同。即将一个问题分成 大小相等的k个子问题的处理方法是行之有效的。<br>这种使子问题规模大致相等的做法是出自一种平衡 (balancing) 子问题的思想，它几乎总是比子问题 规模不等的做法要好。</p>
</blockquote>
<p>一个分治法将规模为n的问题分成k个规模为n&#x2F;m 的子问题去 解。设分解阀值n0&#x3D;1, 且adhoc 解规模为1的问题耗费1个单位 时间。再设将原问题分解为k个子问题以及用merge 将k个子问 题的解合并为原问题的解需用f(n)个单位时间。用T(n)表示该分 治法解规模为|P|&#x3D;n的问题所需的计算时间，则有：</p>
<p>$$<br>T(n)&#x3D;\begin{cases})(1)&amp;&amp; n&#x3D;1\ kT(n&#x2F;m)+f(n)&amp;&amp; n&gt;1\end{cases}<br>$$</p>
<p>通过迭代法求得方程的解：</p>
<p>$$<br>T(n)&#x3D;n^{log_m k}+\sum_{j&#x3D;0}^{log_m n-1}k^jf(n&#x2F;m^j)<br>$$</p>
<h3 id="二分搜索技术"><a href="#二分搜索技术" class="headerlink" title="二分搜索技术"></a>二分搜索技术</h3><p>给定已按升序排好序的n个元素a[0:n-1], 现要在这n个元素中找 出一特定元素x。</p>
<blockquote>
<p>分析：很显然此问题分解出的子问题相互独立，即在a[i]的前 面或后面查找x是独立的子问题，因此满足分治法的适用条件。</p>
</blockquote>
<p>据此容易设计出二分搜索算法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span>  Type&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BinarySearch</span><span class="params">(Type a[], <span class="type">const</span> Type&amp; x, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">	<span class="title">while</span>  <span class="params">(r&gt;=  I)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span>  m  =(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (x == a[m]) </span><br><span class="line">		<span class="keyword">return</span> m;</span><br><span class="line">	<span class="keyword">if</span>  (x&lt;a[m])  </span><br><span class="line">		r  =  m- <span class="number">1</span>;</span><br><span class="line">  elsel=m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> - <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>算法复杂度分析：<br>每执行一次算法的while循环， 待搜索数组的大小减少一半。因此，在最坏情况下， while循环被执行了 O(logn)次。循环体内运算需要O(1)时间，因此整个算法在最坏情况下 的计算时间复杂性为O(logn)。</p>
</blockquote>
<h3 id="大整数的乘法"><a href="#大整数的乘法" class="headerlink" title="大整数的乘法"></a>大整数的乘法</h3><p>请设计一个有效的算法，可以进行两个n 位大整数的乘法运算</p>
<p>直接计算： O(n²)</p>
<p>$$<br>T(n)&#x3D;\begin{cases}O(1)&amp;n&#x3D;1\ 4T(n&#x2F;2)+O(n)&amp;n&gt;1 \end{cases}\T(n)&#x3D;O(n^2)\ \  \ X&#x3D;a2^{n&#x2F;2}+b \ \ \ \ \ Y&#x3D;c2^{n&#x2F;2}+d\ XY&#x3D;ac2^n+(ad+bc)2^{n&#x2F;2}+bd<br>$$</p>
<blockquote>
<p>复杂度分析</p>
<p>$$<br>T(n)&#x3D;\begin{cases}O(1)&amp;n&#x3D;1\ 3T(n&#x2F;2)+O(n)&amp;n&gt;1 \end{cases}\T(n)&#x3D;O(n^{\log3})&#x3D;O(n^{1.59})<br>$$</p>
</blockquote>
<h3 id="Strassen矩阵乘法"><a href="#Strassen矩阵乘法" class="headerlink" title="Strassen矩阵乘法"></a>Strassen矩阵乘法</h3><p>传统方法： O(n³)</p>
<p>A 和B 的乘积矩阵C 中的元素C[i,j]定义为：</p>
<p>$$<br>c[i][j]&#x3D;\sum^n_{k&#x3D;1}A[i][k]B[k][j]<br>$$</p>
<blockquote>
<p>若依此定义来计算A 和B的乘积矩阵C, 则每计算C的一个元素C[i][j], 需要做n次乘法和n-1次加法。因此，算出矩阵C 的个元素所需的计算时间为O(n3)</p>
</blockquote>
<p>假设矩阵A</p>
<p>和矩阵B都是$N*N(N&#x3D;2^n)$的方矩阵，求C&#x3D;AB，如下所示：</p>
<p>$C_{11}&#x3D;A_{11}B_{11}+A_{12}B_{21}\<br>C_{12}&#x3D;A_{11}B_{12}+A_{12}B_{22}\<br>C_{21}&#x3D;A_{21}B_{11}+A_{22}B_{21}\<br>C_{22}&#x3D;A_{21}B_{12}+A_{22}B_{22}\$</p>
<p>$$<br>T(n)&#x3D;\begin{cases}O(1)&amp;n&#x3D;2\ 8T(n&#x2F;2)+O(n^2)&amp;n&gt;2 \end{cases}\T(n)&#x3D;O(n^{3})<br>$$</p>
<p>使用递归算法：</p>
<p>$$<br>P_1 &#x3D;A_{11} · B_{12} - A_{11} · B_{22}\<br>P_2 &#x3D;A_{11}·B_{22} + A_{12}·B_{22}\<br>P_3 &#x3D;A_{21} · B_{11} + A_{22}· B_{11}\<br>P_4 &#x3D;A_{22} · B_{21} - A_{22} · B_{11}\<br>P_5 &#x3D; A_{11} · B_{11} + A_{11} · B_{22} + A_{22} · B_{11} + A_{22} · B_{22}\<br>P_6 &#x3D; A_{12} · B_{21} + A_{12}· B_{22 }- A_{22} · B_{21} - A_{22} · B_{22}\<br>P_7 &#x3D; A_{11}·B_{11} + A_{11} · B_{12 }- A_{21}·B_{11} - A_{21} · B_{12}<br>$$</p>
<p>$$<br>C_{11} &#x3D; P_5 + P_4 – P_2 + P_6\<br>C_{12}&#x3D;P_1+P_2\<br>C_{21}&#x3D;P_3 + P_4\<br>C_{22} &#x3D; P_5 + P_1 - P_3 -P_7<br>$$</p>
<blockquote>
<p>复杂度分析</p>
<p>$$<br>T(n)&#x3D;\begin{cases}O(1)&amp;n&#x3D;2\ 7T(n&#x2F;2)+O(n^2)&amp;n&gt;2 \end{cases}\T(n)&#x3D;O(n^{\log7})&#x3D;O(n^{2.81})<br>$$</p>
</blockquote>
<h3 id="棋盘覆盖"><a href="#棋盘覆盖" class="headerlink" title="棋盘覆盖"></a>棋盘覆盖</h3><blockquote>
<p>在一个2k×2k个方格组成的棋盘中，恰有一个方格与其它方格不 同，称该方格为一特殊方格，且称该棋盘为一特殊棋盘。在棋 盘覆盖问题中，要用图示的4种不同形态的L型骨牌覆盖给定的 特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不 得重叠覆盖。</p>
</blockquote>
<p>当k&gt;0 时，将2k×2k棋盘分割为4个2k1×2k-1 子棋盘(a)所示。<br>特殊方格必位于4个较小子棋盘之一中，其余3个子棋盘中无特 殊方格。为了将这3个无特殊方格的子棋盘转化为特殊棋盘，可 以用一个L型骨牌覆盖这3个较小棋盘的会合处，如 (b)所示，从 而将原问题转化为4个较小规模的棋盘覆盖问题。递归地使用这 种分割，直至棋盘简化为棋盘1×1。</p>
<h3 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h3><blockquote>
<p>基本思想： 将待排序元素分成大小大致相同的2个子集合，分 别对2个子集合进行排序，最终将排好序的子集合合并成为所 要求的排好序的集合。</p>
</blockquote>
<p>最坏时间复杂度： O(nlogn)<br>平均时间复杂度： O(nlogn)<br>辅助空间： O(n)</p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>对输入的子数组a[p:r],按以下三个步骤进行排序：<br>1 ) 分 解 (divide): 以a[p]为基准元素将a[p:r]划分为3段a[p:q-1],a[q],a[q+1:r],其 中a[p:q-1]中任何一个元素 小于等于a[q];a[q+1:r]中任何一个元素大于等于a[q]<br> 2)递归求解：通过递归调用快速排序算法，分别对a[p:q-1]和a[q+1:r]进行排序<br>3)合并：由于a[p:q-1]和a[q+1:r]的排序是就地进行的，因此在a[p:q-1]和a[q+1:r]都已排好序了，不需执行任 何计算， a[p:r]则已排好序了。</p>
<p><img src="/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%20%E7%8E%8B%E4%B8%9C%E6%BB%A8%2080393194011f4696b44921b77e96b51b/Untitled.png" alt="Untitled"></p>
<blockquote>
<p>最坏情况：发生在划分过程产生的两个区域分别包含 n-1个元素和1个元素的时候。<br>最 坏 时 间 复 杂 度 ： O ( n²)<br>最好情况：每次划分所取的基准都恰好为中值。<br>最 好 时 间 复 杂 度 ： O ( n l o g n )</p>
</blockquote>
<h2 id="线性时间选择"><a href="#线性时间选择" class="headerlink" title="线性时间选择"></a>线性时间选择</h2><p>给定线性序集中n个元素和一个整数k,1≤k≤n,要求找出这n个 元素中第k 小的元素</p>
<blockquote>
<p>在最坏情况下，算法randomizedSelect需要$O(n^2)$计算时间 但可以证明，算法randomizedSelect可以在O(n)平均时间内 找出n个输入元素中的第k小元素。</p>
</blockquote>
<p>●将n个输入元素划分成[n&#x2F;57个组，每组5个元素，只可能 有一个组不是5个元素。用任意一种排序算法，将每组中的 元素排好序，并取出每组的中位数，共[n&#x2F;5个 。<br>●递归调用select 来找出这[ n&#x2F;57个元素的中位数。如果 「n&#x2F;57是偶数，就找它的2个中位数中较大的一个。以这个元素作为划分基准。</p>
<p>$$<br>T(n)&#x3D;\begin{cases}C_1&amp;n&lt;75\ C_2n+T(n&#x2F;5)+T(3n&#x2F;4)&amp;n&gt;75\end{cases}\T(n)&#x3D;O(n)<br>$$</p>
<h3 id="循环赛日程表"><a href="#循环赛日程表" class="headerlink" title="循环赛日程表"></a>循环赛日程表</h3><p>设计一个满足以下要求的比赛日程表：<br>(1)每个选手必须与其他n-1个选手各赛一次；<br>(2)每个选手一天只能赛一次；<br>(3)循环赛一共进行n-1天。</p>
<blockquote>
<p>按分治策略，将所有的选手分为两半， n个选手的比赛日程表 就可以通过为n&#x2F;2个选手设计的比赛日程表来决定。递归地用 对选手进行分割，直到只剩下2个选手时，比赛日程表的制定 就变得很简单。这时只要让这2个选手进行比赛就可以了。</p>
</blockquote>
<h1 id="第3章-动态规划"><a href="#第3章-动态规划" class="headerlink" title="第3章 动态规划"></a><strong>第3章 动态规划</strong></h1><h2 id="算法总体思想"><a href="#算法总体思想" class="headerlink" title="算法总体思想"></a><strong>算法总体思想</strong></h2><p>动态规划算法与分治法类似，其基本思想也是将待求解问题分<br>解成若干个子问题<br>但是经分解得到的子问题往往不是互相独立的。不同子问题的<br>数目常常只有多项式量级。在用分治法求解时，有些子问题被<br>重复计算了许多次。</p>
<h2 id="矩阵连乘问题"><a href="#矩阵连乘问题" class="headerlink" title="矩阵连乘问题"></a><strong>矩阵连乘问题</strong></h2><p>完全加括号的矩阵连乘积可递归地定义为：</p>
<p>（1）单个矩阵是完全加括号的；<br>（2）矩阵连乘积A是完全加括号的，则A可表示为2个完全加括号的矩阵连乘积 和的乘积并加括号，即A&#x3D;(BC)</p>
<p>◼ 由于矩阵乘法满足结合律，所以计算矩阵的连乘可以有许多不<br>同的计算次序。这种计算次序可以用加括号的方式来确定。<br>◼ 若一个矩阵连乘积的计算次序完全确定，也就是说该连乘积已<br>完全加括号，则可以依此次序反复调用2个矩阵相乘的标准算<br>法计算出矩阵连乘积<br>◼ 特征：计算A[i:j]的最优次序所包含的计算矩阵子链 A[i:k]和A[k+1:j]的次序也是最优的。<br>◼ 矩阵连乘计算次序问题的最优解包含着其子问题的最优解。这种性质称为最优子结构性质。问题的最优子结构性质是该问题可用动态规划算法求解的显著特征。</p>
<h3 id="建立递归关系"><a href="#建立递归关系" class="headerlink" title="建立递归关系"></a><strong>建立递归关系</strong></h3><p>设计算$A_i* A_{i+1}<em>…</em> A_j$ 的矩阵连乘积表示为$A[i:j]$，$1≤i≤j≤n$，所需</p>
<p>要的最少的乘次数为$m[i,j]$，则原问题的最优值可表示为$m[1,n]$</p>
<p>◼ 当$i&#x3D;j$时，$A[i:j]&#x3D;Ai$，因此，$m[i,i]&#x3D;0，i&#x3D;1,2,…,n$</p>
<p>◼ 当$i&lt;j$时，</p>
<p>若$A [i:j]$ 在$A_k$和$A_{k+1}$间断开为最优，则：</p>
<p>$A[i:j] &#x3D; A[i:k] A[k+1:j], i⩽k&lt;j$</p>
<p>$A[i:k]$为 $<strong>A[i]$的行数 $x A[k]$的列数</strong> 的矩阵</p>
<p>$<strong>A[i]$的行 $&#x3D; A[i-1]$的列 $&#x3D; p_{i-1}$</strong> ，$A[k]$的列数$&#x3D; p_k$</p>
<p>故：$A[i:k]$ 为$<em>p_{i-1}$$</em> p_k$*的矩阵$A[k+1:j]$为$<em>p_k$$</em> p_j$*的矩阵,则所需计算次数： $m[i, j] &#x3D; m[i,k]+ m[k +1, j]+ p_{i−1}p_kp_j$</p>
<h3 id="用动态规划法求最优解"><a href="#用动态规划法求最优解" class="headerlink" title="用动态规划法求最优解"></a><strong>用动态规划法求最优解</strong></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MatrixChain</span><span class="params">(<span class="type">int</span> *p，<span class="type">int</span> n，<span class="type">int</span> **m，<span class="type">int</span> **s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) m[i][i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">2</span>; r &lt;= n; r++) <span class="comment">/* r 为连乘矩阵的数量 */</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - r+<span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="type">int</span> j=i+r<span class="number">-1</span>;</span><br><span class="line">		m[i][j] = m[i+<span class="number">1</span>][j]+ p[i<span class="number">-1</span>]*p[i]*p[j];</span><br><span class="line">		s[i][j] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> k = i+<span class="number">1</span>; k &lt; j; k++) &#123;</span><br><span class="line">			<span class="type">int</span> t = m[i][k] + m[k+<span class="number">1</span>][j] + p[i<span class="number">-1</span>]*p[k]*p[j];</span><br><span class="line">			<span class="keyword">if</span> (t &lt; m[i][j]) &#123; m[i][j] = t; s[i][j] = k;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态规划算法的基本要素"><a href="#动态规划算法的基本要素" class="headerlink" title="动态规划算法的基本要素"></a><strong>动态规划算法的基本要素</strong></h2><h3 id="一、最优子结构"><a href="#一、最优子结构" class="headerlink" title="一、最优子结构"></a><strong><strong>一、最优子结构</strong></strong></h3><ul>
<li>矩阵连乘计算次序问题的最优解包含着其子问题的最优解。这种性质称为<strong>最优子结构性质</strong>。</li>
<li>在分析问题的最优子结构性质时，所用的方法具有普遍性：首先假设由问题的最优解导出的子问题的解不是最优的，然后再设法说明在这个假设下可构造出比原问题最优解更好的解，从而导致矛盾。</li>
<li>利用问题的最优子结构性质，以自底向上的方式递归地从子问题的最优解逐步构造出整个问题的最优解。最优子结构是问题能用动态规划算法求解的前提。</li>
</ul>
<blockquote>
<p>同一个问题可以有多种方式刻划它的最优子结构，有些表示方法的求解速度更快（空间占用小，问题的维度低）</p>
</blockquote>
<h3 id="二、重叠子问题"><a href="#二、重叠子问题" class="headerlink" title="二、重叠子问题"></a><strong><strong>二、重叠子问题</strong></strong></h3><ul>
<li>递归算法求解问题时，每次产生的子问题并不总是新问题，有些子问题被反复计算多次。这种性质称为<strong>子问题的重叠性质</strong>。</li>
<li>动态规划算法，对每一个子问题只解一次，而后将其解保存在一个表格中，当再次需要解此子问题时，只是简单地用常数时间查看一下结果。</li>
<li>通常不同的子问题个数随问题的大小呈多项式增长。因此用动态规划算法只需要多项式时间，从而获得较高的解题效率。</li>
</ul>
<h3 id="三、备忘录方法"><a href="#三、备忘录方法" class="headerlink" title="三、备忘录方法"></a><strong><strong>三、备忘录方法</strong></strong></h3><p>备忘录方法的控制结构与直接递归方法的控制结构相同，区别在于备忘录方法为每个解过的子问题建立了备忘录以备需要时查看，避免了相同子问题的重复求解。</p>
<h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a><strong>最长公共子序列</strong></h2><p><strong>给定序列$X&#x3D;{x_1,x_2,…, x_m}$，另一序列$Z&#x3D;{z_1,z_2,…, z_m}$。</strong></p>
<p>若Z是X的子序列，是指存在一个严格递增下标序列$<strong>{i_1,i_2,…,i_k}$，使得对于所有$j&#x3D;1,2,…,k$有：$z_j&#x3D; x_{ij}$ 。</strong></p>
<p>例如：序列$Z&#x3D;{B，C，D，B}$是序列$X&#x3D;{A，B，C，B，D，A，B}$的子序列，相应的递增下标序列为${2，3，5，7}$。给定2个序列X和Y，当另一序列Z既是X的子序列又是Y的子序列时，称Z是序列X和Y的公共子序列。</p>
<p>给定2个序列$X&#x3D;{x_1,x_2,…, x_m}$和$Y&#x3D;{y_1,y_2,…, y_n}$，找出X和Y的最长公共子序列。</p>
<p>设序列$X&#x3D;{x_1,x_2,…, x_m}$和$Y&#x3D;{y_1,y_2,…, y_n}$的最长公共子序列为$Z&#x3D;{z_1,z_2,…,z_k}$ 则</p>
<p>(1)若$x_m&#x3D;y_n$，则$z_k&#x3D;x_m&#x3D;y_n$，且$Z_{k-1}$是$X_{m-1}$和$Y_{n-1}$最长公共子序列。</p>
<p>(2)若$x_m≠y_n$且$z_k≠x_m$，则$Z$是$X_{m-1}$和$Y$的最长公共子序列。</p>
<p>(3)若$x_m≠y_n$且$z_k≠y_n$，则$Z$是$X$和$Y_{n-1}$的最长公共子序列</p>
<p>其中，$<strong>X_{m-1}&#x3D;{x_1,x_2,…,x_{m-1}}$， $Y_{n-1} &#x3D;{y_1,y_2,…,y_{n-1}}$， $Z_k-1 &#x3D;{z_1,z_2,…,z_{k-1}}$</strong></p>
<p>由最长公共子序列问题的最优子结构性质建立子问题最优值的递归关系。用c[i][j]记录序列和的最长公共子序列的长度。<strong>其中，</strong> $X&#x3D;{x_1,x_2,…, x_m}$;$Y&#x3D;{y_1,y_2,…, y_n}$<strong>。当i&#x3D;0或j&#x3D;0时，空列是X</strong>i<strong>和Y</strong>j<strong>的最长公共子序列。故此时C[i][j]&#x3D;0。其它情况下，</strong>由最优子结构性质可建立递归关系如下：</p>
<p>$$<br>c[i][j]&#x3D;\begin{cases} 0&amp;i&#x3D;0,j&#x3D;0\ c[i-1][j-1]+1&amp;i,j&gt;0;x_i&#x3D;y_j\ max{c[i][j-i],c[i-1][j]}&amp;i,j&gt;0;x_i\neq y_j\end{cases}<br>$$</p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>复杂网络课程笔记</title>
    <url>/2024/01/10/BUPT_note/Notes%20on%20Complex%20network/</url>
    <content><![CDATA[<h1 id="复杂网络-彭海朋"><a href="#复杂网络-彭海朋" class="headerlink" title="复杂网络 彭海朋"></a>复杂网络 彭海朋</h1><h2 id="虫口方程"><a href="#虫口方程" class="headerlink" title="虫口方程"></a>虫口方程</h2><h1 id="第零讲"><a href="#第零讲" class="headerlink" title="第零讲"></a>第零讲</h1><p>$$<br>x_{n+1}&#x3D;\gamma x_n(1-x_n)<br>$$</p>
<p>在不控制的条件下，人口每25年增加一倍，即按几何级数增长。<em>xn</em>+1 &#x3D; <em>𝛾xn</em>。修正就是计入限制虫口增长的负因素。虫口数目太多时，由于争夺有限的食物和生存空间发生咬斗，由于接触传染而导致疾病蔓延，争斗使虫口数目减少的事件，这些事件的数目比例于<em>xn^</em>2。</p>
<h2 id="Logistic映射（Logistic-Map）"><a href="#Logistic映射（Logistic-Map）" class="headerlink" title="Logistic映射（Logistic Map）"></a>Logistic映射（Logistic Map）</h2><p>$$<br>x_{n+1}&#x3D;rx_n(1-x_n)<br>$$</p>
<p>分叉与周期倍增（Bifurcation &amp; Period Doubling）</p>
<p>對初始值的敏感性</p>
<p>混沌内部的自相似结构</p>
<h1 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h1><h2 id="复杂网络的数学描述"><a href="#复杂网络的数学描述" class="headerlink" title="复杂网络的数学描述"></a>复杂网络的数学描述</h2><p>网络G&#x3D;（V, E），由点集V（G）和边集E（G）组成的一个图，可分为无向、有向和加权网络<br>令ei∈ E（G），每条边ei有V（G）中的一对点(u,v)与之对应；如果任意(u,v)与(v,u)对应同一条边，则称为无向网络，否则为有向网络；如果任意∣ei ∣ &#x3D;1，则称为无权网络，否则为加权网络。</p>
<p>——复杂网络是对复杂系统的一种抽象</p>
<h2 id="对网络拓扑结构的描述"><a href="#对网络拓扑结构的描述" class="headerlink" title="对网络拓扑结构的描述"></a>对网络拓扑结构的描述</h2><p><strong>几何量及其分布</strong></p>
<p>度（Degree）：朋友的个数<br>集聚系数（群系数）（Clustering coefficient）：朋友的朋友还是不是朋友的情况<br>最短路径（Shortest path）：两个顶点之间边数最少的路径<br>介数（Betweenness）：经过我的最短路径的条数</p>
<h2 id="网络的基本模型"><a href="#网络的基本模型" class="headerlink" title="网络的基本模型"></a>网络的基本模型</h2><ul>
<li>规则网<br>(a) 完全连接; (b) 最近邻居连接; (c) 星形连接; (d) Lattice; … (z) Layers</li>
<li>随机图</li>
<li>小世界网络</li>
<li>Scale-Free 网络</li>
</ul>
<h3 id="ER-随机图模型"><a href="#ER-随机图模型" class="headerlink" title="ER 随机图模型"></a>ER 随机图模型</h3><p>特征:<br>连通性:Poisson 分布<br>齐次特征:每个节点大约有相同的<br>连接数:节点数不增加</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled.png" alt="Untitled"></p>
<h3 id="小世界网络"><a href="#小世界网络" class="headerlink" title="小世界网络"></a>小世界网络</h3><p>特征:<br>齐次性:每个节点有大约相同的连接数<br>节点不增加</p>
<h3 id="Scale-Free网络的基本特征"><a href="#Scale-Free网络的基本特征" class="headerlink" title="Scale Free网络的基本特征"></a>Scale Free网络的基本特征</h3><p>Power Law Degree Distribution（幂律度分布）</p>
<p>$$<br>P(k)\propto k^{-\gamma} \ \ \ \ \ln P(k)\propto -\gamma\ln k\P(\lambda k)\propto(\lambda k)^{-\gamma}&#x3D;\lambda^{-\gamma}k^{-\gamma}&#x3D;\lambda^{-\gamma}P(k)<br>$$</p>
<p>1、自相似结构<br>2、两极分化，高度弥散</p>
<p><strong>六度分隔（Six Degrees of Separation）理论</strong>。简单地说：“你和任何一个陌生人之间所间隔的人不会超六个，也就是说，最多通过六个人你就能够认识任何一个陌生人。”</p>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><table>
<thead>
<tr>
<th></th>
<th>E&#x2F;R随机图模型</th>
<th>现实生活的复杂网络</th>
</tr>
</thead>
<tbody><tr>
<td>平均距离</td>
<td>小&#x2F;大</td>
<td>小</td>
</tr>
<tr>
<td>聚类系数</td>
<td>大&#x2F;小</td>
<td>大(Small-world feature)</td>
</tr>
<tr>
<td>度分布</td>
<td>二项式&#x2F;Poisson</td>
<td>幂指数(Scale-free feature)</td>
</tr>
</tbody></table>
<p>直径：两点间最短距离的最大值</p>
<h2 id="分形"><a href="#分形" class="headerlink" title="分形"></a>分形</h2><p>分形和不规则形状的几何有关。</p>
<p>分形（Fractal)：局部与整体具有相似性，或者说在标度变换下具有相似性的几何形体。</p>
<p>曼德勃鲁集</p>
<p>分形音乐</p>
<h3 id="分维"><a href="#分维" class="headerlink" title="分维"></a>分维</h3><p>假设ε是小立方体一边的长度， N （ε）是用此小立方体覆盖被测形体所得的数目，维数公式意味着通过用边长为ε的小立方体覆盖被测形体来确定形体的维数。对于通常的规则物体 ，覆盖一根单位 长度的线 段所需 的数目要 N （ε）＝1／ε，覆盖一个单位边长的正方形，N(ε)＝（1／ε）2 ，覆盖单位边 长的立方体，N （ε）＝（1／ε）3。从这三个式子可见维数公式也适用于通常的维数含义。</p>
<h1 id="复杂网络病毒的行为分析"><a href="#复杂网络病毒的行为分析" class="headerlink" title="复杂网络病毒的行为分析"></a>复杂网络病毒的行为分析</h1><h3 id="恶意代码的基础知识"><a href="#恶意代码的基础知识" class="headerlink" title="恶意代码的基础知识"></a>恶意代码的基础知识</h3><p>恶意代码是最头痛的安全问题之一，它甚至是整个软件安全的核心。虽然单独对付某台设备上的指定恶意代码并不难，但是，网上各种各样的海量恶意代码，却像癌细胞一样，危害着安全，而且，既杀之不绝，又严重消耗正常体能。</p>
<blockquote>
<p>狭义上说，恶意代码是指故意编制或设置的、会产生威胁或潜在威胁的计算机代码（软件）。最常见的恶意代码有计算机病毒、特洛伊木马、计算机蠕虫、后门、逻辑炸弹等。<br>广义上说，恶意代码还指那些没有作用却会带来危险的代码，比如，流氓软件和广告推送等。</p>
</blockquote>
<p>恶意代码的入侵手段主要有三类：利用软件漏洞、利用用户的误操作、前两者的混合。</p>
<p>恶意代码的主要传播方式是病毒式传播</p>
<h2 id="死亡型病毒的动力学分析"><a href="#死亡型病毒的动力学分析" class="headerlink" title="死亡型病毒的动力学分析"></a>死亡型病毒的动力学分析</h2><blockquote>
<p>设网络的用户数为N，在t时刻，已经受害的用户数为T(t)，暂未受害的用户数为S(t)，那么，有恒等式S(t)+T(t)&#x3D;N。<br>再令f(S,T)为在“已有T人受害，S人暂未受害”条件下，受害事件发生率，于是，有下面两个微分方程<br>dT(t)&#x2F;dt&#x3D;f(S,T) 和 dS(t)&#x2F;dt&#x3D;-f(S,T)</p>
</blockquote>
<p>在生物医学的流行病学中，有一个可借鉴的概念是传染力λ(T)，它表示在已有T台设备中毒的情况下，暂未中毒的设备与中毒者相连接的概率，所以，f(S,T)&#x3D;λ(T)S；<br>另一个概念是传染率β，它表示一个未中毒设备在连接到中毒者后，被传染的概率；所以，λ(T)&#x3D;βT。于是，f(S,T)&#x3D;λ(T)S&#x3D;βTS，即，它是一个双线性函数。</p>
<h2 id="康复型病毒的动力学分析"><a href="#康复型病毒的动力学分析" class="headerlink" title="康复型病毒的动力学分析"></a>康复型病毒的动力学分析</h2><blockquote>
<p>与死亡型模型不同，在康复型模型中，受害用户在经过救治后，又可以康复成为暂未受害的用户，当然，该用户也可能再次受害。<br>其实，绝大部分恶意代码，特别是诱骗类恶意代码，都是这种康复型的。</p>
</blockquote>
<p>在此，除了10.2节中的S、T、F(S,T)和N等概念外，我们再引入另一个概念，即g(T)，它表示在T个受害者中，有g(T)个用户被康复成正常健康用户，从而，变成暂未受害用户。<br>若用γ表示康复率（生物医学经验告诉我们：每个受害者，在下一小段时间δt内，被康复的概率为γδt+0(δt)2。并且受害者被康复的时间，服从均值为1&#x2F;γ的指数分布。）那么：g(T)&#x3D;γT</p>
<p>由此，我们可以得到微分方程组：<br>dT(t)&#x2F;dt&#x3D;f(S,T)-g(T)&#x3D;βTS-γT和 dS(t)&#x2F;dt&#x3D;-f(S,T)+g(T)&#x3D;-βTS+γT<br>若令u(t)&#x3D;S(t)&#x2F;N， v(t)&#x3D;T(t)&#x2F;N， t’&#x3D;γt和R0&#x3D;βN&#x2F;γ，那么，上面的两个微分方程就变为：<br>du&#x2F;dt&#x3D;-(R0u-1)v 和dv&#x2F;dt&#x3D;(R0u-1)v<br>其定义域为：D&#x3D;{0≤u≤1,0≤v≤1,u+v&#x3D;1}</p>
<p><strong>定理10.1：针对康复型恶意代码，如果R0&lt;1，那么，康复型恶意代码就会最终被消灭，即，无人受害；反过来，如果R0&gt;1，那么，康复型恶意代码就会在一定范围内长期为害，具体地说，受害者人数将长期徘徊在N(1-1&#x2F;R0)附近。</strong></p>
<h2 id="免疫型病毒的动力学分析"><a href="#免疫型病毒的动力学分析" class="headerlink" title="免疫型病毒的动力学分析"></a>免疫型病毒的动力学分析</h2><p>设S、T、γ、β和N等概念与10.3节相同，又记R(t)为t时刻被康复（具有了免疫力）的用户数。于是，在任何一个时刻，都恒有N&#x3D;S(t)+T(t)+R(t)<br>为了使相关公式看起来简单一些，分别用S(t)&#x2F;N、T(t)&#x2F;N和R(t)&#x2F;N去代替S(t)、T(t)和R(t)并且仍然采用原来的记号来表示S(t)、T(t)和R(t)，此时便有S(t)+T(t)+R(t)&#x3D;1<br>简单来说，S(t)、T(t)和R(t)分别代表暂未受害、正受害和受害康复且具有免疫力的用户，各占总用户数的比例。</p>
<p><strong>定理10.2：针对免疫型恶意代码，当F0&lt;1时，此恶意代码不会爆发，并随着时间的推移，会自动消灭；当F0&gt;1时，该恶意代码会在一定的时段内爆发，受害者人数达到一个最大值Tmax后，才开始递减，并最终消灭。更深入地，Tmax在总人数中所占的比例为1-ρ+ρln(ρ&#x2F;S0)<br>在这里S0表示刚开始时，暂未受害的人数比例。</strong></p>
<h2 id="开机和关机对免疫型病毒的影响"><a href="#开机和关机对免疫型病毒的影响" class="headerlink" title="开机和关机对免疫型病毒的影响"></a>开机和关机对免疫型病毒的影响</h2><blockquote>
<p>以上所有小节的分析，都假定活跃用户数固定为N。但是，在实际情况下，当然有例外。比如，某用户主动关机后，任何恶意代码对他都不构成威胁，此时活跃用户就减少一个；当某用户终端中毒后被宕（dang）机，这里活跃用户数也减少一个；当新用户开机（或进入网络）后，他又可能成为恶意代码的攻击对象，这时，活跃用户数又增加一个等。</p>
</blockquote>
<p><strong>定理10.3：记P0&#x3D;β&#x2F;(γ+μ)，那么，在情况1之下，<br>当P0≤1时，该免疫型恶意代码一定会随着时间的推移，最终自动消灭；<br>当P0≥1时，该免疫型恶意代码一定会随着时间的推移，最终在$S&#x3D;1&#x2F;P_0、T&#x3D;μ(P_0-1)&#x2F;β、R&#x3D;1-1&#x2F;P_0-μ(P_0-1)&#x2F;β$点处达到全局渐近稳定，即，最终健康终端的比例为$S&#x3D;1&#x2F;P_0$，受害终端的比例为$T&#x3D;μ(P_0-1)&#x2F;β$，获得免疫力的终端比例为$R&#x3D;1-1&#x2F;P_0-μ(P_0-1)&#x2F;β$。</strong></p>
<h2 id="预防措施的效果分析"><a href="#预防措施的效果分析" class="headerlink" title="预防措施的效果分析"></a>预防措施的效果分析</h2><p>我们虽然不能强求全体用户都采取预防措施，但是，如果有比例为p的用户采取了预防措施（比例为q的用户偷了懒，此处，p+q&#x3D;1），那么，我们发现：只要当p足够大时，仍然能够消灭该恶意代码。</p>
<p><strong>定理10.5：在10.5节的情况1中，如果在暂未受害的终端中，采取了预防措施终端数的比例p≥1-1&#x2F;P0，这里P0&#x3D;β&#x2F;(γ+μ)，那么，该免疫型恶意代码一定会随着时间的推移，最终自动消灭。</strong><br>此定理告诉我们：对付恶意代码，虽然不能指望全体人员都及时采取预防措施，但是，只要有足够多的人（占总人数比例超过P0&#x3D;β&#x2F;(γ+μ)）重视安全，并及时采取了预防措施，那么，该恶意代码就一定是可控的，甚至会最终被消灭。</p>
<h1 id="回声状态网络"><a href="#回声状态网络" class="headerlink" title="回声状态网络"></a>回声状态网络</h1><p>人工神经网络（Artificial Neural Network）是由大量处理单元互联组成的非线性、自适应信息处理系统 。</p>
<p>人工神经网络按照性能分为两类：<br>（1）静态神经网络 Static Neural Network<br>（2）动态神经网络 Recurrent Neural Network<br>其中，动态神经网络又称为递归神经网络</p>
<p>两种网络对比：</p>
<p>静态网络数学表达式：</p>
<p>$$<br>y&#x3D;\sigma(\sum^n_{i&#x3D;1}\omega_1x_1+\sigma_1)<br>$$</p>
<p>静态网络数学表达式：</p>
<p>$$<br>y&#x3D;\sigma(\sum^n_{i&#x3D;1}\omega_1x_1(t-\tau_i)+\sigma_1)<br>$$</p>
<p>对比表达式，我们可以看出：动态网络内部存在带延迟因子的反馈连接，可以更好的反映动态系统的特性和演化行为 。而静态网络没有这种能力。</p>
<p>回声状态状态网络作为一种新型的递归神经网络，无论是建模还是学习算法，都已经与传统的递归神经网络差别很大。<br>ESN网络特点：<br>（1） 它的核心结构是一个随机生成、且保持不 变的储备池（Reservoir）<br>（2）其输出权值是唯一需要调整的部分<br>（3）简单的线性回归就可完成网络的训练</p>
<h2 id="ESN的结构和运行机理"><a href="#ESN的结构和运行机理" class="headerlink" title="ESN的结构和运行机理"></a>ESN的结构和运行机理</h2><p>ESN网络的核心结构是一个“储备池”。所谓的储备池就是随机生成的、大规模的、稀疏连接（SD通常保持1%~5%连接 ）的递归结构。<br>注：SD是储备池中相互连接的神经元占总的神经元N的百分比</p>
<p>从结构上讲，ESN是一种特殊类型的递归神经网络，其基本思想:使用大规模随机连接的递归网络，取代经典神经网络中的中间层，从而简化网络的训练过程。<br>我们假设系统具有M个输入单元，N个内部处理单元（Processing Elements，PE），即N个内部神经元，同时具有L个输出单元。</p>
<p>那么输入单元u（n）内部状态x（n）以及输出单元y（n）在n时刻值分别为：</p>
<p>$$<br>u(n)&#x3D;[u_1(n),u_2(n),\dots,u_M(n)]^T\ x(n)&#x3D;[x_1(n),x_2(n),\dots,x_N(n)]^T\ y(n)&#x3D;[y_1(n),y_2(n),\dots,y_L(n)]^T<br>$$</p>
<p>则回声状态网络状态方程为：</p>
<p>$$<br>x(n+1)&#x3D;f(Wx(n)+W_{in}u(n)+W_{back})y(n)\ y(n+1)&#x3D;f_{out}(W_{out}[x(n+1),u(n+1),y(n)]+W_{bias}^{out})<br>$$</p>
<h2 id="ESN的储备池"><a href="#ESN的储备池" class="headerlink" title="ESN的储备池"></a>ESN的储备池</h2><p>虽然有大量的研究是关于如何获得与具体问题相关的“好”的储备池，但是并没有形成一个系统的方法，多数研究是从实验的角度进行的。这也是目前ESN方法遇到的最大的挑战。<br>ESN的最终性能是由储备池的各个参数决定的，下面首先简要介绍储备池的四个关键参数。</p>
<p><strong>储备池内部连接权谱半径SR</strong></p>
<p><strong>储备池规模N</strong></p>
<p><strong>储备池输入单元尺度IS</strong></p>
<p><strong>储备池稀疏程度SD</strong></p>
<p>关于IS的规则：<br>如果需要处理的任务的非线性越强，那么输人单元尺度越大。<br>该原则的本质是通过输入单元尺度IS，将输入变换到神经元激活函数funtion相应的范围。<br>注：神经元激活函数的不同输入范围，其非线性程度不同。</p>
<h1 id="智能优化算法"><a href="#智能优化算法" class="headerlink" title="智能优化算法"></a>智能优化算法</h1><p>牛顿迭代法、共轭梯度法、单纯形法、黄金分割</p>
<h2 id="课上重点"><a href="#课上重点" class="headerlink" title="课上重点"></a>课上重点</h2><p>求</p>
<p>$$<br>\min(x_1^2+2x_2^2)&#x3D;E<br>$$</p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>信息论与编码课程笔记</title>
    <url>/2024/01/10/BUPT_note/Notes%20on%20Information%20Theory%20and%20Coding/</url>
    <content><![CDATA[<h1 id="信息论与编码"><a href="#信息论与编码" class="headerlink" title="信息论与编码"></a>信息论与编码</h1><h1 id="第一章-信息论与编码理论概述"><a href="#第一章-信息论与编码理论概述" class="headerlink" title="第一章 信息论与编码理论概述"></a>第一章 信息论与编码理论概述</h1><h2 id="信息论与编码理论概述"><a href="#信息论与编码理论概述" class="headerlink" title="信息论与编码理论概述"></a>信息论与编码理论概述</h2><p>自从汉明码开始，各种信道编码获得了长足的发展，如</p>
<ul>
<li>格雷码，Reed-Muller码，循环码，Reed-Solomon码,BCH码</li>
<li>卷积码，Turbo码，LDPC码，Polar码</li>
<li>级联码，网格编码调制，代数几何码</li>
<li>编织卷积码，纠删码，空时码</li>
<li>网络编码，量子纠错码，二维码</li>
<li>基于信息论与编码理论的安全技术</li>
</ul>
<h3 id="编码机制"><a href="#编码机制" class="headerlink" title="编码机制"></a>编码机制</h3><ul>
<li>编码：信息从一种形式或格式转换为另一种形式的过程。</li>
<li>编码机制：用预先规定的方法将文字、数字或其它对象编成数码，或将信息、数据转换成规定的电脉冲信号。</li>
</ul>
<h3 id="信源编码"><a href="#信源编码" class="headerlink" title="信源编码"></a>信源编码</h3><p>目的：提高通信的有效性，即以更少的符号来表示原始消息</p>
<p>通过减少消息符号序列中的冗余度，提高平均信息量</p>
<h3 id="随机错误"><a href="#随机错误" class="headerlink" title="随机错误"></a>随机错误</h3><ul>
<li>随机错误：接收序列中的传输错误是随机出现的。</li>
<li>随机错误信道：这样的信道称为随机错误信道。</li>
</ul>
<h3 id="突发错误"><a href="#突发错误" class="headerlink" title="突发错误"></a>突发错误</h3><p>突发错误：不同状态特性下，错误出现的概率不一样，这种错误为突发错误。</p>
<h3 id="纠错码"><a href="#纠错码" class="headerlink" title="纠错码"></a>纠错码</h3><p>目的：检测和纠正由于非人为(自然)因素引起的传输错误</p>
<p>设计机制：通过对消息符号序列加入冗余信息，使得接收方收到信号后，可以通过这些冗余信息进行检错和纠错</p>
<h2 id="数字通信系统的组成及各种信道"><a href="#数字通信系统的组成及各种信道" class="headerlink" title="数字通信系统的组成及各种信道"></a>数字通信系统的组成及各种信道</h2><h3 id="数字通信系统模型"><a href="#数字通信系统模型" class="headerlink" title="数字通信系统模型"></a>数字通信系统模型</h3><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled.png" alt="Untitled"></p>
<h3 id="无记忆信道和有记忆信道"><a href="#无记忆信道和有记忆信道" class="headerlink" title="无记忆信道和有记忆信道"></a>无记忆信道和有记忆信道</h3><p>无记忆信道：如果在给定时间间隔上，检测器的输出只与在该时间间隔上传送的信号有关，而与任何前面时间的传送的信号无关，称此信道为无记忆信道。该信道可以用如下公式表示：</p>
<p>$$<br>P(Y&#x2F;X)&#x3D; \prod_n p(y_n&#x2F;x_n)<br>$$</p>
<p>有记忆信道：一种M元输入、Q元输出的信道模型。该信道可以用如下公式表示：</p>
<p>$$<br>P(y_n&#x2F;x_{n-k+1},…,x_{n-1},x_n)<br>$$</p>
<h3 id="离散无记忆-DMC-信道"><a href="#离散无记忆-DMC-信道" class="headerlink" title="离散无记忆(DMC)信道"></a>离散无记忆(DMC)信道</h3><p>是一种M元输入、Q元输出的信道模型。</p>
<p>条件概率P(Y&#x2F;X)是描述该信道的最好方式，也叫做转移概率，其中X表示调制器输入符号，Y表示解调器输出符号，P(Y&#x2F;X)表示发送为X接收为Y的概率。</p>
<h3 id="二元对称-BSC-信道"><a href="#二元对称-BSC-信道" class="headerlink" title="二元对称(BSC)信道"></a>二元对称(BSC)信道</h3><p>信道矩阵：一个信道也可由它的转移概率组成的矩阵来表示。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%201.png" alt="Untitled"></p>
<h3 id="信道矩阵"><a href="#信道矩阵" class="headerlink" title="信道矩阵"></a>信道矩阵</h3><p>一般离散单符号信道的信道矩阵为：</p>
<p>$$<br>\begin{bmatrix} P(b_1|a_1) &amp; P(b_2|a_1) &amp; \dots &amp; P(b_s|a_1) \ P(b_1|a_2) &amp; P(b_2|a_2) &amp; \dots &amp; P(b_s|a_2) \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \P(b_1|a_r) &amp; P(b_2|a_r) &amp; \dots &amp; P(b_s|a_r)  \end{bmatrix}<br>$$</p>
<h3 id="加性高斯白噪声-AWGN-信道"><a href="#加性高斯白噪声-AWGN-信道" class="headerlink" title="加性高斯白噪声(AWGN)信道"></a>加性高斯白噪声(AWGN)信道</h3><ul>
<li>加性噪声：叠加在信号上的一种噪声。</li>
<li>白噪声：噪声的功率谱密度在所有的频率上均为一常数。</li>
<li>高斯白噪声：白噪声取值的概率分布服从高斯分布，其自相关系数为无延时的冲击函数。</li>
</ul>
<h2 id="通信系统涉及的一些基本概念"><a href="#通信系统涉及的一些基本概念" class="headerlink" title="通信系统涉及的一些基本概念"></a>通信系统涉及的一些基本概念</h2><h3 id="信息传输率"><a href="#信息传输率" class="headerlink" title="信息传输率"></a>信息传输率</h3><ul>
<li>符号传输率：为1&#x2F;T，每T秒传输一个编码符号，即单位时间内传输的符号个数。</li>
<li>码速率：编码后的数据流中有用部分的比例，对于(n,k)线性分组码，码速率为R&#x3D;k&#x2F;n，即k个信息比特对应于传送n个符号。</li>
<li>信息传输率(数据率)：在编码系统中，若码速率是R&#x3D;k&#x2F;n，则信息传输率(数据率)为R&#x2F;T(bit&#x2F;s)。</li>
</ul>
<h3 id="信道带宽"><a href="#信道带宽" class="headerlink" title="信道带宽"></a>信道带宽</h3><p>除了噪声的作用造成信号改变外，所有的通信系统都会因为带宽有限而造成信号失真。</p>
<ul>
<li>最小信道带宽：为基本保证信号不因带宽原因而失真，粗略估计等于W&#x3D;1&#x2F;(2T)(Hz)。</li>
<li>未编码系统：数据率1&#x2F;T&#x3D;2W，受到带宽影响。</li>
<li>二元编码系统：数据率R&#x2F;T&#x3D;2RW。同未编码系统相比，若要保持数据率不变，则要求带宽扩展1&#x2F;R倍。</li>
</ul>
<h3 id="AWGN信道的分组编码系统"><a href="#AWGN信道的分组编码系统" class="headerlink" title="AWGN信道的分组编码系统"></a>AWGN信道的分组编码系统</h3><p>译码器的条件错误概率：已知接收序列Y时</p>
<p>$$<br>P_e(H_m&#x2F;Y),P_e(X_m&#x2F;Y)<br>$$</p>
<p>译码器的错误概率：</p>
<p>$$<br>P_e(H_m)&#x3D;P_e(X_m)&#x3D;\sum_Y P_e(X_m&#x2F;Y)P(Y)<br>$$</p>
<h3 id="最佳译码规则和最大后验概率译码"><a href="#最佳译码规则和最大后验概率译码" class="headerlink" title="最佳译码规则和最大后验概率译码"></a>最佳译码规则和最大后验概率译码</h3><ul>
<li><p><strong>最佳译码规则</strong>：能够使译码错误概率P(E)达到最小的译码规则</p>
</li>
<li><p>由于接收序列Y是译码前产生的，所以P(Y)与译码规则无关</p>
</li>
<li><p>最佳译码规则必须对所有Y，使得</p>
<p>  $$<br>  P(E&#x2F;Y)\cong P(Y \neq X&#x2F;Y)<br>  $$</p>
<p>  &#96;最小，即 P(Y&#x3D;X&#x2F;Y) 最大。</p>
</li>
<li><p><strong>最大后验概率译码</strong>：对于每个输入Y，如果译码器能在码字集合中选择一个码字，作为发送码字的估值，并且使P(X&#x2F;Y)最大，则这种译码规则一定能使译码器输出的错误概率最小。</p>
</li>
</ul>
<h3 id="似然函数"><a href="#似然函数" class="headerlink" title="似然函数"></a>似然函数</h3><p>Bayes公式：</p>
<p>$$<br>\uparrow P(X&#x2F;Y)&#x3D;\frac{P(Y&#x2F;X)P(X)}{P(Y)} \公式(1)<br>$$</p>
<ul>
<li>对于给定的Y，可选择能使公式(1)右边最大的向量作为X的估计值。</li>
<li>如果所有码字都是等可能的，即P(X)是常数，那么公式(1)左边最大，就推导出P(Y&#x2F;X)最大。</li>
<li>P(Y&#x2F;X)：叫做似然函数、信道转移概率。</li>
</ul>
<h3 id="最大似然译码"><a href="#最大似然译码" class="headerlink" title="最大似然译码"></a>最大似然译码</h3><ul>
<li><p>定义：若能在码字集合选择合适的码字X，使得P(Y&#x2F;X)最大，则这种译码规则被称为最大似然译码。</p>
</li>
<li><p>对数似然函数：由于lnx与x是单调关系，故有lnP(Y&#x2F;X)。</p>
</li>
<li><p>对于离散无记忆信道，由于</p>
<p>  $$<br>  P(Y&#x2F;X)&#x3D;\sum_n P(y_i&#x2F;x_i)<br>  $$</p>
<p>  所以</p>
<p>  $$<br>  \ln P(Y&#x2F;X)&#x3D;\sum_n \ln P(y_i&#x2F;x_i)<br>  $$</p>
</li>
<li><p>MLD：对应的译码器称为最大似然译码器。</p>
</li>
<li><p>MLD规则：是最为可行的一种译码规则。</p>
</li>
<li><p>对于DMC和BSC信道是一种最佳译码准则。但是在某些情况下并不是最佳的译码规则，如当发送端不是以等概率发送码字的时候。</p>
</li>
</ul>
<h3 id="BSC信道的最大似然译码"><a href="#BSC信道的最大似然译码" class="headerlink" title="BSC信道的最大似然译码"></a>BSC信道的最大似然译码</h3><p>$$<br>P(y_i&#x2F;x_i)&#x3D;\begin{cases} 1-p&amp;  y_i&#x3D;x_i\p&amp; y_i\neq x_i \end{cases}<br>$$</p>
<p>Y为二元序列，用d(Y, X)表示Y和X之间的距离，即不同位数的个数</p>
<p>$$<br>\ln P(Y&#x2F;X)&#x3D;d(y,X)\ln p+(n-d(Y,X))\ln (1-p) &#x3D;\ d(Y,X)\ln \frac {p}{1-p} +n\ln(1-p)<br>$$</p>
<p>即想要P(Y&#x2F;X)最大，则需要d(Y, X)最小</p>
<p>最小距离译码器：在BSC中，MLD规则变成了选择能使Y和X之间的汉明距离为最小的向量，作为码字X的估计值</p>
<h1 id="数据安全中的数学问题"><a href="#数据安全中的数学问题" class="headerlink" title="数据安全中的数学问题"></a>数据安全中的数学问题</h1><p>语义</p>
<p>语法：01比特</p>
<p>语用</p>
<h2 id="信道编码"><a href="#信道编码" class="headerlink" title="信道编码"></a>信道编码</h2><p>y&#x3D;Ax+b mod  q</p>
<p>分组码</p>
<p>循环码</p>
<p>卷积码</p>
<h2 id="LDPC码"><a href="#LDPC码" class="headerlink" title="LDPC码"></a>LDPC码</h2><p>有低密度的稀疏矩阵，就表示是LDPC码</p>
<h2 id="压缩感知"><a href="#压缩感知" class="headerlink" title="压缩感知"></a>压缩感知</h2><p>y&#x3D;Ax+b</p>
<p>如果x稀疏，A满足一定的条件，通过y A可以找到x</p>
<p>由于A不可逆，无法通过求找到x</p>
<p>现实中的x一般并不稀疏，进过一个变化之后，再一组正交基上可以进行稀疏表示</p>
<h3 id="矩阵A与x维数不匹配"><a href="#矩阵A与x维数不匹配" class="headerlink" title="矩阵A与x维数不匹配"></a>矩阵A与x维数不匹配</h3><p>格密码，编码，压缩感知都有对测量矩阵尺寸多样性的需求</p>
<h3 id="半张量积压缩感知"><a href="#半张量积压缩感知" class="headerlink" title="半张量积压缩感知"></a>半张量积压缩感知</h3><p>$$<br>y&#x3D;a\ltimes x+b<br>$$</p>
<h1 id="第二章-信息论基础与信源编码理论"><a href="#第二章-信息论基础与信源编码理论" class="headerlink" title="第二章 信息论基础与信源编码理论"></a>第二章 信息论基础与信源编码理论</h1><p>信息的定义：信息是事物运动状态或存在方式不确定性的描述</p>
<h2 id="自信息"><a href="#自信息" class="headerlink" title="自信息"></a>自信息</h2><p>定义：考虑离散随机变量X，其样本空间为{xi, i&#x3D;1, 2,…,n}，则事件X&#x3D;xi的自信息的定义为</p>
<p>$$<br>I(x_i)&#x3D;log(\frac{1}{P(x_i)})&#x3D;-logP(x_i)<br>$$</p>
<blockquote>
<p>自信息的单位由对数的底来决定，以2为底，单位就是比特(bits)，以e为底就是奈特(nats)。自信息非负。</p>
</blockquote>
<h2 id="互信息"><a href="#互信息" class="headerlink" title="互信息"></a>互信息</h2><p>定义： xi和yi之间的互信息定义为</p>
<p>$$<br>I(x_i;y_i)&#x3D;log(\frac{P(x_i|y_i)}{P(x_i)})<br>$$</p>
<p>互信息的性质：</p>
<p>性质1：互易性 I(xi;yi)&#x3D; I(yi;xi)。<br>性质2：当xi和yi是统计上独立的，即P(xi|yi)&#x3D; P(xi)，则I(xi;yi)&#x3D;0。<br>性质3：互信息量可以是正的，也可以是负的。</p>
<blockquote>
<p>思考题：计算二元对称(BSC)信道的互信息量?</p>
<p>计算二元对称信道（Binary Symmetric Channel，BSC）的互信息量（Mutual Information）可以使用以下的LaTeX公式表示：</p>
<p><em>I</em>(<em>X</em>;<em>Y</em>)&#x3D;<em>H</em>(<em>Y</em>)−<em>H</em>(<em>Y</em>∣<em>X</em>)</p>
<p>其中：</p>
<ul>
<li><p><em>I</em>(<em>X</em>;<em>Y</em>) 表示信道输入 <em>X</em> 和输出 <em>Y</em> 之间的互信息量。</p>
</li>
<li><p><em>H</em>(<em>Y</em>) 表示接收端输出 <em>Y</em> 的熵（Entropy），可以用以下公式计算：</p>
<p>  $$<br>  H(Y) &#x3D; -\sum_{i&#x3D;1}^{2} P(Y&#x3D;y_i) \cdot \log_2(P(Y&#x3D;y_i))<br>  $$</p>
</li>
</ul>
<p>这里的 <em>y</em>1 和 <em>y</em>2 分别表示接收到的0和1的可能性，<em>P</em>(<em>Y</em>&#x3D;<em>yi</em>) 是接收到符号 <em>yi</em> 的概率。</p>
<ul>
<li><p><em>H</em>(<em>Y</em>∣<em>X</em>) 表示在已知输入 <em>X</em> 的条件下，接收端输出 <em>Y</em> 的条件熵（Conditional Entropy），可以用以下公式计算：</p>
<p>  $$<br>  H(Y|X) &#x3D; -\sum_{i&#x3D;1}^{2} \sum_{j&#x3D;1}^{2} P(X&#x3D;x_j, Y&#x3D;y_i) \cdot \log_2\left(\frac{P(X&#x3D;x_j, Y&#x3D;y_i)}{P(X&#x3D;x_j)}\right)<br>  $$</p>
</li>
</ul>
<p>对于二元对称信道（BSC），错误概率 p 相等，即 P(Y&#x3D;0∣X&#x3D;1)&#x3D;P(Y&#x3D;1∣X&#x3D;0)&#x3D;p，而 P(Y&#x3D;0∣X&#x3D;0)&#x3D;P(Y&#x3D;1∣X&#x3D;1)&#x3D;1−p。因此，可以使用这些概率值来计算上述公式中的各项。</p>
</blockquote>
<h2 id="平均自信息量-信息熵"><a href="#平均自信息量-信息熵" class="headerlink" title="平均自信息量(信息熵)"></a>平均自信息量(信息熵)</h2><p>定义：离散随机变量X的平均自信息定义为，其样本空间为{xi, i&#x3D;1, 2,…,n}，则事件X&#x3D;xi的平均自信息量的定义为</p>
<p>$$<br>H(X)&#x3D;E{log(\frac{1}{P(x_i)})}&#x3D;\sum^n_{i&#x3D;1}P(x_i)I(x_i)&#x3D;-\sum^n_{i&#x3D;1}P(x-_i)logP(x_i)<br>$$</p>
<p>其中H(X)表示每个信源符号的平均信息量。</p>
<h2 id="平均条件自信息量-条件熵"><a href="#平均条件自信息量-条件熵" class="headerlink" title="平均条件自信息量(条件熵)"></a>平均条件自信息量(条件熵)</h2><p>定义：平均条件自信息H(X|Y)定义为</p>
<p>$$<br>H(X|Y)&#x3D;\sum^n_{i&#x3D;1}\sum^m_{j&#x3D;1}P(x_iy_i)log\frac{1}{P(x_i|y_i)}<br>$$</p>
<blockquote>
<p>思考题：计算二元对称(BSC)信道的平均条件自信息量(条件熵)?</p>
</blockquote>
<h2 id="无失真信源编码"><a href="#无失真信源编码" class="headerlink" title="无失真信源编码"></a>无失真信源编码</h2><h3 id="等长信源编码定理"><a href="#等长信源编码定理" class="headerlink" title="等长信源编码定理"></a>等长信源编码定理</h3><p>定理: 一个熵为H(X)的离散无记忆信源，若对信源长为N的符号序列进行等长编码，设码字是从r个字母的码符号集合中，选取l个码元组成。对于任意的ε&gt;0，只要满足</p>
<p>$$<br>\frac{l}{N}\geq \frac{H(X)+\varepsilon}{log\gamma}<br>$$</p>
<p>则当N足够大时，可实现几乎无失真编码，即译码错误概率可为任意小。</p>
<h3 id="变长码"><a href="#变长码" class="headerlink" title="变长码"></a>变长码</h3><table>
<thead>
<tr>
<th>字母</th>
<th>码字</th>
<th>字母</th>
<th>码字</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>0</td>
<td>E</td>
<td>10</td>
</tr>
<tr>
<td>B</td>
<td>1</td>
<td>F</td>
<td>11</td>
</tr>
<tr>
<td>C</td>
<td>00</td>
<td>G</td>
<td>000</td>
</tr>
<tr>
<td>D</td>
<td>01</td>
<td>H</td>
<td>111</td>
</tr>
</tbody></table>
<p>若对字母序列ABADCAB进行编码，则得到0 1 0 01 00 0 1<br>译码不唯一：可能被译为DADAAAB(01 0 01 0 0 0 1)<br>或者AEDGB(0 10 01 000 1)</p>
<blockquote>
<p>注：变长码必须是惟一可译码，才能实现无失真编码。</p>
</blockquote>
<h3 id="变长信源编码定理"><a href="#变长信源编码定理" class="headerlink" title="变长信源编码定理"></a>变长信源编码定理</h3><p>定理:一个熵为H(X)的离散无记忆信源，并有r个码元的码符号集合，总可以找到一种无失真编码方法，构成惟一可译码，使其平均码长满足</p>
<p>$$<br>\frac{H(X)}{logr}\leq\bar{L}&lt;\frac{H(X)}{logr}+1<br>$$</p>
<p>则当N足够大时，可实现几乎无失真编码，即译码错误概率可为任意小。</p>
<h3 id="信道的信息传输率"><a href="#信道的信息传输率" class="headerlink" title="信道的信息传输率"></a>信道的信息传输率</h3><p>变长信源编码定理中的极限值H(X)&#x2F;logr同等长信源编码定理中的极限值是一致的。</p>
<p>定义：信道的信息传输率(码率)为</p>
<p>$$<br>R&#x3D;\frac{H(X)}{logr}<br>$$</p>
<p>得到编码后信道的信息传输率为</p>
<p>$$<br>R\le\bar{L}<br>$$</p>
<h2 id="经典的信源编码方法"><a href="#经典的信源编码方法" class="headerlink" title="经典的信源编码方法"></a>经典的信源编码方法</h2><h3 id="信源编码—霍夫曼-Huffman-编码"><a href="#信源编码—霍夫曼-Huffman-编码" class="headerlink" title="信源编码—霍夫曼(Huffman)编码"></a>信源编码—霍夫曼(Huffman)编码</h3><p>一个离散无记忆信源有7个符号xi, i&#x3D;1,..,7，P(X&#x3D;x1)&#x3D;0.37, P(X&#x3D;x2)&#x3D;0.33, P(X&#x3D;x3)&#x3D;0.16, P(X&#x3D;x4)&#x3D;0.07, P(X&#x3D;x5)&#x3D;0.04, P(X&#x3D;x6)&#x3D;0.02, P(X&#x3D;x7)&#x3D;0.01, 将7个信源符号按照概率递减的顺序进行排序，构造如图8所示的霍夫曼树。<br>按照编码路径从后往前返回，就得到对应的码字x7&#x3D;111111, x6&#x3D;111110, x5&#x3D;11110, x4&#x3D;1110，x3&#x3D;110, x2&#x3D;10，x1&#x3D;0。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%202.png" alt="Untitled"></p>
<blockquote>
<p>思考题：如何编程序实现霍夫曼编码?</p>
<ol>
<li>构建霍夫曼树：<ul>
<li>统计输入数据中每个字符的频率。</li>
<li>创建叶子节点，每个叶子节点代表一个字符，并将频率作为节点的权重。</li>
<li>将叶子节点放入一个优先队列（最小堆）中，以便频率最低的节点位于队列的前面。</li>
<li>重复以下步骤，直到只剩下一个节点为止：<ul>
<li>从队列中弹出两个频率最低的节点。</li>
<li>创建一个新的节点，其权重等于这两个节点的权重之和。</li>
<li>将新节点插入队列中。</li>
</ul>
</li>
<li>最后队列中剩下的节点就构成了霍夫曼树。</li>
</ul>
</li>
<li>生成霍夫曼编码：<ul>
<li>遍历霍夫曼树，从根节点开始，分别向左和向右遍历树的边。</li>
<li>每次向左移动时，将编码中添加一个 0，每次向右移动时，将编码中添加一个 1。</li>
<li>当到达叶子节点时，您就得到了字符的霍夫曼编码。</li>
</ul>
</li>
<li>构建编码表：<ul>
<li>将每个字符与其对应的霍夫曼编码存储在一个编码表中，以便在编码和解码过程中使用。</li>
</ul>
</li>
<li>编码和解码：<ul>
<li>使用编码表将输入数据编码为霍夫曼编码。</li>
<li>使用霍夫曼树将霍夫曼编码解码为原始数据。</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="游程编码"><a href="#游程编码" class="headerlink" title="游程编码"></a>游程编码</h3><p>游程：信源输出的字符序列中，各种字符连续的重复出现的字符串的个数。<br>游程编码：就是将这种字符序列映射成字符串的长度和字符串的位置的标志序列。<br>游程编码常用作图形文件的编码方式，如.bmp和.tiff。</p>
<blockquote>
<p>例子：考虑比特序列11111111111111100000000000000000001111，可以被表示成(15,1),(19,0),(4,1)，字符最长的重复的数目为19，因此，把该比特序列编码为(01111,1), (10011,0), (00100,1)，此时压缩率为18:38&#x3D;1:2.11。</p>
</blockquote>
<blockquote>
<p>思考题：如何编程序实现游程编码?</p>
<ol>
<li><strong>统计字符频率</strong>：<ul>
<li>首先，需要扫描输入文本并统计每个字符的频率。这是构建霍夫曼树的基础，因为频率高的字符将具有较短的编码。</li>
</ul>
</li>
<li><strong>构建霍夫曼树</strong>：<ul>
<li>基于字符频率，构建霍夫曼树。通常，使用一个优先队列（最小堆）来管理节点，每个节点代表一个字符及其频率。在构建过程中，反复合并两个最小频率的节点，创建一个新的节点，并将其插入回队列，直到队列中只剩下一个节点，即根节点，表示整个霍夫曼树已构建完成。</li>
</ul>
</li>
<li><strong>生成霍夫曼编码</strong>：<ul>
<li>遍历霍夫曼树，从根节点开始，每当沿着左子树移动时添加0，沿着右子树移动时添加1。当到达叶子节点时，记录下当前路径所对应的字符的编码。</li>
</ul>
</li>
<li><strong>构建编码表</strong>：<ul>
<li>将每个字符和它对应的霍夫曼编码存储在一个编码表中，以便在编码和解码过程中使用。</li>
</ul>
</li>
<li><strong>编码文本</strong>：<ul>
<li>使用编码表将输入文本中的字符编码为霍夫曼编码。</li>
</ul>
</li>
<li><strong>解码文本</strong>：<ul>
<li>使用霍夫曼树将霍夫曼编码解码为原始文本。</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="LZ-Lemple-Ziv-编码"><a href="#LZ-Lemple-Ziv-编码" class="headerlink" title="LZ(Lemple-Ziv)编码"></a>LZ(Lemple-Ziv)编码</h3><p>分段的方法：1)游程先取第一个符号作为第一段，然后再继续分段；2)若有出现与前面符号一样时，就再添加紧跟后面的一个符号一起组成一段；3)尽可能取最少个连着的符号并保证各段都不相同；4)以此类推，直至信源符号序列结束。<br>编码方法：首先去掉最后一个符号，然后看剩下的字符串在字典中的排序，这个排序值转换成二进制数作为指针X的值，最后一个信源符号作为码字第2项d的值，即得到码字(X, d)。</p>
<blockquote>
<p>例子：考虑比特序列101011011010101011，根据上面的编码方法可把该比特序列分段为1, 0, 10, 11, 01, 101, 010, 1011。<br>码字为：(000,1),( 000,0), (001,0), (001,1), (010,1), (011,1), (101,0), (110,1)。</p>
</blockquote>
<blockquote>
<p>思考题：如何编程序实现LZ编码?</p>
<ol>
<li><strong>初始化字典</strong>：创建一个空的字典，其中包含所有可能的单个字符作为初始词条。</li>
<li><strong>扫描输入数据</strong>：从左到右扫描输入数据，逐步构建编码输出。开始时，当前扫描位置指向输入数据的第一个字符。</li>
<li><strong>查找最长匹配</strong>：在字典中查找与当前扫描位置匹配的最长字符串（前缀），这个字符串必须存在于字典中。如果找到匹配，就将扫描位置移动到匹配字符串的末尾，否则将当前字符作为一个字典词条。</li>
<li><strong>输出编码</strong>：将匹配字符串的索引（或编码）输出到结果中，并将匹配字符串后的字符作为下一个字典词条的一部分。</li>
<li><strong>更新字典</strong>：将新的字典词条添加到字典中，以便下次匹配时使用。</li>
<li><strong>重复步骤3到步骤5</strong>，直到扫描完成整个输入数据。</li>
</ol>
</blockquote>
<h2 id="纠错码的理论基础"><a href="#纠错码的理论基础" class="headerlink" title="纠错码的理论基础"></a>纠错码的理论基础</h2><h3 id="信道容量"><a href="#信道容量" class="headerlink" title="信道容量"></a>信道容量</h3><p>定义：考虑某种概率分布为P(x)的离散无记忆信源，对于一个固定的信道，信道容量被定义为最大的平均互信息，此时传输每个符号平均获得的信息量最大，即对于每个固定的信道可以达到最大的信息传输率，即</p>
<p>$$<br>C&#x3D;\max_{P(X_j)}I(X;Y)&#x3D;\max_{P(X_J)}\sum^{q-1}<em>{j&#x3D;1}\sum^{r-1}</em>{i&#x3D;o}P(x_j)P(y_i|x_j)\log \frac {P(y_i|x_j)}{P(y_i)}<br>$$</p>
<p>其约束条件为</p>
<p>$$<br>P(x_j)\ge0\ ,\sum^{q-1}_{j&#x3D;0}P(x_j)&#x3D;1<br>$$</p>
<blockquote>
<p>思考题：如何计算给定某种信道的信道容量?</p>
<ol>
<li><p><strong>确定信道模型</strong>：首先，需要明确定义所使用的信道模型。不同的信道（例如二进制对称信道、高斯信道、无线信道等）具有不同的数学表示和特性。你需要了解信道的概率分布和噪声性质。</p>
</li>
<li><p><strong>计算信道容量</strong>：使用香农-哈特利定理来计算信道容量。该定理的公式如下：</p>
<p> $$<br> C+B·\log_2(1+SNR)<br> $$</p>
<p> 其中，</p>
<ul>
<li><em>C</em> 表示信道容量（比特每秒，bps）。</li>
<li><em>B</em> 表示信道的带宽（赫兹，Hz），它表示信号传输的频率范围。</li>
<li>SNRSNR 表示信噪比，定义为信号功率与噪声功率之比。通常以对数（以分贝为单位）表示。</li>
</ul>
</li>
<li><p><strong>SNR计算</strong>：计算信噪比（SNR）是信道容量计算的关键。SNR的计算方式取决于信道的特性。例如，在高斯信道中，SNR通常表示为信号功率与噪声功率之比。</p>
</li>
<li><p><strong>确定带宽</strong>：带宽（B）是信号传输的频率范围，通常以赫兹（Hz）表示。带宽的选择与具体的通信系统和应用有关。</p>
</li>
</ol>
</blockquote>
<h3 id="纠错编码的理论基础"><a href="#纠错编码的理论基础" class="headerlink" title="纠错编码的理论基础"></a>纠错编码的理论基础</h3><p>香农编码定理：如果系统的传输率小于信道容量，那么适当选择编码技术就能实现可靠通信，即可以将差错率减小到任意小的程度。</p>
<h3 id="信道编码定理"><a href="#信道编码定理" class="headerlink" title="信道编码定理"></a>信道编码定理</h3><p>定理：假设DMS有信源字符集X，熵为每信源符号H(X)比特，而且信源每Ts秒产生一个符号，那么信源的平均信息率为每秒H(X)&#x2F;Ts比特，假设信道可以每Tc秒使用一次，而信道容量为每次信道使用C比特，那么每单位时间的信道容量为每秒钟C&#x2F;Tc比特。如果H(X)&#x2F;Ts≤ C&#x2F;Tc，那么就存在编码方案使得在有噪声的信道上传输的信源消息，能够以任意小的错误概率进行恢复。</p>
<h1 id="第三章-线性分组"><a href="#第三章-线性分组" class="headerlink" title="第三章 线性分组"></a>第三章 线性分组</h1><h2 id="分组码"><a href="#分组码" class="headerlink" title="分组码"></a>分组码</h2><blockquote>
<p><strong>分组码：将消息序列分组进行编码</strong></p>
</blockquote>
<p>每组消息u有k个信息位，共有$2^k$个不同的消息</p>
<blockquote>
<p><strong>码字：编码器按照一定规则将每个输入消息u变换成二元n重v，n&gt;k，这个二元n重v称作消息u的码字或码矢。</strong></p>
</blockquote>
<p>所有$2^k$个码字组成的集合称作是分组码</p>
<blockquote>
<p>为什么在分组码中码字的个数是$2^k$个?<br>当编码字的位数是$2^k$时，这些码字可以更容易地排列成矩阵，例如二维数组，以便进行操作和计算。这种排列方式在编码和解码时通常更加高效。</p>
</blockquote>
<h2 id="线性分组码"><a href="#线性分组码" class="headerlink" title="线性分组码"></a>线性分组码</h2><p>线性分组码即具有线性性质的分组码</p>
<p><strong>定义：长为n，有$2^k$个码字的分组码，当且仅当其$2^k$个码字构成GF(2)上所有n重矢量空间的一个k维子空间时，称作线性(n, k)分组码。</strong></p>
<h2 id="生成矩阵"><a href="#生成矩阵" class="headerlink" title="生成矩阵"></a>生成矩阵</h2><p>∵ 线性(n,k)分组码C是一个k维子空间<br>∴ 在码C中能找到k个线性独立的码字$g_0, g_1,…, g_{k-1}，$使得C中的每个码字v都是这k个码字的一种线性组合，即 $v&#x3D;u_0g_0+u_1g_1+…+u_{k-1}g_{k-1}$</p>
<blockquote>
<p>生成矩阵：将k个线性独立的码字作为行，得到k×n阶矩阵</p>
<p>$$<br>G&#x3D;<br>\begin{pmatrix}<br>g_0\g_1\ \vdots \g_{k-1}<br>\end{pmatrix}&#x3D;\begin{pmatrix}<br>g_{00}&amp;g_{01}&amp;\dots&amp;g_{0n-1}\g_{10}&amp;g_{11}&amp;\dots&amp;g_{1n-1}\ \vdots \g_{(k-1)0}&amp;g_{(k-1)1}&amp;\dots&amp;g_{(k-1)n-1}<br>\end{pmatrix}<br>$$</p>
</blockquote>
<h2 id="一致校验-监督-矩阵"><a href="#一致校验-监督-矩阵" class="headerlink" title="一致校验(监督)矩阵"></a>一致校验(监督)矩阵</h2><p>∵ (n,k)线性码有r(r&#x3D;n-k)个校验码元<br>∴ 必须有r个独立的线性方程</p>
<p>对于任一码字c, 有cHT&#x3D;0</p>
<p>$∵c&#x3D;iG\<br>∴ GH^T&#x3D;0$</p>
<blockquote>
<p>校验矩阵：该矩阵由r行n列组成，即</p>
<p>$$<br>H&#x3D;\begin{pmatrix}<br>h_{1,n}&amp;h_{1,n-1}&amp;\dots&amp;h_{1,1}\h_{2,n}&amp;h_{2,n-1}&amp;\dots&amp;h_{2,1}\ \vdots \h_{r,n}&amp;h_{r,n-1}&amp;\dots&amp;h_{r,1}<br>\end{pmatrix}<br>$$</p>
</blockquote>
<p>一致校验矩阵的标准形式：经过初等变换，得到$H&#x3D;[Q I_r]$</p>
<h2 id="线性系统分组码"><a href="#线性系统分组码" class="headerlink" title="线性系统分组码"></a>线性系统分组码</h2><p><strong>定义：若(n,k)线性分组码C的生成矩阵形如$G&#x3D;[P I_k]$或$G&#x3D;[I_k P])$，此时称C为线性系统分组码。</strong></p>
<p>$$<br>G&#x3D;<br>\begin{pmatrix}<br>g_0\g_1\ \vdots \g_{k-1}<br>\end{pmatrix}&#x3D;[P \ I_k]&#x3D;\begin{pmatrix}<br>p_{0,0}&amp;p_{0,1}&amp;\dots&amp;p_{0,n-k-1}&amp; \vdots&amp;1&amp;0&amp;0&amp;\dots&amp;0 \p_{1,0}&amp;p_{1,1}&amp;\dots&amp;p_{1,n-k-1}&amp; \vdots&amp;0&amp;1&amp;0&amp;\dots&amp;0 \ p_{2,0}&amp;p_{2,1}&amp;\dots&amp;p_{2,n-k-1}&amp; \vdots&amp;0&amp;0&amp;1&amp;\dots&amp;0\ \vdots\ p_{k-1,0}&amp;p_{k-1,1}&amp;\dots&amp;p_{k-1,n-k-1}&amp; \vdots&amp;0&amp;0&amp;0&amp;\dots&amp;1<br>\end{pmatrix}<br>$$</p>
<p>此时，如果用任意消息u同G做乘法，就会发现每个码字都可以被分成两个部分：消息部分和冗余部分</p>
<h2 id="一致校验方程"><a href="#一致校验方程" class="headerlink" title="一致校验方程"></a>一致校验方程</h2><p>对于线性系统分组码</p>
<p>$$<br>v&#x3D;u·G&#x3D;(u_0,u_1,\dots,u_{k-1})·\begin{pmatrix}<br>p_{0,0}&amp;p_{0,1}&amp;\dots&amp;p_{0,n-k-1}&amp; \vdots&amp;1&amp;0&amp;0&amp;\dots&amp;0 \p_{1,0}&amp;p_{1,1}&amp;\dots&amp;p_{1,n-k-1}&amp; \vdots&amp;0&amp;1&amp;0&amp;\dots&amp;0 \ p_{2,0}&amp;p_{2,1}&amp;\dots&amp;p_{2,n-k-1}&amp; \vdots&amp;0&amp;0&amp;1&amp;\dots&amp;0\ \vdots\ p_{k-1,0}&amp;p_{k-1,1}&amp;\dots&amp;p_{k-1,n-k-1}&amp; \vdots&amp;0&amp;0&amp;0&amp;\dots&amp;1<br>\end{pmatrix}<br>$$</p>
<p>对应于消息$u&#x3D;(u_0,u_1,\dots,u_{k-1})$的码字是$v&#x3D;(v_0,v_1,\dots,v_{n-1})&#x3D;u·G$，即$v_{n-k+i}&#x3D;u_i , 0≤i≤k-1$</p>
<p>$v_j&#x3D;u_0p_{0j}+u_1p{1j}+…+u_{k-1}p_{k-1j}, 0≤j≤n-k-1$</p>
<p>上面两个式子正好反映系统的组成特性，最后这n-k个方程称为码C的一致校验方程。</p>
<h2 id="对偶码"><a href="#对偶码" class="headerlink" title="对偶码"></a>对偶码</h2><p><strong>定义：令S是$V_n$的k维子空间，并令$S_d$是$V_n$中这样矢量的集合，即对S中的任意u和$S_d$中的任意v，有u·v&#x3D;0，则$S_d$也是$V_n$的一个子空间，它称为S的对偶空间或零化空间。</strong></p>
<p>定理：令S是$V_n$中的一个k维子空间，则S的对偶空间的	维数是n-k。</p>
<p>对偶码：以H为生成矩阵得到的(n,n-k)码称为码C的对偶码,记为$C_d$。</p>
<h2 id="系统码的一致校验矩阵"><a href="#系统码的一致校验矩阵" class="headerlink" title="系统码的一致校验矩阵"></a>系统码的一致校验矩阵</h2><p>若码C的生成矩阵具有系统形式$G&#x3D;[P I_k]$或$[I_k P]$，则其一致校验矩阵形如H&#x3D;$[I_{n-k} P^T]$或$H&#x3D;[P^T I_{n-k}]$。</p>
<h2 id="伴随式"><a href="#伴随式" class="headerlink" title="伴随式"></a>伴随式</h2><p>伴随式：当接收到r后，译码器计算下述n-k重$S&#x3D;r·H……T &#x3D;(s_0, s_1,…, s_{n-k-1})$则称S为r的伴随式。</p>
<p>当且仅当是一个码字(即无传输错误)时有S&#x3D;0，否则错误矢量本身就是一个码字，此时出现了不可检错误。只要码C设计适当，就几乎不会出现不可检错误。</p>
<h2 id="伴随式纠错"><a href="#伴随式纠错" class="headerlink" title="伴随式纠错"></a>伴随式纠错</h2><p>根据伴随式定义， 我们有$S&#x3D;r·H^T &#x3D;(v+e)·H^T&#x3D;v·H^T+e·H^T&#x3D;e·H^T$</p>
<p>可以看出，伴随式是错误图样的组合，即伴随式包含了一定程度的错误图样信息，因而可以用来纠错——伴随式纠错。</p>
<blockquote>
<p>考虑某(7,3)码，该码的生成矩阵G和H为</p>
<p>$$<br>G&#x3D;\begin{pmatrix}   0&amp;1&amp;1&amp;1&amp;1&amp;0&amp;0\     1&amp;0&amp;1&amp;1&amp;0&amp;1&amp;0\      1&amp;1&amp;1&amp;0&amp;0&amp;0&amp;1\end{pmatrix}, H&#x3D;\begin{pmatrix}   1&amp;0&amp;0&amp;0&amp;0&amp;1&amp;1\     0&amp;1&amp;0&amp;0&amp;1&amp;0&amp;1\      0&amp;0&amp;0&amp;1&amp;1&amp;1&amp;0\       0&amp;0&amp;0&amp;1&amp;1&amp;1&amp;0\end{pmatrix}<br>$$</p>
<p>令u&#x3D;(101),v&#x3D;(1001101)是发送码字，r&#x3D;(0001101)是接收矢量，收到r后首先计算S&#x3D;r·HT &#x3D;(1000)≠0，由伴随式和错误图样的关系方程有：1&#x3D;e0+e5+e6, 0&#x3D;e1+e4+e6, 0&#x3D;e2+e4+e5+e6, 0&#x3D;e3+e4+e5, 则得到23&#x3D;8个错误图样(1000000), (1010111), (1101011), … …, 其中(1000000)是非零分量最少的图样，考虑BSC信道，则(1000000)是最为可能的错误矢量，因而确定v&#x3D;r+e&#x3D;(0001101)+ (1000000)&#x3D;(1001101)</p>
</blockquote>
<h2 id="汉明重量"><a href="#汉明重量" class="headerlink" title="汉明重量"></a>汉明重量</h2><p><strong>汉明重量：令v&#x3D;(v0, v1,…, vn-1)是二元n重，v的汉明重量w(v) 定义为v中非零分量的个数。</strong></p>
<blockquote>
<p>举例：设有两个码字{0100,1111},则它们的汉明重量为	w(0100)&#x3D;1, w(1111)&#x3D;4</p>
</blockquote>
<p>重量分布：对于码长为n的一个分组码, 不同的码字可能具有 相同的汉明重量, 若记Ai为该码中汉明重量为i的码字个数, 称{A0, A1,…, An}是该码的重量分布。</p>
<h2 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h2><p><strong>定义：令u&#x3D;(u0, u1,…, un-1)和v&#x3D;(v0, v1,…, vn-1)是两个二元n重，	则u和v之间的汉明距离d(u, v)定义为u+v的汉明重量。</strong></p>
<blockquote>
<p>举例：设有两个码字{0100,1111},则它们的汉明距离	d(0100, 1111)&#x3D;3</p>
</blockquote>
<p>汉明距离的性质：</p>
<ol>
<li>非负性，d(u, v)≥0；</li>
<li>d(u, v)&#x3D;0，当且仅当u&#x3D;v的时候；</li>
<li>对称性： d(u, v) &#x3D;d(v, u) ；</li>
<li>三角不等式： d(u, v)+d(v, w)≥d(u, w)</li>
</ol>
<h2 id="距离分布"><a href="#距离分布" class="headerlink" title="距离分布"></a>距离分布</h2><p><strong>定义：在(n,k)码中，任意两个码字之间都有一个汉明距离，	两组不同码字之间可能有相同的汉明距离。若记	Di(0≤i≤n)为距离为i的码字组数，那么称{D0, D1,…,Dn}为此分组码的距离分布，并且称能够使Di≠0的那个最小整数i为该码的最小码间距离。</strong></p>
<p>特别的，对于线性分组码，有如下定理：(n,k)线性码的最小码间距离等于非零码字的最	小汉明重量。</p>
<blockquote>
<p><strong>定理：设(n,k)线性码C的最小码间距离为d，则1)若	d≥t+1，则码C能检测t个随机错误；2)若d≥2t+1	，则码C能纠正t个随机错误；3)若d≥t+e+1，则	码C能纠正t (t≤e)个随机错误，同时还能检测e个	随机错误。</strong></p>
</blockquote>
<p>定理：(n,k,d*)线性码C的最小码间距离d<strong>满足d</strong>≤n-k+1</p>
<p><strong>定义：若(n,k)线性码的最小码间距离d满足d&#x3D;n-k+1，那么称	该码为最大距离可分码，简称MDS码。</strong></p>
<h2 id="标准阵"><a href="#标准阵" class="headerlink" title="标准阵"></a>标准阵</h2><p>令(n,k)线性码C的所有码字是接收矢量r是一个n重，则按如下的方式构造码C的标准阵：</p>
<p>$$<br>\begin{bmatrix}   v_1&#x3D;0&amp;v_2&amp;\dots&amp;v_i&amp;\dots&amp;v_{2^k}\     e_2&amp;e_2+v_2&amp;\dots&amp;e_2+v_i&amp;\dots&amp;e_2+v_{2^k}\      e_3&amp;e_3+v_2&amp;\dots&amp;e_3+v_i&amp;\dots&amp;e_3+v_{2^k}\   \vdots  \ e_{2^{n+k}}&amp;e_{2^{n+k}}+v_2&amp;\dots&amp;e_{2^{n+k}}+v_i&amp;\dots&amp;e_{2^{n+k}}+v_{2^k}\ \end{bmatrix}<br>$$</p>
<p>性质1：同一行中任意两个n重之和为一个码字。<br>性质2：在标准阵中，同一行没有两个n重是相同的，每个n重在且仅在一行中出现。</p>
<blockquote>
<p>性质2的证明：</p>
</blockquote>
<ol>
<li>假设第l行有2个n重是相同的，如对i≠j有$e_l+v_i&#x3D;e_l+v_j$，即$v_i&#x3D;v_j$，这与标准阵的构造相矛盾，故性质2的第一句话得证。</li>
<li>首先由定义知每个n重至少出现一次，假设一个n重在第l行和第m行(l&lt;m)都出现，则必存在i，使得该n重等于$e_l+v_i$，且存在j，使得该n重等于$e_m+v_j$，即有$e_m&#x3D;e_l+(v_i+v_j)&#x3D;e_l+v_s$，这意味着$e_m$在第l行，这与标准阵的构造定义相矛盾。<blockquote>
</blockquote>
</li>
</ol>
<h2 id="陪集"><a href="#陪集" class="headerlink" title="陪集"></a>陪集</h2><p>定义：标准阵中共有$2_{n-k}$行，它们称为码C的陪集。<br>陪集首：每个陪集中的第一个n重$e_i$称为陪集首。陪集中的任 何一个元素都可以作为陪集首，需要做置换操作。</p>
<p>对于一个码字$v_i$, 如果信道造成的错误图样是陪集首, 则接收矢量r在陪集中, 此时, 可以将接收矢量正确的译码为$v_i$; 否则, 若信道造成的错误图样不是陪集首, 则会造成错误译码。</p>
<blockquote>
<p>定理：陪集首是可纠正的错误图样，共有2n-k个可纠正的错误图样。</p>
</blockquote>
<h2 id="基于标准阵的译码方法"><a href="#基于标准阵的译码方法" class="headerlink" title="基于标准阵的译码方法"></a>基于标准阵的译码方法</h2><p>方法：如果接收矢量r落在标准阵中的第i行第j列，那么就将r	译码为vj，同时错误图样为ei，即$r&#x3D;e_i+v_j$。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%203.png" alt="Untitled"></p>
<p>缺点：当所考虑的码C的n和k的值都很大的时候，标准阵列的长度就变得非常的巨大，此时，用标准阵来译码就变得不实用了。</p>
<h2 id="最小距离译码方法"><a href="#最小距离译码方法" class="headerlink" title="最小距离译码方法"></a>最小距离译码方法</h2><p>方法：对BSC信道，为了使译码错误概率最小，可以选择汉	明重量最小的n重做为陪集首，即将接收矢量r译码为	与r的汉明距离最小的那个码字。</p>
<blockquote>
<p>举例：考虑码C&#x3D;{00000,01010,10101,11111}，<br>该码的最小距离是2。<br>如果传输的码字是11111，接收的矢量是11110，那么，<br>d(11110, 00000)&#x3D;4, d(11110, 01010)&#x3D;2,<br>d(11110, 10101)&#x3D;3, d(11110, 11111)&#x3D;1。<br>用最小距离译码方法可以得出传输的码字就是11111这	样的结论。</p>
</blockquote>
<blockquote>
<p>思考题：有办法来给标准阵降阶么?<br>结合前面计算伴随式的例子，可以知道伴随式比标准阵的长度短很多。因此，可以用伴随式译码来代替标准阵译码方法。</p>
</blockquote>
<h2 id="伴随式译码"><a href="#伴随式译码" class="headerlink" title="伴随式译码"></a>伴随式译码</h2><p>定理：一个陪集的所有$2^k$个n重有同样的伴随式。不同陪集的	伴随式不同。</p>
<p>证明：如果x,y属于同一个陪集，那么</p>
<p>$$<br>\Leftrightarrow x+C&#x3D;y+C\ \Leftrightarrow x-y \in C\ \Leftrightarrow(x-y)H^T&#x3D;0\ \Leftrightarrow xH^T&#x3D;yH^T\ \Leftrightarrow S(x)&#x3D;S(y)<br>$$</p>
<p>伴随式译码举例:</p>
<p>举例：考虑码C&#x3D;{0000,1011,0101,1110}，对应的标准阵就是</p>
<p>$$<br>\begin{matrix}   0000&amp;1011&amp;0101&amp;1110&amp;00\ 1000&amp;0011&amp;1101&amp;0110&amp;11\ 0100&amp;1111&amp;0001&amp;1010&amp;01\ 0010&amp;1001&amp;0111&amp;1100&amp;10\ 陪集首&amp;&amp;&amp;&amp;伴随式\end{matrix}<br>$$</p>
<p>如果接收矢量是v&#x3D;(1101)，先通过公式$S&#x3D;vH^T$求出伴随式(11)，确定对应的陪集首(1000)，这就是错误向量e。然后根据e+v&#x3D;(1000)+(1101)求出传输的码字为(0101)</p>
<h2 id="完备码"><a href="#完备码" class="headerlink" title="完备码"></a>完备码</h2><p>定义：一个能达到汉明界的码成为完备码，满足</p>
<p>$$<br>M\begin{Bmatrix}\begin{pmatrix}n\0  \end{pmatrix}+ \begin{pmatrix}n\1  \end{pmatrix}(q-1)+ \begin{pmatrix}n\2  \end{pmatrix}(q-1)^2+ \dots+\begin{pmatrix}n\t  \end{pmatrix}(q-1)^t \end{Bmatrix} &#x3D;q^n<br>$$</p>
<p>其中, M为码字数目, q是q元, n是码长, t是纠错能力</p>
<p>特殊的, 对于二元完备码, 满足$2^{n-k}&#x3D;\sum^{t}_{i&#x3D;0}\begin{pmatrix}n\i  \end{pmatrix}$</p>
<h2 id="汉明码"><a href="#汉明码" class="headerlink" title="汉明码"></a>汉明码</h2><p>定理：q元汉明码Ham(r,q)是参数为(n,k,d)的线性码，其中,	$r&#x3D;n-k, n&#x3D;(q^r-1)&#x2F;(q-1), k&#x3D;(q^r-1)&#x2F;(q-1)-r, d_{min}&#x3D;3$。</p>
<p>特殊的, 对于二元汉明码, 满足$(n, k)&#x3D;(2^r-1, 2^r-1-r)$。</p>
<blockquote>
<p>构造汉明码的两种方法：</p>
</blockquote>
<ol>
<li>构造H阵的标准形式H&#x3D;[Q Ir], Q是构造Ir后剩下的2r-1-r列任意排列。</li>
<li>H阵的列是按r重表示的二进制数的顺序排列。<blockquote>
</blockquote>
</li>
</ol>
<h1 id="第四章-循环码"><a href="#第四章-循环码" class="headerlink" title="第四章 循环码"></a>第四章 循环码</h1><p>循环移位：将n重$v&#x3D;(v_{n-1}, v_{n-2}, … , v_1, v_0)$的分量循环左移一位, 得到另一个n重$v(1)&#x3D;(v_{n-2}, … , v_1, v_0, v_{n-1})$, 称为v的循环移位。若v的分量循环左移i位, 得到$v(i)&#x3D;(v_{n-i-1}, … , v_1, v_0, v_{n-1}, … , v_{n-i})$。</p>
<p>循环码的定义：一个(n, k)线性码C，若它的每个码字的任何循环移位都仍然是一个码字，则称此码为循环码。</p>
<blockquote>
<p>循环码的优势：具有许多固有的代数结构，可以找到各种实用的译码方法，使用具有反馈的线性移位寄存器可以容易的实现编码和伴随式计算。</p>
</blockquote>
<h2 id="码字多项式"><a href="#码字多项式" class="headerlink" title="码字多项式"></a>码字多项式</h2><p>码字多项式：为研究循环码的代数特性，将码字$v&#x3D;(v_{n-1}, v_{n-2}, … , v_1, v_0)$的各个分量看成是多项式</p>
<p>$$<br>v(x)&#x3D;\sum^{n-1}<em>{i&#x3D;0}v_ix^i&#x3D;v</em>{n-1}x^{n-1}+\dots+v_1x+v_0<br>$$</p>
<p>的系数，此多项式称为v的码字多项式。</p>
<p>对应于码矢v(i)&#x3D;( vn-i-1, … , v1, v0, vn-1, … , vn-i)的码字多项式为$v^{(i)}(x)&#x3D;v_{n-i-1}x^{n-1}+v_{n-i-2}x^{n-2}+…+v_1x^{i+1}+v_0x^i+v_{n-1}x^{i-1}+…+v_{n-i+1}x+v_{n-i}$</p>
<p>码字多项式$v^{(i)}(x)$就是$x^iv^{(0)}(x)&#x2F;(x^n+1)$的余式。</p>
<h2 id="循环码的代数性质"><a href="#循环码的代数性质" class="headerlink" title="循环码的代数性质"></a>循环码的代数性质</h2><blockquote>
<p>定理1：循环码C中次数最低的非零码字多项式是唯一的。</p>
</blockquote>
<p>证明：令$g(x)&#x3D;\sum^r_{i&#x3D;0}g_ix_i,g_r&#x3D;1$是C中次数最低的码字多项式，若g(x)不唯一，则存在另一个码字多项式$g*(x)&#x3D;\sum^r_{i&#x3D;0}g^*_ix_i,g^*_r&#x3D;1$ ，由线性性质可知，g(x)+g*(x)也是一个码字多项式，但它的次数小于r，和前提矛盾，因此，循环码C中次数最低的非零码字多项式是唯一的。证毕。</p>
<blockquote>
<p>定理2：若$g(x)&#x3D;x^r+g_{r-1}x^{r-1}+…+g_1x+g_0$是(n, k)循环码C中次数最低的非零码字多项式, 则必有$g_0&#x3D;1$。</p>
</blockquote>
<p>证明：若$g_0&#x3D;0$，则$g(x)&#x3D;x(x^{r-1}+g_{r-1}x^{r-2}+…+g_2x+g_1)$，将g(x)循环左移n-1位之后，可以得到一个次数更低的码字多项式，其次数为r-1，和前提矛盾，则必有$g_0&#x3D;1$。证毕。<br>结合定理1和定理2，知在(n,k)循环码中，次数最低的非零码字多项式形如$g(x)&#x3D;x^r+g_{r-1}x^{r-1}+…+g_1x+1$。</p>
<p>考虑多项式$g^{(1)}(x)&#x3D;xg(x), g^{(2)}(x)&#x3D;x^2g(x),…，g^{(n-r-1)}(x)&#x3D;x^{n-r-1}g(x)$都是g(x)的循环移位, 它们都是码字多项式, 次数分别为r+1, r+2, …, n-1。<br>根据码字多项式的线性性质可知，它们的任意线性组合<br>$v(x)&#x3D;u_{n-r-1}x^{n-r-1}g(x)+…+u_1xg(x)+u_0g(x)&#x3D;(u_{n-r-1}x^{n-r-1}+…+u_1x+u_0)g(x)$也是C的码字多项式。<br>(n, k)循环码的码字多项式, 次数分别为r, r+1, r+2, … , n-1，次数小于或等于n-1并且是g(x)的倍式的二元多项式共有$2^{n-r}$个, 它们是(n, k)循环码C的所有码字, 因此, 必有k&#x3D;n-r或r&#x3D;n-k。</p>
<blockquote>
<p>定理3：若g(x)是(n, k)循环码C中次数最低的非零码字多项式，一个次数小于或等于n-1的二元多项式f(x)是码字多项式当且仅当f(x)是g(x)的倍式。</p>
</blockquote>
<p>证明：反证法。设f(x)是码字多项式且其次数小于或等于n-1,	假设f(x)&#x3D;a(x)g(x)+b(x), deg(b(x))&lt;r，<br>由线性性质知b(x)&#x3D;f(x)+a(x)g(x)也是一个码字多项式,而deg(b(x))&lt;deg(g(x))，这和前提矛盾，则只能当f(x)是g(x)的倍式的时候，f(x)是码字多项式。证毕。</p>
<h2 id="生成多项式"><a href="#生成多项式" class="headerlink" title="生成多项式"></a>生成多项式</h2><blockquote>
<p>定理1：在(n,k)循环码C中存在且仅存在一个次数为n-k的码字多项式$g(x)&#x3D;x^{n-k}+g_{n-k-1}x^{n-k-1}+…+g_2x^2+g_1x+1$，称为生成多项式，使得每个次数小于或等于n-1的二元多项式是码字多项式当且仅当此多项式是g(x)的倍式。</p>
</blockquote>
<blockquote>
<p>定理2：(n, k)循环码的生成多项式g(x)是$x^n+1$的因式。</p>
</blockquote>
<p>证明：根据：码字多项式$v^{(i)}(x)$就是$x^iv^{(0)}(x)&#x2F;(x^n+1)$的余式。则有$x^kg(x)&#x3D;(x^n+1)+g^{(k)}(x)$，而$g^{(k)}(x)$是g(x)的k次循环移位，也是码字多项式，因此，它是g(x)的倍式。</p>
<blockquote>
<p>定理3：若g(x)是一个n-k次多项式，并且是$x^n+1$的因式，则g(x)生成一个(n, k)循环码。</p>
</blockquote>
<h2 id="循环码的生成矩阵"><a href="#循环码的生成矩阵" class="headerlink" title="循环码的生成矩阵"></a>循环码的生成矩阵</h2><p>考虑以$g(x)&#x3D;\sum^{n-k}_{i&#x3D;0}g_ix^i$为生成矩阵的(n,k)循环码C，由于$g(x), xg(x), … , x^{k-1}g(x)$张成C，将这k个多项式的k个n重做为k×n阶矩阵的行，一般选择前k-1位为0的向量作为g(x)，则得到C的生成矩阵为</p>
<p>$$<br>G(x)&#x3D;\begin{bmatrix} x^{K-1}g(x)\ \dots \xg(x)\g(x) \end{bmatrix}&#x3D;\begin{bmatrix} g_{n-k}&amp;\dots&amp;g_2&amp;g_1&amp;g_0&amp;0&amp;0&amp;0&amp;\dots&amp;0\ 0&amp;g_{n-k}&amp;\dots&amp;g_2&amp;g_1&amp;g_0&amp;0&amp;0&amp;\dots&amp;0\ 0&amp;0&amp;g_{n-k}&amp;\dots&amp;g_2&amp;g_1&amp;g_0&amp;0&amp;\dots&amp;0\ \dots&amp;&amp;&amp;\dots&amp;&amp;&amp;&amp;&amp;&amp;\dots \ 0&amp;0&amp;\dots&amp;0&amp;0&amp;g_{n-k}&amp;\dots&amp;g_2&amp;g_1&amp;g_0\end{bmatrix}<br>$$</p>
<p>其中$g_0&#x3D;g_{n-k}&#x3D;1$</p>
<h2 id="一致校验矩阵"><a href="#一致校验矩阵" class="headerlink" title="一致校验矩阵"></a>一致校验矩阵</h2><p>因为生成多项式g(x)是$x^{n+1}$的因式, 所以存在另一个多项式$h(x)&#x3D;\sum^k_{i&#x3D;0}h_ix^i,h_k&#x3D;h_0&#x3D;1$ , 使得g(x)h(x)&#x3D;xn+1, 此多项式h(x)称为码C的校验多项式h(x), 故可以得到码C的一致校验矩阵H。<br>设$v&#x3D;(v_{n-1}, … , v_1,v_0 )$是C的一个码矢, 则v(x)&#x3D;a(x)g(x), 有$v(x)h(x)&#x3D;a(x)g(x)h(x)&#x3D;a(x)(x^n+1)&#x3D;a(x)x^n+a(x)$, 由于deg(a(x))≤k-1, 故在$a(x)x^n+a(x)$中不会出现$x^{n-1}, … , x^{k+1}, x^k$等各次幂, 于是v(x)h(x)的展开式中$x^{n-1}, … , x^{k+1}, x^k$的系数等于零。<br>因此, 得到以下n-k个方程$h_0v_{n-j}+h_1v_{n-j-1}+…+h_kv_{n-j-k}&#x3D;0, j&#x3D;1, … , n-k$。则码C的一致校验矩阵为</p>
<p>$$<br>H&#x3D;\begin{bmatrix}     h_k&amp;h_{k-1}&amp;h_{k-2}&amp;\dots&amp;h_0&amp;0&amp;0&amp;\dots&amp;0\ 0&amp;h_k&amp;h_{k-1}&amp;\dots&amp;h_1&amp;h_0&amp;0&amp;\dots&amp;0\ \dots\ 0&amp;0&amp;0&amp;\dots&amp;h_k&amp;h_{k-1}&amp;h_{k-2}&amp;\dots&amp;h_0\end{bmatrix}<br>$$</p>
<h2 id="系统循环码的编码方法"><a href="#系统循环码的编码方法" class="headerlink" title="系统循环码的编码方法"></a>系统循环码的编码方法</h2><p>给定循环码的生成多项式g(x), 可以使该码成为系统形式。<br>假定待编码的消息是$u&#x3D;(u_{k-1}, … , u_1, u_0 )$, 则对应的消息多项式为$u(x)&#x3D;u_{k-1}x^{k-1}+…+u_2x^2+u_1x+u_0$, 从而有$x^{n-k}u(x)&#x3D;u_{k-1}x^{n-1}+…+u_1x^{n-k+1}+u_0x^{n-k}$。<br>用生成多项式g(x)除xn-ku(x), 得到xn-ku(x)&#x3D; a(x)g(x)+b(x), deg(b(x))&lt;n-k。</p>
<blockquote>
<p>循环码的编码是由多项式的乘法、除法以及加法运算完成的, 这些运算都可以由移位寄存器、加法器以及门电路来实现。</p>
</blockquote>
<p>系统循环码的编码步骤如下：<br>步骤1：先用xn-k乘以消息多项式$u(x)&#x3D;u_{k-1}x^{k-1}+…+u_2x^2+u_1x+u_0$；<br>步骤2：用生成多项式g(x)除$x^{n-k}u(x)$，得到余式b(x)；<br>步骤3：联合b(x)和$x^{n-k}u(x)$，得到码字多项式$v(x)&#x3D;x^n-ku(x)+b(x)$</p>
<h2 id="复习：多项式的除法"><a href="#复习：多项式的除法" class="headerlink" title="复习：多项式的除法"></a>复习：多项式的除法</h2><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%204.png" alt="Untitled"></p>
<h2 id="g-x-除法电路编码器"><a href="#g-x-除法电路编码器" class="headerlink" title="g(x)除法电路编码器"></a>g(x)除法电路编码器</h2><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%205.png" alt="Untitled"></p>
<h2 id="伴随式计算和错误检测"><a href="#伴随式计算和错误检测" class="headerlink" title="伴随式计算和错误检测"></a>伴随式计算和错误检测</h2><p>伴随式定义为$S&#x3D;rH^T$<br>对系统循环码而言, $r(x)&#x3D;\sum^{n-1}<em>{i&#x3D;0}r_ix^i$是接收多项式$g(x)&#x3D;\sum^{n-k-1}</em>{i&#x3D;0}g_ix^i$,<br>是生成多项式, 用g(x)去除r(x)所得的余式, 就是伴随式s(x), 即r(x)&#x3D;a(x)g(x)+s(x)。<br>∵ r(x)&#x3D;v(x)+e(x), v(x)&#x3D;q(x)g(x), r(x)&#x3D;a(x)g(x)+s(x)<br>∴ q(x)g(x)+e(x)&#x3D;a(x)g(x)+s(x)<br>∴ e(x)&#x3D;[q(x)+a(x)]g(x)+s(x)</p>
<h2 id="伴随式的性质"><a href="#伴随式的性质" class="headerlink" title="伴随式的性质"></a>伴随式的性质</h2><p>性质1：令s(x)是接收多项式r(x)的伴随式, 则用生成多项式g(x)除xs(x)所得的余式$s^{(1)}(x)$就是r(x)循环移位一次$r^{(1)}(x)$的伴随式。<br>性质2：(n, k)循环码能够检测长度小于等于n-k的任何突发错误, 换句话说, 每个长度小于等于n-k的突发错误的伴随式不等于0。<br>性质3：伴随式等于生成多项式除错误图样后所得的余式。</p>
<blockquote>
<p>伴随式的这些性质对于译码非常有用。举例来说, 若e(x)是可以纠正的错误图样, 则e(x)的循环移位也是可以纠正的错误图样。</p>
</blockquote>
<h2 id="循环码的译码"><a href="#循环码的译码" class="headerlink" title="循环码的译码"></a>循环码的译码</h2><blockquote>
<p>循环码的译码分为3步：1)计算伴随式; 2)由伴随式得到错误图样; 3)纠正错误。</p>
</blockquote>
<h1 id="第五章-BCH码"><a href="#第五章-BCH码" class="headerlink" title="第五章 BCH码"></a>第五章 BCH码</h1><h2 id="BCH码简介"><a href="#BCH码简介" class="headerlink" title="BCH码简介"></a>BCH码简介</h2><p>BCH码的优势：纠错能力强, 能够纠正多个随机错误的循环码; 编译码设备不太复杂; 到目前为止, 对于其他线性码的研究方法, 都是先构造一个码, 然后找出它的最小距离, 以估计该码的纠错能力, 对于BCH码, 反过来, 从先指定这个码能纠正多少个随机错误开始进行研究。</p>
<h3 id="本原元和本原多项式"><a href="#本原元和本原多项式" class="headerlink" title="本原元和本原多项式"></a>本原元和本原多项式</h3><p>本原元：有限域上存在元素a，使得G中的每个非零元素都是a的某次幂的形式，该元素a称为本原元。</p>
<p>本原多项式：有限域GF(q)上的本原多项式f(x),是系数取自GF(q)上，以扩域$GF(q^m)$中本原元为根的最小多项式。</p>
<p>定理1：若$b_1,b_2,..,b_{q-1}$是有限域GF(q)上的所有非零元素，则$x^{q-1}-1&#x3D;(x-b_1)(x-b_2)…(x-b_{q-1})$。</p>
<h3 id="举例-GF-23-上的乘法运算"><a href="#举例-GF-23-上的乘法运算" class="headerlink" title="举例: GF(23)上的乘法运算"></a>举例: GF(23)上的乘法运算</h3><p>选择本原元a&#x3D;x, 本原多项式$p(x)&#x3D;x^3+x+1$</p>
<table>
<thead>
<tr>
<th>$a^{-\infty}&#x3D;x^{-\infty}&#x3D;0$</th>
<th>000</th>
</tr>
</thead>
<tbody><tr>
<td>$a^0&#x3D;x^0&#x3D;1$</td>
<td>001</td>
</tr>
<tr>
<td>$a^1&#x3D;x$</td>
<td>010</td>
</tr>
<tr>
<td>$a^2&#x3D;x^2$</td>
<td>100</td>
</tr>
<tr>
<td>$a^3&#x3D;x+1$</td>
<td>011</td>
</tr>
<tr>
<td>$a^4&#x3D;x^2+x$</td>
<td>110</td>
</tr>
<tr>
<td>$a^5&#x3D;x^2+x+1$</td>
<td>111</td>
</tr>
<tr>
<td>$a^6&#x3D;x^2+1$</td>
<td>101</td>
</tr>
<tr>
<td>$a^7&#x3D;a^0&#x3D;1$</td>
<td></td>
</tr>
</tbody></table>
<p>乘法运算：</p>
<p>$$<br>(010)·(100)<br>\leftrightarrow a^3·a^4&#x3D;1<br>\leftrightarrow001\ (011)·(110)<br>\leftrightarrow a^6·a^5&#x3D;a^4<br>\leftrightarrow110<br>$$</p>
<p>因为本原元a&#x3D;x, 所以p(a)&#x3D;0</p>
<p>$$<br>a^3+a+1&#x3D;(x+1)+x+1&#x3D;0\ (011)+(010)+(001)&#x3D;(000)<br>$$</p>
<h3 id="GF-2-上多项式根的特点"><a href="#GF-2-上多项式根的特点" class="headerlink" title="GF(2)上多项式根的特点"></a>GF(2)上多项式根的特点</h3><p>定理：若f(x)是系数取自GF(2)的多项式, 令b是GF(2)扩域中的元素, 若b是f(x)的根, 则对任意的l≥0, $b^{2l}$也是f(x)的根。</p>
<blockquote>
<p>注：元素$b^{2l}$称为b的共轭元，以上定理说明若是b多项式f(x)的根，则b的所有共轭元$b^{2l}$也是f(x)的根。</p>
</blockquote>
<p>举例：${a^1, a^2, a^4}$是共轭的元素，因为它们都是极小多项式$f_2(x)&#x3D;x^3+x+1$的根。</p>
<p>最低公倍式：若f(x)为a(x)与b(x)的所有公倍式中次数最低的，并且首项系数为1，记为LCM(a(x), b(x))。</p>
<h2 id="BCH码的定义"><a href="#BCH码的定义" class="headerlink" title="BCH码的定义"></a>BCH码的定义</h2><p>BCH码的定义：给定任一有限域GF(q)及其扩域$GF(q^m)$, 其中, q是素数或者素数幂, m为一个正整数。若码元是取自GF(q)上的一个循环码, 它的生成多项式g(x)的根集合R中含有以下2t个连续根${b^p, b^{p+1},.., b^{p+2t-1}}$, 则由g(x)生成的循环码称为q进制的BCH码, 其中$b∈GF(q^m)$是域中的n阶元素, $b^{p+i} ∈GF(q^m) (0≤i≤2t-1)$, p是任意整数。对于常见的情况, p等于0或者1。若p&#x3D;1, 称之为狭义的BCH码。</p>
<p>本原BCH码的定义：若g(x)的根中有一个是$GF(q^m)$的本原元, 码长$n&#x3D;q^m-1$, 此时就称g(x)生成的BCH码为本原BCH码; 否则就称为非本原BCH码, 其码长是$q^m-1$的因子。</p>
<h3 id="BCH码的构造"><a href="#BCH码的构造" class="headerlink" title="BCH码的构造"></a>BCH码的构造</h3><p>构造方法：设$f_i(x)$和$q_i$分别是$b^{p+i}(0≤i≤2t-1)$的最小多项式和阶, 则BCH码的生成多项式g(x)和码长n可分别表示为$g(x)&#x3D;LCM(f_0(x), f_1(x),…, f_{2t-1}(x)), n&#x3D;LCM(q_0, q_1,…, q_{2t-1})$。</p>
<blockquote>
<p>构造可以纠t个错误的BCH码(其码长$n&#x3D;q^m-1$)的生成多项式的步骤如下：<br>步骤1：选择一个阶数为m的本原多项式, 构造扩域$GF(q^m)$;<br>步骤2：找到对应于$b^i(i&#x3D;1,…,p)$的极小多项式$f_i(x)$;<br>步骤3：能纠t个错误的BCH码的生成多项式为$g(x)&#x3D;LCM(f_1(x), f_2(x),…, f_{2t}(x))$。</p>
</blockquote>
<h3 id="BCH码限定理"><a href="#BCH码限定理" class="headerlink" title="BCH码限定理"></a>BCH码限定理</h3><p>定理1：若BCH码的生成多项式g(x)的根含有2t个连续根, 则该码的最小距离d≥2t+1。</p>
<p>d&#x3D;2t+1称为该码的设计距离。</p>
<blockquote>
<p>注：一旦固定n和t, 就可以得到该BCH码的生成多项式, 信息位的长度k可以由生成多项式的阶数得到。</p>
</blockquote>
<p>当n不变的情况下，较大的t，就会使得k较小；即冗余度高，可以纠更多的错误。</p>
<blockquote>
<p><strong>思考题</strong>：如何在由GF(2)生成的扩域GF(24)上构造BCH码的生成多项式？</p>
</blockquote>
<p>考虑本原多项式$p(z)&#x3D;z^4+z+1$, 本原元a&#x3D;z, a的幂次可以生成$GF(2^4)$上的所有非零元素。</p>
<table>
<thead>
<tr>
<th>a的幂次</th>
<th>$GF(2^4)$上的非零元素</th>
<th>极小多项式</th>
</tr>
</thead>
<tbody><tr>
<td>$a^1$</td>
<td>$z$</td>
<td>$x^4+x+1$</td>
</tr>
<tr>
<td>$a^2$</td>
<td>$z^2$</td>
<td>$x^4+x+1$</td>
</tr>
<tr>
<td>$a^3$</td>
<td>$z^3$</td>
<td>$x^4+x^3+x^2+x+1$</td>
</tr>
<tr>
<td>$a^4$</td>
<td>$z+1$</td>
<td>$x^4+x+1$</td>
</tr>
<tr>
<td>$a^5$</td>
<td>$z^2+z$</td>
<td>$x^2+x+1$</td>
</tr>
<tr>
<td>$a^6$</td>
<td>$z^3+z^2$</td>
<td>$x^4+x^3+x^2+x+1$</td>
</tr>
<tr>
<td>$a^7$</td>
<td>$z^3+z+1$</td>
<td>$x^4+x^3+1$</td>
</tr>
<tr>
<td>$a^8$</td>
<td>$z^2+1$</td>
<td>$x^4+x+1$</td>
</tr>
<tr>
<td>$a^9$</td>
<td>$z^3+z$</td>
<td>$x^4+x^3+x^2+x+1$</td>
</tr>
<tr>
<td>$a^{10}$</td>
<td>$z^2+z+1$</td>
<td>$x^2+x+1$</td>
</tr>
<tr>
<td>$a^{11}$</td>
<td>$z^3+z^2+z$</td>
<td>$x^4+x+1$</td>
</tr>
<tr>
<td>$a^{12}$</td>
<td>$z^3+z^2+z+1$</td>
<td>$x^4+x^3+x^2+x+1$</td>
</tr>
<tr>
<td>$a^{13}$</td>
<td>$z^3+z^2+1$</td>
<td>$x^4+x^3+1$</td>
</tr>
<tr>
<td>$a^{14}$</td>
<td>$z^3+1$</td>
<td>$x^4+x^3+1$</td>
</tr>
<tr>
<td>$a^{15}$</td>
<td>1</td>
<td>x+1</td>
</tr>
</tbody></table>
<p>如果想要构造可以纠1个错误的BCH码的生成多项式, 即t&#x3D;1, 码长n&#x3D;15<br>BCH码的生成多项式为$g(x)&#x3D;LCM(f_1(x), f_2(x),…, f_{2t}(x))$<br>根据上页的表格来获得极小多项式f1(x)和f2(x)<br>因此, 得到如下的可以纠正一个错误的BCH码的生成多项式$g(x)&#x3D;LCM(f_1(x), f_2(x))&#x3D; LCM(x^4+x+1, x^4+x+1)&#x3D;x^4+x+1$<br>∵deg(g(x))&#x3D;4, ∴n-k&#x3D;4, k&#x3D;11, 这样就得到了一个可以纠一个错误的BCH(15, 11)码, 该码的设计距离d&#x3D;2t+1&#x3D;3<br>可以计算出该码的最小距离也是3，即该码的设计距离等于该码的最小距离</p>
<p>如果想要构造可以纠2个错误的BCH码的生成多项式, 即t&#x3D;2, 码长n&#x3D;15<br>BCH码的生成多项式为$g(x)&#x3D;LCM(f_1(x), f_2(x),…, f_{2t}(x))&#x3D; LCM(f_1(x), f_2(x), f_3(x), f_4(x))$<br>根据11页的表格来获得极小多项式f1(x)-f4(x)<br>于是得到$g(x)&#x3D;LCM(f_1(x), f_2(x) , f_3(x), f_4(x))&#x3D; LCM(x^4+x+1, x^4+x+1, x^4+x^3+x^2+x+1, x^4+x +1)&#x3D;(x^4+x+1)(x^4+x^3+ x^2+x+1) &#x3D;x^8+x^7+x^6+x^4+1$<br>∵deg(g(x))&#x3D;8，∴n-k&#x3D;8，k&#x3D;7, 这样就得到了一个可以纠一个错误的BCH(15,7)码，该码的设计距离d&#x3D;2t+1&#x3D;5<br>可以计算出该码的最小距离也是5。</p>
<h1 id="第六章-RM码"><a href="#第六章-RM码" class="headerlink" title="第六章 RM码"></a>第六章 RM码</h1><h3 id="RM码的优点和缺点"><a href="#RM码的优点和缺点" class="headerlink" title="RM码的优点和缺点"></a>RM码的优点和缺点</h3><p><strong>缺点</strong>：与BCH码相比，除了一阶RM码和中等码长的RM码外，RM码的最小距离比同样码长的BCH码的最小距离小。RM码的纠错性能不如Turbo码和LDPC码<br><strong>优点</strong>：RM码能用大逻辑译码算法，比BCH码用的迭代算法简单。译码延时短，无错误平层现象，其误码率会随着信噪比增加无限接近于零。因此，RM码可以适应多种不同的信道，满足有实时性要求的应用环境，既可以单独使用，也可以作为内码与RS码等级联使用，从而大大提升纠错性能</p>
<h2 id="线性码"><a href="#线性码" class="headerlink" title="线性码"></a>线性码</h2><p><strong>定义</strong>：一个码长为n的p元码C叫做线性码，是指C是向量空间$F_p^n$的向量子空间，即C满足如下的性质：对$F_p^n$中任意元素α和β，如果$c_1$和$c_2$属于C，则$αc_1+βc_2$也属于C。<br><strong>定理</strong>：设C是参数为(n,k)的p元线性码。<br>1)若G是C的一个生成矩阵，而H是Fp上一个(n−k)行n列的矩阵。则H是C的一个校验矩阵当且仅当$rank(H)&#x3D;n−k$，并且$HG^T&#x3D;0_{n−k,k}$；<br>2) 若$G&#x3D;(I_k,P), H&#x3D;(−P^T,I_{n−k})，$则G是C的一个生成矩阵当且仅当H是C的一个校验矩阵。</p>
<h2 id="向量外积"><a href="#向量外积" class="headerlink" title="向量外积"></a>向量外积</h2><p><strong>定义</strong>：设$a&#x3D;(a_{n−1},a_{n−2},···,a_0),b&#x3D;(b_{n−1},b_{n−2},···,b_0)$是GF(2)上的两个n维向量，则向量$(a_{n−1}b_{n−1},a_{n−2}b_{n−2},···,a_0b_0)$称为a与b的外积，记为a×b。</p>
<h2 id="布尔函数"><a href="#布尔函数" class="headerlink" title="布尔函数"></a>布尔函数</h2><p><strong>定义</strong>：设m为正整数，一个m元布尔函数$f&#x3D;f(x_1,···,x_m)$是由$F_2^m$到$F_2$的映射，即m个变量$x_1,···,x_m$均取值于$F_2$，并且函数值也属于$F_2$。<br>由于$F_2^m$中向量的个数为$2^m$，而f在每个向量的取值均彼此独立地可取1或0，所以m元布尔函数共有$2^{2^m}$个。</p>
<blockquote>
<p>例子：一元布尔函数f(x)共有$2^{2^1}&#x3D;4$个，它们是：<br>1）f(0)&#x3D;f(1)&#x3D;0，即f(x)≡0；<br>2）f(0)&#x3D;f(1)&#x3D;1,即f(x)≡1；<br>3）f(0)&#x3D;0,f(1)&#x3D;1，即f(x)&#x3D;x；<br>4）f(0)&#x3D;1,f(1)&#x3D;0，即f(x)&#x3D;x+1。</p>
</blockquote>
<p><strong>定理</strong>：每个m元布尔函数$g(x_1,···,x_m)$均可唯一地表示成$g(x_1,···,x_m)&#x3D;c+c_1x_1 + ··· +c_mx_m+c_{12}x_1x_2+c_{13}x_1x_3+ ··· + c_{m-1,m}x_{m-1}x_m+c_{123}x_1x_2x_3+ ··· + c_{12···m}x_1x_2···x_m$，其中所有系数和常数都属于$F_2$。</p>
<p>令$v_0&#x3D;(0,0,···,0), v_1&#x3D;(1,0,···,0), v_2&#x3D;(0,1,···,0), v_3&#x3D;(1,1,···,0), ··· ,v_n-1&#x3D;(1,1,···,1), n&#x3D; 2^m，$然后便可把每个m元布尔函数$f(x_1,···, x_m)$表示成$F_2^n$中的向量(也叫 f 的真值表或向量表示)，具体为$c_f&#x3D;(f(v_0), f(v_1),···, f(v_{n-1}))∈F_2^n, n&#x3D; 2^m$<br>这时布尔函数相加和相乘分别对应于向量按分量相加和相乘。</p>
<h2 id="RM码"><a href="#RM码" class="headerlink" title="RM码"></a>RM码</h2><p><strong>定义</strong>：设$m≥1, n&#x3D;2^m, 0≤r≤m$。向量空间$F_2^n$的子集合<br>$RM(r,m)&#x3D;{c_f&#x3D;(f(v_0), f(v_1),···, f(v_{n-1}))∈F_2^n|f∈B_m,deg(f)≤r}$<br>叫做r阶的Reed-Muller码(简称RM码)，这里$v_i∈F_2^m$。</p>
<p><strong>定理</strong>：RM码RM(r,m)是线性码，基本参数为$(n,k,d)&#x3D;(2^m,∑_{t&#x3D;0}^r\begin{pmatrix}m\t\end{pmatrix}),2^{m-r})$</p>
<h3 id="生成矩阵-1"><a href="#生成矩阵-1" class="headerlink" title="生成矩阵"></a>生成矩阵</h3><p>对于每一对正整数r和m(m&gt;r),有一个码长为$2^m$的RM码，称为码长为$2^m$的r阶RM码。它的生成矩阵是由矩阵块$G_0,G_1,···,G_r$组成的，即$G&#x3D;\begin{pmatrix}G_0\G_1\\dots\G_r\end{pmatrix}$</p>
<p>G0是码长为$n&#x3D;2^m$的全“1”向量<br>G1是$m×2^m$阶矩阵，即$G_1$是由所有长度为m的二进制的列向量组成的。$G_1$的最左边一列是全“0”向量，最后一列为全“1”向量，其他各列则是从左至右依递增顺序排列的二进制m重列向量<br>$G_l$的行是由所有$G_l$的l个行向量作外积所得的向量组成，因而$G_l$是一个$\begin{pmatrix} m\l\end{pmatrix}*2^m$阶矩阵。显然在G的行是线性无关的条件下，r阶RM码的信息位为$k&#x3D;1+\begin{pmatrix} m\l\end{pmatrix}+\begin{pmatrix} m\2\end{pmatrix}+\dots+\begin{pmatrix} m\r\end{pmatrix}$。</p>
<h3 id="RM码的构造"><a href="#RM码的构造" class="headerlink" title="RM码的构造"></a>RM码的构造</h3><p>从RM码的定义可以看出，一个r阶RM码可以通过增广一个(r-1)阶RM码得到，而一个(r-1)阶RM码可以由删信一个r阶RM码而获得，即通过简单计算，增加一个G矩阵分量或直接删除一个G矩阵分量<br>RM码的构造简单，纠错能力强，很容易根据需要设计出不同码长的RM码</p>
<h2 id="译码算法"><a href="#译码算法" class="headerlink" title="译码算法"></a>译码算法</h2><p>从RM码的生成矩阵G中可以看出，Gl的每行重量为$2^{m-l}$，这个结论对于一般的r阶RM码都是对的，因此，G的每行都有偶重量<br>在GF(2)上，因为两个偶重量向量之和必为偶重量，所以G的行线性组合有偶重量。即RM码的所有码字重量皆为偶数<br>由于Gr行的重量为$2^{m-l}$，因而r阶RM码的最小重量不大于$2^{m-l}$</p>
<p>里德算法是专门为RM码设计的译码算法<br>里德算法使用择多逻辑判决的方法从接收矢量直接恢复信息，而不计算错误图样<br>里德算法可以纠正r阶RM码出现的$(1&#x2F;2)×2^{m-r}−1$个随机错误，并恢复k位信息。这说明码的最小重量至少为$2^{m-r}−1$，又RM码的最小重量为偶数，因而r阶RM码最小重量至少为$2^{m-r}$<br>综上所述，r阶RM码最小重量为$2^{m-r}$，即RM码最小距离为$2^{m-r}$<br>将信息向量分成r+1段，即写成$m&#x3D;(I_0,I_1,⋯,I_r)$,其中$I_i$包含$\begin{pmatrix} m\l\end{pmatrix}$个信息位，于是编程可表示为$v&#x3D;I_0G_0+I_1G_1+⋯+I_rG_r$  (1.1)<br>如果接收码字$r&#x3D;v+e&#x3D;I_0G_0+I_1G_1+⋯+I_rG_r+e$  (1.2)， 其中e为错误图样<br>通过对r阶RM码的译码计算，由接收码字r恢复了第r段信息Ir，然后计算<br>$r(1)&#x3D;r-I_rG_r&#x3D;I_0G_0+I_1G_1+⋯+I_{r-1}G_{r-1}+e$  (1.3)<br>这就把由接收码字r恢复m的问题简化成由r(1)恢复信息$m^{(1)}&#x3D;(I_0,I_1,⋯,I_{r-1})$的问题<br>继续采用同样方法就可逐步恢复所有信息，最终完成r阶RM码的译码</p>
<h1 id="第七章-卷积码"><a href="#第七章-卷积码" class="headerlink" title="第七章 卷积码"></a>第七章 卷积码</h1><blockquote>
<p><strong>卷积码与分组码的区别</strong><br>卷积码有记忆性，分组码无记忆性<br>卷积码充分利用了各组信息之间的相关性，信息序列不被分段，而是被连续处理<br>通常，卷积码的n和k比分组码的n和k要小的多<br>在同样的编码效率下，卷积码的性能优于分组码<br>在相似的纠错能力下，卷积码的实现比分组码简单<br>卷积码必须用序列逻辑电路来实现，更适用于前向纠错系统；分组码是用组合逻辑电路来实现</p>
</blockquote>
<h2 id="离散序列的非循环卷积运算"><a href="#离散序列的非循环卷积运算" class="headerlink" title="离散序列的非循环卷积运算"></a>离散序列的非循环卷积运算</h2><p>定义：设f(n)和g(n)是两个序列，则序列f和g的离散卷积运算为</p>
<p>$$<br>(f*g)(m)&#x3D;\sum_nf(n)g(m-n)<br>$$</p>
<h2 id="二元-2-1-2-卷积码的编码器"><a href="#二元-2-1-2-卷积码的编码器" class="headerlink" title="二元(2,1,2)卷积码的编码器"></a>二元(2,1,2)卷积码的编码器</h2><p>编码器主要由m&#x3D;2级移位寄存器，n&#x3D;2个模2加法器组成。所有的卷积码编码器都可以用这种类型的线性前馈移位寄存器来实现。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%206.png" alt="Untitled"></p>
<h3 id="冲激响应"><a href="#冲激响应" class="headerlink" title="冲激响应"></a>冲激响应</h3><blockquote>
<p>冲激响应：编码器的冲激响应就是通过令u&#x3D;(100…)所得到的两个输出序列。</p>
</blockquote>
<p>因为编码器有m个存储单元，所以冲激响应(生成序列)至多持续m+1个时间单元，且可以写成</p>
<p>$$<br>g^{(1)}&#x3D;(g^{(1)}_0,g^{(1)}_1,…,g^{(1)}_m),g^{(2)}&#x3D;(g^{(2)}_0,g^{(2)}_1,…,g^{(2)}_m)<br>$$</p>
<p>其中上标表示第几个输出端</p>
<blockquote>
<p>图6.1的(2,1,2)卷积码的冲激响应为$g^{(1)}&#x3D;(111), g^{(2)}&#x3D;(101)$<br>另外，冲激响应向量还可以表示输入、移位寄存器和输出之间的连接关系，1表示有连接，0表示没有连接</p>
</blockquote>
<h3 id="输出序列"><a href="#输出序列" class="headerlink" title="输出序列"></a>输出序列</h3><p>信息序列$u&#x3D;(u_1,u_2,u_3,…)$每次进入编码器1比特，编码器的两个输出序列</p>
<p>$$<br>v^{(1)}&#x3D;(v^{(1)}_0,v^{(1)}_1,…), v^{(2)}&#x3D;(v^{(2)}_0,v^{(2)}_1,…)<br>$$</p>
<p>可以通过输入序列u和编码器的两个冲激响应作卷积运算而得到。</p>
<blockquote>
<p>若u&#x3D;(1011), 图6.1的(2,1,2)卷积码的冲激响应为$g……{(1)}&#x3D;(111), g^{(2)}&#x3D;(101)$，则该卷积码的输出序列为$V^{(1)}&#x3D;u^<em>g^{(1)}&#x3D;(110001)$</em>, $V^{(2)}&#x3D;u^<em>g^{(2)}&#x3D;(100111)$</em></p>
</blockquote>
<h3 id="码字"><a href="#码字" class="headerlink" title="码字"></a>码字</h3><p>输出序列分别为$v^{(1)}&#x3D;(v^{(1)}_0,v^{(1)}_1,…), v^{(2)}&#x3D;(v^{(2)}_0,v^{(2)}_1,…)$的$(2,1,m)$的卷积码的码字，为$V^{(1)}$和$V^{(2)}$的交错，即</p>
<p>$$<br>v&#x3D;(v^{(1)}_0,v^{(2)}_0,v^{(1)}_1,v^{(2)}_1,…)<br>$$</p>
<blockquote>
<p>图6.1的(2,1,2)卷积码，若u&#x3D;(1011), 冲激响应为$g^{(1)}&#x3D;(111)$, $g^{(2)}&#x3D;(101)$，该卷积码的输出序列为$V^{(1)}&#x3D;u^<em>g^{(1)}&#x3D;(110001)$</em>, $V^{(2)}&#x3D;u^*g^{(2)}&#x3D;(100111)$*，得到的码字为v&#x3D;(11,10,00,01,01,11)</p>
</blockquote>
<p>以u&#x3D;(u1,u2,u3,…)为输入, 以$g^{(1)}&#x3D;(g^{(1)}_0,g^{(1)}_1,…,g^{(1)}_m),g^{(2)}&#x3D;(g^{(2)}_0,g^{(2)}_1,…,g^{(2)}_m)$</p>
<p>为生成序列的(2,1,m)卷积码的输出序列分别由方程$V^{(1)}&#x3D;u^*g^{(1)}$<em>和$V^{(2)}&#x3D;u^</em>g^{(2)}$*得到。</p>
<blockquote>
<p>图6.1的(2,1,2)卷积码的编码方程为<br>另外，编码方程中每一项的系数，还可以表示输入、移位寄存器和输出之间的连接关系，1表示有连接，0表示没有连接。</p>
<p>$$<br>\begin{cases} V_l^{(1)}&#x3D;u_l+u_{l-1}+u_{l-2}\ V_l^{(2)}&#x3D;u_l+u_{l-2} \end{cases},[V_l^{(1)}V_l^{(2)}]&#x3D;[u_lu_{l-1}u_{l-2}]\begin{bmatrix} 1&amp;1\1&amp;0\1&amp;1\end{bmatrix}<br>$$</p>
</blockquote>
<h3 id="生成矩阵-2"><a href="#生成矩阵-2" class="headerlink" title="生成矩阵"></a>生成矩阵</h3><p>(2,1, m)卷积码的生成矩阵：将生成序列g(1)和g(2)交织后形成的半无限矩阵</p>
<p>$$<br>G&#x3D;\begin{bmatrix}g^{(1)}_0&amp;g^{(2)}_0&amp;g^{(1)}_1&amp;g^{(2)}_1&amp;g^{(1)}_2&amp;g^{(2)}_2&amp;\dots&amp;g^{(1)}_m&amp;g^{(2)}_m&amp;0&amp;0&amp;0&amp;0&amp;\dots\ 0&amp;0&amp;g^{(1)}_0&amp;g^{(2)}_0&amp;g^{(1)}<em>1&amp;g^{(2)}<em>1&amp;\dots &amp;g^{(1)}</em>{m-1}&amp;g^{(2)}</em>{m-1}&amp;g^{(1)}<em>m&amp;g^{(2)}<em>m&amp;0&amp;0&amp;\dots \0&amp;0&amp;0&amp;0&amp;g^{(1)}<em>0&amp;g^{(2)}<em>0&amp;\dots&amp;g^{(1)}</em>{m-2}&amp;g^{(2)}</em>{m-2}&amp;g^{(1)}</em>{m-1}&amp;g^{(2)}</em>{m-1}&amp;g^{(1)}_m&amp;g^{(2)}_m&amp;\dots\ &amp;&amp;&amp;&amp;&amp;&amp;\ddots\end{bmatrix}<br>$$</p>
<p>以u&#x3D;(u1,u2,u3,…)为输入, G为生成矩阵的(2,1,m)的卷积码的码字为V&#x3D;uG。</p>
<h3 id="二元-3-2-1-卷积码的编码器"><a href="#二元-3-2-1-卷积码的编码器" class="headerlink" title="二元(3,2,1)卷积码的编码器"></a>二元(3,2,1)卷积码的编码器</h3><p>编码器主要有2个输入，3个输出，主要由m&#x3D;1级移位寄存器，n&#x3D;3个模2加法器组成。</p>
<h3 id="二元-3-2-m-卷积码的输入序列"><a href="#二元-3-2-m-卷积码的输入序列" class="headerlink" title="二元(3,2,m)卷积码的输入序列"></a>二元(3,2,m)卷积码的输入序列</h3><p>对于一般的(3,2,m)卷积码，由于k&#x3D;2，即每次有2比特进入编码器，所以输入序列u可以写成$v&#x3D;(v^{(1)}_0,v^{(2)}_0,v^{(1)}_1,v^{(2)}_1,…)$或分开写成2个序列$v^{(1)}&#x3D;(v^{(1)}_0,v^{(1)}_1,…), v^{(2)}&#x3D;(v^{(2)}_0,v^{(2)}_1,…)$</p>
<p>二元(3,2,m)卷积码的冲激响应$g^{(j)}<em>i&#x3D;(g^{(j)}</em>{i0},g^{(j)}<em>{i1},…,g^{(j)}</em>{im}),i&#x3D;1,2,j&#x3D;1,2,3$</p>
<p>输出序列分别为</p>
<p>$$<br>v^{(1)}&#x3D;(v^{(1)}_0,v^{(1)}_1,…), v^{(2)}&#x3D;(v^{(2)}_0,v^{(2)}_1,…), v^{(3)}&#x3D;(v^{(3)}_0,v^{(3)}_1,…)<br>$$</p>
<p>的(3,2,m)的卷积码的码字为</p>
<p>$$<br>v&#x3D;(v^{(1)}_0,v^{(2)}_0,v^{(3)}_0,v^{(1)}_1,v^{(2)}_1,v^{(3)}_1,…)<br>$$</p>
<h2 id="卷积码编码器的存储级数"><a href="#卷积码编码器的存储级数" class="headerlink" title="卷积码编码器的存储级数"></a>卷积码编码器的存储级数</h2><p>对于(n,k,m)卷积码，当k&gt;1时，编码器及用来描述它的符号都比较复杂，并且该编码器所含的k个移位寄存器的长度未必相同。</p>
<blockquote>
<p>存储级数：若ki是第i个移位寄存器的长度，则称所有k个移位寄存器中的最大长度为存储级数，即编码器的存储级数m定义为$m&#x3D;\max_{1&lt;i&lt;k}k_i$</p>
</blockquote>
<h2 id="卷积码编码器的约束长度和码速率"><a href="#卷积码编码器的约束长度和码速率" class="headerlink" title="卷积码编码器的约束长度和码速率"></a>卷积码编码器的约束长度和码速率</h2><p>对于(n, k, m)卷积码，编码器中每个信息位要保持m+1时间个单位，每个时间单位都可以影响编码器输出中的任何一个，这由移位寄存器的连接决定。</p>
<blockquote>
<p>约束长度：对于(n,k,m)卷积码，编码器的约束长度定义为$n_A&#x3D;n(m+1)$</p>
</blockquote>
<p>约束长度可以解释成1比特信息对编码器输出可以造成影响的最大数目。</p>
<blockquote>
<p>码速率：对于(n,k,m)卷积码，其码速率r&#x3D;k&#x2F;n</p>
</blockquote>
<h2 id="2-1-m-卷积码的多项式描述"><a href="#2-1-m-卷积码的多项式描述" class="headerlink" title="(2, 1, m)卷积码的多项式描述"></a>(2, 1, m)卷积码的多项式描述</h2><p>信息序列：$u$表示成$u(x)$</p>
<p>生成多项式：$g^{(1)}$表示成$g^{(1)}(x)$, $g^{(2)}$表示成$g^{(2)}(x)$</p>
<p>输出序列：$V^{(1)}$表示成$V^{(1)}(x)$, $V^{(2)}$表示成$V^{(2)}(x),$<br>码字：$V$表示成$V(x)$。于是$V^{(1)}(x)&#x3D;u(x)g^{(1)}(x), V^{(2)}(x)&#x3D;u(x)g^{(2)}(x),$<br>码字：$V(x)&#x3D;V^{(1)}(x^2)+xV^{(2)}(x^2)$</p>
<h2 id="n-k-m-卷积码的转移函数矩阵"><a href="#n-k-m-卷积码的转移函数矩阵" class="headerlink" title="(n, k, m)卷积码的转移函数矩阵"></a>(n, k, m)卷积码的转移函数矩阵</h2><p>于编码器是线性系统, 同任何有k个输入n个输出的线性系统一样，总共有k×n个转移函数。k×n阶转移函数矩阵为</p>
<p>$$<br>G(x)&#x3D;\begin{bmatrix}g_1^{(1)}&amp;g_1^{(1)}&amp;\dots&amp;g_1^{(1)}\ g_2^{(1)}&amp;g_2^{(1)}&amp;\dots&amp;g_2^{(1)}\ \dots \ g_k^{(1)}&amp;g_k^{(1)}&amp;\dots&amp;g_k^{(1)}\   \end{bmatrix}<br>$$</p>
<p>于是，码字$V(x)&#x3D;u(x)G(x)$, 其中, $u(x)&#x3D;(u^{(1)}(x), u^{(2)}(x),…, u^{(k)}(x)), V(x)&#x3D;(V^{(1)}(x), V^{(2)}(x),…, V^{(n)}(x))$, 并路之后, 码字变成$V(x)&#x3D;V^{(1)}(x^n)+xV^{(2)}(x^n)+…+x^{n-1}V^{(n)}(xn)$</p>
<h2 id="维特比-Viterbi-译码系统"><a href="#维特比-Viterbi-译码系统" class="headerlink" title="维特比(Viterbi)译码系统"></a>维特比(Viterbi)译码系统</h2><p>(n,k,m)卷积码, 如输入序列为x，输出码字为c，经过有噪声的信号传输后，得到接收序列r，然后经过Viterbi译码器，得到序列y。</p>
<p>对于码率为r的(n,k,m) 卷积码, 输入的信息长度为L，则输入序列为<br>$x&#x3D;(x_0^{(1)}, x_0^{(2)},…, x_0^{(k)}, x_1^{(1)}, x_1^{(2)},…, x_1^{(k)},…, x_{L+m-1}^{(1)}, x_{L+m-1}^{ (2)},…, x_{L+m-1 }^{(k)})$<br>对应输出的码字序列为<br>$c&#x3D;(c_0^{(1)}, c_0^{(2)},…, c_0^{(n)}, c_1^{(1)}, c_1^{(2)},…, c_1^{(n)},…, c_{L+m-1}^{(1)}, c_{L+m-1 }^{(2)},…, c_{L+m-1}^{ (n)})$<br>其中下标表示时间。<br>消息序列的尾部需要m个0比特使得移位寄存器的状态归0。一般的，默认移位寄存器从全零状态开始，最终还是以全零状态结束。</p>
<h1 id="第八章-Turbo码"><a href="#第八章-Turbo码" class="headerlink" title="第八章 Turbo码"></a>第八章 Turbo码</h1><h3 id="Turbo码的优点"><a href="#Turbo码的优点" class="headerlink" title="Turbo码的优点"></a>Turbo码的优点</h3><p>在信噪比较低的高噪声环境下性能优越（信道条件差的移动通信系统中有很大的应用潜力），而且具有很强的抗衰落、抗干扰能力。<br>Turbo码具有超乎寻常的优异的译码性能，可以纠正高速率数据传输时发生的误码。在直扩（CDMA）系统中采用Turbo码技术可以进一步提高系统的容量。<br>在短帧情况下的仿真结果表明短交织Turbo码在AWGN信道和Rayleigh衰落信道下仍具有接近信道容量的纠错能力。</p>
<h3 id="Turbo码的缺点"><a href="#Turbo码的缺点" class="headerlink" title="Turbo码的缺点"></a>Turbo码的缺点</h3><p>为获得较高的性能，Turbo码的编译码方式较为复杂。<br>具有较大的译码时延，这是由于block长度较大、译码需要多次迭代造成的。这样非常不利实时业务或高速数据的传输。<br>BER(比特出错概率)在10−5后会出现误码平层，这是由于Turbo码的重量分布造成的。对于某些对BER要求较高的应用就不适合，当然通过交织器的设计能够提供更大的码间最小距离，从而降低误码平层。</p>
<h3 id="分量码"><a href="#分量码" class="headerlink" title="分量码"></a>分量码</h3><p>卷积码的类型多样，如非递归卷积码(NRC)、非系统卷积码(NSC)、递归系统卷积码(RSC)。<br>在实际的系统中，由于RSC有突出的优点而被广泛采用。RSC码在具有良好的译码性能，且存在较高的交织增益，译码性能也会随着交织长度增加而提高。</p>
<h3 id="交织器"><a href="#交织器" class="headerlink" title="交织器"></a>交织器</h3><p>交织器的主要功能是使码重分布合理，降低数据序列的相关性，增大输出码字的最小汉明距，实现随机编码。</p>
<p><strong>分组交织器</strong>：将数据序列按行的顺序写入m×n的矩阵，然后按列的顺序读出，即完成交织过程。相应的解交织过程就是将交织后的数据序列按列写入m×n矩阵，再按照行的顺序读出。</p>
<p><strong>伪随机交织器</strong>：指交织映射随机生成的交织器，每个长度为N的伪随机交织器共有N！种可能的交织形式。这种交织器采用给定的随机地址交织映射，由这个已知的交织表对输入信息序列进行映射。</p>
<h3 id="删余处理"><a href="#删余处理" class="headerlink" title="删余处理"></a>删余处理</h3><p>在编码完成后，将分量码输出的两路校验信息输入删余器，按照一定的规则删除一部分校验信息，减小信息的冗余度，从而提高编码效率。</p>
<h2 id="Turbo码编码器的结构"><a href="#Turbo码编码器的结构" class="headerlink" title="Turbo码编码器的结构"></a>Turbo码编码器的结构</h2><p>三种：并行级联卷积码(PCCC)、串行级联卷积码(SCCC)和混合级联卷积码(HCCC)</p>
<h3 id="并行级联卷积码-PCCC"><a href="#并行级联卷积码-PCCC" class="headerlink" title="并行级联卷积码(PCCC)"></a>并行级联卷积码(PCCC)</h3><p>随机交织器：将信息序列U进行比特位置重排列得到U1（内容不变）<br>分量编码器：生成校验序列 $X_{p1}$ 和 $X_{p2}$（一般两个编码器结构相同）<br>删余矩阵：为了提高码率，周期地删除一些校验位，形成校验位序列Xp<br>复接：未编码序列Xs与Xp经过复接后，生成Turbo码序列X</p>
<h2 id="Turbo码的码率"><a href="#Turbo码的码率" class="headerlink" title="Turbo码的码率"></a>Turbo码的码率</h2><p>若两个分量码的码率分别为R1和R2，则Turbo码的码率为</p>
<p>$$<br>R&#x3D;\frac{R_1R_2}{R_1+R_2-R_1R_2}<br>$$</p>
<h2 id="Turbo码的译码"><a href="#Turbo码的译码" class="headerlink" title="Turbo码的译码"></a>Turbo码的译码</h2><p>Turbo码有一重要特点是其译码较为复杂，比常规的卷积码要复杂的多。<br>这种复杂不仅在于其译码要采用迭代的过程，而且采用的算法本身也比较复杂。</p>
<h3 id="译码算法-1"><a href="#译码算法-1" class="headerlink" title="译码算法"></a>译码算法</h3><p><strong>MAP算法</strong>：MAP算法采用递推、迭代方法，将最大似然对数比函数作为软判决的输出。但由于该算法需要多次迭代，复杂度较高，运算量非常大，而且对数和指数的运算在数字电路中比较难以实现，导致其在工程实现上受到了很大程度的限制。<br><strong>Max-log-MAP算法</strong>：即最大值运算，在MAP算法基础上通过减少格图搜索状态来达到简化的目的。Max-log-MAP对MAP所做的修改是在对数域里对一些函数进行计算，这样省去了很多的指数的运算和对数域的运算，很大程度上降低了运算的复杂度，大大简化了运算量；但是由于在计算过程有一些近似处理，所以Max-log-MAP算法不是最优的。<br><strong>Log-MAP算法</strong>：即对数域算法，Robertson等人在Max-log-MAP算法基础上进行了一些修改，使得Log-MAP算法相比于Max-log-MAP算法只多了一些查表及加法运算，尽管提高了一点复杂度但是性能却得到很大的提高。<br><strong>SOVA算法</strong>：即软输出Viterbi译码，SOVA算法在标准Viterbi译码算法上进行了一些修改：在进行最大似然路径选择时必须参考其先验信息；不但需要给出每个比特译码的准确结果，还需要计算出每个比特译码的可靠性，通过一些计算从中获取一些关于译码比特的先验信息，从而为下次迭代做好准备，大大减小了运算量，但性能受到了损失，大约损失了1dB。</p>
<h1 id="第九章-二维码"><a href="#第九章-二维码" class="headerlink" title="第九章 二维码"></a>第九章 二维码</h1><h2 id="二维码的概念与原理"><a href="#二维码的概念与原理" class="headerlink" title="二维码的概念与原理"></a>二维码的概念与原理</h2><p>行排式二维码，又称堆积式二维码或层排式二维码，其编码原理是建立在一维条码基础之上，按需要堆积成二行或多行。</p>
<p>矩阵式二维码，又称棋盘式二维码，它是在一个矩形空间通过黑、白像素在矩阵中的不同分布进行编码。</p>
<h2 id="二维码的特点"><a href="#二维码的特点" class="headerlink" title="二维码的特点"></a>二维码的特点</h2><p><strong>可靠性强</strong><br>条形码的读取准确率远远超过人工记录，平均每15000个字符才会出现一个错误。<br><strong>效率高</strong><br>条形码的读取速度很快，相当于每秒40个字符。<br><strong>易于制作</strong><br>条形码的编写很简单，制作也仅仅需要印刷，被称为“可印刷的计算机语言”。<br><strong>高密度</strong><br>二维码通过利用垂直方向的堆积来提高条码的信息密度，而且采用高密度图形表示。<br><strong>构造简单</strong><br>条形码识别设备的构造简单，使用方便。<br><strong>灵活实用</strong><br>条形码符号可以手工键盘输入，也可以和有关设备组成识别系统实现自动化识别，还可以和其他控制设备联系起来实现整个系统的自动化管理。<br><strong>成本低</strong><br>与其它自动化识别技术相比较，条形码技术仅仅需要一小张贴纸和相对构造简单的光学扫描仪，成本相当低廉。<br><strong>纠错功能</strong><br>二维码不仅能防止错误，而且能纠正错误，即使条形码部分损坏，也能将正确的信息还原出来。<br><strong>多语言形式，可表示图像</strong><br>二维码具有字节表示模式，即提供了一种表示字节流的机制。不论何种语言文字它们在计算机中存储时以机内码的形式表现，而内部码都是字节码，可识别多种语言文字的条码。<br><strong>具有加密体制</strong><br>可以先用一定的加密算法将信息加密，再用二维码表示在识别二维条码时，再加以一定的解密算法，便可以恢复所表示的信息。</p>
<h2 id="QR码的生成与识别"><a href="#QR码的生成与识别" class="headerlink" title="QR码的生成与识别"></a>QR码的生成与识别</h2><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%207.png" alt="Untitled"></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%208.png" alt="Untitled"></p>
<p><strong>寻像图形、位置探测图形：</strong><br>协助扫描软件定位QR码并转换坐标系。<br>寻像图形包括三个相同的位置探测图形，分别位于图形中的左上角、右上角和左下角。每个位置探测图形由7*7个模块组成。如图，寻像图形为黑色区域。</p>
<p><strong>位置探测图形分隔符：</strong><br>区分功能图形和编码区域。<br>每个位置探测图形和编码区域之间有宽度为1个模块的分隔符。位置探测图形分隔符为灰色区域，此区域应为空白。</p>
<p><strong>定位图形：</strong><br>确定符号的密度和版本，提供决定模块坐标的基准位置。<br>定位图形为图中的茶色区域，水平和垂直的定位图形分别始于第6行和第6列。</p>
<p><strong>校正图形：</strong><br>在图像有一定程度损坏的情况下，译码软件可以通过它同步图像模块的坐标映像。<br>矫正图形的数量视符号和版本号而定，版本1没有校正图形，版本2及以上均含有校正图形。</p>
<p><strong>格式信息：</strong><br>存放纠错等级和掩模信息。<br>格式信息是一个15位数据，由2位纠错指示符+3位掩模图形参考+10位纠错码组成，为图中深蓝色区域。</p>
<p>同时，左下角格式信息编号8上方的橙色区域，此区域永远为深色模块，不用于存放任何信息。</p>
<p><strong>版本信息：</strong><br>用于存放QR码的版本号。<br>为图中红色区域，两个3*6模块。</p>
<p><strong>扩展图形：</strong><br>最初的目的是用于将来对QR码功能的扩展，并不用于对数据的编码。<br>扩展图形由位于符号右下角的一个4个模块组成的方块以及位于符号右边和下边的一些8个模块的块组成。8个模块的块的数目取决于符号的版本，计算公式为：<br>8模块的数目&#x3D;2*(N DIV 2)<br>其中N为版本号，DIV表示除法运算。<br>扩展图形为图中红框区域，即版本7中有6个8模块组成的块和1个4模块组成的块。</p>
<h3 id="QR码的纠错能力："><a href="#QR码的纠错能力：" class="headerlink" title="QR码的纠错能力："></a><strong>QR码的纠错能力：</strong></h3><table>
<thead>
<tr>
<th>级别</th>
<th>纠错能力</th>
</tr>
</thead>
<tbody><tr>
<td>L</td>
<td>约7%</td>
</tr>
<tr>
<td>M</td>
<td>约15%</td>
</tr>
<tr>
<td>Q</td>
<td>约25%</td>
</tr>
<tr>
<td>H</td>
<td>约30%</td>
</tr>
</tbody></table>
<h2 id="举例说明QR码的编码过程。"><a href="#举例说明QR码的编码过程。" class="headerlink" title="举例说明QR码的编码过程。"></a>举例说明QR码的编码过程。</h2><h2 id="识别步骤"><a href="#识别步骤" class="headerlink" title="识别步骤"></a>识别步骤</h2><p>条码定位<br>条码分割<br>解码</p>
<h3 id="条码定位"><a href="#条码定位" class="headerlink" title="条码定位"></a>条码定位</h3><p>定位采用以下步骤：<br>1.利用点运算的阈值理论将采集到的图像变为二值图像，即对图像进行二值化处理；<br>2.得到二值化图像后，对其进行膨胀运算；<br>3.对膨胀后的图像进行边缘检测得到条码区域的轮廓。<br>4.确定寻像图形<br>5.探测图形中心坐标<br>6.确定两个举例<br>7.确定版本号<br>8.构造位图<br>9.得到纠错等级和掩模图形</p>
<h3 id="条码分割"><a href="#条码分割" class="headerlink" title="条码分割"></a>条码分割</h3><p>分割采用以下步骤：<br>1.将原图像按比例缩小进行分割，计算其特征值；<br>2.分块继承父块纹理类别，结合其周围纹理类型进行修正；<br>3.重复步骤二直至图像被划分为2*2大小，分割结束；<br>4.分割结束后，图中可能出现的孤立的小区域可作为噪声删除。</p>
<h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><pre><code>得到一幅标准的条码图像后，对该符号进行网络取样，对网格每一个交点上的图像像素取样，并根据阈值确定是深色块还是浅色块。构造一个位图，用二进制的“1”表示深色像素，“0”表示浅色像素，从而得到条码的原始二进制序列值，然后对这些数据进行纠错和译码：
1.异或处理（XOR）
2.确定符号码字
3.重新排列码字序列
4.执行错误检测和纠错译码程序
最后根据条码的逻辑编码规则把这些原始的数据位流转换成数据码字。
</code></pre>
<h1 id="第十章-极化码"><a href="#第十章-极化码" class="headerlink" title="第十章 极化码"></a>第十章 极化码</h1><h2 id="极化码概述与研究现状"><a href="#极化码概述与研究现状" class="headerlink" title="极化码概述与研究现状"></a>极化码概述与研究现状</h2><p>极化码优点：<br>1、是目前唯一的香农信道容量可达的编码方式<br>2、有坚实的理论基础<br>3、编解码复杂度低<br>4、精细的码率调整机制（信息块长度可以一比特一比特的递减）<br>5、极化码的递归特性易于通过硬件实现（母码长度为N的Polar码可以用两个母码长度为N&#x2F;2的Polar码实现）</p>
<p>极化码缺点：<br>1、汉明距离较小，在短码情况下影响解码性能，一定程度上可以通过选择合适的冻结比特位置进行规避。适合长码编码。<br>2、SC译码延时较大。</p>
<h3 id="极化（Polar）码起源"><a href="#极化（Polar）码起源" class="headerlink" title="极化（Polar）码起源"></a>极化（Polar）码起源</h3><blockquote>
<p>截止频率越高，系统响应越快<br>因此Polar码的最初设计的出发点是为了提升截止频率</p>
</blockquote>
<p>在随机编码和最大似然条件下，信道截止速率R0决定了相应的码块的错误概率：</p>
<p>$$<br>P_e&#x3D;2^{−N∙R_0}<br>$$</p>
<p>其中，N为码块长度。实际信道的传输速率R小于R_0、使用随机编码和ML编码时，信道平均错误概率：</p>
<p>$$<br>P _e&#x3D;2^{−N（R_0−R）}<br>$$</p>
<h3 id="极化码的基本原理"><a href="#极化码的基本原理" class="headerlink" title="极化码的基本原理"></a>极化码的基本原理</h3><p>对于Polar码基本原理可以归结为三点：信道合并、信道分离、信道极化。其中信道合并和信道极化是在编码时完成的；信道分离是在解码时完成。</p>
<p><strong>信道选择：</strong><br>对于编码方案通常根据某种信道设计，Polar码主要考虑以下信道进行分析：</p>
<p>二进制离散无记忆信道（B-DMC）:二进制删除信道（BEC）;二进制对称信道（BSC）</p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理与技术课程笔记</title>
    <url>/2024/01/11/BUPT_note/Notes%20on%20Compilation%20principle/</url>
    <content><![CDATA[<h1 id="编译原理与技术-郭燕慧"><a href="#编译原理与技术-郭燕慧" class="headerlink" title="编译原理与技术 郭燕慧"></a>编译原理与技术 郭燕慧</h1><h1 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h1><h2 id="编译器的结构"><a href="#编译器的结构" class="headerlink" title="编译器的结构"></a>编译器的结构</h2><table>
<thead>
<tr>
<th>Lexical Analyzer</th>
<th>词法分析</th>
</tr>
</thead>
<tbody><tr>
<td>Syntax Analyzer</td>
<td>语法分析</td>
</tr>
<tr>
<td>Semantic Analyzer</td>
<td>语义分析</td>
</tr>
<tr>
<td>Intermediate Code Generator</td>
<td>中间代码生成</td>
</tr>
<tr>
<td>Machine-Independent Code Optimizer</td>
<td>机器无关的代码优化</td>
</tr>
<tr>
<td>Code Generator</td>
<td>代码生成</td>
</tr>
<tr>
<td>Machine-Dependent Code Optimizer</td>
<td></td>
</tr>
</tbody></table>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul>
<li>将源程序分解为多个组成部分，并对其施加语法结构</li>
<li>使用语法结构创建一个中间表示intermediate representation(IR)的源程序</li>
<li>收集有关源程序的信息，并将其存储在称为符号表的数据结构中(将通过IR传递给后端)</li>
</ul>
<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul>
<li>根据IR和符号表中的信息构造目标程序(通常用机器语言)</li>
<li>在此过程中执行代码优化</li>
</ul>
<h3 id="词法分析-Lexical-Analyzer"><a href="#词法分析-Lexical-Analyzer" class="headerlink" title="词法分析 Lexical Analyzer"></a>词法分析 Lexical Analyzer</h3><p>&lt;token-name, attribute-value&gt;</p>
<aside>
💡 token-name 在语法分析中使用的抽象符号

</aside>

<aside>
💡 attribute-value 指向符号表中的一个项。表项中的信息用于语义分析和代码生成

</aside>

<p>position &#x3D; initial + rate * 60</p>
<p>Lexical Analyzer</p>
<p>&lt;id, 1&gt;<br>&lt;&#x3D;&gt;<br>&lt;id, 2&gt;<br>&lt;+&gt;<br>&lt;id, 3&gt;<br>&lt;*&gt;<br>&lt;60&gt;</p>
<h3 id="语法分析-Syntax-Analyzer"><a href="#语法分析-Syntax-Analyzer" class="headerlink" title="语法分析 Syntax Analyzer"></a>语法分析 Syntax Analyzer</h3><p>语法分析器(解析器)使用词法分析器生成的令牌名称来创建描述令牌流语法结构的中间表示，通常是语法树</p>
<p>每个内部节点表示一个操作，该节点的子节点表示该操作的参数</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled.png" alt="Untitled"></p>
<h3 id="语义分析-Semantic-Analysis"><a href="#语义分析-Semantic-Analysis" class="headerlink" title="语义分析 Semantic Analysis"></a>语义分析 Semantic Analysis</h3><p>语义分析器使用语法树和符号表中的信息来检查源程序与语言定义的语义一致性</p>
<p>还收集用于类型检查、类型转换和中间代码生成的类型信息</p>
<p>编程语言的语法描述了其程序的适当形式</p>
<p>编程语言的语义描述了其程序的含义，即每个程序在执行时所做的事情</p>
<h3 id="类型检查-Type-Checking"><a href="#类型检查-Type-Checking" class="headerlink" title="类型检查 Type Checking"></a>类型检查 Type Checking</h3><p>语义分析的一个重要部分是类型检查编译器检查每个操作符是否有匹配的操作数(类型正确)</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%201.png" alt="Untitled"></p>
<h3 id="中间代码生成-Machine-Independent-Code-Optimizer"><a href="#中间代码生成-Machine-Independent-Code-Optimizer" class="headerlink" title="中间代码生成 Machine-Independent Code Optimizer"></a>中间代码生成 Machine-Independent Code Optimizer</h3><ul>
<li>经过语义分析后，编译器生成一个中间值representation, typically three-address code (Three-address code)</li>
<li>类汇编指令，每条指令有三个操作数，每个操作数就像一个寄存器</li>
<li>每个赋值指令在RHS上最多有一个操作符</li>
<li>易于翻译成目标机器的机器指令</li>
</ul>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%202.png" alt="Untitled"></p>
<h3 id="机器无关的代码优化-Machine-Independent-Code-Optimization"><a href="#机器无关的代码优化-Machine-Independent-Code-Optimization" class="headerlink" title="机器无关的代码优化 Machine-Independent Code Optimization"></a>机器无关的代码优化 Machine-Independent Code Optimization</h3><p>类似于英文的文章编辑&#x2F;修改，改进中间代码以获得更好的目标代码</p>
<p>t1 &#x3D; inttofloat(60) </p>
<p>t2 &#x3D; id3 * t1<br>t3 &#x3D; id2 + t2</p>
<p>id1 &#x3D; t3</p>
<p>—&gt;</p>
<p>t1 &#x3D; id3 * 60.0 </p>
<p>id1 &#x3D; id2 + t1</p>
<h3 id="代码生成-Code-Generator"><a href="#代码生成-Code-Generator" class="headerlink" title="代码生成 Code Generator"></a>代码生成 Code Generator</h3><p>t1 &#x3D; id3 * 60.0 </p>
<p>id1 &#x3D; id2 + t1</p>
<p>Code<br>Generation</p>
<p>LDF R2, id3<br>MULF R2, R2, #60.0 </p>
<p>LDF R1, id2<br>ADDF R1, R1, R2</p>
<p> STF id1, R1</p>
<h3 id="符号表管理"><a href="#符号表管理" class="headerlink" title="符号表管理"></a>符号表管理</h3><ul>
<li>由前端执行，符号表与中间代码一起传递到后端</li>
<li>记录变量名称和存储分配的各种属性、类型、作用域</li>
<li>记录过程名称和各种属性<ul>
<li>参数的数量和类型</li>
<li>传递参数的方式(通过值或引用)</li>
<li>返回类型</li>
</ul>
</li>
</ul>
<h3 id="中间语言（Intermediate-Language）IL"><a href="#中间语言（Intermediate-Language）IL" class="headerlink" title="中间语言（Intermediate Language）IL"></a><strong><strong>中间语言（Intermediate Language）IL</strong></strong></h3><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%203.png" alt="Untitled"></p>
<h3 id="编译器与解释器的区别"><a href="#编译器与解释器的区别" class="headerlink" title="编译器与解释器的区别"></a>编译器与解释器的区别</h3><ul>
<li><p>1</p>
<p>  编译器将用高级语言编写的源程序翻译成可以直接在目标计算机上运行的机器码。</p>
<p>  解释器直接执行源代码中的每条语句，而不需要将程序编译成机器码。</p>
</li>
<li><p>2</p>
<p>  解释器通常花费较少的时间来分析源代码:他们只是解析每个语句并执行它(例如，Python代码)。</p>
<p>  相比之下，编译器通常会分析语句之间的关系(例如，控制流和数据流)以实现优化。</p>
</li>
<li><p>3</p>
<p>  解释器继续执行程序，直到遇到第一个错误，在这种情况下它们停止。</p>
<p>  对于编译语言，程序只有在编译成功后才可执行。</p>
</li>
</ul>
<h2 id="编译器的结构-1"><a href="#编译器的结构-1" class="headerlink" title="编译器的结构"></a>编译器的结构</h2><table>
<thead>
<tr>
<th>Lexical Analyzer</th>
<th>词法分析</th>
</tr>
</thead>
<tbody><tr>
<td>Syntax Analyzer</td>
<td>语法分析</td>
</tr>
<tr>
<td>Semantic Analyzer</td>
<td>语义分析</td>
</tr>
<tr>
<td>Intermediate Code Generator</td>
<td>中间代码生成</td>
</tr>
<tr>
<td>Machine-Independent Code Optimizer</td>
<td>机器无关的代码优化</td>
</tr>
<tr>
<td>Code Generator</td>
<td>代码生成</td>
</tr>
<tr>
<td>Machine-Dependent Code Optimizer</td>
<td></td>
</tr>
</tbody></table>
<h3 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h3><ul>
<li>将源程序分解为多个组成部分，并对其施加语法结构</li>
<li>使用语法结构创建一个中间表示intermediate representation(IR)的源程序</li>
<li>收集有关源程序的信息，并将其存储在称为符号表的数据结构中(将通过IR传递给后端)</li>
</ul>
<h3 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h3><ul>
<li>根据IR和符号表中的信息构造目标程序(通常用机器语言)</li>
<li>在此过程中执行代码优化</li>
</ul>
<h3 id="词法分析-Lexical-Analyzer-1"><a href="#词法分析-Lexical-Analyzer-1" class="headerlink" title="词法分析 Lexical Analyzer"></a>词法分析 Lexical Analyzer</h3><p>&lt;token-name, attribute-value&gt;</p>
<aside>
💡 token-name 在语法分析中使用的抽象符号

</aside>

<aside>
💡 attribute-value 指向符号表中的一个项。表项中的信息用于语义分析和代码生成

</aside>

<p>position &#x3D; initial + rate * 60</p>
<p>Lexical Analyzer</p>
<p>&lt;id, 1&gt;<br>&lt;&#x3D;&gt;<br>&lt;id, 2&gt;<br>&lt;+&gt;<br>&lt;id, 3&gt;<br>&lt;*&gt;<br>&lt;60&gt;</p>
<h3 id="语法分析-Syntax-Analyzer-1"><a href="#语法分析-Syntax-Analyzer-1" class="headerlink" title="语法分析 Syntax Analyzer"></a>语法分析 Syntax Analyzer</h3><p>语法分析器(解析器)使用词法分析器生成的令牌名称来创建描述令牌流语法结构的中间表示，通常是语法树</p>
<p>每个内部节点表示一个操作，该节点的子节点表示该操作的参数</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled.png" alt="Untitled"></p>
<h3 id="语义分析-Semantic-Analysis-1"><a href="#语义分析-Semantic-Analysis-1" class="headerlink" title="语义分析 Semantic Analysis"></a>语义分析 Semantic Analysis</h3><p>语义分析器使用语法树和符号表中的信息来检查源程序与语言定义的语义一致性</p>
<p>还收集用于类型检查、类型转换和中间代码生成的类型信息</p>
<p>编程语言的语法描述了其程序的适当形式</p>
<p>编程语言的语义描述了其程序的含义，即每个程序在执行时所做的事情</p>
<h3 id="类型检查-Type-Checking-1"><a href="#类型检查-Type-Checking-1" class="headerlink" title="类型检查 Type Checking"></a>类型检查 Type Checking</h3><p>语义分析的一个重要部分是类型检查编译器检查每个操作符是否有匹配的操作数(类型正确)</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%201.png" alt="Untitled"></p>
<h3 id="中间代码生成-Machine-Independent-Code-Optimizer-1"><a href="#中间代码生成-Machine-Independent-Code-Optimizer-1" class="headerlink" title="中间代码生成 Machine-Independent Code Optimizer"></a>中间代码生成 Machine-Independent Code Optimizer</h3><ul>
<li>经过语义分析后，编译器生成一个中间值representation, typically three-address code (Three-address code)</li>
<li>类汇编指令，每条指令有三个操作数，每个操作数就像一个寄存器</li>
<li>每个赋值指令在RHS上最多有一个操作符</li>
<li>易于翻译成目标机器的机器指令</li>
</ul>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%202.png" alt="Untitled"></p>
<h3 id="机器无关的代码优化-Machine-Independent-Code-Optimization-1"><a href="#机器无关的代码优化-Machine-Independent-Code-Optimization-1" class="headerlink" title="机器无关的代码优化 Machine-Independent Code Optimization"></a>机器无关的代码优化 Machine-Independent Code Optimization</h3><p>类似于英文的文章编辑&#x2F;修改，改进中间代码以获得更好的目标代码</p>
<p>t1 &#x3D; inttofloat(60) </p>
<p>t2 &#x3D; id3 * t1<br>t3 &#x3D; id2 + t2</p>
<p>id1 &#x3D; t3</p>
<p>—&gt;</p>
<p>t1 &#x3D; id3 * 60.0 </p>
<p>id1 &#x3D; id2 + t1</p>
<h3 id="代码生成-Code-Generator-1"><a href="#代码生成-Code-Generator-1" class="headerlink" title="代码生成 Code Generator"></a>代码生成 Code Generator</h3><p>t1 &#x3D; id3 * 60.0 </p>
<p>id1 &#x3D; id2 + t1</p>
<p>Code<br>Generation</p>
<p>LDF R2, id3<br>MULF R2, R2, #60.0 </p>
<p>LDF R1, id2<br>ADDF R1, R1, R2</p>
<p> STF id1, R1</p>
<h3 id="符号表管理-1"><a href="#符号表管理-1" class="headerlink" title="符号表管理"></a>符号表管理</h3><ul>
<li>由前端执行，符号表与中间代码一起传递到后端</li>
<li>记录变量名称和存储分配的各种属性、类型、作用域</li>
<li>记录过程名称和各种属性<ul>
<li>参数的数量和类型</li>
<li>传递参数的方式(通过值或引用)</li>
<li>返回类型</li>
</ul>
</li>
</ul>
<h3 id="中间语言（Intermediate-Language）IL-1"><a href="#中间语言（Intermediate-Language）IL-1" class="headerlink" title="中间语言（Intermediate Language）IL"></a><strong><strong>中间语言（Intermediate Language）IL</strong></strong></h3><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%203.png" alt="Untitled"></p>
<h3 id="编译器与解释器的区别-1"><a href="#编译器与解释器的区别-1" class="headerlink" title="编译器与解释器的区别"></a>编译器与解释器的区别</h3><ul>
<li><p>1</p>
<p>  编译器将用高级语言编写的源程序翻译成可以直接在目标计算机上运行的机器码。</p>
<p>  解释器直接执行源代码中的每条语句，而不需要将程序编译成机器码。</p>
</li>
<li><p>2</p>
<p>  解释器通常花费较少的时间来分析源代码:他们只是解析每个语句并执行它(例如，Python代码)。</p>
<p>  相比之下，编译器通常会分析语句之间的关系(例如，控制流和数据流)以实现优化。</p>
</li>
<li><p>3</p>
<p>  解释器继续执行程序，直到遇到第一个错误，在这种情况下它们停止。</p>
<p>  对于编译语言，程序只有在编译成功后才可执行。</p>
</li>
</ul>
<h1 id="第二章词法分析器"><a href="#第二章词法分析器" class="headerlink" title="第二章词法分析器"></a>第二章词法分析器</h1><h2 id="词法分析器的作用"><a href="#词法分析器的作用" class="headerlink" title="词法分析器的作用"></a>词法分析器的作用</h2><ul>
<li>读取输入字符的源程序，将它们转换为词素，并生成一个标记序列</li>
<li>必要时向符号表中添加词素去掉注释和空白(空白、换行、制表符等)。</li>
<li>将错误消息与行号关联(跟踪换行)</li>
</ul>
<p>有效执行简单任务、提高编译器效率（比语法分析简单的多）、提高编译器可移植性</p>
<h3 id="Tokens-Patterns-and-Lexemes"><a href="#Tokens-Patterns-and-Lexemes" class="headerlink" title="Tokens, Patterns, and Lexemes"></a>Tokens, Patterns, and Lexemes</h3><p>token由一对&lt;token name, attribute value&gt;组成，&lt;抽象符号，字符表内容&gt;</p>
<p>patterns是对tokens的词素可能采取的形式的描述。</p>
<p>lexeme就是所表示的实例</p>
<p>例子：printf(“Total &#x3D;%d\n”, score)</p>
<table>
<thead>
<tr>
<th>Lexeme</th>
<th>printf</th>
<th>scorce</th>
<th>“Total &#x3D;%d\n”</th>
<th>(</th>
<th>…</th>
</tr>
</thead>
<tbody><tr>
<td>Token</td>
<td>id</td>
<td>id</td>
<td>literal</td>
<td>left_parenthesis</td>
<td>…</td>
</tr>
</tbody></table>
<h3 id="token属性"><a href="#token属性" class="headerlink" title="token属性"></a>token属性</h3><p>token name：影响属性决策</p>
<p>attribute value：影响代码分析生成</p>
<h2 id="令牌规范-正则表达式"><a href="#令牌规范-正则表达式" class="headerlink" title="令牌规范(正则表达式)"></a>令牌规范(正则表达式)</h2><p>Regular expression (正则表达式,regexp)指词素模式的重要符号</p>
<ul>
<li>Strings and Languages (串和语言)</li>
<li>Operations on Languages (语言上的运算)</li>
<li>Regular Expressions</li>
<li>Regular Definitions (正则定义)</li>
<li>Extensions of Regular Expressions</li>
</ul>
<h3 id="字符串和语言"><a href="#字符串和语言" class="headerlink" title="字符串和语言"></a>字符串和语言</h3><p>Alphabet(字母表):任何有限的符号集合</p>
<p>符号的例子:字母、数字和标点符号</p>
<p>字母的例子:(1,0)，ASCII, Unicode</p>
<p>string（串)是从字母表中抽取的符号的有限序列</p>
<p>字符串s的长度，记为Isl，是数符号在s中的出现次数(即基数)</p>
<p>Empty string（空字符串）:长度为0，ε</p>
<p><strong>与字符串相关的术语</strong></p>
<p>Prefix 前缀:从的末尾删除0个或多个符号获得的任何字符串。</p>
<p>Proper prefix 真前缀:不是ε也不等于s本身的前缀。</p>
<p>Suffix 后缀:从s 的开头删除0个或多个符号后获得的任何字符串。</p>
<p>Proper suffix 真后缀:非ε且不等于s的后缀本身</p>
<p>Substring (子串):从s中删除任何前缀和后缀而得到的任何字符串。</p>
<p>Proper substring (真子串):不是ε且不等于s本身的子字符串。</p>
<p>Subsequence (子序列):从s中去掉0个或多个不一定连续的符号而形成的字符串</p>
<p>Concatenation (连接)：x &#x3D; dog, y &#x3D; house, xy &#x3D; doghouse</p>
<p>Exponentiation (幂&#x2F;指数运算)：</p>
<p>$$<br>x &#x3D; dog, x^0 &#x3D; ε,x^1 &#x3D; dog,x^3 &#x3D; dogdogdog<br>$$</p>
<p>language (语言):任何可数集合的一些固定字母</p>
<h3 id="Operations-on-Languages-语言的运算"><a href="#Operations-on-Languages-语言的运算" class="headerlink" title="Operations on Languages (语言的运算)"></a>Operations on Languages (语言的运算)</h3><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%204.png" alt="Untitled"></p>
<p>优先级:closure*&gt; concatenation &gt; union</p>
<h2 id="令牌识别-转换图"><a href="#令牌识别-转换图" class="headerlink" title="令牌识别(转换图)"></a>令牌识别(转换图)</h2><p>词法分析器检查输入字符串并找到一个前缀匹配其中一个标记</p>
<p>构建词法分析器的第一件事是使用常规定义定义令牌的模式</p>
<p>一个特殊的token: ws→(blank I tab I newline)*</p>
<h2 id="Transition-Diagrams-状态转换图"><a href="#Transition-Diagrams-状态转换图" class="headerlink" title="Transition Diagrams (状态转换图)"></a>Transition Diagrams (状态转换图)</h2><p>构造词法分析器的一个重要步骤是将模式转换为“转换图”。</p>
<p>转换图有一组节点，称为状态(state)和边缘(edge)，从一个节点指向另一个节点</p>
<p><strong>States</strong></p>
<p>起始状态由标记为“start”的边表示，它从任何地方进入</p>
<p>接受状态，或者是最终的，表明已经找到了一个词素</p>
<p><strong>States Cont</strong></p>
<p>在某些接受状态下，找到的词素可能不包含我们从开始状态看到的所有字符</p>
<p>这样的状态用*来注释当进入状态时，需要收回指向输入字符串中下一个字符的前向指针。</p>
<p><strong>Edges</strong></p>
<p>边从一种状态指向另一种状态</p>
<p>每条边都用一个或一组符号来标记</p>
<p><strong>Recognition of Reserved Words and Identifiers (保留字和标识符的识别)</strong></p>
<p>在许多语言中，保留词或关键字(例如，then)还要匹配标识符的模式</p>
<h2 id="构建整个词法分析器"><a href="#构建整个词法分析器" class="headerlink" title="构建整个词法分析器"></a>构建整个词法分析器</h2><p>策略1:依次尝试每个令牌的转换图</p>
<p>Fail()向前重置指针并开始下一个图表</p>
<p>策略2:并行运行转换图</p>
<p>需要解决一个图找到一个词素，而其他图仍然能够处理输入的情况。</p>
<p>解决方案:使用与任何模式匹配的最长的输入前缀</p>
<p>策略3:将所有转换图组合为一个(首选)</p>
<p>允许转换图读取输入，直到没有可能下一个状态取与任何模式匹配的最长词素</p>
<h2 id="词法分析器生成器"><a href="#词法分析器生成器" class="headerlink" title="词法分析器生成器"></a>词法分析器生成器</h2><p>Lex程序有三个部分，用%%分隔</p>
<ul>
<li>Declaration (声明)</li>
<li>Translation rules (转换规则)</li>
<li>Auxiliary functions section (辅助函数)</li>
</ul>
<h2 id="Finite-Automata-有穷自动机"><a href="#Finite-Automata-有穷自动机" class="headerlink" title="Finite Automata (有穷自动机)"></a>Finite Automata (有穷自动机)</h2><h3 id="Nondeterministic-finite-automata-NFA-非确定有穷自动机"><a href="#Nondeterministic-finite-automata-NFA-非确定有穷自动机" class="headerlink" title="Nondeterministic finite automata (NFA, 非确定有穷自动机)"></a>Nondeterministic finite automata (NFA, 非确定有穷自动机)</h3><p>当一个状态面对一个输入符号的时候，所转换到的是一个唯一确定的状态。</p>
<p>S &#x3D; {0, 1, 2, 3}<br>Start state: 0<br>Accepting states: {3}<br>Transition function<br>▪ (0, a) → {0, 1} (0, b) → {0}<br>▪ (1, b) → {2} (2, b) → {3}</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%205.png" alt="Untitled"></p>
<h3 id="Transition-Table-转换表"><a href="#Transition-Table-转换表" class="headerlink" title="Transition Table 转换表"></a>Transition Table 转换表</h3><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%206.png" alt="Untitled"></p>
<h3 id="Deterministic-finite-automata-DFA-确定有穷自动机"><a href="#Deterministic-finite-automata-DFA-确定有穷自动机" class="headerlink" title="Deterministic finite automata (DFA, 确定有穷自动机)"></a>Deterministic finite automata (DFA, 确定有穷自动机)</h3><p>当一个状态面对一个输入符号的时候，它所转换到的可能不只一个状态，可以是一个状态集合。</p>
<h1 id="第三章-语法分析"><a href="#第三章-语法分析" class="headerlink" title="第三章:语法分析"></a>第三章:语法分析</h1><h2 id="描述语法"><a href="#描述语法" class="headerlink" title="描述语法"></a>描述语法</h2><blockquote>
<p>编程语言结构的语法可以通过上下文无关语法或BNF（Backus Naur Form）表示法指定<br>语法为编程语言提供了精确但易于理解的语法规范<br>对于某些语法，我们可以自动构建一个高效的解析器<br>设计得当的语法定义了一种语言的结构，有助于将源程序翻译成正确的目标代码并检测错误<br>语法允许通过添加新的结构来执行新的任务来迭代地进化或开发一种语言</p>
</blockquote>
<h3 id="语法分析器的角色"><a href="#语法分析器的角色" class="headerlink" title="语法分析器的角色"></a>语法分析器的角色</h3><ul>
<li>语法分析器从词法分析器获得token串，并验证token名称是否可以由源语言的语法生成</li>
<li>以智能的方式报告语法错误</li>
<li>对于格式良好的程序，语法分析器构建一个语法分析树<br>语法分析树无需显式构建</li>
</ul>
<h2 id="语法分析器的分类"><a href="#语法分析器的分类" class="headerlink" title="语法分析器的分类"></a>语法分析器的分类</h2><p>· 通用语法分析器</p>
<p>· 一些方法（例如，Earley算法1）可以解析任何语法<br>· 然而，它们效率太低，无法在实践中使用</p>
<p>· 自顶向下语法分析器</p>
<p>· 构建从顶部（根）到底部（叶）的语法分析树</p>
<p>· 自底向上语法分析器</p>
<p>·从底部（叶子）到顶部（根）构建语法分析树</p>
<p>注意：自上而下和自下而上的解析都从左到右扫描输入，一次扫描一个符号。它们只适用于某些语法，这些语法具有足够的表达能力。</p>
<h3 id="Context-Free-Grammar-上下文无关文法"><a href="#Context-Free-Grammar-上下文无关文法" class="headerlink" title="Context-Free Grammar (上下文无关文法)"></a>Context-Free Grammar (上下文无关文法)</h3><p>上下文无关语法（CFG）由四个部分组成：<br>· Terminals终结符号: 形成字符串的基本符号（token名称）<br>· Nonterminals非终结符号: 表示字符串集的语法变量 通常对应于一个语言结构，如stmt（statements）      一个非终结符被区分为开始符号 由开始符号表示的字符串集是CFG生成的语言<br>·Productions 产生式: 指定终结符号和非终结符号组合形成字符串的方式<br>     格式：head（左侧）-&gt; body（右侧）<br>     head是非终结符号；body由零个或多个终结符号或非终结符号组成<br>     例如：expression -&gt; expression + term</p>
<p>下面的语法定义了简单的算术表达式</p>
<p>Terminal symbols: id, +, -, *, &#x2F;, (, )<br>Nonterminals: expression, term, factor<br>Start symbol: expression<br>Productions:</p>
<p>expression → expression + term<br>expression → expression – term<br>expression → term<br>term → term * factor<br>term → term &#x2F; factor<br>term → factor<br>factor → ( expression )<br>factor → id</p>
<blockquote>
<p>符号简化<br>E → E + T | E – T | T<br>T → T * F | T &#x2F; F | F<br>F → ( E ) | id</p>
</blockquote>
<p>“|”是指定备选方案的元符号<br>“(”和”)”不是元符号，而是终结符号</p>
<h3 id="Derivation-推导"><a href="#Derivation-推导" class="headerlink" title="Derivation (推导)"></a>Derivation (推导)</h3><p>推导: 从开始符号开始，使用产生式重写非终结符，直到只剩下终结符为止</p>
<h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>⇒ 意思是“一步到位”<br>⇒ ∗ 意思是“以零个或多个步骤推导”	𝛼 ⇒∗ 𝛼 适用于任何字符串𝛼<br>⇒ “ 意思是“以一个或多个步骤推导”</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>• 如果S⇒ ∗ α, 其中S是语法G的开始符号，我们说α是G文法的句型<br>· 文法的句型可以同时包含终结符号和非终结符号，并且可以为空<br>· 示例𝐸 ⇒ −𝐸 ⇒ −(𝐸)⇒ −(𝐸+𝐸) ⇒ −(𝐢𝐝+𝐸) ⇒ −(𝐢𝐝 + 𝐢𝐝) 这里所有的语法符号串都是文法的句型<br>• 一个G的句子是一个没有非终结符的文法句型<br>· 在上面的例子中，只有最后一个字符串−(𝐢𝐝 + 𝐢𝐝)是一个句子<br>•语法产生的语言是它的一组句子</p>
<h3 id="最左-最右推导"><a href="#最左-最右推导" class="headerlink" title="最左&#x2F;最右推导"></a>最左&#x2F;最右推导</h3><p>在推导的每一步，我们都需要选择要替换的非终结符<br>在最左推导中,总是选择每个句型中最左边的非终结符来替换<br>在最右推导中, 总是选择最右边的非终结符来替换</p>
<h3 id="语法分析树"><a href="#语法分析树" class="headerlink" title="语法分析树"></a>语法分析树</h3><p>语法分析树是一种推导的图形表示，它过滤掉了产生式应用的顺序<br>· 根结点是文法的开始符号<br>· 每个叶子结点由终结符或𝜖标记<br>· 每个内部结点由非终结符标记<br>· 每个内部结点代表产生式的应用<br>· 内部节点用产生式的头部中的非终结符进行标记；<br>· 子节点由产生式主体中的符号从左到右进行标记</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%207.png" alt="Untitled"></p>
<h2 id="Ambiguity-二义性"><a href="#Ambiguity-二义性" class="headerlink" title="Ambiguity (二义性)"></a>Ambiguity (二义性)</h2><p>如果一个语法为某个句子生成了多个语法分析树，则它具有二义性<br>示例：该文法为id+id*id生成了两种语法分析树。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%208.png" alt="Untitled"></p>
<p>程序设计语言的语法通常需要明确<br>· 否则，将有多种方法来解释程序<br>· 问题：给定𝐸 → 𝐸 + 𝐸 | 𝐸 ∗ 𝐸 | (𝐸) | 𝐢𝐝, 如何解读 𝑎 + 𝑏 ∗ 𝑐?<br>· 答案：该文法是上一张PPT的示例，根据两种语法分析树，第一种解释：应先处理b*c，然后与a相加；第二种解释：应先处理a+b，然后与c相乘<br>在某些情况下，使用精心选择的歧义语法以及消歧规则来丢弃不需要的语法分析树是很方便的 </p>
<h2 id="CFG与正则表达式比较-CFG-vs-Regular-Expressions"><a href="#CFG与正则表达式比较-CFG-vs-Regular-Expressions" class="headerlink" title="CFG与正则表达式比较 CFG vs. Regular Expressions"></a>CFG与正则表达式比较 CFG vs. Regular Expressions</h2><p>CFG比正则表达式更具表达能力<br>· 可以用正则表达式描述的每个构造都可以用语法描述，但反之不成立<br>· 每个正则语言都是上下文无关的语言，但反之不成立<br>示例：$𝐿 &#x3D;{𝑎^𝑛𝑏^𝑛 | 𝑛&gt; 0}$<br>语言L可以用CFG：𝑆 → 𝑎𝑆𝑏 | 𝑎𝑏 来描述<br>L不能用正则表达式来描述。换句话说，我们不能构造一个DFA来接受L</p>
<h3 id="任何正则语言都可以用CFG描述"><a href="#任何正则语言都可以用CFG描述" class="headerlink" title="任何正则语言都可以用CFG描述"></a>任何正则语言都可以用CFG描述</h3><p>（结构证明）NFA可以接受每种常规语言。我们可以构造一个CFG来描述语言：<br>· 对于每个在NFA中的状态 𝑖 ，创建一个非终结符𝐴𝑖<br>· 如果状态𝑖 在碰到输入a转为状态j 时, 添加产生式$𝐴_𝑖→ 𝐴_j$<br>· 如果状态𝑖 是一个接受状态，添加产生式𝐴𝑖→𝜖<br>· 如果状态𝑖 是开始状态，将𝐴𝑖作为文法的开始符号</p>
<h2 id="语法设计"><a href="#语法设计" class="headerlink" title="语法设计"></a>语法设计</h2><p>CFG能够描述编程语言的大部分（但不是全部）语法<br>· CFG不能描述“使用前应声明标识符”<br>· 后续阶段必须分析解析器的输出，以确保符合此类规则<br>在解析之前，我们通常对语法进行几种转换，使其更适合解析<br>· 消除二义性<br>· 消除左递归<br>· 提取左公因子</p>
<h3 id="消除二义性"><a href="#消除二义性" class="headerlink" title="消除二义性"></a>消除二义性</h3><p>接近原则：用最接近的未匹配的then匹配else<br>· 重写的想法：出现在then和else之间的语句必须匹配（不能以不匹配的the结束）<br>重写语法以消除歧义是困难的。没有指导这一过程的一般规则。</p>
<h3 id="消除左递归"><a href="#消除左递归" class="headerlink" title="消除左递归"></a>消除左递归</h3><p>如果语法中存在一个非终结符A，使得某个字符𝛼有相关的产生式𝐴 ⇒+ 𝐴𝛼 ，则该语法为左递归语法<br>立即左递归: 语法有产生式𝐴 -&gt; 𝐴𝛼<br>自顶向下分析方法无法处理左递归语法（自底向上的分析方法可以处理…）</p>
<p><strong>消除立即左递归</strong><br>简单语法：𝐴 → 𝐴𝛼 | 𝛽 它生成以符号𝛽开头的句子，后面跟零个或更多的𝛼’s<br>将语法替换为：<br>𝐴 → 𝛽A’<br>A’ → 𝛼A’ | 𝜖<br>它现在是右递归了</p>
<blockquote>
<p>𝐴 → 𝐴𝛼1|…|𝐴𝛼𝑚|𝛽1|… | 𝛽𝑛<br>将语法替换为：<br>𝐴 →𝛽1A’ | … |𝛽nA’<br>A’ → 𝛼1A’ | … | 𝛼mA’ |𝜖</p>
</blockquote>
<p>例子：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%209.png" alt="Untitled"></p>
<p>消除左递归<br>消除立即左递归的技术不适用于非立即左递归<br>通用左递归消除算法（迭代）<br>· 输入：没有循环或𝜖-产生式<br>· 输出：没有左递归的等价语法</p>
<h2 id="Left-Factoring-提取左公因子"><a href="#Left-Factoring-提取左公因子" class="headerlink" title="Left Factoring (提取左公因子)"></a>Left Factoring (提取左公因子)</h2><p>如果我们有以下两个产生式</p>
<p>𝑠𝑡𝑚𝑡 → 𝐢𝐟 𝑒𝑥𝑝𝑟 𝐭𝐡𝐞𝐧 𝑠𝑡𝑚𝑡 𝐞𝐥𝐬𝐞 𝑠𝑡𝑚𝑡  |	𝐢𝐟 𝑒𝑥𝑝𝑟 𝐭𝐡𝐞𝐧 𝑠𝑡𝑚𝑡<br>看到输入时𝐢𝐟, 我们无法立即决定选择哪个产生式<br>一般来说，如果𝐴 → 𝛼𝛽1 | 𝛼𝛽2是两个产生式，并且输入以从𝛼派生的非空字符串开始. 我们可以通过扩大𝐴 到𝛼𝐴‘来推迟选择产生式</p>
<h2 id="自顶向下语法分析"><a href="#自顶向下语法分析" class="headerlink" title="自顶向下语法分析"></a>自顶向下语法分析</h2><p>问题定义：为输入字符串构建一个语法分析树，从根开始，按预序创建语法分析树的节点（深度优先）<br>· 相当于为输入字符串找到最左推导<br>基本思想（两个步骤）：<br>· 预测：在解析的每一步，确定最左边非终结符所用的生产式<br>· 匹配：将所选产生式主体中的终结符与输入字符串相匹配</p>
<h2 id="自底向上语法分析"><a href="#自底向上语法分析" class="headerlink" title="自底向上语法分析"></a>自底向上语法分析</h2><p>问题定义：为输入字符串构建一个从叶子（终结符）开始并向上延伸到根（语法的开始符号）的语法分析树<br>· 相当于为输入字符串找到最右推导（相反）<br>移入-归约分析技术是自底向上语法分析的通用方式（使用栈来保存语法符号）</p>
<p>自底向上语法分析可以看作是一个将字符串𝜔“归约”到开始符号的过程<br>在每一个归约步骤中，与产生式主体匹配的特定子串（位于堆栈顶部）都会被产生式的头部替换（与推导步骤相反）</p>
<h2 id="递归下降的语法分析"><a href="#递归下降的语法分析" class="headerlink" title="递归下降的语法分析"></a>递归下降的语法分析</h2><p>递归下降的语法分析程序对于每个非终结符都有一套程序<br>· 该程序会扫描与非终结符对应的结构（输入的子字符串）<br>从开始符号的程序开始执行<br>· 如果程序扫描整个输入字符串，则宣布成功</p>
<h2 id="Backtracking-回溯"><a href="#Backtracking-回溯" class="headerlink" title="Backtracking (回溯)"></a>Backtracking (回溯)</h2><p>一般的递归下降语法分析可能需要对输入进行重复扫描（回溯）</p>
<blockquote>
<p>算法流程更改：<br>与考察A-产生式不同，我们必须按照一定的顺序尝试每一种可能的产生式。<br>当第7行出现故障时，返回第1行并尝试另一个A产生式<br>为了尝试另一个A-产生式时，我们必须重置指向下一个要扫描的符号的输入指针（失败尝试的消耗符号）</p>
</blockquote>
<p>左递归带来的问题<br>如果CFG中有左递归，递归下降的语法分析器可能会进入无限循环，所以需要解析前修改CFG</p>
<h3 id="𝐹𝐼𝑅𝑆𝑇"><a href="#𝐹𝐼𝑅𝑆𝑇" class="headerlink" title="𝐹𝐼𝑅𝑆𝑇()"></a>𝐹𝐼𝑅𝑆𝑇()</h3><blockquote>
<p>假设输入字符串为𝒙𝒂<br>假设当前的句型是𝒙𝑨β<br>· 𝑨 是非终结符；β可以同时包含终结符和非终结符<br>如果我们知道产生式𝑨 → 𝑎 | 𝜸的以下事实:<br>·𝑎 ∈ 𝐹𝐼𝑅𝑆𝑇(𝛼) ：𝛼 可以推导以a开头的字符串<br>·𝑎 ∉ 𝐹𝐼𝑅𝑆𝑇(𝛾)：𝛾 不可以推导出以a开头的字符串<br>*𝐹𝐼𝑅𝑆𝑇(𝛼) 表示可从α推导得到的串的首符号的集合</p>
</blockquote>
<p>计算FIRST(𝑿) 𝑋 是语法符号<br>· 如果𝑋 是一个终结符，那么FIRST(𝑋) &#x3D; {𝑋}<br>· 如果X是一个非终结符，且𝑋 → 𝑌1𝑌2 … 𝑌𝑘 (𝑘 ≥ 1) 是一个产生式<br>    · 如果对于某个𝑖，𝑎在FIRST(𝑌i)中且𝜖在所有的FIRST(𝑌1), …, FIRST(𝑌i-1)中，就把𝑎加入到FIRST(𝑋)中<br>    · 如果对于所有的FIRST(𝑌1), …, FIRST(𝑌𝑘)，𝜖在其中，那么将𝜖加入到FIRST(𝑋)中<br>· 如果X是一个非终结符，并且存在产生式𝑋 → 𝜖，那么将𝜖加入到FIRST(𝑋)中</p>
<p>计算FIRST(𝑿𝟏𝑿𝟐 … 𝑿𝒏) 𝑿𝟏𝑿𝟐 … 𝑿𝒏是语法符号的串<br>· 向FIRST(𝑋1𝑋2 … 𝑋𝑛)加入FIRST(𝑋1)中所有的非𝜖符号<br>· 如果𝜖在FIRST(𝑋1)中，再加入FIRST(𝑋2)中所有的非𝜖符号；如果𝜖在FIRST(𝑋1)和FIRST(𝑋2)中，加入FIRST(𝑋3)中的所有非𝜖符号，以此类推。<br>· 最后，如果对于所有的i，𝜖都在FIRST(𝑋i)中，那么将加入到FIRST(𝑋1𝑋2 … 𝑋𝑛)中。</p>
<blockquote>
<p>假设输入字符串为𝒙𝒂<br>假设当前的句型是𝒙𝑨β<br>· 𝑨 是非终结符；β可以同时包含终结符和非终结符<br>如果我们知道生产𝑨 →𝛼, 𝜖 ∈ 𝐹𝐼𝑅𝑆𝑇(𝛼), 我们能选择重写A的产生式吗?<br>可以，只有在𝛽 可以推导以𝑎开头的字符串, 即，在一些句型中𝐴 后面可以跟着𝑎 （即，𝒂 ∈ 𝑭𝑶𝑳𝑳𝑶𝑾(𝑨))</p>
</blockquote>
<p>计算FOLLOW集<br>计算所有非终结符A的FOLLOW(A)集合<br>· 将$反复到中，其中S是开始符号，二是输入右端的结束标记<br>· 不断应用下面的规则，直到所有FOLLOW集不再改变<br>    · 如果存在一个产生式𝐴 → 𝛼𝐵𝛽，那么FIRST(𝛽)中除𝜖之外的所有符号都在FOLLOW(𝐵)<br>中<br>     · 如果存在一个产生式𝐴 → 𝛼𝐵 ，或存在产生式𝐴 → 𝛼𝐵𝛽且FIRST(𝛽)包含𝜖，那么FOLLOW(𝐴)中的所有符号都在FOLLOW(𝐵)<br>中<br>𝜖不会在任何FOLLOW集中</p>
<h2 id="LL-1-Grammars"><a href="#LL-1-Grammars" class="headerlink" title="LL(1) Grammars"></a>LL(1) Grammars</h2><p>我们可以为一类称为LL(1)的语法构造不需要回溯的递归下降语法分析器<br>从左到右扫描输入<br>产生最左推导<br>在每一步使用一个前瞻输入符号来作出分析决策</p>
<blockquote>
<p>语法𝑮 是LL(1)当且仅当对于任意两个不同的产生式𝐴 → 𝛼 | 𝛽, 以下条件成立：<br>1.不存在终结符𝑎 使得𝛼 和𝛽 都可以推导以𝑎开头的字符串<br>2.𝛼 和𝛽 中最多只有一个可以推导空字符串<br>3.如果𝛽 ⇒* 𝜖, 那么𝛼 不能推导出任何以FOLLOW(𝐴)中某个终结符开头的字符串，反之亦然<br>*这三个条件基本上排除了应用两个产生式的可能性<br>更正式地说：</p>
</blockquote>
<ol>
<li>FIRST(𝛼)∩ FIRST(𝛽)&#x3D; ∅ （上述条件1-2）<br>如果𝜖 ∈ FIRST(𝛽)，那么 FIRST(𝛼)∩ FOLLOW(𝐴)&#x3D; ∅ ，反之亦然<blockquote>
</blockquote>
</li>
</ol>
<p>对于LL(1)语法，在递归下降语法分析过程中，只需查看当前输入符号，就可以选择应用于非终结符的正确产生式：<br>给定文法<br>给出输入的分析步骤：<br>1.用产生式①重写开始符号stmt： 𝐢𝐟(𝐞𝐱𝐩𝐫)𝑠𝑡𝑚𝑡 𝐞𝐥𝐬𝐞 𝑠𝑡𝑚𝑡<br>2.用产生式②重写最左边的stmt：𝐢𝐟(𝐞𝐱𝐩𝐫)𝐰𝐡𝐢𝐥𝐞(𝐞𝐱𝐩𝐫) 𝑠𝑡𝑚𝑡  𝐞𝐥𝐬𝐞 𝑠𝑡𝑚𝑡<br>3.用产生式③重写最左边的stmt：𝐢𝐟(𝐞𝐱𝐩𝐫)𝐰𝐡𝐢𝐥𝐞(𝐞𝐱𝐩𝐫) 𝐚 𝐞𝐥𝐬𝐞 𝑠𝑡𝑚𝑡<br>4.用产生式③重写最左边的stmt：𝐢𝐟(𝐞𝐱𝐩𝐫)𝐰𝐡𝐢𝐥𝐞(𝐞𝐱𝐩𝐫) 𝐚 𝐞𝐥𝐬𝐞 a</p>
<h2 id="Parsing-Table-预测分析表"><a href="#Parsing-Table-预测分析表" class="headerlink" title="Parsing Table (预测分析表)"></a>Parsing Table (预测分析表)</h2><p>递归下降语法分析器（或LL分析器）是基于表的解析器<br>预测分析表是一个二维数组，用于确定解析器在看到非终结符A和符号a时应该选择哪个产生式<br>LL(1)解析器的预测分析表没有包含多个产生式的条目</p>
<h3 id="构造预测分析表"><a href="#构造预测分析表" class="headerlink" title="构造预测分析表"></a>构造预测分析表</h3><p>以下算法可以应用于任何CFG<br>输入：文法G<br>输出：预测分析表M<br>方法：对于每个产生式𝐴 → 𝛼 ，进行以下处理：<br>执行以下操作：<br>    ·对于FIRST(𝛼)中每个终结符𝑎，将𝐴 → 𝛼加入到𝑀[𝐴, 𝑎]<br>    · 如果𝜖在FIRST(𝛼)中，对于FOLLOW(𝐴)中每个终结符b，包括$，将𝐴 → 𝛼加入到𝑀[𝐴, b]<br>将表中的所有空条目设置为错误</p>
<h2 id="非递归的预测分析"><a href="#非递归的预测分析" class="headerlink" title="非递归的预测分析"></a>非递归的预测分析</h2><p>非递归的预测分析器可以通过显式维护堆栈（而不是通过递归调用隐式维护）来构建<br>· 输入缓冲区包含要解析的字符串，以$结尾<br>· 堆栈包含底部为$的语法符号序列。<br>最初，堆栈只包含$和在$顶部的开始符号𝑆</p>
<h3 id="表驱动的预测语法分析"><a href="#表驱动的预测语法分析" class="headerlink" title="表驱动的预测语法分析"></a>表驱动的预测语法分析</h3><p>输入：字符串𝜔 和文法G的预测分析表M<br>输出：如果𝜔 在𝐿(𝐺)中, 输出𝜔的一个最左边推导; 否则，给出一个错误指示<br>最初，输入缓冲区包含𝜔$<br>开始符号𝑆 位于堆栈顶部，在$上方。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%2010.png" alt="Untitled"></p>
<h2 id="自底向上分析"><a href="#自底向上分析" class="headerlink" title="自底向上分析"></a>自底向上分析</h2><p>自底向上的语法分析<br>问题定义：为输入字符串构建一个从叶子（终结符）开始并向上延伸到根（语法的开始符号）的语法分析树<br>· 相当于为输入字符串找到最右边的推导（相反）<br>移入-归约分析技术是一种自底向上语法分析的通用方式（使用栈来保存语法符号）</p>
<h3 id="Reductions-归约"><a href="#Reductions-归约" class="headerlink" title="Reductions (归约)"></a>Reductions (归约)</h3><p>自底向上语法分析可以看作是一个将字符串𝜔“归约”到开始符号的过程<br>在每一个归约步骤中，与产生式体匹配的特定子串（位于栈顶部）会被产生式的头部替换（与推导步骤相反）</p>
<h3 id="Handles-句柄"><a href="#Handles-句柄" class="headerlink" title="Handles (句柄)"></a>Handles (句柄)</h3><p>非正式地讲，句柄是和某个产生式体匹配的子串，对它的归约代表了相应的最右推导中的一个反向步骤<br>正式地讲，如果$S \Rightarrow^*_{rm} \alpha A<br>\omega\Rightarrow^*_{rm} \alpha \beta<br>\omega$，那么紧跟𝛼的产生式𝐴 → 𝛽 （或者简单地𝛽) 是句型𝛼𝛽𝜔的一个句柄</p>
<h3 id="Handle-Pruning-句柄剪枝"><a href="#Handle-Pruning-句柄剪枝" class="headerlink" title="Handle Pruning (句柄剪枝)"></a>Handle Pruning (句柄剪枝)</h3><p>在最右句型中， 句柄右侧的字符串必须仅包含终结符号<br>如果一个文法是无二义性的，那么该文法的每个右句型都有且只有一个句柄<br>通过句柄剪枝可以得到一个反向的最右推导</p>
<p>移入-归约语法分析技术是自底向上语法分析的一种通用方式，其中：</p>
<p>· 使用栈保存文法符号<br>· 使用输入缓冲区保存要进行语法分析的字符串的其余部分<br>· 栈内容（从底部到顶部）和输入缓冲区内容形成最右句型（假设没有错误）</p>
<p><strong>初始状态：</strong><br>移入-归约过程：<br>· 语法分析器将零个或多个输入符号转移到栈顶上，直到它可以对栈顶的一个文法符号串𝛽进行归约为止<br>· 将𝛽归约为某个产生式的头<br>语法分析器重复上述循环，直到检测到错误或栈包含开始符号且输入为空<br>*在移入-归约解析过程中，句柄最终总是出现在栈的顶部</p>
<h2 id="简单LR"><a href="#简单LR" class="headerlink" title="简单LR"></a>简单LR</h2><p>LR(k)语法分析器：最流行的自底向上的语法分析器类型<br>   · L： 从左到右扫描输入<br>   · R： 反向构造最右推导<br>   · k： 在做出解析决策时使用k个前瞻性输入符号<br>LR(0)和LR(1)语法分析器具有实际意义<br>当𝑘 ≥ 2时，语法分析器变得太复杂，无法构建（解析表太大，无法管理）</p>
<p>LR语法分析器的优势<br>· 表驱动（类似于非递归LL语法分析器）、强大<br>    · 尽管手工构建LR语法分析器工作量太大，但也有一些语法分析器生成器可以自动构建语法分析表<br>    · 相比之下，LL语法分析器往往更容易手工编写，但功能较弱（处理的语法较少）<br>· LR语法分析技术是已知的最通用的非回溯移入-归约语法分析方法<br>· LR语法分析器可以被构造为识别几乎所有可以为其编写CFG的编程语言结构<br>· LR语法比LL语法可以描述更多的语言<br>    · 回想文法成为LL(1)的严格条件</p>
<h2 id="LR-0-Items-LR-0-项"><a href="#LR-0-Items-LR-0-项" class="headerlink" title="LR(0) Items (LR(0)项)"></a>LR(0) Items (LR(0)项)</h2><p>一个LR语法分析器通过维护一些状态来跟踪在语法分析中所处的位置，从而来做出移入-归约的决策。<br>LR(0)项（简称item）是产生式再加上一个位于它的体中某处的点，表示在语法分析过程中的给定点上，我们已经看到了一个产生式的哪些部分。<br>𝐴 →} 𝑋𝑌𝑍        𝐴 → 𝑋 } 𝑌𝑍        𝐴 → 𝑋𝑌 } 𝑍         𝐴 → 𝑋𝑌𝑍 }<br>𝐴 → 𝑋 } 𝑌𝑍: 我们刚刚在输入中看到了一个可以由X推导得到的字符串，我们希望接下来看到一个能从YZ推导得到的字符串<br>状态：LR(0)项集<br>产生式𝐴 → 𝜖 仅生成一个item 𝐴 → ·</p>
<h3 id="规范LR-0-项集族"><a href="#规范LR-0-项集族" class="headerlink" title="规范LR(0)项集族"></a>规范LR(0)项集族</h3><p>LR(0)项集合的一个集合，称为规范LR(0)项集族, 为构建用于做出语法分析决定的DFA提供了基础<br>为了构造文法的LR(0)项集规范族，我们需要定义：<br>· 增广文法<br>· 两个函数：（1）项集闭包的CLOSURE 和（2）GOTO</p>
<h3 id="增广文法"><a href="#增广文法" class="headerlink" title="增广文法"></a>增广文法</h3><p>增广一个以S为开始符号的文法G：<br>· 引入一个新开始符号S‘代替S<br>· 增加产生式S‘ -&gt; S<br>明显地𝐿(𝐺)&#x3D;𝐿(𝐺’)<br>优点：通过增广，只有当语法分析器使用𝑆’ → 𝑆进行归约时输入符号串被接受。否则，输入符号串可能在多处被接受，因为可能存在多个𝑆-产生式</p>
<h3 id="项集闭包"><a href="#项集闭包" class="headerlink" title="项集闭包"></a>项集闭包</h3><p>如果𝐼 是文法𝐺的一组项集, 那么CLOSURE(𝐼)就是按照下面两条规则构造的项集：</p>
<ol>
<li>一开始，将𝐼中的各个项加入到CLOSURE(𝐼)</li>
<li>如果𝐴 → 𝛼 · 𝐵𝛽在CLOSURE(𝐼)中，𝐵 → 𝛾是一个产生式，并且𝐵 → ·𝛾不在CLOSURE(𝐼)中，那么将𝐵 → ·𝛾加入CLOSURE(𝐼)中。不断应用这条规则，直到没有新项可以加入到<br>直观地讲：𝐴 → 𝛼 · 𝐵𝛽 表示我们希望看到从一个能够从𝐵𝛽推导得到的子串。这个子串的某个前缀可以从B推导得到。因此，我们将所有𝐵-产生式加入到项集。</li>
</ol>
<h3 id="GOTO函数"><a href="#GOTO函数" class="headerlink" title="GOTO函数"></a>GOTO函数</h3><p>𝐆𝐎𝐓𝐎(𝑰, 𝑿) 其中𝑰是一个项集而𝑿是一个文法符号，被定义为𝑰中所有形如的项所对应的项的集合的闭包。</p>
<h3 id="LR-0-自动机"><a href="#LR-0-自动机" class="headerlink" title="LR(0)自动机"></a>LR(0)自动机</h3><p>“简单LR语法分析技术”（即SLR分析技术）的中心思想是根据文法构造出LR(0)自动机。<br>· 这个自动机的状态是规范LR(0)项集族<br>· 它的转换由GOTO函数给出<br>· 开始状态是CLOSURE({𝑆’ →· 𝑆})</p>
<h3 id="LR-0-自动机的使用"><a href="#LR-0-自动机的使用" class="headerlink" title="LR(0)自动机的使用"></a>LR(0)自动机的使用</h3><p>帮助做出移入-归约决定：<br>· 假设文法符号𝛾 使自动机从开始状态0运行到某个状态𝑗<br>· 如果下一个输入符号为𝑎且状态𝑗有一个在𝑎上的转换，那就移入𝑎<br>· 否则，归约；状态𝑗的项将会告诉我们使用哪个产生式进行归约</p>
<p>栈只保存状态，文法符号可以从相应状态中获取</p>
<h3 id="LR语法分析器结构"><a href="#LR语法分析器结构" class="headerlink" title="LR语法分析器结构"></a>LR语法分析器结构</h3><p>LR语法分析器由一个输入、一个输出、一个栈、一个驱动程序和一个语法分析表（ACTION+GOTO）组成<br>所有LR语法分析器的驱动程序都是相同的；只有语法分析表随语法分析器的不同而变化<br>栈保存一个状态序列<br>在SLR中，栈保存来自LR(0)自动机的状态<br>语法分析器根据（1）栈顶部的状态和（2）从输入缓冲区读取的终结符来决定下一个动作</p>
<h3 id="LR语法分析表：ACTION-GOTO"><a href="#LR语法分析表：ACTION-GOTO" class="headerlink" title="LR语法分析表：ACTION + GOTO"></a>LR语法分析表：ACTION + GOTO</h3><p>ACTION函数接受两个参数：（1）状态𝑖 和（2）终结符𝑎 （或$）<br>ACTION[𝒊, 𝒂] 可以具有以下四种形式的值之一：<br>· 移入𝒋: 其中𝑗是一个状态，把输入符号𝑎移入栈中，但使用状态𝑗 代表𝑎<br>· 归约𝑨 →𝛽: 将栈顶的𝛽归约为产生式头A<br>· 接受：语法分析器接受输入并完成语法分析过程<br>· 报错：存在语法错误<br>将定义在项集上的GOTO函数扩展为定义在状态集上的函数：如果GOTO(𝐼𝑖, 𝐴) &#x3D; 𝐼𝑗，那么GOTO也把状态𝑖和一个非终结符A映射到状态𝑗</p>
<h3 id="LR语法分析器的态势"><a href="#LR语法分析器的态势" class="headerlink" title="LR语法分析器的态势"></a>LR语法分析器的态势</h3><p>“态势”是表示语法分析器完整状态的符号。态势是一个形如：(𝑠0𝑠1 … 𝑠𝑚, 𝑎i𝑎i+1 … 𝑎𝑛$)的对<br>第一个分量是栈中的内容，第二个分量是余下的输入。<br>根据结构，每个状态（除𝑠0）对应于一组项和文法符号（导致状态转换的符号，即传入边上的符号）<br>· 假设𝑋i是状态𝑠i的文法符号<br>· 那么𝑋0𝑋1 … 𝑋𝑚𝑎i𝑎i+1 … 𝑎𝑛是最右句型（假设没有错误）</p>
<h3 id="构造SLR语法分析表"><a href="#构造SLR语法分析表" class="headerlink" title="构造SLR语法分析表"></a>构造SLR语法分析表</h3><p>SLR语法分析表𝐺以LR(0)项和LR(0)自动机为基础。</p>
<ol>
<li>构造增广文法G‘的规范LR(0)项集族{𝐼0, 𝐼1, … , 𝐼𝑛}</li>
<li>根据𝐼i构造得到状态i，状态i的语法分析动作按照下面的方法决定：<br>· 如果[𝐴 → 𝛼 · 𝑎𝛽]在𝐼𝑖中并且GOTO [𝐼𝑖, 𝑎 ]&#x3D; 𝐼j，那么将ACTION[ 𝑖, 𝑎]设置为“移入j”<br>· 如果[𝐴 → 𝛼·]在𝐼𝑖中，那么对于𝐅𝐎𝐋𝐋𝐎𝐖(𝑨)中的所有𝑎，将设置ACTION[ 𝑖, 𝑎]为“归约𝐴 → 𝛼”。这里𝐴不等于S’<br>· 如果[𝑆’ → 𝑆·]在𝐼𝑖中，那么将设置ACTION[𝑖, $]为“接受”</li>
<li>状态i对于各个非终结符号A的转换使用下面的规则构造得到：如果GOTO [𝐼i, 𝐴]&#x3D; 𝐼𝑗，那么GOTO[𝑖, 𝐴]&#x3D; 𝑗</li>
<li>规则2、3没有定义的所有条目都设置为“报错”</li>
<li>语法分析器的初始状态就是根据[𝑆′ → · 𝑆]所在项集构造得到的状态<br>如果在语法分析构造过程中没有冲突（即，一个表项的多个条目），则语法为SLR（1）</li>
</ol>
<p>在SLR中，状态𝑖 要求归约𝐴 → 𝛼，如果项集$𝐼_𝑖$包含项[𝐴 → 𝛼 · ] ，同时输入符号𝑎 在FOLLOW(𝐴)中<br>在某些情况下，归约后𝛽𝛼 在栈顶上会变成𝛽𝐴， 后面跟着的不是𝑎的任何最右句型</p>
<h2 id="规范LR"><a href="#规范LR" class="headerlink" title="规范LR"></a>规范LR</h2><h3 id="规范LR-1-项"><a href="#规范LR-1-项" class="headerlink" title="规范LR(1)项"></a>规范LR(1)项</h3><p>在状态中携带更多信息以排除一些无效的归约（通过分裂LR（0）状态）<br>LR(1)项的一般形式：[𝐴 → 𝛼 · 𝛽, 𝑎]<br>· 𝐴 → 𝛼𝛽是一个产生式，𝑎是一个终结符或右端结束标记<br>· 1指的是第二个分量𝑎的长度，第二个分量𝑎叫做向前看字符<br>· 当𝛽不为空时，向前看字符没有任何作用因为它决定是否归约<br>· 一个形如[𝐴 → 𝛼· , 𝑎]的项只有在下一个输入符号等于𝑎时，才会按照𝐴 → 𝛼进行归约。这样的𝑎的集合总是的FOLLOW(𝐴)子集<br>𝐴 → 𝛼𝛽 是一个生产和𝑎 是终端还是$“1”是指第二个组成部分的长度：展望(向前看字符)*如果𝛽 不是𝜖 因为它只帮助确定是否减少(𝑎 将在状态转换期间继承）表单中的一项𝐴 → 𝛼· , 𝑎要求减少𝐴 → 𝛼 仅当下一个输入符号𝑎 （𝑎’s是FOLLOW的子集(𝐴))*：LR（0）项没有先行符号，因此它们被称为LR（0</p>
<blockquote>
<p>构造LR（1）项集族本质上与构造规范LR（0）项集族相同。唯一的区别在于CLOSURE和GOTO函数。</p>
</blockquote>
<p>构造LR（1）项集族本质上与构造规范LR（0）项集族相同。唯一的区别在于CLOSURE和GOTO函数。<br>向前看符号从现有项传递到新项</p>
<h3 id="构造规范LR-1-语法分析表"><a href="#构造规范LR-1-语法分析表" class="headerlink" title="构造规范LR(1)语法分析表"></a>构造规范LR(1)语法分析表</h3><ol>
<li>构造增广文法G‘的规范LR(1)项集族{𝐼0, 𝐼1, … , 𝐼𝑛}</li>
<li>根据𝐼i构造得到状态i，状态i的语法分析动作按照下面的方法决定：<br>· 如果[𝐴 → 𝛼 · 𝑎𝛽, 𝑏 ]在𝐼𝑖中并且GOTO [𝐼𝑖, 𝑎 ]&#x3D; 𝐼j，那么将ACTION[ 𝑖, 𝑎]设置为“移入j”<br>· 如果[𝐴 → 𝛼·, 𝑎 ]在𝐼𝑖中，设置ACTION[ 𝑖, 𝑎]为“归约𝐴 → 𝛼”。这里𝐴不等于S’<br>· 如果[𝑆’ → 𝑆·, $ ]在𝐼𝑖中，那么将设置ACTION[𝑖, $]为“接受”<br>如果以上规则导致任何冲突的动作，我们就说这个文法不是LR(1)的。</li>
<li>状态i对于各个非终结符号A的转换使用下面的规则构造得到：如果GOTO [𝐼i, 𝐴]&#x3D; 𝐼𝑗，那么GOTO[𝑖, 𝐴]&#x3D; 𝑗</li>
<li>规则2、3没有定义的所有条目都设置为“报错”</li>
<li>语法分析器的初始状态就是根据[𝑆′ → · 𝑆, $]所在项集构造得到的状态</li>
</ol>
<h2 id="Lookahead-LR-LALR"><a href="#Lookahead-LR-LALR" class="headerlink" title="Lookahead LR (LALR)"></a>Lookahead LR (LALR)</h2><p>SLR(1)的功能不足以处理大量语法（回想一下以前的明确语法）<br>LR(1)在语法分析表中有一组庞大的状态（状态过于细粒度）<br>LALR(1)在实践中经常使用<br>· 在项中保留向前看符号<br>· 它的状态数与SLR(1)的状态数相同<br>· 可以处理现代程序设计语言中最常见的句法结构</p>
<p>寻找具有相同核心的LR(1)项集<br>LR(1)项集的核心是第一个分量的集合<br>· 𝐼4和𝐼7的核心是{𝐶 → 𝑑 ·}<br>· 𝐼3和𝐼6的核心是{𝐶 → 𝑐·𝐶,𝐶 → ·𝑐𝐶,𝐶 → ·𝑑}</p>
<blockquote>
<p>一般而言，一个核心就是LR(0)项集<br>我们可以将具有共同核心的LR(1)项集合并为一组项目<br>由于GOTO的核心(𝐼, 𝑋) 仅取决于𝐼, 合并项集的GOTO目标也具有相同的核心，因此可以合并</p>
</blockquote>
<h3 id="状态合并引发的冲突"><a href="#状态合并引发的冲突" class="headerlink" title="状态合并引发的冲突"></a>状态合并引发的冲突</h3><p>合并LR(1)语法分析表中的状态可能会导致冲突<br>合并不会导致移入&#x2F;归约冲突<br>· 假设合并后在向前看符号𝑎上存在移入&#x2F;归约冲突<br>· 有一个项[𝐴 → 𝛼·, 𝑎] 要求归约𝐴 → 𝛼<br>· 有其他项[𝐵 → 𝛽· 𝑎𝛾, ?]要求移入<br>· 由于要合并的集合的核心是相同的，因此合并前必须有一个集合同时包含[𝐴 → 𝛼· , 𝑎] 以及[𝐵 → 𝛽· 𝑎𝛾, ?]<br>· 那么根据LR(1)语法分析表构造算法，在合并之前，已经在𝑎上存在移入&#x2F;归约冲突 。该文法不是LR（1）。<br>合并状态可能导致归约&#x2F;归约冲突</p>
<p>构造LR(1)项集族$𝐶 &#x3D; {𝐼_0，𝐼_1，𝐼_𝑛}$<br>对于LR(1)项集中的每个核心，找出所有具有这个核心的项集，并将这些项集替换为它们的并集<br>令$𝐶’ &#x3D; {J_0，J_1，J_𝑛}$是合并后得到的项集族。<br>· 状态$𝑖$的语法分析动作是按照LR(1)语法分析表构造算法中的方法根据$𝐽_i$构造得到的<br>· 如果存在一个分析动作冲突，这个算法就不能生成语法分析器，这个文法不是LALR(1)的</p>
<p><strong>GOTO表构造方法如下：</strong></p>
<p>· 如果𝐽是一个或多个LR(1)项集的并集。也就是说 𝐽 &#x3D; 𝐼1 𝖴 𝐼2 𝖴 ⋯ 𝖴 𝐼𝑘，那么GOTO(𝐼1, 𝑋), GOTO(𝐼2, 𝑋), …, GOTO(𝐼𝑘, 𝑋)的核心是相同的，因为𝐼1, 𝐼2, … , 𝐼𝑘具有相同的核心<br>· 令𝐾是所有和GOTO(𝐼1, 𝑋)具有相同核心的项集的并集<br>· 那么GOTO(𝐽, 𝑋)&#x3D; 𝐾</p>
<h2 id="错误恢复"><a href="#错误恢复" class="headerlink" title="错误恢复"></a>错误恢复</h2><p><strong>LR语法分析中的错误恢复</strong></p>
<p>LR语法分析器应该能够处理错误：<br>· 报告错误的精确位置<br>· 从错误中恢复并继续分析<br>两种典型的错误<br>· 恐慌模式<br>· 短语层次的恢复</p>
<p><strong>恐慌模式</strong><br>基本思想：丢弃零个或多个输入符号，直到同步词法单元已找到<br>原理：<br>· 语法分析器总是查找可以从非终结符𝐴推导的输入的前缀<br>· 当出现错误时，意味着无法找到这样的前缀<br>· 如果错误仅发生在与𝐴相关的部分, 我们可以通过寻找一个可以合法跟随的符号来跳过这一部分<br>· 示例：如果𝐴 是𝑠𝑡𝑚𝑡, 则同步词法单元可以是分号</p>
<p><strong>短语层次的恢复</strong><br>基本思路：<br>· 检查语法分析表中的每个错误条目，并确定最有可能导致错误的程序员错误<br>· 修改栈顶部或第一个输入符号，并向程序员发出消息<br>短语层次的恢复示例：<br>· 删除右侧的）<br>· 提示“不匹配的右括号”。</p>
<h2 id="语法分析器生成工具"><a href="#语法分析器生成工具" class="headerlink" title="语法分析器生成工具"></a><strong>语法分析器生成工具</strong></h2><p>本节将介绍如何使用语法分析器生成工具来帮助构造一个编译器的前端，我们将使用LALR语法分析生成工具Yacc作为讨论的基础。Yacc，又一个编译器的编译器<br>Yacc在UNIX系统中是以命令的方式出现的，它已经用于实现多个编译器产品。Bison 是GNU项目的一部分，是对Yacc的扩展和改进。</p>
<p><strong>声明</strong><br>· 通常的C声明<br>· 对词法单元的声明<br><strong>翻译规则</strong><br>· 翻译规则 &#x3D; 产生式 + 语义动作<br><strong>辅助性C语言例程</strong><br>· 将会被直接拷贝至y.tab.c<br>· 可以在语义动作中调用<br>· 必须提供yylex()这一词法分析器，它将返回一个由词法单元和相关属性组成的词法单元<br>· 可以添加错误恢复例程等其他过程</p>
<blockquote>
<p><strong>翻译规则</strong><br>第一个产生式头符号被视为开始符号<br>一个语义动作是一个C语句的序列<br>· $$表示和相应产生时头部的非终结符关联的属性值<br>· $i表示和相应产生式体中第i个文法符号关联的属性值<br>当我们按照一个产生式归约时就会执行盒盖产生式相关联的语义动作<br>· 我们通常根据$i的值来计算$$的值</p>
</blockquote>
<h3 id="Yacc的冲突解决"><a href="#Yacc的冲突解决" class="headerlink" title="Yacc的冲突解决"></a>Yacc的冲突解决</h3><p>默认策略：<br>· 移入&#x2F;归约冲突：始终移入<br>· 归约&#x2F;归约冲突：归约第一个列出的产生式<br>指定终结符的优先级和结合性：<br>· 结核性：%left、%right、%nonassoc<br>· 移入𝒂&#x2F;归约𝑨 → 𝑎 冲突：比较的优先级𝑎 和𝐴 →𝛼 （优先级不够时使用结合性）<br>· 终结符的声明顺序决定了它们的优先级<br>· 一个产生式的优先级等于它最右边终结符的优先级。也可以使用%prec<terminal>指定，它将产生式的优先级定义为与终结符相同</p>
<h3 id="Yacc的错误恢复"><a href="#Yacc的错误恢复" class="headerlink" title="Yacc的错误恢复"></a>Yacc的错误恢复</h3><p>在Yacc中，错误恢复使用一种错误产生式的形式：<br>· 一般形式：𝐴 → 𝐞𝐫𝐫𝐨𝐫 𝛼<br>· 用户可以决定哪些非终结符（例如，生成表达式、语句、块等的非终结符）将具有错误产生式<br>错误示例：𝒔𝒕𝒎𝒕 → 𝐞𝐫𝐫𝐨𝐫 ;<br>· 该错误产生式规定当语法分析器遇到错误时，它要跳到下一个分号之后，并假设已经找到一条语句<br>· 将调用错误产生式的语义动作不需要处理输入，只需生成诊断消息</p>
<h1 id="Chapter-4-Syntax-Directed-Translation"><a href="#Chapter-4-Syntax-Directed-Translation" class="headerlink" title="Chapter 4:  Syntax-Directed Translation"></a>Chapter 4:  Syntax-Directed Translation</h1><h3 id="语法制导的翻译"><a href="#语法制导的翻译" class="headerlink" title="语法制导的翻译"></a><strong>语法制导的翻译</strong></h3><p>• 读取源程序的输入字符，将其归类为词素，并生成词素序列<br>• 必要时将词目添加到符号表中<br>• 删除注释和空白（空格、换行符、制表符等）<br>• 将错误信息与行号关联起来（跟踪换行符）</p>
<p>语法制导定义（SDD）是一种无上下文语法，同时包含属性和规则。<br>  一组属性（attributes）与每个语法符号相关联*。<br>    可以是任何属性，例如表达式的数据类型，# 生成代码中的指令<br>  语义规则（semantic rule）与语法生成相关联，描述如何计算属性<br>  属性代码表示结构体的后缀符号<br>  || 是字符串连接操作符</p>
<h3 id="合成属性"><a href="#合成属性" class="headerlink" title="合成属性"></a><strong>合成属性</strong></h3><p>如果一个属性在解析树节点 N 上的值仅由 N 的子节点和 N 本身的属性值决定，则称该属性为合成属性；</p>
<h3 id="SDD-不指定解析树上属性的计算顺序"><a href="#SDD-不指定解析树上属性的计算顺序" class="headerlink" title="SDD 不指定解析树上属性的计算顺序"></a><strong>SDD 不指定解析树上属性的计算顺序</strong></h3><p>任何顺序，只要能在依赖的所有其他属性之后计算一个属性就可以了合成属性有一个很好的特性，<br>即它们可以在解析树的一次自下而上的遍历中进行评估（通常不需要显式创建解析树）。</p>
<h3 id="继承属性"><a href="#继承属性" class="headerlink" title="继承属性"></a><strong>继承属性</strong></h3><p>继承属性在解析树节点上的值由该节点本身、其父节点和解析树中同级节点的属性值决定<br>回答：继承属性在处理与上下文相关的问题时仍然是非常有用的。它为我们提供了一种在语法树中考虑外部信息的方法，从而使得我们可以更为精确和灵活地描述语法制导定义的属性</p>
<p>给定解析树节点 $N,M_1,M_2,M_3,…,M_k，$如果 N 的属性 a 定义为 $N.a &#x3D; f(M_1,a_1,M_2,a_2,…,M_k,a_k)$，那么为了计算 N.a，我们必须先计算 $M_1. a_1$。<br>依赖图 (依赖图) 是确定评估顺序的有用工具<br>    描述特定解析树中属性实例之间的信息流<br>    为属性实例之间的部分顺序建模</p>
<p>从一个属性实例$（a_1）$到另一个属性实例$（a_2）$的边表示计算 $a_2$ 的值需要 $a_1$ 的值。<br>如果依赖关系图中存在循环，我们就无法找到计算所有属性实例值的顺序ε</p>
<h3 id="S-属性定义"><a href="#S-属性定义" class="headerlink" title="S 属性定义"></a>S 属性定义</h3><p>如果每个属性都是合成的，那么语法制导定义就是 S 属性的<br>直观地说，任何解析树的依赖关系图中都不可能存在循环，因为边总是从子节点到父节点，而不是相反。</p>
<p>当 SDD 具有 S 属性时，我们可以按照解析树节点的任何自下而上的顺序评估其属性。<br>例如，解析树的后序遍历（postorder traversal)<br>S 属性定义可以在自下而上的解析过程中轻松实现（相当于后序遍历）</p>
<h3 id="L-属性定义"><a href="#L-属性定义" class="headerlink" title="L 属性定义"></a>L 属性定义</h3><p>如果对于每个产品 $A → X_1X_2…X_n$，对于每个 J &#x3D; 1 … n，$x_j$ 的每个继承属性仅取决于以下属性，则 SDD 是 L 属性 SDD：<br>$x_1,…x_{j-1}$ 的属性（合成的或继承的），<br>或 A 的继承属性<br>依赖关系图的边可以从左到右（对于解析树而言），但不能从右到左（因此称为 “L-属性”）。</p>
<h3 id="L-属性定义的属性评估"><a href="#L-属性定义的属性评估" class="headerlink" title="L 属性定义的属性评估"></a>L 属性定义的属性评估</h3><p>输入: 解析树 T 中的节点 n<br>输出: 以 n 为根的子树属性的评估顺序<br>程序 depth_first(n)*<br>开始<br>      对于 n 的每个子节点 m，从左到右依次执行 开始<br>      评估 m 的继承属性；<br>      depth_first(m); &#x2F;&#x2F; 这里将评估 m 的合成属性<br>      结束<br>      评估 n 的合成属性；<br>      保证：在评估节点的继承属性时，已评估了其左侧节点的属性<br>end</p>
<h2 id="构建语法树"><a href="#构建语法树" class="headerlink" title="构建语法树"></a>构建语法树</h2><p><strong>抽象语法树</strong></p>
<p>每个内部节点 N 代表一个结构体（对应一个运算符）<br>N 的子节点代表 N 所代表结构的有意义成分（相当于操作数）</p>
<p><strong>语法树与解析树</strong></p>
<p>在语法树中，内部节点代表编程结构，而在解析树中，内部节点代表非终结符*。<br>解析树也称为具体语法树，其底层语法称为语言的具体语法</p>
<p>为简单表达式构建语法树的 S 属性 SDD<br>语法树的每个节点都是一个对象，其中有一个字段 op（代表节点的标签）和一些附加字段<br>叶节点：一个包含词法值的附加字段<br>内部节点：额外的字段数量等于子节点的数量</p>
<h2 id="计算类型的结构"><a href="#计算类型的结构" class="headerlink" title="计算类型的结构"></a>计算类型的结构</h2><p>• 正则语言（regular language）是一种可由 regexp<br>• 如果两个 regexps r 和 s 表示相同的语言，那么它们是等价的，写成 r &#x3D; s</p>
<p><strong>合成属性</strong>：这种属性通常用于将信息从叶子节点向上传递到父节点。在这里，合成属性t代表一个类型，这意味着某个节点（可能是一个变量或表达式）的类型可以通过计算其子节点的属性来确定，并将这个类型作为其自己的t属性。<br><strong>继承属性</strong>：这种属性是从父节点传递给子节点的。在这个描述中，继承属性t在解析树中向下传递一个基本类型。这通常意味着上层节点（例如，声明或类型定义的上下文）已经确定了某种基本类型，这个类型需要向下传递给子节点，以确保子节点可以根据这个类型进行相应的操作或检查。</p>
<h2 id="Syntax-Directed-Translation-Schemes"><a href="#Syntax-Directed-Translation-Schemes" class="headerlink" title="Syntax-Directed Translation Schemes"></a>Syntax-Directed Translation Schemes</h2><p>SDD 告诉我们在翻译中要做什么（高级规范），但不告诉我们如何做<br>语法制导的翻译方案（SDT’s，Syntax-directed translation schemes）规定了如何进行翻译的更多细节。<br>SDT 是一种无上下文语法，其语义动作（程序片段）嵌入在生产体中 ：<br>与 SDD 的语义规则不同<br>语义动作可以出现在制作体的任何地方</p>
<p>任何 SDT 都可以通过以下方式实现：</p>
<p>首先构建一棵解析树<br>将语义操作视为 “虚拟 “解析树节点<br>执行从左到右的深度优先（即预排序）树遍历，并在访问相应节点时触发操作</p>
<p><strong>SDD（Syntax Directed Definition）</strong>：<br>SDD定义了与语法产生式关联的属性和规则。它为每个语法产生式指定一个或多个属性计算或语义动作。<br>SDD关注于如何为语法树中的节点计算属性值，但不一定涉及产生中间代码或目标代码的具体操作。<br>它可以有合成属性和继承属性，因此可以描述为S属性的（只有合成属性）或L属性的（允许继承属性但有限制）。<br><strong>SDT（Syntax Directed Translation）</strong>：<br>SDT是SDD的一个特例，它专门用于生成中间代码或目标代码。换句话说，SDT的目的是翻译，它定义了与语法产生式关联的动作，这些动作通常在解析时执行。<br>当解析器在处理产生式时，与该产生式关联的SDT动作被执行，从而生成代码或进行其他翻译工作。<br>动作可以嵌入到产生式中，例如，在YACC或Bison这样的工具中，可以直接在语法规则中插入C代码作为动作。<br><strong>总结差异</strong>：<br>SDD更为通用，关注于为语法树的节点计算属性。这些属性可以用于多种目的，如类型检查、变量绑定等。<br>SDT特化于翻译任务，即将源代码转换为中间代码或目标代码。它通常涉及在解析过程中执行特定的动作。<br>尽管有这些区别，但在实际应用中，SDD和SDT的界限可能会模糊，因为编译器的语义分析和翻译阶段通常是交织在一起的</p>
<p>$$<br>B-&gt;X{a}Y<br>$$</p>
<p>动作 a 应在我们识别完 X（如果 X 是终端）或由 X 派生的所有终端（如果 X 是非终端）后执行<br>如果解析是自下而上的，那么一旦 X 出现在解析栈顶端，我们就执行操作 a<br>如果解析是自上而下的，我们在尝试扩展 Y（如果 Y 是非终端）或检查输入中的 Y（如果 Y 是终端）之前执行操作 a</p>
<blockquote>
<p><strong>底层语法是LR，而SDD是S属性的</strong>：<br><strong>LR语法</strong>：这是一种可以用自底向上的方式进行解析的语法。LR解析器从左到右读取输入，但决策是基于右侧的上下文进行的。它使用一个堆栈来存储已经读取的符号，并在适当的时候进行规约。<br><strong>S属性的SDD</strong>：这意味着所有属性都是合成属性，它们只从子节点传递给父节点，没有从父节点传递给子节点的继承属性。这对于自底向上的LR解析是非常合适的，因为我们从叶子节点开始构建并向上移动，因此只需要合成属性即可。<br>底层语法是LL，而SDD是L属性的：<br><strong>LL语法</strong>：这是一种可以用自顶向下的方式进行解析的语法。LL解析器从左到右读取输入，并基于左侧的上下文来进行决策。它通常使用递归下降的方法，直接从起始符号开始，并尝试应用各种产生式。</p>
</blockquote>
<p>如果 SDD 的语法是 LR，而且 SDD 是 S 属性的，那么我们就可以构造一个后缀 SDT（后缀 SDT），在自下而上的解析中实现 SDD 语义动作总是出现在制作的末尾（因此称为 “后缀”）。</p>
<h3 id="SDT’s-for-L-Attributed-SDD’s"><a href="#SDT’s-for-L-Attributed-SDD’s" class="headerlink" title="SDT’s for L-Attributed SDD’s"></a>SDT’s for L-Attributed SDD’s</h3><p>如果基础语法是 LL，那么 L 归因 SDD 可以在自上而下的解析过程中实现。<br>将 L 属性 SDD 转化为 SDT 的方法是将语义动作放在相关语篇 A → X1X2…Xn 的适当位置上。<br>将计算非终端 Xi 的继承属性的动作紧接在生产体中 Xi 的前面<br>将为语篇头部计算合成属性的操作放在语篇主体的末尾</p>
<h3 id="构建整个词法分析器-1"><a href="#构建整个词法分析器-1" class="headerlink" title="构建整个词法分析器"></a>构建整个词法分析器</h3><p>• 策略 1：依次尝试每个标记的过渡图<br>fail() 重置指针并开始下一个图表<br>• 策略 2：并行运行过渡图<br>需要解决一个图找到一个词素，而其他图仍能处理输入的情况。<br>▪ 解决方法：取输入中与任何模式匹配的最长前缀<br>• 策略 3：将所有过渡图合并为一张图（首选）<br>允许过渡图读取输入，直到没有可能的下一个状态为止<br>取与任何模式匹配的最长词素<br>语义操作：<br>a) L1 &#x3D; new()；L2 &#x3D; new()；<br>b) C.false &#x3D; S.next; C.true &#x3D; L2；<br>c) S1.next &#x3D; L1；<br>d) S.code &#x3D; ⋯ ；<br>根据动作位置规则，<br>b) 应放在制作体之前，c) 应放在制作体之前，d) 应放在制作体末尾<br>a) 可以放在开头；没有限制条件</p>
<h2 id="Implementing-L-Attributed-SDD’s"><a href="#Implementing-L-Attributed-SDD’s" class="headerlink" title="Implementing L-Attributed SDD’s"></a>Implementing L-Attributed SDD’s</h2><p>许多翻译应用都可以使用 L 归因 SDD 来解决。如下所示，我们可以扩展递归-后裔解析器来实现 L 归因 SDD：<br>递归-迭代解析器为每个非终端 A 都有一个函数 A<br>使用函数 A 的参数传递 A 的继承属性<br>当函数 A 完成时，返回 A 的合成属性<br>通过上述扩展，在函数 A 的主体中，我们需要同时解析和处理属性</p>
<h1 id="Chapter-5-Intermediate-Code-Generation"><a href="#Chapter-5-Intermediate-Code-Generation" class="headerlink" title="Chapter 5: Intermediate-Code Generation"></a>Chapter 5: Intermediate-Code Generation</h1><h2 id="中间表示法"><a href="#中间表示法" class="headerlink" title="中间表示法"></a>中间表示法</h2><p>编译器的前端分析源程序并创建中间表示（IR，intermediate representation），后端据此生成目标代码。<br>理想情况下，源语言的细节仅限于前端，目标机的细节仅限于后端</p>
<h2 id="编译器可构建-IR-序列"><a href="#编译器可构建-IR-序列" class="headerlink" title="编译器可构建 IR 序列"></a>编译器可构建 IR 序列</h2><p>语法树等高级 IR 接近源语言。它们描述了源程序的结构，适用于静态类型检查等任务<br>低级 IR 接近目标机器，适用于寄存器分配和指令选择等与机器相关的任务。<br>三地址代码可以是高级或低级的，取决于运算符的选择</p>
<p>有趣的事实：C 经常被用作中间形式。第一个 C++ 编译器的前端生成 C，后端是 C 编译器</p>
<h2 id="DAG’s-for-Expressions"><a href="#DAG’s-for-Expressions" class="headerlink" title="DAG’s for Expressions"></a>DAG’s for Expressions</h2><p>在语法树中，一个普通子表达式的语法树将按该子表达式出现的次数复制</p>
<p>Example: $𝑎+𝑎∗(𝑏−𝑐)+(𝑏−c)∗𝑑$会重复两次，而$（b-c）$也重复了两次</p>
<p>有向无环图 (DAG, 有向无环图) 识别共同的子表达式，并简洁地表示表达式</p>
<p>蓝圈节点有两个父节点</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%2011.png" alt="Untitled"></p>
<p>DAG 可以用构造语法树的 SDD 来构造<br>区别：在构建 DAG 时，只有当且仅当没有现存的相同节点时，才会创建新节点</p>
<h2 id="Three-Address-Code-三地址代码"><a href="#Three-Address-Code-三地址代码" class="headerlink" title="Three-Address Code (三地址代码)"></a>Three-Address Code (三地址代码)</h2><p>在三地址代码中，指令右侧最多只有一个运算符<br>指令的形式通常是 $𝑥 &#x3D; 𝑦\ 𝑜𝑝\ 𝑧$<br>运算符（或地址）可以是：</p>
<p>源程序中的名称<br>常量：编译器必须处理多种类型的常量<br>编译器生成的临时名称</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><strong>赋值指令：</strong><br>𝑥 &#x3D; 𝑦 op 𝑧，其中 op 是二进制算术&#x2F;逻辑运算<br>𝑥&#x3D; op 𝑦，其中 op 是一元运算<br><strong>复制指令：</strong> 𝑥 &#x3D; 𝑦<br><strong>无条件跳转指令：</strong>goto 𝐿，其中 𝐿 是跳转目标的标记<br><strong>有条件跳转指令：</strong><br>if 𝑥 goto 𝐿<br>if Flase 𝑥 goto 𝐿<br>if 𝑥 relop 𝑦 goto 𝐿</p>
<p><strong>程序调用和返回：</strong></p>
<p>param 𝑥1<br>…<br>param 𝑥𝑛<br>call 𝑝, 𝑛 (procedure call)<br>y &#x3D; call p, n (function call)<br>return y<br><strong>索引复制指令：</strong> 𝑥 &#x3D; 𝑦[𝑖] 𝑥[𝑖] &#x3D; 𝑦<br>这里，𝑦[𝑖] 表示位置 𝑖 存储单元中超出位置 𝑦 的值。这里，𝑦[𝑖] 表示位置 𝑖存储单元中超出位置 𝑦 的值。<br><strong>地址和指针赋值指令：</strong><br>𝑥 &#x3D; &amp;𝑦 ，𝑥 &#x3D;∗ 𝑦， ∗ 𝑥 &#x3D; 𝑦</p>
<blockquote>
<p>对三地址指令的描述说明了每种指令的组成部分，但没有说明指令的表示方法。<br>在编译器中，这些指令可以作为对象&#x2F;记录来实现，并为运算符和操作数设置字段<br>三种典型的表示法:</p>
<p>四元式表示方法<br>三元式表示方法<br>间接三元式表示方法</p>
</blockquote>
<h3 id="Quadruples-四元式"><a href="#Quadruples-四元式" class="headerlink" title="Quadruples (四元式)"></a>Quadruples (四元式)</h3><p>一个四元组（或 “四元组”）有四个字段<br>    一般形式： op arg1 arg2 result<br>    op 包含运算符的内部代码<br>    arg1、arg2、result 是地址（操作数）<br>一元运算符（如 x &#x3D; 减 y 或 x &#x3D; y）不使用 arg2<br>参数运算符既不使用 arg2 也不使用 result<br>条件&#x2F;非条件跳转将目标标签放在 result 中</p>
<h3 id="Triples-三元式"><a href="#Triples-三元式" class="headerlink" title="Triples (三元式)"></a>Triples (三元式)</h3><p>三元组只有三个字段：操作、参数 1、参数 2。<br>我们用操作 x 操作 y 的位置来表示操作结果，而无需生成临时名称（这是对四元组的优化）</p>
<h3 id="Indirect-Triples-间接三元式"><a href="#Indirect-Triples-间接三元式" class="headerlink" title="Indirect Triples (间接三元式)"></a>Indirect Triples (间接三元式)</h3><p>间接三元组由一个指向三元组的指针列表（下面的指令数组）<br>优化可以通过重新排序指令列表来移动指令（无需修改三元组）<br>交换后，列表中的第一条和第二条指令仍然指向正确的指令</p>
<p>静态单赋值形式静态单赋值形式（SSA，Static Single-Assignment ForStatic single-assignment form）是一种 IR，有助于某些代码优化。<br>在 SSA 中，每个名称只接受一次赋值</p>
<p>SSA 使用一种称为 𝜙 函数的符号惯例来合并 x 的两个定义</p>
<h2 id="Types-and-Type-Checking"><a href="#Types-and-Type-Checking" class="headerlink" title="Types and Type Checking"></a>Types and Type Checking</h2><p>数据类型或简单的类型告诉编译器或解释器程序员打算如何使用数据<br>类型信息的作用<br>    查找源代码中的错误<br>    在运行时确定名称所需的存储空间<br>    计算数组元素的地址<br>    插入类型转换<br>选择算术运算符的正确版本（如 fadd、iadd）<br>类型检查(类型检查) 使用逻辑规则确保操作数的类型与运算符所期望的类型匹配</p>
<h2 id="Type-Expressions-类型表达式"><a href="#Type-Expressions-类型表达式" class="headerlink" title="Type Expressions (类型表达式)"></a>Type Expressions (类型表达式)</h2><p>类型具有结构，可以用类型表达式来表示<br>    类型表达式要么是基本类型，要么是通过对类型表达式应用类型构造算子而形成<br>array(2, array (3, integer ))是 int[2][3] 的类型表达式<br>    array 是一个类型构造函数，有两个参数：一个数字，一个类型表达式</p>
<h2 id="Name-Equivalence-名等价"><a href="#Name-Equivalence-名等价" class="headerlink" title="Name Equivalence (名等价)"></a>Name Equivalence (名等价)</h2><p>将命名的类型视为基本类型；类型表达式中的名称不会被其定义的类型表达式所替换<br>当且仅当两个类型表达式完全相同时，它们的名称才是等价的(由相同的语法树表示，具有相同的标签）</p>
<h2 id="Structural-Equivalence-结构等价"><a href="#Structural-Equivalence-结构等价" class="headerlink" title="Structural Equivalence (结构等价)"></a>Structural Equivalence (结构等价)</h2><p>对于已命名的类型，用其类型表达式替换类型名，并递归检查替换后的树</p>
<h2 id="Declarations-类型的声明"><a href="#Declarations-类型的声明" class="headerlink" title="Declarations (类型的声明)"></a>Declarations (类型的声明)</h2><p>下面的语法涉及基本类型、数组类型和记录类型</p>
<p>非终端 𝐷生成声明序列<br>𝑇 生成基本类型、数组类型或记录类型，记录类型是记录字段的声明序列，由大括号包围<br>𝐵 生成基本类型之一：int 和 float<br>𝐶 生成一个或多个整数的序列，每个整数都由大括号包围</p>
<h2 id="Storage-Layout-for-Local-Names-局部变量的存储布局"><a href="#Storage-Layout-for-Local-Names-局部变量的存储布局" class="headerlink" title="Storage Layout for Local Names (局部变量的存储布局)"></a>Storage Layout for Local Names (局部变量的存储布局)</h2><p>根据名称的类型，我们可以决定运行时名称所需的内存量。运行时名称所需的内存量<br>    类型的宽度（宽度）： 该类型对象所需的 # 内存单位<br>    对于长度不等的数据（如字符串），或在运行前无法确定大小的数据（如动态数组），我们只为数据指针预留固定的内存量。<br>    对于函数的局部名称，我们总是分配连续的字节*。<br>    对于每个这样的名称，我们可以在编译时计算出一个相对地址<br>类型信息和相对地址存储在符号表中</p>
<h2 id="表达式的翻译"><a href="#表达式的翻译" class="headerlink" title="表达式的翻译"></a>表达式的翻译</h2><p>包含多个运算符的表达式：𝑎 + 𝑏 ∗ 𝑐<br>转换为多条指令，每条指令最多使用一个运算符𝑡1 &#x3D; 𝑏 ∗ 𝑐,𝑡2 &#x3D; 𝑎 + 𝑡1<br>数组引用𝐴[𝑖][𝑗] 将扩展为一系列三地址指令，用于计算引用的地址</p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>信息系统安全课程笔记</title>
    <url>/2024/01/14/BUPT_note/Notes%20on%20Information%20System%20Security/</url>
    <content><![CDATA[<h1 id="信息系统安全"><a href="#信息系统安全" class="headerlink" title="信息系统安全"></a>信息系统安全</h1><h1 id="信息系统发展趋势（自学）"><a href="#信息系统发展趋势（自学）" class="headerlink" title="信息系统发展趋势（自学）"></a>信息系统发展趋势（自学）</h1><h1 id="第一讲-信息系统概述"><a href="#第一讲-信息系统概述" class="headerlink" title="第一讲  信息系统概述"></a>第一讲  信息系统概述</h1><h2 id="信息系统架构"><a href="#信息系统架构" class="headerlink" title="信息系统架构"></a>信息系统架构</h2><h3 id="单机架构"><a href="#单机架构" class="headerlink" title="单机架构"></a><strong><strong>单机架构</strong></strong></h3><p>在网站开设初期，应用数量与用户数都较少，可以把Tomcat和数据库部署在同一台服务器上。</p>
<h3 id="第一次演进：Tomcat与数据库分开部署"><a href="#第一次演进：Tomcat与数据库分开部署" class="headerlink" title="第一次演进：Tomcat与数据库分开部署"></a><strong><strong>第一次演进：Tomcat与数据库分开部署</strong></strong></h3><p>Tomcat和数据库分别独占服务器资源，显著提高两者各自性能</p>
<h3 id="第二次演进：引入本地缓存和分布式缓存"><a href="#第二次演进：引入本地缓存和分布式缓存" class="headerlink" title="第二次演进：引入本地缓存和分布式缓存"></a><strong><strong>第二次演进：引入本地缓存和分布式缓存</strong></strong></h3><p>在Tomcat服务器增加本地缓存，并在外部增加分布式缓存，缓存热门商品信息或热门商品的HTML页面等。通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力</p>
<h3 id="第三次演进：引入反向代理实现负载均衡"><a href="#第三次演进：引入反向代理实现负载均衡" class="headerlink" title="第三次演进：引入反向代理实现负载均衡"></a><strong><strong>第三次演进：引入反向代理实现负载均衡</strong></strong></h3><p>在多台服务器上分别部署Tomcat，使用反向代理软件（Nginx）把请求均匀分发到每个Tomcat中。假设Tomcat最多支持100个并发，Nginx最多支持50000个并发，那么理论上Nginx把请求分发到500个Tomcat上，就能抗住50000个并发</p>
<h3 id="第四次演进：数据库读、写分离"><a href="#第四次演进：数据库读、写分离" class="headerlink" title="第四次演进：数据库读、写分离"></a><strong><strong>第四次演进：数据库读、写分离</strong></strong></h3><p>把数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库，对于需要查询最新写入数据场景，可通过在缓存中多写一份，通过缓存获得最新数据</p>
<h3 id="第五次演进：数据库按业务分库"><a href="#第五次演进：数据库按业务分库" class="headerlink" title="第五次演进：数据库按业务分库"></a><strong><strong>第五次演进：数据库按业务分库</strong></strong></h3><p>把不同业务的数据保存到不同的数据库中，降低业务之间的资源竞争，对于访问量大的业务，可以部署更多的服务器来支撑。这样同时导致跨业务的表无法直接做关联分析，需要通过其他途径来解决</p>
<h3 id="第六次演进：把大表拆分为小表"><a href="#第六次演进：把大表拆分为小表" class="headerlink" title="第六次演进：把大表拆分为小表"></a><strong><strong>第六次演进：把大表拆分为小表</strong></strong></h3><p>这种做法显著增加了数据库运维的难度，对DBA的要求较高!!!</p>
<p>比如针对评论数据，可按照商品ID进行hash，路由到对应的表中存储；针对支付记录，可按照小时创建表，每个小时表继续拆分为小表，使用用户ID或记录编号来路由数据。只要实时操作的表数据量足够小，请求能够足够均匀地分发到多台服务器上的小表，那数据库就能通过水平扩展的方式来提高性能</p>
<h3 id="第七次演进：使用LVS或F5使多个Nginx负载均衡"><a href="#第七次演进：使用LVS或F5使多个Nginx负载均衡" class="headerlink" title="第七次演进：使用LVS或F5使多个Nginx负载均衡"></a><strong><strong>第七次演进：使用LVS或F5使多个Nginx负载均衡</strong></strong></h3><p>LVS是软件，运行在操作系统内核态，可对TCP请求或更高层级的网络协议进行转发，因此支持的协议更丰富，并且性能也远高于Nginx，可假设单机的LVS可支持几十万个并发的请求转发；F5是一种负载均衡硬件，与LVS提供的能力类似，性能比LVS更高，但价格昂贵。</p>
<h3 id="第八次演进：通过DNS轮询实现机房间的负载均衡"><a href="#第八次演进：通过DNS轮询实现机房间的负载均衡" class="headerlink" title="第八次演进：通过DNS轮询实现机房间的负载均衡"></a><strong><strong>第八次演进：通过DNS轮询实现机房间的负载均衡</strong></strong></h3><p>在DNS服务器中可配置一个域名对应多个IP地址，每个IP地址对应到不同的机房里的虚拟IP。当用户访问<a href="http://www.taobao.com时,dns服务器会使用轮询策略或其他策略,来选择某个ip供用户访问/">www.taobao.com时，DNS服务器会使用轮询策略或其他策略，来选择某个IP供用户访问</a></p>
<h3 id="第九次演进：引入NoSQL数据库和搜索引擎等技术"><a href="#第九次演进：引入NoSQL数据库和搜索引擎等技术" class="headerlink" title="第九次演进：引入NoSQL数据库和搜索引擎等技术"></a><strong><strong>第九次演进：引入NoSQL数据库和搜索引擎等技术</strong></strong></h3><p>针对特定的场景，引入合适的解决方案。如对于海量文件存储，可通过分布式文件系统HDFS解决，对于key&#x2F;value类型的数据，可通过HBase和Redis等方案解决，对于全文检索场景，可通过搜索引擎如ElasticSearch解决，对于多维分析场景，可通过Kylin或Druid等方案解决</p>
<h3 id="第十次演进：大应用拆分为小应用"><a href="#第十次演进：大应用拆分为小应用" class="headerlink" title="第十次演进：大应用拆分为小应用"></a><strong><strong>第十次演进：大应用拆分为小应用</strong></strong></h3><p>按照业务板块来划分应用代码，使单个应用的职责更清晰，相互之间可以做到独立升级迭代。这时候应用之间可能会涉及到一些公共配置，可以通过分布式配置中心Zookeeper来解决</p>
<h3 id="第十一次演进：复用的功能抽离成微服务"><a href="#第十一次演进：复用的功能抽离成微服务" class="headerlink" title="第十一次演进：复用的功能抽离成微服务"></a><strong><strong>第十一次演进：复用的功能抽离成微服务</strong></strong></h3><p>如用户管理、订单、支付、鉴权等功能在多个应用中都存在，那么可以把这些功能的代码单独抽取出来形成一个单独的服务来管理，这样的服务就是所谓的微服务，应用和服务之间通过HTTP、TCP或RPC请求等多种方式来访问公共服务，每个单独的服务都可以由单独的团队来管理</p>
<h3 id="第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"><a href="#第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异" class="headerlink" title="第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"></a><strong><strong>第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异</strong></strong></h3><p>通过ESB统一进行访问协议转换，应用统一通过ESB来访问后端服务，服务与服务之间也通过ESB来相互调用，以此降低系统的耦合程度。这种单个应用拆分为多个应用，公共服务单独抽取出来来管理，并使用企业消息总线来解除服务之间耦合问题的架构，就是所谓的SOA（面向服务）架构</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a><strong><strong>架构</strong></strong></h2><p>架构（architecture）是针对某种特定目标系统的普遍性</p>
<p>问题而提供的具有体系性质的、通用的解决方案，是对复</p>
<p>杂系统的一种共性的体系抽象，目的是帮助人们能够正确、</p>
<p>合理地理解、设计和最终构建复杂的系统。</p>
<h3 id="信息系统体系架构分析的必要性：系统的复杂度"><a href="#信息系统体系架构分析的必要性：系统的复杂度" class="headerlink" title="信息系统体系架构分析的必要性：系统的复杂度"></a><strong><strong>信息系统体系架构分析的必要性：系统的复杂度</strong></strong></h3><p>从系统分析方法论的角度看，如果一个系统过于复杂，则对其进行分析的最好方法就是按照某种角度对整个系统进行<strong>解构</strong>。</p>
<h1 id="第二讲-信息系统安全概述"><a href="#第二讲-信息系统安全概述" class="headerlink" title="第二讲 信息系统安全概述"></a>第二讲 信息系统安全概述</h1><p>攻击致命度：攻击所具有的固话危害程度</p>
<p>描述网络威胁信息的结构化语言：STIX（结构化威胁信息表达式）</p>
<h2 id="信息系统的脆弱性"><a href="#信息系统的脆弱性" class="headerlink" title="信息系统的脆弱性"></a>信息系统的脆弱性</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>硬件电路也可以设计后门（在电容器累计电荷，触发操作）</p>
<p><strong>Intel AMT存在高危漏洞</strong></p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>软件问题漏洞来自于软件的复杂性</p>
<h3 id="攻防不对称性"><a href="#攻防不对称性" class="headerlink" title="攻防不对称性"></a><strong><strong>攻防不对称性</strong></strong></h3><table>
<thead>
<tr>
<th>攻击可以在任意时刻发起</th>
<th>防御必须随时警惕</th>
</tr>
</thead>
<tbody><tr>
<td>攻击可以选择一个薄弱点进行</td>
<td>防御必须全线设防</td>
</tr>
<tr>
<td>攻击包含了对未知缺陷的探测</td>
<td>防御只能对已知的攻击防御</td>
</tr>
<tr>
<td>攻击常在暗处，具隐蔽性</td>
<td>防御常在明处，表面看起来完美，使人容易疏忽，丧失警惕</td>
</tr>
<tr>
<td>攻击可以肆意进行</td>
<td>防御必须遵循一定的规则</td>
</tr>
</tbody></table>
<ul>
<li>网络是个整体，攻击可以从任何一个薄弱点发起</li>
<li>网络攻击已自动化和智能化</li>
<li>安全响应速度要求越来越快，但面对海量安全事件，人力无法及时有效地分析处理</li>
</ul>
<h2 id="网络切片带来的安全挑战"><a href="#网络切片带来的安全挑战" class="headerlink" title="网络切片带来的安全挑战"></a><strong><strong>网络切片带来的安全挑战</strong></strong></h2><p>网络切片对网络构建带来了一定的挑战，需要考虑以下安全需求：</p>
<ul>
<li>切片授权与接入控制</li>
<li>切片间的资源冲突</li>
<li>切片间的安全隔离</li>
<li>切片用户的隐私保护</li>
<li>以切片方式隔离故障网元</li>
</ul>
<h2 id="信息系统安全实现"><a href="#信息系统安全实现" class="headerlink" title="信息系统安全实现"></a><strong><strong>信息系统安全实现</strong></strong></h2><p>信息系统安全保障是在信息系统的整个生命周期中，通过对信息系统的风险分析，制定并执行相应的安全保障策略，从技术、管理、工程和人员等方面提出安全保障要求，确保信息系统的保密性、完整性和可用性，降低安全风险到可接受的程度，从而保障系统实现组织机构的使命</p>
<h2 id="信息系统安全保障模型⎯⎯CMM框架"><a href="#信息系统安全保障模型⎯⎯CMM框架" class="headerlink" title="信息系统安全保障模型⎯⎯CMM框架"></a><strong><strong>信息系统安全保障模型⎯⎯CMM框架</strong></strong></h2><p>第一能力级别0：未实施<br>第二能力级别1：基本执行<br>第三能力级别2：计划跟踪<br>第四能力级别3：充分定义<br>第五能力级别4：量化控制<br>第六能力级别5：持续改进</p>
<h2 id="信息系统安全的理解"><a href="#信息系统安全的理解" class="headerlink" title="信息系统安全的理解"></a><strong><strong>信息系统安全的理解</strong></strong></h2><p>信息网络的硬件、软件及其系统中的数据受到保护，不受偶然的或者恶意的原因而遭到破坏、更改、泄露，系统连续可靠正常地运行，信息服务不中断。</p>
<h3 id="信息系统安全的实质"><a href="#信息系统安全的实质" class="headerlink" title="信息系统安全的实质"></a><strong><strong>信息系统安全的实质</strong></strong></h3><p><strong><strong>安全＝及时的检测和处理</strong></strong></p>
<p>$$<br>P_t&gt;Dt+R_t<br>$$</p>
<p>防护时间<em>Pt</em>：黑客在到达攻击目标之前需要攻破很多的设备（路由器，交换机）、系统（NT，UNIX）和防火墙等障碍，在黑客达到目标之前的时间</p>
<p>在黑客攻击过程中，我们检测到他的活动的所用时间称之为<em>Dt</em>，检测到黑客的行为后，我们需要作出响应，这段时间称之为<em>Rt</em>.</p>
<h2 id="应对威胁的方式——拟态主动防御"><a href="#应对威胁的方式——拟态主动防御" class="headerlink" title="应对威胁的方式——拟态主动防御"></a><strong><strong>应对威胁的方式——拟态主动防御</strong></strong></h2><h3 id="拟态路由器"><a href="#拟态路由器" class="headerlink" title="拟态路由器"></a><strong><strong>拟态路由器</strong></strong></h3><p>拟态路由器在其架构中引入多个异构冗余的路由执行体，通过对各个执行体维护的路由表项进行共识裁决，生成拟态路由器的路由表；通过对执行体的策略调度，可以实现拟态路由器对外呈现特征的不确定变化。在满足一定差异化设计的前提下，不同的执行体存在完全相同漏洞或后门的概率极低，攻击者即使控制了部分执行体，其恶意行为也很容易被拟态裁决机制所阻断，从而极大地提高路由器应对网络攻击的能力。</p>
<h3 id="拟态域名服务器"><a href="#拟态域名服务器" class="headerlink" title="拟态域名服务器"></a><strong>拟态域名服务器</strong></h3><p>拟态域名服务器以遏制域名解析服务漏洞后门的可利用性、建立内生安全防御机制、大幅提高攻击者的攻击难度和代价为出发点，可以在不改变现有域名协议和地址解析设施的基础上，通过拟态防御设备的增量部署，能够有效防御针对域名系统的域名投毒、域名劫持攻击等各种已知和未知域名攻击，能够提供安全可靠的域名解析服务。</p>
<h3 id="拟态Web虚拟机"><a href="#拟态Web虚拟机" class="headerlink" title="拟态Web虚拟机"></a><strong>拟态Web虚拟机</strong></h3><p>拟态Web虚拟机利用云平台部署空间上的优势，构建功能等价、多样化、动态化的异构虚拟web服务器池，采用动态执行体调度、数据库指令异构化、多余度（共识）表决等技术，建立多维动态变换的运行空间，阻断攻击链，大幅增加传统web服务和虚拟环境中的漏洞及后门利用难度，在不影响web服务性能的前提下，保证服务功能的安全可信</p>
<h3 id="拟态云服务器"><a href="#拟态云服务器" class="headerlink" title="拟态云服务器"></a><strong>拟态云服务器</strong></h3><p>拟态化的云服务器通过构建功能等价的异构云服务器池的方法，采用动态执行体调度、多余度（共识）表决、异常发现、线上（下）清洗等技术，及时阻断基于执行体软硬件漏洞后门等的“差模”攻击，使得蓄意攻击难以奏效。</p>
<h3 id="拟态防火墙"><a href="#拟态防火墙" class="headerlink" title="拟态防火墙"></a><strong>拟态防火墙</strong></h3><p>拟态化的云服务器通过构建功能等价的异构云服务器池的方法，采用动态执行体调度、多余度（共识）表决、异常发现、线上（下）清洗等技术，及时阻断基于执行体软硬件漏洞后门等的“差模”攻击，使得蓄意攻击难以奏效</p>
<h1 id="第三讲-安全需求及安全策略"><a href="#第三讲-安全需求及安全策略" class="headerlink" title="第三讲 安全需求及安全策略"></a><strong>第三讲 安全需求及安全策略</strong></h1><h2 id="安全需求的定义"><a href="#安全需求的定义" class="headerlink" title="安全需求的定义"></a><strong><strong>安全需求的定义</strong></strong></h2><p><strong>安全需求</strong>就是在设计一个安全系统时<strong>期望得到的安全保障</strong></p>
<h3 id="一般性的安全需求"><a href="#一般性的安全需求" class="headerlink" title="一般性的安全需求"></a><strong><strong>一般性的安全需求</strong></strong></h3><ul>
<li><strong>机密性需求</strong>，防止信息被泄漏给未授权的用户</li>
<li><strong>完整性需求，</strong>防止未授权用户对信息的修改</li>
<li><strong>可用性需求，</strong>保证授权用户对系统信息的可访问性</li>
<li><strong>可记账性需求，</strong>防止用户对访问过某信息或执行过某一操作以否认</li>
</ul>
<h2 id="安全策略"><a href="#安全策略" class="headerlink" title="安全策略"></a><strong><strong>安全策略</strong></strong></h2><p>针对面临的威胁决定采用何种对策的方法</p>
<ul>
<li>安全策略为针对威胁而选择和实行对策提供了框架</li>
</ul>
<h2 id="最常用的安全策略"><a href="#最常用的安全策略" class="headerlink" title="最常用的安全策略"></a><strong><strong>最常用的安全策略</strong></strong></h2><p><strong><strong>访问控制策略</strong></strong></p>
<p>系统必须选择下列三类相关属性制定访问控制策略</p>
<p>➢<strong>主体属性</strong></p>
<p>主体是系统内行为的发起者，通常是用户发起的进程</p>
<ul>
<li>信息的访问者（用户）</li>
<li>信息的拥有者</li>
<li>系统管理员</li>
</ul>
<p>➢<strong>客体属性</strong></p>
<p>➢<strong>系统环境（上下文）</strong></p>
<h2 id="自主访问控制策略"><a href="#自主访问控制策略" class="headerlink" title="自主访问控制策略"></a><strong><strong>自主访问控制策略</strong></strong></h2><p>❖ 自主访问控制的优点</p>
<p>➢ 访问模式设定灵活。</p>
<ul>
<li>读；写；执行；“每隔一周的周五可以读”；“读完文件x后才能</li>
</ul>
<p>读此文件”等等</p>
<p>➢ 具有较好的适应性，常用与商用OS和应用中</p>
<p>❖ 自主访问控制的缺点</p>
<p>➢ 不能防范木马和某些形式的恶意代码。</p>
<h2 id="强制访问控制策略"><a href="#强制访问控制策略" class="headerlink" title="强制访问控制策略"></a><strong><strong>强制访问控制策略</strong></strong></h2><h3 id="Bell-LaPadula模型"><a href="#Bell-LaPadula模型" class="headerlink" title="Bell-LaPadula模型"></a><strong><strong>Bell-LaPadula模型</strong></strong></h3><p><strong>公开 受限 秘密 机密 高密</strong></p>
<p>BLP 保密模型基于两种规则来保障数据的机密度与敏感度：</p>
<p>➢ 不上读（NRU）⎯⎯主体不可读安全级别高于它的数据</p>
<p>➢ 不下写（NWD）⎯⎯主体不可写安全级别低于它的数据</p>
<p><strong>BLP</strong>模型允许用户读取安全级别比他低的资源；相反地，写入对象的安全级别只能高于用户级别。</p>
<h3 id="防火墙所实现的单向访问机制"><a href="#防火墙所实现的单向访问机制" class="headerlink" title="防火墙所实现的单向访问机制"></a><strong>防火墙所实现的单向访问机制</strong></h3><p>防火墙所实现的单向访问机制不允许敏感数据从内部网络（例：其安全级别为“机密”）流向Internet（安全级别为“公开”）。</p>
<p>➢ 防火墙提供“不上读”功能来阻止Internet对内部网络的访问；</p>
<p>➢ 提供“不下写”功能来限制进入内部的数据流只能经由由内向外发起的连接流入（例如，允许HTTP的“GET”操作而拒绝“POST”操作，或阻止任何外发的邮件）。</p>
<h3 id="BIBA完整性模型"><a href="#BIBA完整性模型" class="headerlink" title="BIBA完整性模型"></a><strong>BIBA完整性模型</strong></h3><p>BIBA模型基于两种规则来保障数据的完整性的保密性：</p>
<p>➢ <strong>不下读（NRU）属性主体不能读取安全级别低于它的数据</strong></p>
<p>➢ <strong>不上写（NWD）属性主体不能写入安全级别高于它的数据</strong></p>
<h2 id="强制访问控制策略-1"><a href="#强制访问控制策略-1" class="headerlink" title="强制访问控制策略"></a><strong>强制访问控制策略</strong></h2><p>❖ <strong>最显著的特征</strong>：全局性和永久性</p>
<p>➢ 无论何时何地，主体和客体的标签是不会改变的。</p>
<p>➢ <strong>全局性</strong>：对特定的信息，从任何地方访问，它的敏感级别相同</p>
<p>➢ <strong>永久性</strong>：对特定的信息，在任何时间访问，它的敏感级别相同</p>
<p>➢ 上述特征在多级安全体系中称为“<strong>宁静性原则</strong>”（tranquility）</p>
<p>❖ 一旦不满足该原则，无法从根本上防备木马和恶意代码</p>
<h2 id="SSR安全模型"><a href="#SSR安全模型" class="headerlink" title="SSR安全模型"></a><strong><strong>SSR安全模型</strong></strong></h2><ol>
<li>当标签级别为“中级别”的主体访问标签级别为“高级别”的客体时，主体对客体无任何访问权限(no read up, no write up）。</li>
<li>当标签级别为“中级别”的主体访问标签级别为“中级别”的客体时，主体对客体持所有权限。</li>
<li>当标签级别为“中级别”的主体访问标签级别为“低级别”的客体时，主体对客体拥有只读权限（nowrite down）。</li>
</ol>
<p><strong>SSR安全模型的主要特点</strong></p>
<ol>
<li><p>信息流只能从低级别流向高级，确保的信息的保密性。</p>
</li>
<li><p>高级别主体对低级别客体的访问只能进行读取，确保了低级别资源的完整性</p>
</li>
</ol>
<h3 id="主体颗粒度扩充"><a href="#主体颗粒度扩充" class="headerlink" title="主体颗粒度扩充"></a><strong>主体颗粒度扩充</strong></h3><p>主体颗粒度扩充主要是把主体的颗粒度从用户级别扩充到进程级别，扩充的目的是为了实现更加细化的安全策略以保证信息系统的安全。</p>
<h3 id="SSR安全模型的应用"><a href="#SSR安全模型的应用" class="headerlink" title="SSR安全模型的应用"></a><strong><strong>SSR安全模型的应用</strong></strong></h3><p><strong>涉密系统方案</strong></p>
<p>通过应用SSR安全模型，信息流只能从低级别流向高级别，而不能往下，即使某一级别的用户受到病毒感染或者黑客渗透，其也只能感染和阅读自己的信息与读取下级的信息，确保了保密性。高权限用户无法篡改低权限用户的文件，保证了文件的完整性，避免了官大压人的现象，可以保证递交文件的真实可靠。</p>
<p><strong>病毒防治方案</strong></p>
<p>信息的访问需要程序，因此程序往往是被攻击对象，攻击了程序就可以访问其对应的文件甚至其他程序的文件。应用SSR安全模型以后，把主体颗粒度扩充到进程，让程序与程序需要文件进行绑定，然后再将程序本身进行只读保护，既能保证程序不被感染，又能防止对象被非法程序访问，从而保证了应用系统的安全性</p>
<h2 id="访问控制列表"><a href="#访问控制列表" class="headerlink" title="访问控制列表"></a><strong><strong>访问控制列表</strong></strong></h2><p><strong>访问控制列表（ACL）</strong></p>
<p>访问控制列表是一系列允许或拒绝数据的指令的集合。</p>
<p><strong>读取第三层、第四层包头信息</strong></p>
<p><strong>根据预先定义好的规则对包进行过滤</strong></p>
<ul>
<li><p>**标准ACL:**只使用数据包的源地址作为测试条件。所有决定是基于源IP地址的。</p>
<p>  标准访问列表的创建根据 “动作”＋“源地址”，即允许谁、拒绝谁的方法来创建</p>
</li>
<li><p>**扩展ACL:**可以测试IP包的第3层和第4层报头中的字段。包括源IP地址、目的IP地址、网络层报头中的协议字段（如，TCP、UDP、ICMP等）以及位于传输层报头中的端口号。<br>扩展列表的放置——靠近源地址</p>
</li>
<li><p>**命名ACL:**命名ACL以列表名代替列表编号来定义IP访问控制列表，同样包括标准和扩展两种列表，定义过滤的语句与编号方式中相似。</p>
</li>
</ul>
<h3 id="通配掩码"><a href="#通配掩码" class="headerlink" title="通配掩码"></a><strong>通配掩码</strong></h3><p>路由器使用<strong>IP地址和通配掩码</strong>（wildcard-mask）一起来分辨匹配的地址范围，它跟子网掩码刚好相反。</p>
<p>它不像子网掩码告诉路由器IP地址的哪一位属于网络号一样，通配符掩码告诉路由器为了判断出匹配，它需要检查IP地址中的多少位。</p>
<p>有了通配掩码，可以只使用两个32位的号码来确定IP地址的范围，<strong>这是十分方便的</strong></p>
<ul>
<li>通配掩码（wildcard mask）是分成4字节的32bit数</li>
<li>通配掩码与IP地址位位配对，相应位为0&#x2F;1，用于表示如何对待IP地址中的相应位</li>
</ul>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled.png" alt="Untitled"></p>
<p>IP地址的第三个字节为16（00010000）。通配掩码中的前四位为0，告诉路由器要匹配IP地址的前四位（0000）。由于最后的四位被忽略，则所有的在范围16（00010000）到31（00011111）的都将被允许，相应的通配掩码位是1。</p>
<h1 id="第四讲安全风险评估"><a href="#第四讲安全风险评估" class="headerlink" title="第四讲安全风险评估"></a><strong>第四讲安全风险评估</strong></h1><h2 id="风险评估涉及标准"><a href="#风险评估涉及标准" class="headerlink" title="风险评估涉及标准"></a><strong><strong>风险评估涉及标准</strong></strong></h2><p>ISO&#x2F;IEA</p>
<h2 id="风险（Risk）的概念"><a href="#风险（Risk）的概念" class="headerlink" title="风险（Risk）的概念"></a><strong><strong>风险（Risk）的概念</strong></strong></h2><p>风险指在某一特定环境下，在某一特定时间段内，特定的威胁利用资产的一种或一组薄弱点，导致资产的丢失或损害的潜在可能性，即特定威胁事件发生的可能性与后果的结合</p>
<p><strong>安全风险组成的四要素：</strong>信息系统资产（Asset）、信息系统脆弱性（Vulnerability）、信息安全威胁（Threat）、信息系统安全保护措施（Safeguard）。</p>
<h2 id="风险处置策略"><a href="#风险处置策略" class="headerlink" title="风险处置策略"></a><strong><strong>风险处置策略</strong></strong></h2><p><strong>降低风险（Reduce Risk）</strong>采取适当的控制措施来降低风险，包括技术手段和管理手段，如安装防火墙，</p>
<p>杀毒软件，或是改善不规范的工作流程、制定业务连续性计划，等等。</p>
<p><strong>避免风险（Avoid Risk）</strong>通过消除可能导致风险发生的条件来避免风险的发生，如将公司内外网隔离</p>
<p>以避免来自互联网的攻击，或是将机房安置在不可能造成水患的位置，等等。</p>
<p>**转移风险（Transfer Risk)**将风险全部或者部分地转移到其他责任方，例如购买商业保险。</p>
<p><strong>接受风险（Accept Risk）</strong>在实施了其他风险应对措施之后，对于残留的风险，可以有意识地选择接受。</p>
<h2 id="风险评估的要素"><a href="#风险评估的要素" class="headerlink" title="风险评估的要素"></a><strong><strong>风险评估的要素</strong></strong></h2><p><strong>风险评估围绕着资产、威胁、脆弱性和安全措施这些基本要素展开。</strong></p>
<p>需要充分考虑业务战略、资产价值、安全需求、安全事件、残余风险等与这些基本要素相关的各类属性。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%201.png" alt="Untitled"></p>
<h3 id="信息系统安全风险计算模型（GB-T20984-2007）"><a href="#信息系统安全风险计算模型（GB-T20984-2007）" class="headerlink" title="信息系统安全风险计算模型（GB&#x2F;T20984-2007）"></a><strong><strong>信息系统安全风险计算模型（GB&#x2F;T20984-2007）</strong></strong></h3><p>风险计算模型是对通过风险分析计算风险值过程的抽象，它主要包括资产评估、威胁评估、脆弱性评估。</p>
<h3 id="安全风险评估的框架及流程（GB-T20984-2007）"><a href="#安全风险评估的框架及流程（GB-T20984-2007）" class="headerlink" title="安全风险评估的框架及流程（GB&#x2F;T20984-2007）"></a><strong><strong>安全风险评估的框架及流程（GB&#x2F;T20984-2007）</strong></strong></h3><p>① 对资产进行识别，并对资产的重要性进行赋值；<br>② 对威胁进行识别，描述威胁的属性，并对威胁出现的频率赋值；<br>③ 对资产的脆弱性进行识别，并对具体资产的脆弱性的严重程度赋值；<br>④ 根据威胁和脆弱性的识别结果判断安全事件发生的可能性；<br>⑤ 根据脆弱性的严重程度及安全事件所作用资产的重要性计算安全事件的损失；<br>⑥ 根据安全事件发生的可能性以及安全事件的损失，计算安全事件一旦发生对组织的影响，即风险值。</p>
<h2 id="资产分类方法"><a href="#资产分类方法" class="headerlink" title="资产分类方法"></a><strong><strong>资产分类方法</strong></strong></h2><table>
<thead>
<tr>
<th>分类</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>数据</td>
<td>保存在信息媒介上的各种数据资料，包括源代码、数据库数据、系统文档、运行管理规程、计划、报告、用户手册、各类纸质的文档等</td>
</tr>
<tr>
<td>软件</td>
<td>系统软件：操作系统、数据库管理系统、语句包、开发系统等</td>
</tr>
<tr>
<td>应用软件：办公软件、数据库软件、各类工具软件等</td>
<td></td>
</tr>
<tr>
<td>源程序：各种共享源代码、自行或合作开发的各种代码等</td>
<td></td>
</tr>
<tr>
<td>硬件</td>
<td>网络设备：路由器、网关、交换机等</td>
</tr>
<tr>
<td>计算机设备：大型机、小型机、服务器、工作站、台式计算机、便携计算机等</td>
<td></td>
</tr>
<tr>
<td>存储设备：磁带机、磁盘阵列、磁带、光盘、软盘、移动硬盘等</td>
<td></td>
</tr>
<tr>
<td>传输线路：光纤、双绞线等</td>
<td></td>
</tr>
<tr>
<td>保障设备：UPS、变电设备等、空调、保险柜、文件柜、门禁、消防设施等</td>
<td></td>
</tr>
<tr>
<td>安全保障：防火墙、入侵检测系统、身份鉴别等</td>
<td></td>
</tr>
<tr>
<td>其他：打印机、复印机、扫描仪、传真机等</td>
<td></td>
</tr>
<tr>
<td>服务</td>
<td>信息服务：对外依赖该系统开展的各类服务</td>
</tr>
<tr>
<td>网络服务：各种网络设备、设施提供的网络连接服务</td>
<td></td>
</tr>
<tr>
<td>办公服务：为提高效率而开发的管理信息系统，包括各种内部配置管理、文件流转管理等服务</td>
<td></td>
</tr>
<tr>
<td>人员</td>
<td>掌握重要信息和核心业务的人员，如主机维护主管、网络维护主管及应用项目经理等</td>
</tr>
<tr>
<td>其他</td>
<td>企业形象、客户关系等</td>
</tr>
</tbody></table>
<h3 id="资产等级计算公式"><a href="#资产等级计算公式" class="headerlink" title="资产等级计算公式"></a><strong><strong>资产等级计算公式</strong></strong></h3><p>AV&#x3D;F(AC, AI, AA)</p>
<p>Asset Value 资产价值</p>
<p>Asset Confidentiality 资产保密性赋值</p>
<p>Asset Integrity 资产完整性赋值</p>
<p>Asset Availability 资产可用性赋值</p>
<p>例1：AV&#x3D;MAX(AC, AI, AA)</p>
<p>例2：AV&#x3D;AC+AI+AA</p>
<p>例3：AV&#x3D;AC×AI×AA</p>
<h2 id="威胁来源列表"><a href="#威胁来源列表" class="headerlink" title="威胁来源列表"></a><strong><strong>威胁来源列表</strong></strong></h2><table>
<thead>
<tr>
<th>来源</th>
<th></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>环境因素</td>
<td></td>
<td>断电、静电、灰尘、潮湿、温度、鼠蚁虫害、电磁干扰、洪灾、火灾、地震、意外 事故等环境危害或自然灾害，以及软件、硬件、数据、通信线路等方面的故障</td>
</tr>
<tr>
<td>人为因素</td>
<td>恶意人员</td>
<td>不满的或有预谋的内部人员对信息系统进行恶意破坏；</td>
</tr>
<tr>
<td>采用自主或内外勾结的方式盗窃机密信息或进行篡改，获取利益外部人员利用信息系统的脆弱性,对网络或系统的机密性、完整性和可用性进行破坏，以获取利益或炫耀能力</td>
<td></td>
<td></td>
</tr>
<tr>
<td>人为因素</td>
<td>非恶意人员</td>
<td>内部人员由于缺乏责任心，或者由于不关心和不专注，或者没有遵循规章制度和操作流程而导致故障或信息损坏；</td>
</tr>
<tr>
<td>内部人员由于缺乏培训、专业技能不足、不具备岗 位技能要求而导致信息系统故障或被攻击</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="风险计算方法"><a href="#风险计算方法" class="headerlink" title="风险计算方法"></a><strong>风险计算方法</strong></h2><p><strong>风险值&#x3D;<em>R</em>(A, T, V) &#x3D; <em>R</em>(<em>L</em>(T, V), <em>F</em>(Ia,Va))</strong></p>
<p><strong>R</strong>安全风险计算函数</p>
<p><strong>A</strong>资产</p>
<p><strong>T</strong>威胁</p>
<p><strong>V</strong>脆弱性</p>
<p><strong>Ia</strong>安全事件所作用的资产价值</p>
<p><strong>Va</strong> 脆弱性严重程度</p>
<p><strong>L</strong>威胁利用资产的脆弱性导致安全事件发生的可能性</p>
<p><strong>F</strong>安全事件发生后产生的损失</p>
<h2 id="残留风险评价"><a href="#残留风险评价" class="headerlink" title="残留风险评价"></a><strong>残留风险评价</strong></h2><ul>
<li>绝对安全（即零风险）是不可能的</li>
<li>实施安全控制后会有残留风险或残存风险（Residual Risk）</li>
<li>为了确保信息安全，应该确保残留风险在可接受的范围内：</li>
</ul>
<p>➢ 残留风险Rr ＝ 原有的风险R0 － 控制ΔR</p>
<p>➢ 残留风险Rr ≤ 可接受的风险Rt</p>
<p><strong><strong>风险评估应贯穿于信息系统生命周期的各阶段</strong></strong></p>
<p><strong><strong>规划阶段的风险评估</strong></strong></p>
<p>规划阶段的评估结果应体现在信息系统整体规划或项目建议书中。</p>
<p><strong><strong>设计阶段的风险评估</strong></strong></p>
<p>设计阶段的评估可以以安全建设方案评审的方式进行，判定方案所提供的安全功能与信息技术安全技术标准的符合性。评估结果应体现在信息系统需求分析报告或建设实施方案中。</p>
<p><strong><strong>实施阶段的风险评估</strong></strong></p>
<p>本阶段风险评估可以采取对照实施方案和标准要求的方式，对实际建设结果进行测试、分析。</p>
<p><strong><strong>运行维护阶段的风险评估</strong></strong></p>
<p>运行维护阶段的风险评估应定期执行；当组织的业务流程、系统状况发生重大变更时，也应进行风险评估。</p>
<p><strong><strong>废弃阶段的风险评估</strong></strong></p>
<p>信息系统的维护技术人员和管理人员均应该参与此阶段的评估</p>
<p><strong><strong>一种新的风险评估⎯⎯数据风险评估</strong></strong></p>
<h2 id="风险评估项目实施过程"><a href="#风险评估项目实施过程" class="headerlink" title="风险评估项目实施过程"></a><strong><strong>风险评估项目实施过程</strong></strong></h2><p><strong>策划 准备 实施 报告 跟踪</strong></p>
<h1 id="第五讲-信息系统等级保护"><a href="#第五讲-信息系统等级保护" class="headerlink" title="第五讲  信息系统等级保护"></a><strong>第五讲  信息系统等级保护</strong></h1><h3 id="什么是等级保护"><a href="#什么是等级保护" class="headerlink" title="什么是等级保护"></a><strong>什么是等级保护</strong></h3><p>网络安全等级保护是指对国家重要信息、法人和其他组织及公民的专有信息以及公开信息和存储、传输、处理这些信息的信息系统分等级实行安全保护，对信息系统中使用的信息安全产品实行按等级管理，对信息系统中发生的信息安全事件分等级响应、处置</p>
<p><strong><strong>定级对象</strong></strong></p>
<p>也称等级保护对象、网络安全等级保护工作的作用对象</p>
<p>包括网络基础设施（广电网、电信网、专用通信网络等）、云计算平台系统、大数据平台系统、物联网、工业控制系统、采用移动互联技术的系统等</p>
<h2 id="等级保护有“五个规定动作”"><a href="#等级保护有“五个规定动作”" class="headerlink" title="等级保护有“五个规定动作”"></a><strong><strong>等级保护有“五个规定动作”</strong></strong></h2><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%202.png" alt="Untitled"></p>
<h2 id="等级保护主要工作流程"><a href="#等级保护主要工作流程" class="headerlink" title="等级保护主要工作流程"></a><strong><strong>等级保护主要工作流程</strong></strong></h2><p>1 <strong>定级  定级是等级保护的首要环节</strong></p>
<p>2 <strong>备案 备案是等级保护的核心</strong></p>
<p>3 <strong>建设整改 建设整改是等级保护工作落实的关键</strong></p>
<p>4 <strong>等级测评 等级测评是评价安全保护状况的方法</strong></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%203.png" alt="Untitled"></p>
<h1 id="第六讲-物理安全"><a href="#第六讲-物理安全" class="headerlink" title="第六讲 物理安全"></a><strong>第六讲 物理安全</strong></h1><h2 id="环境安全"><a href="#环境安全" class="headerlink" title="环境安全"></a><strong><strong>环境安全</strong></strong></h2><ul>
<li>安防技术</li>
<li>计算机机房的温度、湿度、洁净度</li>
<li>计算机机房的用电安全技术</li>
<li>计算机机房安全管理制度</li>
</ul>
<h3 id="机房三度要求"><a href="#机房三度要求" class="headerlink" title="机房三度要求"></a><strong><strong>机房三度要求</strong></strong></h3><blockquote>
<p>温度：机房温度一般应控制在18～22℃</p>
<p>湿度：相对湿度一般控制在40％～60％为宜</p>
<p>洁净度：尘埃颗粒直径&lt;0.5<em>m</em>，含尘量&lt;1万颗&#x2F;升</p>
</blockquote>
<p>GB50174-2008 电子信息系统机房设计规范</p>
<h3 id="防火与防水要求"><a href="#防火与防水要求" class="headerlink" title="防火与防水要求"></a><strong><strong>防火与防水要求</strong></strong></h3><p>为避免火灾、水灾，应采取如下具体措施:<br>（1）隔离<br>（2）火灾报警系统<br>（3）灭火设施<br>（4）管理措施</p>
<h3 id="机房防盗要求"><a href="#机房防盗要求" class="headerlink" title="机房防盗要求"></a><strong><strong>机房防盗要求</strong></strong></h3><h3 id="机房防鼠"><a href="#机房防鼠" class="headerlink" title="机房防鼠"></a><strong><strong>机房防鼠</strong></strong></h3><h3 id="防静电措施"><a href="#防静电措施" class="headerlink" title="防静电措施"></a><strong>防静电措施</strong></h3><blockquote>
<p> 机房的内装修材料一般应避免使用挂毯、地毯等吸尘、容易产生静电的材料，而应采用乙烯材料。</p>
<p>为了防静电，机房一般要安装防静电地板。</p>
<p> 机房内应保持一定湿度，特别是在干燥季节应适当增加空气湿度，以免因干燥而产生静电。</p>
</blockquote>
<h3 id="接地要求"><a href="#接地要求" class="headerlink" title="接地要求"></a><strong>接地要求</strong></h3><p>接地可以为计算机系统的数字电路提供一个稳定的0V参考电位</p>
<h1 id="第七讲-可靠性的基本概念"><a href="#第七讲-可靠性的基本概念" class="headerlink" title="第七讲 可靠性的基本概念"></a><strong>第七讲 可靠性的基本概念</strong></h1><h3 id="可靠性的定义"><a href="#可靠性的定义" class="headerlink" title="可靠性的定义"></a><strong><strong>可靠性的定义</strong></strong></h3><p>在规定的条件下、在给定的时间内，系统能实施应有功能的能力。</p>
<h3 id="可靠性参数"><a href="#可靠性参数" class="headerlink" title="可靠性参数"></a><strong><strong>可靠性参数</strong></strong></h3><p>$T_{MTTF}：$平均失效前时间</p>
<p>$T_{MTBF}：$平均故障间隔时间</p>
<p>$R：$<strong><strong>可靠度</strong></strong></p>
<p>$λ：$<strong><strong>失效率</strong></strong></p>
<h3 id="寿命"><a href="#寿命" class="headerlink" title="寿命"></a><strong><strong>寿命</strong></strong></h3><p>通常用一个非负随机变量$<em><strong>X</strong></em>$来描述产品的寿命。</p>
<p>$<em><strong>X</strong></em>$的分布函数为</p>
<p>$<em>F(t) &#x3D; P{X \le t}，t\ge0</em>$</p>
<p>有了寿命分布<em>F</em>(<em>t</em>) ，就知道产品的平均寿命</p>
<p>$EX&#x3D;\int_0^\infty tdF(t)$</p>
<h3 id="可靠度R"><a href="#可靠度R" class="headerlink" title="可靠度R"></a><em><strong><em>可靠度</em>R</strong></em></h3><p>产品在时刻 <em>t</em> 之前都正常工作（不失效）的概率，即产品在时刻 <em>t</em>的生存概率，称为无故障工作概率（可靠度函数）</p>
<p>$$<br>R(t)&#x3D;P{X&gt;t}&#x3D;\int_0^\infty dF(t)&#x3D;\int_0^\infty f(t)dt \<br>𝑹(t) +F(t)&#x3D;1<br>$$</p>
<blockquote>
<p>假设 C 是一个具有 <em>N</em> 个元器件的数字系统，在一定的条件和环境（如温度、湿度、电压等）下运行，并且随着时间 <em>t</em> 的推移质量逐步下降</p>
</blockquote>
<p>系统<strong>C</strong>在时刻 <em>t</em> 能正常工作的概率 $<em><strong>R(t)&#x3D;S(t)&#x2F;N</strong></em>$</p>
<p>**<em>R</em>(<em>t</em>)**称为系统 <strong>C</strong> 在时刻 <em>t</em> 的可靠度。</p>
<h3 id="失效率λ"><a href="#失效率λ" class="headerlink" title="失效率λ"></a><strong><strong>失效率λ</strong></strong></h3><p>假设<em>F</em>(<em>t</em>)是绝对连续的，即存在分布密度函数$<em>f(t)&#x3D;F’(t)</em>$且$F(t)&#x3D;\int_0^tf(x)dx$</p>
<blockquote>
<p>将发生故障的条件概率密度叫做失效率。<br>$λ(t)&#x3D;f(t)&#x2F;R(t)&#x3D;-R’(t)&#x2F;R(t)$<br>失效率**λ(<em>t</em>)**表示系统中元器件失效的速率。</p>
</blockquote>
<h3 id="λ-t-的浴缸形曲线（Bathtub-curve）"><a href="#λ-t-的浴缸形曲线（Bathtub-curve）" class="headerlink" title="**λ(t)的浴缸形曲线（Bathtub-curve）"></a>**<strong>λ(<em>t</em>)的浴缸形曲线（Bathtub-curve）</strong></h3><p><strong>第一阶段 早期失效期（Infant Mortality）</strong></p>
<p>器件在开始使用时失效率很高，但随着产品工作时间的增加，失效率迅速降低。这一阶段失效的原因大多是由于设计、原材料和制造过程中的缺陷造成的。为了缩短这一阶段的时间，产品应在投入运行前进行试运转，以便及早发现、修正和排除故障；或通过试验进行筛选，剔除不合格品。</p>
<p><strong>第二阶段 偶然失效期，也称随机失效期（Random Failures）</strong></p>
<p>这一阶段的特点是失效率较低，且较稳定，往往可近似看作常数。这一时期是产品的良好使用阶段。由于在这一阶段中，产品失效率近似为一常数，故设<em></em>(<em>t</em>)&#x3D;<em>λ</em>（常数）由可靠度计算公式得$R(t)&#x3D;e^{-λt}$ 这一式表明<strong>设备的可靠性与失效率成指数关系</strong>。</p>
<p><strong>第三阶段 耗损失效期（Wearout）</strong></p>
<p>该阶段的失效率随时间的延长而急速增加，主要原因是器件的损失己非常的严重，寿命快到尽头了，可适当的维修或直接更换。</p>
<p>**<strong><em>R</em>(<em>t</em>)和λ的关系</strong></p>
<p>可靠性不仅是时间<em>t</em>的函数，而且与失效率<strong><strong>λ</strong></strong>有着密切的关联。</p>
<p>$$<br>R(t)&#x3D;e^{\int^t_0\lambda(t)dt }<br>$$</p>
<h3 id="可维修产品的平均维修时间"><a href="#可维修产品的平均维修时间" class="headerlink" title="可维修产品的平均维修时间"></a><strong><strong>可维修产品的平均维修时间</strong></strong></h3><p>可维修产品的可维护性平均维修时间（MTTR，Mean Time To Repair）来度量，即系统发生故障后维修和重新恢复正常运行平均花费的时间（即设备处于故障状态时间的平均值，或设备修复时间的平均值）。系统的可维护性越好，平均维修时间越短</p>
<p>$$<br>MTTR&#x3D;\int^\infty _0t\mu(t)dt<br>$$</p>
<blockquote>
<p>$<em>\mu(t)</em>$是维修时间的概率密度函数</p>
</blockquote>
<h3 id="可维修产品的维修性指标：可用性"><a href="#可维修产品的维修性指标：可用性" class="headerlink" title="可维修产品的维修性指标：可用性"></a><strong><strong>可维修产品的维修性指标：可用性</strong></strong></h3><p>可维修产品的可用性定义为：</p>
<p>$$<br>\frac{MTBF}{MTBF+MTTR}*100%<br>$$</p>
<p><strong>计算机系统可靠性举例</strong></p>
<p>已知世界上第一代电子管计算机ENIAC有20000个电子管，假<br>设每个电子管的失效率为&#x3D;0.5%&#x2F;kh（千小时），试求：<br>（1）该计算机的MTTF；<br>（2）若要求计算机的可靠性在95%以上，则至多可以工作多久？</p>
<p>$$<br>MTTF&#x3D;\frac{1}{\sum^n_{i&#x3D;1}\lambda_i}&#x3D;\frac{1}{\frac{0.05}{100}*\frac{1}{1000}*20000}&#x3D;\frac{1}{0.01}&#x3D;100H\ R(t)&#x3D;e^{-\frac{t}{MTTF}}\ t&#x3D;5H<br>$$</p>
<h2 id="系统可靠性模型"><a href="#系统可靠性模型" class="headerlink" title="系统可靠性模型"></a><strong><strong>系统可靠性模型</strong></strong></h2><p><strong>可靠性模型：描述了系统及其组成单元之间的故障逻辑关系</strong></p>
<h3 id="串联系统"><a href="#串联系统" class="headerlink" title="串联系统"></a><strong><strong>串联系统</strong></strong></h3><p>假设第<em>i</em>个部件的寿命为$<em><strong>X_i</strong></em>$，可靠度为$<em>R_i(t)&#x3D;P{X_i &gt;t}，i&#x3D;1, 2, …,n,</em>$第$<em>i</em>$个部件的失效率为$<em>\lambda_i(t)</em>$$，X_1，X_2 ，…，X_n$相互独立。若</p>
<p>初始时刻$<em>t&#x3D;0</em>$，所有部件都是新的，且同时开始工作。</p>
<p>(1) 系统的寿命是： $X&#x3D;min{X_1 ，X_2，…，X_n}$</p>
<p>(2) 系统的可靠度是：</p>
<p>$$<br>R(t)&#x3D;P{min(X_1 ，X_2，…，X_n)&gt;t}&#x3D;\Pi^n_{i&#x3D;1}R_i(t)\ &#x3D;\Pi^n_{i&#x3D;1}exp{-\int^t_0\lambda_i(u)du}<br>$$</p>
<p>(3) 系统的失效率为：</p>
<p>$$<br>\lambda(t)&#x3D;-\frac{R’(t)}{R(t)}&#x3D;\sum^n_{i&#x3D;1}\lambda_i(t)<br>$$</p>
<p>(4) 系统的平均寿命为:</p>
<p>$$<br>MTTF&#x3D;\int^\infty_0R(t)dt&#x3D;\int^\infty_0exp{-\int^t_0\lambda(u)du}dt<br>$$</p>
<p>当$R_i(t)&#x3D;exp{-\lambda_t}，i&#x3D;1, 2, …, n$时（及当第<em>i</em>个部件的命遵从参数为$<em>\lambda_i</em>$的</p>
<p>指数分布时），系统的可靠度和平均寿命为</p>
<p>$$<br>R(t)&#x3D;exp{-\sum^n_{i&#x3D;1}\lambda_it}\ MTTF&#x3D;\frac{1}{\sum^n_{i&#x3D;1}\lambda_i}<br>$$</p>
<h3 id="并联系统"><a href="#并联系统" class="headerlink" title="并联系统"></a><strong><strong>并联系统</strong></strong></h3><p>(1) 系统的寿命是： $X&#x3D;max{X_1，X_2，…，X_n<br>}$</p>
<p>(2) 系统的可靠度是：</p>
<p>$$<br>R(t)&#x3D;P{max(X_1 ，X_2，…，X_n)&gt;t}\ &#x3D;1-P{max(X_1 ，X_2，…，X_n)\le t } \ &#x3D;1-\Pi^n_{i&#x3D;1}[1-R_i(t)]<br>$$</p>
<p>(3) 系统的平均寿命为：</p>
<p>$$<br>MTTF&#x3D;\int^\infty_0R(t)dt&#x3D;\sum^n_{i&#x3D;1}\frac{1}{\lambda_i}\ &#x3D;sum_{1\le&lt;i&lt;j\le n}\frac{1}{\lambda_1+\lambda_j}+…+(-1)^{n-1}\frac{1}{\lambda_1+…+\lambda_n}<br>$$</p>
<h1 id="第八讲-信息系统的可靠性"><a href="#第八讲-信息系统的可靠性" class="headerlink" title="第八讲 信息系统的可靠性"></a><strong>第八讲 信息系统的可靠性</strong></h1><h3 id="计算机系统可靠性"><a href="#计算机系统可靠性" class="headerlink" title="计算机系统可靠性"></a><strong>计算机系统可靠性</strong></h3><p><strong>硬件可靠性</strong></p>
<p>硬件在使用过程中有磨损、材料的老化、变质和使用环境等多种因素</p>
<p><strong>软件可靠性</strong></p>
<p>软件使用期间无磨损;存在物质老化和变质</p>
<h2 id="提高信息系统可靠性的途径"><a href="#提高信息系统可靠性的途径" class="headerlink" title="提高信息系统可靠性的途径"></a><strong><strong>提高信息系统可靠性的途径</strong></strong></h2><p><strong>提高可靠性有两个方面：一是尽量使系统在规定时间内少发生故障和错误；二是发生了故障能迅速排除。</strong></p>
<h3 id="提高硬件可靠性"><a href="#提高硬件可靠性" class="headerlink" title="提高硬件可靠性"></a><strong><strong>提高硬件可靠性</strong></strong></h3><p><strong>设计</strong></p>
<p>结构优化<br>功能合理</p>
<p><strong>环境</strong></p>
<p>符合相关的标准和要求</p>
<p><strong>使用</strong></p>
<p>符合操作规程<br>减少人为失误</p>
<blockquote>
<p><strong>冗余设计</strong></p>
<p>故障容错是利用冗余的元部件来屏蔽已发生的故障对系统的影响。</p>
<p>三模冗余（TMR，Triple Modular Redundancy）的基本原理是：系统输入通过3个功能相同的模块，产生的3个结果送到多数表决器进行表决，即三中取二的原则，如果模块中有一个出错，而另外两个模块正常，则表决器的输出正确，从而可以屏蔽一个故障。</p>
<p><strong>TMR的缺点是：如果3个模块的输出各不相同，则无法进行多数表决；若有两个模块出现一致的故障，则表决的结果会出现错误。</strong></p>
</blockquote>
<h2 id="软件可靠性"><a href="#软件可靠性" class="headerlink" title="软件可靠性"></a>软件可靠性</h2><p><strong><strong>程序运行监视系统</strong></strong></p>
<p>程序运行监视系统WTD（“看门狗”），是一种软硬件结合的抗程序“跑飞”的措施。其硬件是一个用于产生定时 <em>T</em> 的计数器或单稳触发器。其定时输出端接至CPU 的复位线，而其定时清零则由CPU 控制。</p>
<p>在正常情况下，程序启动WTD 后，即以小于<em>T</em> 的间隔 <em>t</em> 将其清零一次，这样WTD 的定时溢出就不会发生。在受到干扰的异常情况下，程序的正常执行顺序被破坏，不可能周期性地将WTD清零，导致WTD定时溢出，使系统复位，CPU 摆脱因程序“跑飞”造成的瘫痪状态</p>
<h3 id="软件可靠性模型"><a href="#软件可靠性模型" class="headerlink" title="软件可靠性模型"></a><strong><strong>软件可靠性模型</strong></strong></h3><p><strong><strong>失效时间间隔模型</strong></strong></p>
<p>这类模型最常用的方法是假定第<em>i</em>个失效到第<em>i</em>+1个失效间隔时间服从某一分布，而分布的参数依赖于各间隔时间内程序中的残留错误数。通过测试所得到的失效间隔时间数据来估计模型的参数，由获得的模型可以估算软件的可靠度以及各失效间的平均工作时间等</p>
<p><strong><strong>Jelinski-Moranda模型</strong></strong></p>
<p>系统基本假设如下：<br>（1）软件中的固有错误数<em>N</em>是一个未知的常数；<br>（2）软件中的各个错误是相互独立的，每个错误导致系统发生失效的可能性大致相同,各次失效间隔时间也相互独立；<br>（3）软件错误被发现后立即排除，每次排除一个错误且不引入新的错误，排除错误的时间忽略不计；<br>（4）软件的失效率在每个失效间隔时间内是常数，其数值正比于程序中残留的错误数，在第$<em>i</em>$个测试区间$<em>t_i</em>$，其失效率函数为:$\lambda(t_i)&#x3D;\phi(N-i+1)$,$\phi$为比例常数 。</p>
<p><strong><strong>缺陷计数模型</strong></strong></p>
<p>这类模型关心的是在<strong>特定的时间间隔内软件的错误数或失效数</strong>，并假定故障累计数服从某个己知的随机过程，过程强度是时间的离散或连续函数，根据在给定的测试时间间隔发现的错误数或失效数来估计故障强度、均值等参数。</p>
<p><strong><strong>错误植入模型</strong></strong></p>
<p>这类模型的基本思路是通过将一组已知的错误人为地植入到一个固有错误总数尚不清楚的程序中，然后在程序的测试中观察并统计发现的植入错误数和程序总的错误数，通过计数的比值估计程序的固有错误总数，从而得到软件可靠度及其有关指标。这类模型的代表是Mills的超几何分布模型。</p>
<p><strong><strong>基于输入域的模型</strong></strong></p>
<p>这类模型的基本研究方法是根据程序的使用情况，找出程序可能输入的概率分布，根据这种分布产生一个测试用例的集合。由于得到输入的分布难度较大，一般将输入域划分成等价类，每个等价类与程序的一条执行路径相联。在输入域上随机抽取测试用例，执行相应的程序测试，观测故障，从而推断出各项指标。这类模型以Nelson模型为代表，还有Brown-Lipow的基于输入域模型和Ramamoorthy-Bastani的基于输入域模型</p>
<h2 id="网络可靠性"><a href="#网络可靠性" class="headerlink" title="网络可靠性"></a><strong><strong>网络可靠性</strong></strong></h2><p><strong>故障定义</strong>– <strong>网络不能在用户期望的时间范围内将物质、信息、能量按用户需求完整、正确地在网络中传输的状态或事件</strong></p>
<p><strong><strong>计算机网络可靠性定义</strong></strong></p>
<p>在人为或自然的破坏作用下，网络在特定环境和规定时间内，充分完成规定的通信功能的能力。<strong>环境、时间和充分完成功能是这一定义的三要素。</strong></p>
<p>当传输设备和交换设备发生故障时网络可以维持正常业务的程度</p>
<h1 id="第九讲-信息系统的容错技术"><a href="#第九讲-信息系统的容错技术" class="headerlink" title="第九讲 信息系统的容错技术"></a><strong>第九讲 信息系统的容错技术</strong></h1><h2 id="容错的概念"><a href="#容错的概念" class="headerlink" title="容错的概念"></a><strong><strong>容错的概念</strong></strong></h2><p>容忍故障，即故障一旦发生时能够<strong>自动检测</strong>出来并使系统能够<strong>自动恢复正常运行</strong></p>
<p><strong>容错设计的软件可以有某些规定数目的故障但不导致失效，但对无容错的软件而言，故障即失效。</strong></p>
<h2 id="容错的主要内容"><a href="#容错的主要内容" class="headerlink" title="容错的主要内容"></a><strong><strong>容错的主要内容</strong></strong></h2><p><strong>故障检测和诊断</strong></p>
<p>故障检测（Fault Detection）：判断系统是否存在故障的过程<br><strong>故障检测的作用是确认系统是否发生了故障，指示故障的状态，即查找故障源和故障性质。一般来说，故障检测只能找到错误点（错误单元），不能准确找到故障点。</strong></p>
<p>故障诊断（Fault Diagnosis）：检测出系统存在故障后要进行故障的定位，找出故障所在的位置</p>
<p><strong>故障屏蔽技术</strong></p>
<p>故障屏蔽技术是防止系统中的故障在该系统的信息结构中产生差错的各种措施的总称，其实质是在故障效应达到模块的输出以前，利用冗余资源将故障影响掩盖起来，达到容错目的</p>
<p><strong>冗余技术</strong></p>
<p>三模冗余可以由用户手动完成，也可以依靠工具完成。Xilinx推出了XIlInXtMrtool ，可以方便地实现三模冗余设计，并且可以方便地配置被冗余项，大大方便了用户</p>
<p><strong>时间冗余技术</strong></p>
<p><strong>基本思想：</strong>重复执行指令或者一段程序来消除故障的影响，以达到容错的效果，它是用消耗时间来换取容错的目的。</p>
<p><strong>信息冗余技术</strong></p>
<p>信息容错技术是通过在数据中附加冗余的信息位来达到故障检测和容错的目的</p>
<p><strong>软件冗余技术</strong></p>
<p>软件容错是指在出现有限数目的软件故障的情况下，系统仍可提供连续正确执行的内在能力。其目的是屏蔽软件故障，恢复因出故障而影响的运行进程。</p>
<p>实现软件容错的基本方法，是将若干个根据同一需求说明编写的不同程序（即多版本程序），在不同空间同时运行，然后在每一个设置点通过表决或接收测试进行表决。</p>
<h2 id="典型的容错应用"><a href="#典型的容错应用" class="headerlink" title="典型的容错应用"></a><strong><strong>典型的容错应用</strong></strong></h2><p><strong><strong>热备份（Hot-Standby）</strong></strong></p>
<p>M运行，S后备；</p>
<p>M故障，S接管作M；</p>
<p>原M修复，S归还M。</p>
<h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a><strong><strong>RAID</strong></strong></h3><p>廉价磁盘冗余阵列（Redundant Arrays of Inexpensive Disks），以多个低成本磁盘构成磁盘子系统，提供比单一硬盘更完备的可靠性和高性能</p>
<p><strong>数据基带条阵列（RAID0）</strong></p>
<p>分块无校验型，无冗余存储。简单将数据分配到各个磁盘上，不提供真正容错性。带区化至少需要2个硬盘，可支持8&#x2F;16&#x2F;32个磁盘</p>
<p> <strong>优点</strong></p>
<p>➢允许多个小区组合成一个大分</p>
<p>➢更好地利用磁盘空间，延长磁盘寿命</p>
<p>➢多个硬盘并行工作，提高了读写性能</p>
<p> <strong>缺点</strong></p>
<p>➢不提供数据保护，任一磁盘失效，数据可能丢失，且不能自动恢复。</p>
<p><strong>磁盘镜象（RAID1）</strong></p>
<p>每一组盘至少两台，数据同时以同样的方式写到两个盘上，两个盘互为镜象。磁盘镜象可以是分区镜象、全盘镜象。容错方式以空间换取，实施可以采用镜象或者双工技术。</p>
<p> <strong>优点</strong></p>
<p>➢ 可靠性高，策略简单，恢复数据时不必停机。</p>
<p> <strong>缺点</strong></p>
<p>➢ 有效容量只有总容量的1&#x2F;2，利用率50%。由于磁盘冗余，硬件</p>
<p>开销较大，成本较高</p>
<p><strong>循环奇偶校验阵列（RAID5）</strong></p>
<p>与RAID4类似，但校验数据不固定在一个磁盘上，而是循环地依次分布在不同的磁盘上，也称块间插入分布校验。它是目前采用最多、最流行的方式，至少需要3个硬盘。</p>
<p> 优点</p>
<p>➢ 校验分布在多个磁盘中，写操作可以同时处理；</p>
<p>➢ 为读操作提供了最优的性能；</p>
<p>➢ 一个磁盘失效，分布在其他盘上的信息足够完成数据重建 。</p>
<p> 缺点</p>
<p>➢ 数据重建会降低读性能；</p>
<p>➢ 每次计算校验信息，写操作开销会增大，是一般存储操作时间的3倍</p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全课程笔记</title>
    <url>/2024/01/09/BUPT_note/Notes%20on%20network%20security/</url>
    <content><![CDATA[<h1 id="网络安全-武斌"><a href="#网络安全-武斌" class="headerlink" title="网络安全 武斌"></a>网络安全 武斌</h1><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="网络空间"><a href="#网络空间" class="headerlink" title="网络空间"></a>网络空间</h2><p>物理网络位置→逻辑层面（逻辑网络组件）→社会和认知层面（网络上的人）</p>
<h2 id="安全共性"><a href="#安全共性" class="headerlink" title="安全共性"></a>安全共性</h2><p>硬件安全</p>
<p>系统安全</p>
<p>协议安全</p>
<p>网络安全</p>
<p>硬件性能的快速提升促进不同网络逐渐趋同</p>
<p>硬件趋同→应用技术趋同→安全威胁扩展</p>
<p>云上问题层出不穷</p>
<p>共性安全问题：</p>
<ul>
<li>漏洞挖掘利用</li>
<li>协议权限类似：面临Dos等攻击</li>
<li>安全防护方法类似</li>
</ul>
<h2 id="网络安全现状"><a href="#网络安全现状" class="headerlink" title="网络安全现状"></a>网络安全现状</h2><p>略</p>
<h1 id="网络安全概述"><a href="#网络安全概述" class="headerlink" title="网络安全概述"></a>网络安全概述</h1><h2 id="资产保护"><a href="#资产保护" class="headerlink" title="资产保护"></a>资产保护</h2><ul>
<li>物理资源：物理资源是具有物理形态的资产</li>
<li>知识资源：知识资源可以是任何信息的形式，并直在组织的事务处理中起一定的作用</li>
<li>时间资源</li>
<li>信誉资源</li>
</ul>
<p>损失：</p>
<ul>
<li>即时的损失</li>
<li>长期的恢复所需花费</li>
</ul>
<p><strong>安全强度－安全代价的折中</strong>：</p>
<ul>
<li>用户方便程度</li>
<li>管理复杂性</li>
<li>对现有系统的影响</li>
<li>对不同平台的支持</li>
</ul>
<p><strong>安全强度、安全代价和侵入可能性的关系</strong></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled.png" alt="Untitled"></p>
<h1 id="信息安全模型"><a href="#信息安全模型" class="headerlink" title="信息安全模型"></a>信息安全模型</h1><p>信息保密技术的研究基础：</p>
<p>① 发展各种密码算法及其应用 ：</p>
<p>DES（数据加密标准）、 RSA（公开密钥体制）、 ECC（椭圆曲线离散对数密码体制）等。</p>
<p>② 计算机信息系统安全模型和安全评价准则 ：</p>
<p>访问监视器模型、多级安全模型等；TCSEC（可信计算机系统评价准则）、 ITSEC（信息技术安全评价准则）等。</p>
<p>信息保障（IA）</p>
<pre><code>定义：确保信息和信息系统的可用性、完整性、可控性、保密性、不可否认性来保护信息
</code></pre>
<p><strong>信息保障技术框架IATF</strong>：由美国国家安全局制定，提出 “<strong>纵深防御策略</strong>”DiD（ Defense-in-Depth Strategy）。</p>
<p>强调人、技术、操作这三个核心原则。</p>
<p>在信息保障的概念下，信息安全保障的<strong>PDRR模型</strong>的内涵已经超出了传统的信息安全保密，而是保护（ Protection）、检测（Detection）、响应（Reaction ）和恢复（Restore）的有机结合。</p>
<h2 id="网络攻击类型及分类"><a href="#网络攻击类型及分类" class="headerlink" title="网络攻击类型及分类"></a>网络攻击类型及分类</h2><h3 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h3><p>从安全属性来看，攻击类型可分为4类： 阻断攻击、截取攻击、篡改攻击、伪造攻击。</p>
<p>( 1)阻断攻击</p>
<p>阻断攻击使系统的资产被破坏，无法提供用户使用，这是一种针对可用性的攻击。例如，破坏硬盘之类的硬件，切断通信线路，使文件管理系统失效等。</p>
<p>(2)截取攻击<br>截取攻击可使非授权者得到资产的访问，这是一种针对机密性的攻击。非授权者可以是一个人、一个程序或一台计算机，例如， 通过窃昕获取网上数据以及非授权的复制文件和程序。</p>
<p>(3)篡改攻击<br>篡改攻击是非授权者不仅访问资产，而且能修改信息，这是一种针对完整性的攻击。例如，改变数据文件的值，修改程序以及在 网上正在传送的报文内容。</p>
<p>(4)伪造攻击<br>伪造攻击是非授权者在系统中插入伪造的信息，这是一种针对真实性的攻击。例如：在网上插入伪造的报文，或在文件中加入一 些记录。</p>
<h3 id="主动攻击和被动攻"><a href="#主动攻击和被动攻" class="headerlink" title="主动攻击和被动攻"></a>主动攻击和被动攻</h3><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%201.png" alt="Untitled"></p>
<p><strong>被动攻击</strong></p>
<p>目的是获取正在传输的信息。<strong>被动攻击包括传输报文内容的泄露 和通信流量分析</strong>。报文内容的泄露易于理解，一次电话通信、一 份电子邮件报文、正在传送的文件都可能包含敏感信息或秘密信息</p>
<p>对被动攻击的<strong>检测十分困难</strong>，因为攻击并不涉及数据的任何改变。然而阻止这些攻击的成功是可行的，因此，对被动攻击<strong>强调的 是阻止而不是检测</strong>。</p>
<p><strong>主动攻击</strong></p>
<p>包含对数据流的某些修改，或者生成一个假的数据流。它可分成4类:</p>
<p><strong>(1)伪装</strong></p>
<blockquote>
<p>伪装是一个实体假装成另一个实体。伪装攻击往往连同另一类主动攻击一 起进行。<br><strong>(2)回答 （重放）</strong><br>回答攻击包含数据单元的被动捕获，随之再重传这些数据，从而产生一个<br>非授权的效果。</p>
</blockquote>
<p><strong>(3)修改报文</strong></p>
<blockquote>
<p>修改报文攻击意味着合法报文的某些部分已被修改，或者报文的延迟和重<br>新排序，从而产生非授权的效果。</p>
</blockquote>
<p><strong>(4)拒绝服务</strong></p>
<blockquote>
<p>拒绝服务攻击是阻止或禁止通信设施的正常使用和管理。这种攻击可能针 对专门的 目标(如安全审计服务) ，抑制所有报文直接送到目的站;也可能破 坏整个网络，使网络不可用或网络超负荷，从而降低网络性能。</p>
</blockquote>
<blockquote>
<p>主动攻击和被动攻击具有相反的特性。被动攻击难以检测出来， 然而有阻止其成功的方法。而主动攻击难以绝对地阻止，因为要 做到这些，就要对所有通信设施、通路在任 何时间进行完全的保 护。因此对主动攻击采取检测的方法，并从破坏中</p>
</blockquote>
<p><strong>访问攻击</strong><br>攻击者企图获得非授权信息，这种攻击可能发生在信息驻留在计算机系统中或在网络上传输的情况下。是针对信息机密性的攻击。</p>
<p>常见的访问攻击有3种:</p>
<blockquote>
<p>(1)窥探(snooping)：是查信息文件，发现某些攻击者感兴趣的信息。攻击者试图打开计算机系统的文件，直到找到所需信息；<br>(2)窃听(eavesdropping)：是偷听他人的对话，为了得到非授权的信息访问，攻击者必须将自己放在一个信息通过的地方，一般采用电子的窃听方式；<br>(3)截获(interception)：不同于窃听 ，它是一种主动攻击方式。攻击者截获信息是通过将自己插入信息通过的通路，且在信息到达目的地前能事先 捕获这些信息。</p>
</blockquote>
<p><strong>篡改攻击</strong><br>篡改攻击是攻击者企图修改信息，而他们本来是无权修改的。这种攻击可能发生在信息驻留在计算机系统中或在网络上传输的情况下 , 是针对信息完整性的攻击。</p>
<p>常见的篡改攻击有3种:</p>
<blockquote>
<p>(1)改变：改变已有的信息 。例如，攻击者改变己存在的员工工资，改变以 后的信息虽然仍存在于该组织，但已经是不正确的信息。这种改变攻击的 目标通常是敏感信息或公共信息。<br>(2)插入 ：插入信息可以改变历史的信息 。例如，攻击者在银行系统中加 一个事务处理，从而将 客户账户的资金转到自己账户上。<br>(3)删除 ：删除攻击是将已有的信息去除，可能是将历史记录的信息删除 。例如，攻击者将一个事务处理记录从银行结账单中删除，从而造成银行 资金的损失。</p>
</blockquote>
<p><strong>拒绝服务攻击</strong></p>
<p>拒绝服务攻击(Denial-of-Service ， DoS)是拒绝合法用户使用系统 、信息、能力等各种资源。可分成以下4种:</p>
<blockquote>
<p>(1)拒绝访问信息：使信息不可用 ，信息被破坏或者将信息改变成不可使用状态，也可能信息仍存在，但已经被移到不可访问的位置。<br>(2)拒绝访问应用：目标是操纵或显示信息的应用。通常对正在运行应用程序的计算机系统进行攻击，使应用程序不可用而不能完成任务。<br>(3)拒绝访问系统：通常是使系统宕机，使运行在该计算机系统上的所有应用无法运行，使 存储在该计算机系统上的所有信息不可用。<br>(4)拒绝访问通信：是针对通信的一种攻击，已有很多年历史。这类攻击可能用切断通信电缆、干扰无线电通信以及用过量的通信负载来淹没网络。</p>
</blockquote>
<p><strong>否认攻击</strong><br>否认攻击是针对信息的可审性进行的。否认攻击企图给出假的信息或者否认已经发生的现实事件或事务处理。<br>否认攻击包括两类:</p>
<blockquote>
<p>(1)假冒：假冒是攻击者企图装扮或假冒别人和别的系统。这种攻击可能发生在个人通信、事务处理或系统对系统的通信中。<br>(2)否认：否认一个事件是简单地抵赖曾经登录和处理的事件。例如，一个人用信用卡在商店 里购物，然而当账单送到时，告诉信用卡公司，他从未到该商店购物。</p>
</blockquote>
<h2 id="网络信息安全服务"><a href="#网络信息安全服务" class="headerlink" title="网络信息安全服务"></a>网络信息安全服务</h2><ul>
<li>机密性服务：提供信息的保密。</li>
<li>完整性服务：提供信息的正确性。</li>
<li>可用性服务：提供的信息是可用的。</li>
<li>可审性服务：本身不针对攻击提供保护，需与其它服务结合。&#96;</li>
</ul>
<h3 id="机密性防护"><a href="#机密性防护" class="headerlink" title="机密性防护"></a>机密性防护</h3><p><strong>文件机密性</strong></p>
<blockquote>
<p>为实现文件机密性服务，所需提供的机制包括物理安全机制、计算机文件访 问控制以及文件加密。<br>文件机密性的要求包括身份标识和身份鉴别、正确的计算机系统配置，如使 用加密则还需合适的密钥管理。</p>
</blockquote>
<p><strong>信息传输机密性</strong></p>
<blockquote>
<p>可基于每个报文信息进行加密保护，也可以对链路上的所有 通信进行加密。</p>
</blockquote>
<p><strong>通信流机密性</strong></p>
<blockquote>
<p>这些信息形式通过通信分析可识别组织之间的通信情况。 例如，很多新闻机构发现某一时刻有大量的快餐送至政 府某重要机关，则可推测某些紧急事件甚至是危机可能发生。</p>
</blockquote>
<h3 id="完整性防护"><a href="#完整性防护" class="headerlink" title="完整性防护"></a>完整性防护</h3><p><strong>文件完整性</strong></p>
<blockquote>
<p>完整性服务也必须和身份标识、身份鉴别功能结合在一起。</p>
</blockquote>
<p><strong>信息传输完整性</strong></p>
<blockquote>
<p>信息在传输中也可能被修改，然而如果不实施截获攻击就很难对 传输中的信息进行修改。</p>
</blockquote>
<blockquote>
<p>完整性服务可成功地阻止篡改攻击和否认攻击。任何篡改攻击都可能改变文件或传输中的信息，当完整性服务能检测到非授权者的访问，篡改攻击就不能成功进行。当完整性服务和身份 标识、身份鉴别服务很好地结合，即使组织以外的文件被 改变也能被检测出来。</p>
</blockquote>
<h3 id="可用性防护"><a href="#可用性防护" class="headerlink" title="可用性防护"></a>可用性防护</h3><p>可用性是用来对拒绝服务攻击的系统恢复。可用性并不能阻止DoS，但 可用性服务可用来减少这类攻击的影响。</p>
<h3 id="可审性防护"><a href="#可审性防护" class="headerlink" title="可审性防护"></a>可审性防护</h3><p>身份标识与身份鉴别</p>
<blockquote>
<p>有两个目的：其一是对试图执行一个功能的每个人的身份进行标识；其二是验证这些人声称的身份。<br>身份鉴别可使用以下任何一种或其组合的方法 实现:</p>
</blockquote>
<p>. (1)知识因子——你知道什么，如口令或PIN(个人身份标识号)。<br>. (2)拥有因子——你有什么，如智能卡或标记。<br>. (3)生物因子——你是什么，如指印、视网膜。</p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>数字签名是通信双方在网上交换信息用公钥密码防止伪造和欺骗的一种身份认证。</p>
<h3 id="Kerberos鉴别"><a href="#Kerberos鉴别" class="headerlink" title="Kerberos鉴别"></a>Kerberos鉴别</h3><p>Kerberos使用<strong>对称密钥加密算法</strong>来实现，通过可信第三方 密钥分发中心的认证服务，它提供了网络通信方之间相互 的身份认证手段，而且并不依赖于主机操作系统和地址。</p>
<h2 id="网络安全评估"><a href="#网络安全评估" class="headerlink" title="网络安全评估"></a>网络安全评估</h2><h3 id="1-可信计算机系统评估准则（TCSEC-）"><a href="#1-可信计算机系统评估准则（TCSEC-）" class="headerlink" title="1. 可信计算机系统评估准则（TCSEC ）"></a>1. 可信计算机系统评估准则（TCSEC ）</h3><p>橘皮书</p>
<blockquote>
<p>D级，无保护级<br>C1级， 自主安全保护级<br>C2级，受控存取保护级<br>B1级，标记安全保护级<br>B2级，结构化保护级<br>B3级，安全域级<br>A级，验证设计级</p>
</blockquote>
<h3 id="2-信息技术安全评估准则（ITSEC-）"><a href="#2-信息技术安全评估准则（ITSEC-）" class="headerlink" title="2. 信息技术安全评估准则（ITSEC ）"></a>2. 信息技术安全评估准则（ITSEC ）</h3><p>白皮书</p>
<p>ITSEC定义了从E0级（没有任何保证）到E6级（形式化 验证）的七个安全等级。<br>目前，ITSEC已大部分被CC替代</p>
<h3 id="3-信息安全技术通用评估准则（CC-）"><a href="#3-信息安全技术通用评估准则（CC-）" class="headerlink" title="3. 信息安全技术通用评估准则（CC ）"></a>3. 信息安全技术通用评估准则（CC ）</h3><blockquote>
<p>简介和一般模型：正文介绍了CC中的有关术语、基本概 念和一般模型以及与评估有关的一些框架，附录部分主 要介绍保护轮廓（PP）和安全目标（ST）的基本内容。<br>安全功能要求：按“类-族-组件 ”的方式提出安全功能要求， 提供了表示评估目标TOE安全功能要求的标准方法。<br>安全保证要求 ：定义了评估保证级别，建立了一系列安 全保证组建作为表示TOE保证要求的标准方法。</p>
</blockquote>
<h3 id="4-我国信息安全评估准则"><a href="#4-我国信息安全评估准则" class="headerlink" title="4. 我国信息安全评估准则"></a>4. 我国信息安全评估准则</h3><blockquote>
<p>第一级：用户自主保护级<br>第二级：系统审计保护级<br>第三级：安全标记保护级<br>第四级：结构化保护级<br>第五级：访问验证保护级</p>
</blockquote>
<h2 id="网络安全评估方式"><a href="#网络安全评估方式" class="headerlink" title="网络安全评估方式"></a>网络安全评估方式</h2><ol>
<li><p>风险评估</p>
</li>
<li><p>生存性评估</p>
</li>
<li><p>网络安全态势评估</p>
</li>
<li><p>网络攻击效果评估</p>
</li>
<li><p>安全测评</p>
</li>
<li><p>信息安全工程能力评估</p>
</li>
<li><p>信息系统审计</p>
</li>
</ol>
<h1 id="网络攻击—ARP-攻击"><a href="#网络攻击—ARP-攻击" class="headerlink" title="网络攻击—ARP 攻击"></a>网络攻击—ARP 攻击</h1><h2 id="嗅探技术"><a href="#嗅探技术" class="headerlink" title="嗅探技术"></a>嗅探技术</h2><p>嗅探技术，是一种常用的收集有用数据信息的网络监听方法，是网络安全攻防技术中很重要的一种。</p>
<p>以太网嗅探。网卡一般具有四种接收工作模式</p>
<p>· 广播 (Broadcast) 模式，可以接收局域网内目的地址为广播 地址(全1地址)的所有数据报；<br>· 多 播 (Multicast) 模式，可以接收目的地址为多播地址的所有 数据报;<br>· 直 接 (Directory) 模式，也就是单播 (Unicast) 模式，只接 收目的地址为本机MAC 地址的所有数据报；<br>· 混杂 (Promiscuous) 模式，能够接收通过网卡的所有数据报。</p>
<p>网卡被设置成混杂模式时，无论监听到的数据帧目的地址如何，网卡能接收所有达到自身的数据。</p>
<h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><blockquote>
<p>交换机 (Switch) 意为“开关”是一种用于电(光)信号转发的网络设备。它可以为接入交换机的任意两 个网络节点提供独享的电信号通路。最常见的交换机是以太网交换机。</p>
</blockquote>
<p>交换机工作于OSI 参考模型的第二层，即数据链路层。交换机内部 的CPU 会在每个端口成功连接时，通过将MAC 地址和端口对应，形成一张MAC 表。</p>
<h2 id="ARP-协议"><a href="#ARP-协议" class="headerlink" title="ARP 协议"></a>ARP 协议</h2><blockquote>
<p>地址解析协议，即ARP(Address Resolution Protocol), 是根据IP地址获取物理地址 的一个TCP&#x2F;IP协议。</p>
</blockquote>
<p>网络通信一般以 IP地址为源、目的地址，但工作在数据链路层的交换机、网卡等并不能识别IP地址，需要获取MAC 地址才能通信。</p>
<p>主机设有一个 ARP高速缓存 ，存放局域网中主机的IP地址和MAC 地址对。当两台主机进行通信时，通过查询ARP 缓 存表来进行IP地址到MAC 地址的转换。缓存表中不存在查 找项时， 运行ARP广播查找目标主机的MAC地址。ARP缓存表中的每一个映射地址项都有生存时间，进行定时更新。</p>
<p><strong>ARP 协议工作过程</strong></p>
<p>● 源主机A 首先判断目的主机B是否处于同一子网(根据本子网的子 网掩码和目标主机IP地址)。</p>
<p>● 若目的主机位于同一子网内</p>
<blockquote>
<p>主 机A 先检查ARP 缓存内是否有主机B 的MAC 地址。<br>如果没有，主机A会发送一个ARP 请求广播包，此包内包含着其欲与之通信的主机的IP地址，也就是主机B的IP地址。<br>当 主 机B收到此广播后，会将自己的MAC 地址利用ARP 响应包传给主机A, 并更新自己的ARP 缓存，也就是同时将主机A的IP地 址&#x2F;MAC 地址对保存起来，以供后面使用。<br>主 机A 在得到主机B 的MAC 地址后，就可以与主机B通信了。同时，主机A也将主机B 的IP地址&#x2F;MAC 地址对保存在自己的ARP 缓 存内。</p>
</blockquote>
<h2 id="ARP-攻击技术"><a href="#ARP-攻击技术" class="headerlink" title="ARP 攻击技术"></a>ARP 攻击技术</h2><p>● 在交换式网络环境下，通信参与者有三个：</p>
<blockquote>
<p>通信双方A和B<br>交换机S<br>攻击者C<br>要想达到嗅探的目的，可以有三个攻击点， (1)交换机S, (2)目标主机A和B,(3) 自 己C。</p>
</blockquote>
<p>发送大量虚假MAC 地址数据报</p>
<blockquote>
<p>交换机虽然可以维护一张端口-MAC 的地址映射表，但是由于交换机内存有限，地址映射表的大小也就有限。<br>如果主机C 发送大量虚假MAC 地址的数据报，快速填满地址映射表。交换机在地址映射表被填满后，就会像HUB 一样以广播 方式处理数据报。<br>这种方法不适合采用静态地址映射表的交换机，而且也不是所有交换机都采用这种转发处理方式。</p>
</blockquote>
<h3 id="ARP-欺骗"><a href="#ARP-欺骗" class="headerlink" title="ARP 欺骗"></a>ARP 欺骗</h3><p>ARP 欺骗利用修改主机ARP 缓存表的方法达到嗅探的目的，是一种中间人攻击。主机C 为了达到嗅探的目的，会向主机A 和主机B分别发送ARP 应答包，告诉它们IP地址为IPB 的主机MAC 地址为MACC,IP 地址为IPA 的主机MAC地址为MACC。<br>这 样 ， 主 机A 和主机B 的ARP 缓存中就会有IPB—MACC 和IPA—MACC 的记录。这样，主机A 和主机B的通信数据都流向了主机C, 主机C 只要再发送到 其真正的目的地就可以了。当然ARP 缓存表项是动态更新的(一般为两分 钟),如果没有更新信息， ARP 映射项会自动删除。所以，主机C 在监听过 程中，还要不断地向主机A 和主机B 发送伪造的ARP 应答包。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled%202.png" alt="Untitled"></p>
<p><strong>修改本地MAC 地址</strong></p>
<blockquote>
<p>也可以通过修改本地MAC 地址为目标主机MAC 地址来实现嗅探。把主机C 的MAC 地址修改为目标主机B 的MAC 地址，交换机会将 MACB 和端口c对应起来。<br>在以后收到目的地址为MACB 的数据报后，交换机会将包从端口c发送出去。这样就达到了监听的目的。<br>但同样地，这种方法只适用于动态生成地址映射表的交换机，并且没有采用其它策略。</p>
</blockquote>
<h2 id="ARP-攻击溯源"><a href="#ARP-攻击溯源" class="headerlink" title="ARP 攻击溯源"></a>ARP 攻击溯源</h2><h3 id="方法一-：捕包分析"><a href="#方法一-：捕包分析" class="headerlink" title="方法一 ：捕包分析"></a>方法一 ：捕包分析</h3><blockquote>
<p>在网络内任意一台主机上运行抓包软件，捕获所有到达本机的数据包。如果发现有某个IP不断发送ARP Request请求包，那么这台电脑一般就是攻击源。<br>原 理 ：ARP 攻击行为方式主要有两种， 一是欺骗网关，二是欺骗网内的所有主机。最终的结果是，在网关的ARP 缓存表中，网内所有活动主机 的MAC 地址均为中毒主机的MAC 地址；网内所有主机的ARP 缓存表中， 网关的MAC 地址也成为中毒主机的MAC 地址。前者保证了从网关到网 内主机的数据包被发到中毒主机，后者相反，使得主机发往网关的数据 包均发送到中毒主机。</p>
</blockquote>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>使用arp-a 命令任意选两台不能上网的主机，在DoS 命令窗口下运行arp-a命令。例如在结果中，两台电脑除了网关的IP, MAC 地址对应项，都包含了192.168.0.186的这个IP, 则可以断定 192.168.0.186这台主机就是攻击源。<br>原理： 一般情况下，网内的主机只和网关通信。正常情况下， 一台主机的ARP 缓存中应该只有网关的MAC 地址。如果有其他主机 的MAC 地址，说明本地主机和这台主机最后有过数据通信发生。 如果某台主机(例如上面的192.168.0.186)既不是网关也不是服 务器，但和网内的其他主机都有通信活动，且此时又是ARP 攻击 发作时期，那么攻击源也就是它了。</p>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>使用tracert 命令在任意一台受影响的主机上，在DoS 命令窗口下运行如下命令： tracert 61.135.179.148。<br>● 假定设置的缺省网关为10.8.6.1,在跟踪一个外网地址时， 第一跳却是10.8.6.186,那么， 10.8.6.186就是攻击源。<br>● 原理：中毒主机在受影响主机和网关之间，扮演了“中间人” 的角色。所有本应该到达网关的数据包，由于错误的MAC地址，均被发到了中毒主机。此时，中毒主机越俎代庖，起了缺省网关的作用。</p>
<h2 id="ARP-攻击防御方法"><a href="#ARP-攻击防御方法" class="headerlink" title="ARP 攻击防御方法"></a>ARP 攻击防御方法</h2><h3 id="方法一：减少过期时间"><a href="#方法一：减少过期时间" class="headerlink" title="方法一：减少过期时间"></a>方法一：减少过期时间</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">#ndd -set /dev/arp arp cleanup interval <span class="number">60000</span></span><br><span class="line">#ndd -set /dev/ip ip ire flush interval <span class="number">60000</span></span><br><span class="line"><span class="number">60000</span>=<span class="number">60000</span>毫秒默认是<span class="number">300000</span></span><br></pre></td></tr></table></figure>

<p>加快过期时间，并不能避免攻击，但是使得攻击更加困难，带来的影响是在网络中会大量的出现 ARP 请求和回复，请不 要在繁忙的网络上使用。</p>
<h3 id="方法二：建立静态ARP表"><a href="#方法二：建立静态ARP表" class="headerlink" title="方法二：建立静态ARP表"></a>方法二：建立静态ARP表</h3><p>这是一种很有效的方法，而且对系统影响不大。缺点是破坏了动<br>态ARP 协议。可以建立如下的文件。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">[test.<span class="property">nsfocus</span>.<span class="property">com</span>](<span class="attr">http</span>:<span class="comment">//test.nsfocus.com/) 08:00:20:ba:a1:f2</span></span><br><span class="line">user. [nsfocus.<span class="property">com</span>](<span class="attr">http</span>:<span class="comment">//nsfocus.com/) 08:00:20:ee:de:1f</span></span><br></pre></td></tr></table></figure>

<p>使用arp -f filename加载进去，这样的ARP 映射将不会过期和被新<br>的ARP 数据刷新，除非使用arp-d 才能删除。但是一旦合法主机的 网卡硬件地址改变，就必须手工刷新这个arp文件。这个方法，不 适合于经常变动的网络环境。</p>
<h3 id="方法三：禁止ARP"><a href="#方法三：禁止ARP" class="headerlink" title="方法三：禁止ARP"></a>方法三：禁止ARP</h3><p>可以通过ipconfig interface-arp 完全禁止ARP, 这样， 网卡不会发送ARP 和接受ARP 包。但是使用前提是使用 静态的ARP 表，如果不在ARP 表中的计算机，将不能通 信。<br>这个方法不适用与大多数网络环境，因为这增加了网络管理的成本。但是对小规模的安全网络来说，还是有效 可行的。</p>
<h1 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a><strong>拒绝服务攻击</strong></h1><h2 id="典型DoS—Ping-of-Death"><a href="#典型DoS—Ping-of-Death" class="headerlink" title="典型DoS—Ping of Death"></a><strong>典型DoS—Ping of Death</strong></h2><p>攻击者故意在ICMP Echo数据包(Ping包)之后附加非常多的冗余信息，使数据包的尺寸超过65535个字节的上限。</p>
<p>接收方对这种数据包进行处理时就会出现内存分配错误，导致TCP&#x2F;IP堆栈溢出，从而引起系统崩溃，挂起或重启。</p>
<h2 id="典型DoS——Teardrop"><a href="#典型DoS——Teardrop" class="headerlink" title="典型DoS——Teardrop"></a><strong>典型DoS——Teardrop</strong></h2><p>Teardrop指的是向目标机器发送损坏的IP包，诸如重叠的包或过大的包载荷，该攻击通过TCP&#x2F;IP协议栈中分片重组代码中的bug来瘫痪各种不同的操作系统。</p>
<h2 id="典型DoS——Land攻击"><a href="#典型DoS——Land攻击" class="headerlink" title="典型DoS——Land攻击"></a><strong>典型DoS——Land攻击</strong></h2><p>Land攻击：利用特殊的TCP封包传送至目标主机，使其因无法判别而当机或被迫重新启动。</p>
<p>攻击原理是：用一个特别构造的SYN包，<strong>它的源地址和目标地址都被设置成某一个服务器地址</strong>。此举将导致接受服务器向它自己的地址发送SYN一ACK消息，结果这个地址又发回ACK消息并创建一个空连接。被攻击的服务器每接收一个这样的连接都将保留，直到超时。</p>
<h2 id="典型DoS—SYN洪水"><a href="#典型DoS—SYN洪水" class="headerlink" title="典型DoS—SYN洪水"></a><strong>典型DoS—SYN洪水</strong></h2><p><strong>原理：</strong></p>
<ul>
<li>每个机器都需要为半开连接分配一定的资源</li>
<li>这种半开连接的数量是有限制</li>
<li>攻击方利用TCP连接三次握手过程，打开大量的半开TCP连接</li>
<li>目标机器不能进一步接受TCP连接。机器就不再接受进来的连接请求。</li>
</ul>
<h2 id="典型DoS—Smurf"><a href="#典型DoS—Smurf" class="headerlink" title="典型DoS—Smurf"></a><strong>典型DoS—Smurf</strong></h2><p><strong>原理：</strong></p>
<ul>
<li>攻击者向一个广播地址发送ICMP Echo请求，并且用受害者的IP地址作为源地址</li>
<li>广播地址网络上的每台机器响应这些Echo请求，同时向受害者主机发送ICMP Echo-Reply应答</li>
<li>受害者主机会被这些大量的应答包淹没</li>
</ul>
<h2 id="传统DoS的变化"><a href="#传统DoS的变化" class="headerlink" title="传统DoS的变化"></a><strong>传统DoS的变化</strong></h2><h3 id="CC攻击：Challenge-Collapsar"><a href="#CC攻击：Challenge-Collapsar" class="headerlink" title="CC攻击：Challenge Collapsar"></a><strong>CC攻击：Challenge Collapsar</strong></h3><p>原理：CC攻击的原理就是攻击者控制某些主机不停地发大量数据包给对方服务器造成服务器资源耗尽，一直到宕机崩溃。</p>
<h3 id="慢速攻击"><a href="#慢速攻击" class="headerlink" title="慢速攻击"></a><strong>慢速攻击</strong></h3><p>对HTTP服务器，先建立了一个连接，指定一个比较大的content-length，然后以非常低的速度发包，比如1-10s发一个字节，然后维持住这个连接不断开。</p>
<p>如果客户端持续建立这样的连接，那么服务器上可用的连接将一点一点被占满，从而导致拒绝服务。</p>
<h2 id="基于误用的DDoS检测"><a href="#基于误用的DDoS检测" class="headerlink" title="基于误用的DDoS检测"></a><strong>基于误用的DDoS检测</strong></h2><p>基于误用方法依赖于<strong>攻击特征的选取</strong>, 一般用于检测利用漏洞型的DDoS攻击。</p>
<p>基于误用的DDoS检测主要是利用了<strong>特征匹配</strong>、<strong>模型推理</strong>、<strong>状态转换</strong>和<strong>专家系统</strong>的方法</p>
<h2 id="基于异常的DDoS检测"><a href="#基于异常的DDoS检测" class="headerlink" title="基于异常的DDoS检测"></a><strong>基于异常的DDoS检测</strong></h2><p>基于异常的DDoS检测取决于<strong>检测模型的建⽴</strong>，不同的模型对应着不同的检测⽅式，主要包括<strong>统计检测、模式预测、⼈⼯智能检测、机器学习检测</strong>四种⽅法</p>
<h2 id="按算法部署位置分类的检测方法"><a href="#按算法部署位置分类的检测方法" class="headerlink" title="按算法部署位置分类的检测方法"></a><strong>按算法部署位置分类的检测方法</strong></h2><p>l源端检测</p>
<p>Ø源端DDoS攻击检测指的是将检测算法布置在发出攻击数据包的主机所处⽹络的边界路由器上。</p>
<p>Ø将DDoS攻击检测系统部署在源端, 可以使得攻击数据流在进⼊⽹络之前被阻⽌。</p>
<p>l中间⽹络检测</p>
<p>Ø中间⽹络DDoS攻击检测是指将攻击检测算法部署在整个⽹络上, 包括路由器、交换机或其他⽹络设备。</p>
<p>Ø在中间⽹络进⾏检测,通常是在核⼼路由器上部署分布式的DDoS防御检测系统。</p>
<p>l⽬的端检测</p>
<p>Ø⽬的端DDoS攻击检测是指将攻击检测算法部署在被攻击的主机和相关⽹络设备上。⽬前应⽤得最多的攻击检测都是在⽬的端(即受害端)进⾏的。</p>
<h2 id="低速率拒绝服务-low-rate-denial-of-service"><a href="#低速率拒绝服务-low-rate-denial-of-service" class="headerlink" title="低速率拒绝服务(low-rate denial of service)"></a><strong>低速率拒绝服务(low-rate denial of service)</strong></h2><p>当前研究的LDoS攻击：针对TCP 拥塞控制机制的攻击不需要维持持续的高速攻击流，利用网络协议或应用服务协议的<strong>自适应机制中</strong>存在的安全漏洞，通过周期性地发送高速脉冲攻击数据包，达到降低受害端的服务性能的目的。</p>
<p>TCP拥塞控制机制</p>
<p>Ø 慢启动(slow start)、拥塞避免(congestion avoidance)<br>Ø 快速重传(fast retransmit)、快速恢复(fast recovery)<br>Ø 发送端会根据当前的链路拥塞情况动态地调整发送报文的速率</p>
<h2 id="LDoS-攻击的检测"><a href="#LDoS-攻击的检测" class="headerlink" title="LDoS 攻击的检测"></a><strong>LDoS 攻击的检测</strong></h2><p>一般传统的 DoS 攻击检测方法：针对网络数据流和服务器<strong>负荷激增等特征</strong>进行检测</p>
<h3 id="特征检测"><a href="#特征检测" class="headerlink" title="特征检测"></a><strong><strong>特征检测</strong></strong></h3><p>lLDoS攻击的脉冲强度、持续时间和攻击周期等特征也很明显，特别是结合其<strong>周期性特征和短时高速脉冲特征，</strong>能够很好检测到攻击。</p>
<p>l最常见的防御策略就是<strong>改进路由器的主动队列管理</strong>(active queuemanagement, AQM)</p>
<p>l目标：一是丢弃符合设定攻击特征的数据流的数据包；二是重新进行带宽分配，尽量保护TCP 数据流，抑制LDoS 攻击流。</p>
<h3 id="动态时间封装-Dynamic-time-warping-DTW"><a href="#动态时间封装-Dynamic-time-warping-DTW" class="headerlink" title="动态时间封装(Dynamic time warping,DTW)"></a>动态时间封装(Dynamic time warping,DTW)</h3><p>五元组(T,L,R,S,N)描述攻击特征</p>
<p>ØT 表示攻击的周期<br>ØL 表示一个突发攻击流持续的时间<br>ØR表示突发攻击流量的峰值速率<br>ØS 表示计时开始到第一个突发攻击流量开始之间的时间差<br>ØN 表示背景流量的等级</p>
<h1 id="DNS威胁与防范"><a href="#DNS威胁与防范" class="headerlink" title="DNS威胁与防范"></a><strong>DNS威胁与防范</strong></h1><h2 id="DNS-概述"><a href="#DNS-概述" class="headerlink" title="DNS 概述"></a><strong>DNS 概述</strong></h2><p>域名系统（Domain Name System，DNS)在Internet上具有举足轻重的作用，负责<strong>在域名和IP地址之间进行转换</strong>。</p>
<p>因特网的<strong>域名系统</strong>被设计成为一个<strong>联机分布式数据库系统</strong>，并采用客户服务器方式运行。</p>
<p>DNS使用的大多数名字都可在本地解析，仅有少量解析需要在因特网上通信，因此系统效率很高。</p>
<p>因特网域名系统采用<strong>层次树状结构</strong>的命名方法，任何一个连接到因特网的主机或路由器都有一个<strong>唯一的层次结构的名字</strong>，即域名（Domain Name）。这里，“域”是名字空间中的一个可被管理的划分。域还可以继续划分为子域，如：二级域、三级域等</p>
<h2 id="DNS-资源记录"><a href="#DNS-资源记录" class="headerlink" title="DNS 资源记录"></a><strong>DNS 资源记录</strong></h2><p>理论上对于每一个域名我们只需要在域名服务器上保存一条记录即可。这里的记录一般叫作<strong>域名资源记录</strong>，它是一个<strong>五元组</strong>，可以用以下格式表示：</p>
<p>1.Domain_name: 指出这条记录适用于哪个域名；</p>
<p>2.Time_to_live: 用来表明记录的生存周期，也就是说最多可以缓存该记录多长时间（后面会讲到缓存机制）；</p>
<p>3.Class: 一般总是IN；</p>
<p>4.Type: 记录的类型；</p>
<p>5.Value: 记录的值，如果是A记录，则value是一个IPv4地址。</p>
<h2 id="WHOIS的概念"><a href="#WHOIS的概念" class="headerlink" title="WHOIS的概念"></a><strong>WHOIS的概念</strong></h2><p>“WHOIS”是当前域名系统中不可或缺的一项信息服务。</p>
<p>很多用户希望进一步了解域名、名字服务器的详细信息，这就会用到WHOIS。</p>
<p>对于域名的注册服务机构（registrar）而言，要确认域名数据是否已经正确注册到域名注册中心（registry），也经常会用到WHOIS。</p>
<p>直观来看，WHOIS就是<strong>链接到域名数据库的搜索引擎</strong>，一般来说是属于网络信息中心（NIC）所提供和维护的名字服务之一。</p>
<h2 id="DNS工作流程"><a href="#DNS工作流程" class="headerlink" title="DNS工作流程"></a><strong>DNS工作流程</strong></h2><p><strong>递归查询：</strong>一般客户机和服务器之间是递归查询，DNS服务器如果未能在本地找到相应的信息，就代替用户向其它服务器进行查询，这时它是代替用户扮演了解析器（resolver）的角色，直到最后把结果找到，也可能根本没有结果，那就返回错误，并返回给用户为止。</p>
<p><strong>迭代查询：</strong>一般服务器之间属于反复查询。DNS服务器返回的要么是本地存在的结果信息，要么是一个错误码，告诉查询者你要的信息这里没有，然后再返回一个可能会有查询结果的DNS服务器地址，让查询者到那里去查一查。</p>
<h2 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a><strong>DNS协议</strong></h2><p>DNS既可以使用TCP，又可以使用UDP，端口为53.</p>
<p>Ø DNS主从服务器之间区传送传输时使用TCP协议<br>Ø 客户端与DNS服务器之间传输时用的是UDP协议</p>
<p><strong>头部：</strong></p>
<p><strong>会话标识（2字节）：</strong>是DNS报文的ID标识，对于请求报文和其对应的应答报文，这个字段是相同的，通过它可以区分DNS应答报文是哪个请求的响应</p>
<p><strong><strong>标志位：</strong></strong></p>
<table>
<thead>
<tr>
<th>QR</th>
<th>opcode</th>
<th>AA</th>
<th>TC</th>
<th>RD</th>
<th>RA</th>
<th>(zero)</th>
<th>rcode</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>4</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>3</td>
<td>4</td>
</tr>
</tbody></table>
<p><strong><strong>数量字段：</strong></strong></p>
<p><strong><strong>数量字段（总共8字节）：Questions、Answer RRs、Authority RRs、Additional RRs 各自表示后面的四个区域的数目。Questions表示查询问题区域节的数量，Answer RRs表示回答区域的数量，Authority RRs表示授权区域的数量，Additional RRs表示附加区域的数</strong></strong></p>
<h3 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h3><p>Ø <strong>QR– 识别查询和答复消息的1位字段： 0 查询；1 应答；</strong></p>
<p>Ø <strong>Opcode – 描述消息类型的4位字段：</strong></p>
<p>0 标准查询（由名字到地址）；<br>1 逆向查询；<br>2 服务状态请求 ；</p>
<p>Ø <strong>AA – 授权回答：1位字段。当设置为1时，识别由命令名字服务器作出的答复</strong></p>
<p>Ø <strong>TC – 可切断。1位字段。当设置为1，表明消息已被切断。</strong></p>
<p>Ø <strong>RD – 1位字段。由名字服务器设置为1请求递归服务。</strong></p>
<p>Ø <strong>RA –1位字段。由名字服务器设置表示递归服务的可用性。</strong></p>
<p>Ø <strong>Z –3位字段。备用，设置为0.</strong></p>
<p>Ø <strong>Rcode – 响应代码，</strong>由名字服务器设置的4位字段用以识别查询状态。表示返回码，0表示没有差错，3表示名字差错，2表示服务器错误（Server Failure）</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h3><p><strong>查询名：</strong>长度不固定，且不使用填充字节，一般该字段表示的就是需要查询的域名（如果是反向查询，则为IP，反向查询即由IP地址反查域名）</p>
<p><strong>域名（2字节或不定长）：</strong>格式和Queries区域的查询名字字段是一样的。。</p>
<p><strong>查询类型：</strong>表明资源记录的类型，同Queries。</p>
<p><strong>查询类：</strong>对于Internet信息，总是1。</p>
<h3 id="DNS安全威胁"><a href="#DNS安全威胁" class="headerlink" title="DNS安全威胁"></a><strong>DNS安全威胁</strong></h3><p><strong>DNS的安全漏洞主要体现在以下三个方面。</strong></p>
<p>(1) DNS报文只使用<strong>序列号</strong>来进行有效性鉴别，序列号由客户程序设置并由服务器返回结果，客户程序通过它来确定响应与查询是否匹配，这就引入了序列号攻击的危险。</p>
<p>(2) 从协议定义上来看，在DNS应答报文中可以<strong>附加信息</strong>，该信息可以和所请求的信息没有直接关系，这样，攻击者就可以在应答中随意添加某些信息，如：指示某域的权威域名服务器的域名及IP，导致在被影响的域名服务器上查询该域的请求都会被转向攻击者所指定的域名服务器上去，从而对网络的完整性构成威胁。</p>
<p>(3) DNS的<strong>缓存机制</strong>，当一个客户端&#x2F;DNS服务器，收到有关域名和IP的映射信息时，它会将该信息存放在缓存中，当再次遇到对此域名的查询请求时就直接使用缓存中的结果而无需重新查询。可以通过ipconfig &#x2F;displaydns命令查看本地DNS缓存信息。</p>
<p><strong>缓冲区溢出攻击</strong></p>
<p>1、更改MX记录，造成邮件被截获、修改或删除。</p>
<p><strong>2、更改A记录，将www服务器的域名指向黑客具有的同样www</strong>内容的主机，诱使访问者登陆，获取访问者的密码等相关信息</p>
<p><strong>3、利用这台主机作为攻击其他机器的跳板</strong></p>
<p><strong>拒绝服务攻击</strong></p>
<p>造成的危害是：域名无法解析为IP地址，用户无法访问互联网</p>
<p><strong>信息泄露</strong></p>
<p>一旦这些信息泄露，攻击者就可以根据它推测出主域名服务器的网络结构，为进一步攻击提供参考依据。</p>
<h2 id="DNS安全防范"><a href="#DNS安全防范" class="headerlink" title="DNS安全防范"></a><strong>DNS安全防范</strong></h2><p>应对DNS服务器面临的安全隐患主要依据以下两个准则：</p>
<p>选择安全的没有缺陷的BIND版本<br>DNS服务器配置正确可靠</p>
<h1 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a><strong>Web安全</strong></h1><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a><strong>XSS</strong></h2><p>Xss（cross site scripting）攻击,全称跨站脚本攻击。</p>
<p>跨站脚本攻击是指通过存在安全漏洞的web网站注册用户的测览器内，运行非法的HTML标签或JavaScript进行的一种攻击.</p>
<blockquote>
<p>XSS的原理是恶意攻击者往 web 页面里插入恶意可执行网页脚本代码，当 用户测览该页之时，嵌入其中 web 里面的脚本代码会被执行，从而可以 达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p>
</blockquote>
<p><strong>非持久型 Xss（反射型 Xss ）</strong></p>
<p>反射型XSS，也叫非持久型XSS，是指发生请求时， XSS代码出现在请求URL中， 作为参数提交到服务器，服务器解析并响应。响应结果中包含XSS代码，最后 测览器解析并执行。</p>
<p>即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击,拿 到用户隐私数据。<br>攻击者需要诱骗点击<br>反馈率低，所以较难发现和响应修复</p>
<p>具体流程：<br>1、Alice给Bob发送一个恶意构造了Web的URL。<br>2、Bob点击并查看了这个URL。<br>3、恶意页面中的JavaScript打开一个具有漏洞的HTML页面并将其安装在Bob电脑上。<br>4、具有漏洞的HTML页面包含了在Bob电脑本地域执行的JavaScript。<br>5、Alice的恶意脚本可以在Bob的电脑上执行Bob所持有的权限下的命令。</p>
<p><strong>存储型xss，也叫持久型xss</strong></p>
<p>持久型 Xss 漏洞，也被称为存储型 Xss 漏洞， 一般存在于 F。rm 表单提交 等交互功能，如发帖留言，提交文本信息等，黑客利用的 Xss 漏洞，将内容 经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出 的注入代码时，恰好将其演染执行。<br>注入页面方式不是来源于 URL，refferer，f。rms 等，而是来源于后端从数 据库中读出来的数据，不需要诱骗点击。</p>
<p>持久型 Xss 有以下几个特点:</p>
<blockquote>
<p>持久性,植入在数据库中<br>危害面广,甚至可以让用户机器变成 DD。S 攻击的肉鸡。<br>盗取用户敏感私密信息。</p>
</blockquote>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>CSRF（Cross-Site ReqUest Forgery）,跨站请求伪造攻击</p>
<p>CSRF是一种常见的web攻击，它利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。</p>
<p><strong>CSRF防御</strong></p>
<p>一般的 CSRF 防御也都在服务端进行，主要从以下两个方面入手：<br><strong>正确使用 GET，POST 请求和 cookie</strong><br>. GET 请求常用在查看，列举，展示等不需要改变资源属性的时候（数据库 query 查询的时候）<br>. POST 请求常用在 From 表单提交，改变一个资源的属性或者做其他一些事情的时 候（数据库有 insert、update、delete 的时候）<br><strong>在非 GET 请求中增加 token</strong><br>. 为每个用户生成一个唯一的 cookie token，所有表单都包含同一个伪随机值，但 是由于用户的 cookie 很容易由于网站的 XSS 漏洞而被盗取，所以这个方案必须 要在没有 XSS 的情况下才安全。<br>. 每个 POST 请求使用验证码，这个方案算是比较完美的，但是需要用户多次输入 验证码，用户体验比较差，所以不适合在业务中大量运用。<br>. 渲染表单的时候，为每一个表单包含一个 csrfToken，提交表单的时候，带上 csrfToken，然后在后端做 csrfToken 验证。</p>
<h3 id="OS命令注入"><a href="#OS命令注入" class="headerlink" title="OS命令注入"></a>OS命令注入</h3><p>os命令注入攻击指通过web应用，执行非法的操作系统命令达到攻击的<br>目的。只要在能调用she II函数的地方就有存在被攻击的风险。倘若调 用she II时存在疏漏，就可以执行插入的非法命令。</p>
<h2 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h2><p>SQL注入攻击的本质<br><strong>把用户输入的数据当做代码执行</strong></p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安全课程笔记</title>
    <url>/2024/01/15/BUPT_note/Notes%20on%20software%20security/</url>
    <content><![CDATA[<h1 id="软件安全-张淼"><a href="#软件安全-张淼" class="headerlink" title="软件安全 张淼"></a>软件安全 张淼</h1><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h3 id="信息安全现状"><a href="#信息安全现状" class="headerlink" title="信息安全现状"></a>信息安全现状</h3><p><strong>信息安全现象</strong></p>
<p>➔ <strong>病毒、黑客攻击的泛滥</strong></p>
<p>➢数量规模大、智能程度高（技术含量）、组织方式多样化（个人、组织和集团等）</p>
<p>➢危害程度严重</p>
<p>➔ <strong>信息安全成为国家安全的重要内容</strong></p>
<p>➢国家领导层的意识</p>
<p>➢信息化建设的经验、伊战的教训</p>
<p>➔ <strong>关键技术受制于人</strong></p>
<p>➢CPU、OS</p>
<p>➢专利、标准</p>
<h3 id="信息安全威胁"><a href="#信息安全威胁" class="headerlink" title="信息安全威胁"></a><strong><strong>信息安全威胁</strong></strong></h3><p>信息安全威胁的表现：</p>
<p>➔ 网络协议的弱点</p>
<p>➔ 网络操作系统的漏洞</p>
<p>➔ 应用系统设计的漏洞</p>
<p>➔ 网络系统设计的缺陷</p>
<p>➔ 恶意攻击</p>
<p>➔ 来自合法用户的攻击</p>
<p>➔ 互联网的开放性</p>
<p>➔ 物理安全</p>
<p>➔ 管理安全</p>
<p>威胁的根源</p>
<p>➔ <strong>信息系统的复杂性：</strong></p>
<p>➢系统软硬件缺陷，网络协议的缺陷</p>
<p>➔ <strong>信息系统的开放性：</strong></p>
<p>➢系统开放：计算机及计算机通信系统是根据行业标准规定的接口建立起来的。</p>
<p>➢标准开放：网络运行的各层协议是开放的，并且标准的制定也是开放的。</p>
<p>➢业务开放：用户可以根据需要开发新的业务。</p>
<h2 id="问题的原因和根源"><a href="#问题的原因和根源" class="headerlink" title="问题的原因和根源"></a><strong><strong>问题的原因和根源</strong></strong></h2><h3 id="软件问题的原因"><a href="#软件问题的原因" class="headerlink" title="软件问题的原因"></a><strong><strong>软件问题的原因</strong></strong></h3><p>⚫<strong>Connectivity（互联性）</strong></p>
<ul>
<li>终端设备的互联给了攻击者有更多的机会</li>
<li>攻击者利用系统弱点不再需要进行物理访问</li>
<li>平台设计缺陷</li>
</ul>
<p>⚫<strong>Extensibility（扩展性）</strong></p>
<ul>
<li>目前很多软件技术都支持扩展技术</li>
<li>优点在于可以很方便的加载以及扩展新的功能与组件</li>
<li>问题在于扩展的功能与组件不可控，会带来未知的安全风险</li>
</ul>
<p>⚫<strong>Complexity（复杂性</strong>）</p>
<ul>
<li>软件系统代码增长速度惊人</li>
</ul>
<p>系统越复杂，Bug越难避免，质量越难保证，可能发生的安全风险越多。</p>
<h3 id="新的需求与传统安全技术的不足"><a href="#新的需求与传统安全技术的不足" class="headerlink" title="新的需求与传统安全技术的不足"></a><strong><strong>新的需求与传统安全技术的不足</strong></strong></h3><p>传统网络安全技术只能对网络层进行防护</p>
<p>无法分辨与正常应用数据混杂在一起的攻击</p>
<p>➔<strong>XSS</strong></p>
<p>➔<strong>SQL注入</strong></p>
<p>➔<strong>未校验参数</strong></p>
<p>➔<strong>etc.</strong></p>
<table>
<thead>
<tr>
<th>传统的安全模式</th>
<th>新的安全模式</th>
</tr>
</thead>
<tbody><tr>
<td>保护”边界”</td>
<td>构建安全的系统</td>
</tr>
<tr>
<td>网络安全</td>
<td>设计安全的软件</td>
</tr>
<tr>
<td>安全负责的人是 IT&#x2F;MIS&#x2F;CISSP等部门</td>
<td>软件开发人员和设计人员对安全负责</td>
</tr>
<tr>
<td>被动式</td>
<td>主动式</td>
</tr>
</tbody></table>
<h1 id="缓冲区溢出基础"><a href="#缓冲区溢出基础" class="headerlink" title="缓冲区溢出基础"></a>缓冲区溢出基础</h1><h2 id="缓冲区溢出概述－缓冲区溢出原理简介"><a href="#缓冲区溢出概述－缓冲区溢出原理简介" class="headerlink" title="缓冲区溢出概述－缓冲区溢出原理简介"></a>缓冲区溢出概述－缓冲区溢出原理简介</h2><p>缓冲区溢出是指当计算机向缓冲区内填充数据位数时超过了缓冲区本身的容量溢出的数据覆盖在合法数据上。</p>
<p>在初始化、拷贝或移动数据时，C语言并不自动地支持内在的数组边界检查。</p>
<p><strong>目前对于缓冲区溢出,主要分为静态保护和动态保护:</strong></p>
<p>⚫**静态保护:**不执行代码,通过静态分析来发现代码中可能存在的漏洞.静态的保护技术包括编译时加入限制条件,返回地址保护,二进制改写技术,基于源码的代码审计等.</p>
<p>⚫**动态保护:**通过执行代码分析程序的特性,测试是否存在漏洞,或者是保护主机上运行的程序来防止来自外部的缓冲区溢出攻击</p>
<h2 id="PE文件格式简介"><a href="#PE文件格式简介" class="headerlink" title="PE文件格式简介"></a>PE文件格式简介</h2><p>PE(Portable Executable)是Win32平台下可执行文件遵守的数据格式。常见的可执行文件(如“*.exe”文件和“*.dll”文件)都是典型的PE文件。</p>
<p>PE 文 件 格 式 把 可 执 行 文 件 分 成 若 干 个 数 据 节(section)，不通的资源被存放在不同的节中。一个典型的PE文件包含的节如下：</p>
<p>➔ .text 由编译器产生，存放着二进制的机器代码，也是我们反汇编和调试的对象。<br>➔ .data 初始化的数据块，如宏定义、全局变量、静态变量等。<br>➔ .idata 可执行文件所使用的动态链接库等外来函数与文件的信息。<br>➔ .rsrc 存放程序的资源，如图标、菜单等。<br>➔ 除此之外 ， 还 可 能 出 现 的 节 包 括 “.reloc” 、“.edata”、 “.tls”、 “.rdata”等。</p>
<p><strong>PE文件简单构成</strong></p>
<table>
<thead>
<tr>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>.data节</td>
</tr>
<tr>
<td>.rdata节</td>
</tr>
<tr>
<td>.text节</td>
</tr>
<tr>
<td>文件头、节</td>
</tr>
<tr>
<td>表等</td>
</tr>
</tbody></table>
<h2 id="虚拟内存相关知识—虚拟内存简介"><a href="#虚拟内存相关知识—虚拟内存简介" class="headerlink" title="虚拟内存相关知识—虚拟内存简介"></a>虚拟内存相关知识—虚拟内存简介</h2><p>Windows的内存可以被分为两个层面：物理内存和虚拟内存 。 其 中 ， 物理内存比较复杂 ， 需要进入Windows内核级别ring0才能看到。通常，在用户模式下，我们用调试器看到的地址都是虚拟内存。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/Untitled.png" alt="Untitled"></p>
<p>虽然每个进程都“相信”自己拥有4GB的空间，但实际上它们运行时真正能用到的空间根本没有那么多。</p>
<p>内存管理器只是分给进程一片“假地址”，或者说是“虚拟地址”，它们对进程来说只是一笔“无形的数字财富”；</p>
<p>当需要实际的内存操作时，内存管理器才会把“虚拟地址”和“物理地址”联系起来。</p>
<h2 id="PE文件与虚拟内存之间的映射"><a href="#PE文件与虚拟内存之间的映射" class="headerlink" title="PE文件与虚拟内存之间的映射"></a><strong>PE文件与虚拟内存之间的映射</strong></h2><p>静态反汇编工具看到的PE文件中某条指令的位置是相对于磁盘文件而言的，即所谓的文件偏移，我们可能还需要知道这条指令在内存中所处的位置，即虚拟内存的位置</p>
<p>反之，在调试时看到的某条指令的地址是虚拟内存地址，我们也经常需要回到PE文件中找到这条指令对应的机器码</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h3><p>⚫ <strong>文件偏移地址(File Offset)</strong></p>
<p>➢数据在PE文件中的地址叫做文件偏移地址。这是文件在磁盘上存放时相对于文件开头的偏移。</p>
<p>⚫ <strong>装载基址(Image Base)</strong></p>
<p>➢PE装入内存时的基地址。默认情况下，EXE文件在内存中的基地址是0x00400000,DLL文件是0x10000000。这些位置可以通过修改编译选项更改。</p>
<p>⚫ <strong>虚拟内存地址(Virtual Address,VA)</strong></p>
<p>➢PE文件中的指令被装入内存后的地址。</p>
<p>⚫ <strong>相对虚拟地址(Relative Virtual Address,RVA)</strong></p>
<p>➢相对虚拟地址是内存地址相对于映射基址的偏移量。</p>
<h2 id="系统栈的工作原理—内存的不同用途"><a href="#系统栈的工作原理—内存的不同用途" class="headerlink" title="系统栈的工作原理—内存的不同用途"></a><strong><strong>系统栈的工作原理—内存的不同用途</strong></strong></h2><p>成功地利用缓冲区溢出漏洞可以修改内存中的变量的值，甚至可以劫持进程，执行恶意代码，最终获得主机的控制权。</p>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a><strong>寄存器</strong></h3><p>⚫ 通用寄存器</p>
<p>➔ 32位的通用寄存器有<em>EAX</em>、<em>EBX</em>、<em>ECX</em>、<em>EDX</em>、<em>ESP</em>、<em>EBP</em>、<em>ESI</em>和<em>EDL</em>，它们的使用方法不总是相同的。一些指令赋予它们特殊的功能。</p>
<p>⚫ 段寄存器</p>
<p>➔ 段寄存器被用于指向进程地址空间不同的段。</p>
<p>➔ <em>CS</em>指向一个代码段的开始；</p>
<p>➔ <em>SS</em>是一个堆栈段；</p>
<p>➔ <em>DS</em>、<em>ES</em>、<em>FS</em>、<em>GS</em>和各种其他数据段，例如存储静态数据的段。</p>
<p>⚫ 程序流控制寄存器</p>
<p>⚫ 其他寄存器</p>
<p>程序员习惯中已经默认的给每个寄存器赋上了特殊的含义，比如：</p>
<p>➔ EAX一般用来做返回值<br>➔ ECX用于记数<br>➔ EIP：扩展指令指针。在调用一个函数时，这个指针被存储在堆栈中，用于后面的使用。在函数返回时，这个被存储的地址被用于决定下一个将被执行的指令的地址。<br>➔ ESP：扩展堆栈指针。这个寄存器指向堆栈的当前位置，并允许通过使用push和pop操作或者直接的指针操作来对堆栈中的内容进行添加和移除。<br>➔ EBP：扩展基指针。主要用与存放在进入call以后的ESP的值，便于退出的时候回复ESP的值，达到堆栈平衡的目的</p>
<p>内存的4个部分和相关用途:</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>代码区</td>
<td>这个区域存储着被装入执行的二进制机器代码，处理器会到这个区域取指并执行。</td>
</tr>
<tr>
<td>数据区</td>
<td>用于存储全局变量等。</td>
</tr>
<tr>
<td>堆区</td>
<td>进程可以在堆区动态地请求一定大小的内存，并在用完之后归还给堆区。动态分配和回收是堆区的特点。</td>
</tr>
<tr>
<td>栈区</td>
<td>用于动态地存储函数之间的调用关系，以保证被调用函数在返回时恢复到父函数中继续执行。</td>
</tr>
</tbody></table>
<h3 id="栈与系统栈"><a href="#栈与系统栈" class="headerlink" title="栈与系统栈"></a><strong><strong>栈与系统栈</strong></strong></h3><p>从计算机科学的角度来看，栈指的是一种数据结构，是一种先进后出的数据表。栈的最常见操作有两种：压栈(PUSH)、弹栈(POP)；用于标识栈的属性也有两个：栈顶(TOP)、栈底(BASE)。</p>
<p>内存的栈区实际上指的就是系统栈。系统栈由系统自动维护，它用于实现高级语言中函数的调用。对 于 类 似 C 语 言 这 样 的 高 级 语 言 ， 系 统 栈 的PUSH&#x2F;POP等堆栈平衡细节是透明的。</p>
<table>
<thead>
<tr>
<th>代码空间</th>
<th>系统栈空间</th>
</tr>
</thead>
<tbody><tr>
<td>程序被装入，由main函数代码空间依次取指执行</td>
<td>系统栈 栈顶为当前正在执行的main函数栈帧</td>
</tr>
<tr>
<td>执行到main代码区的call指令时，跳转到funca的代码区继续执行</td>
<td>为配合funca的执行，在系统栈中为其开辟新的栈帧并压入</td>
</tr>
<tr>
<td>执行到funca代码区的call指令时，跳转到funcb的代码区继续执行</td>
<td></td>
</tr>
<tr>
<td>为配合funcb的执行，在系统栈中为其开辟新的栈帧并压入</td>
<td></td>
</tr>
<tr>
<td>funcb代码执行完毕，弹出自己的栈帧并从中获得返回地址，跳回funca代码区继续执行</td>
<td>弹出funcb的栈帧。对应于当前正在执行的函数，当前栈顶栈帧重新恢复成funca函数栈帧</td>
</tr>
<tr>
<td>funca代码执行完毕，弹出自己的栈帧并从中获得返回地址，跳回main代码区继续执行</td>
<td>弹出funca的栈帧。对应于当前正在执行的函数，当前栈顶栈帧重新恢复成main函数栈帧</td>
</tr>
</tbody></table>
<h2 id="寄存器与函数栈帧"><a href="#寄存器与函数栈帧" class="headerlink" title="寄存器与函数栈帧"></a><strong><strong>寄存器与函数栈帧</strong></strong></h2><p>（1）ESP：栈指针寄存器(extended stackpointer),其内存放着一个指针，该指针永远指向系统栈最上面的一个栈帧的栈顶。</p>
<p>（2）EBP：基址指针寄存器(extended basepointer),其内存放着一个指针，该指针永远指向系统栈最上面的一个栈帧的底部。</p>
<p>（3）EIP ：指令寄存器 (Extended InstructionPointer),其内存放着一个指针，该指针永远指向一条等待执行的指令地址。</p>
<p><strong>在函数栈帧中，一般包含以下几类重要信息。</strong></p>
<p>（1）局部变量：为函数局部变量开辟的内存空间。</p>
<p>（2）栈帧状态值：保存前栈帧的顶部和底部（实际上只保存前栈帧的底部，前栈帧的顶部可以通过堆栈平衡计算得到），用于在本帧被弹出后恢复出上一个栈帧。</p>
<p>（3）函数返回地址：保存当前函数调用前的“断点”信息，也就是函数调用前的指令位置，以便在函数返回时能够恢复到函数被调用前的代码区中继续执行指令</p>
<p><strong>函数调用步骤</strong></p>
<p>（1）参数入栈：将参数从右向左一次压入系统栈中。</p>
<p>（2）返回地址入栈：将当前代码区调用指令的下一跳指令地址压入栈中，<br>供函数返回时继续执行。</p>
<p>（3）代码区跳转：处理器从当前代码区跳转到被调用函数的入口处。</p>
<p>（4）栈帧调整</p>
<ul>
<li>保存当前栈帧的状态值，以备后面恢复本栈帧时使用（EBP入栈）；</li>
<li>将当前栈帧切换到新栈帧（将ESP值装入EBP，更新栈帧底部）；</li>
<li>给新栈帧分配空间（把ESP减去所需空间的大小，抬高栈帧）；</li>
</ul>
<h2 id="函数调用约定与相关指令"><a href="#函数调用约定与相关指令" class="headerlink" title="函数调用约定与相关指令"></a><strong>函数调用约定与相关指令</strong></h2><p>入栈</p>
<table>
<thead>
<tr>
<th>序列</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>push 参数 3</td>
<td>假设该函数有3个参数，将从右向左依次入栈</td>
</tr>
<tr>
<td>push 参数 2</td>
<td></td>
</tr>
<tr>
<td>push 参数 1</td>
<td></td>
</tr>
<tr>
<td>call 函数地址</td>
<td>call指令将同时完成两项工作:a)向栈中压入当前指令在内存中的位置，即保存返回地址。</td>
</tr>
<tr>
<td>b)跳转到所调用函数的入口地址函数入口处</td>
<td></td>
</tr>
<tr>
<td>push ebp</td>
<td>保存旧栈帧的底部</td>
</tr>
<tr>
<td>mov ebp,esp</td>
<td>设置新栈帧的底部(栈帧切换)</td>
</tr>
<tr>
<td>sub esp,xxx</td>
<td>sub esp,xxx 设置新栈帧的顶部(抬高栈顶，为新栈帧开辟空间）</td>
</tr>
</tbody></table>
<p>类似的，函数返回的步骤如下。<br>（1）保存返回值：通常将函数的返回值保存在寄存器EAX中。<br>（2）弹出当前栈帧，恢复上一个栈帧，具体包括：</p>
<p>在堆栈平衡的基础上，给ESP加上栈帧的大小，降低栈顶，回收当前栈帧的空间。</p>
<p>将当前栈帧底部保存的前栈帧EBP值弹入EBP寄存器，恢复上一个栈帧。</p>
<p>将函数返回地址弹给EIP寄存器。</p>
<p>（3）跳转：按照函数返回地址跳回母函数中继续执行。</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>add esp,xxx</td>
<td>降低栈顶，回收当前的栈帧</td>
</tr>
<tr>
<td>pop ebp</td>
<td>将上一个栈帧底部位置恢复到ebp</td>
</tr>
<tr>
<td>retn</td>
<td>这条指令有两个功能:</td>
</tr>
<tr>
<td>a)弹出当前栈顶元素，即弹出栈帧中的返回地址。至此，栈帧恢复工作完成。</td>
<td></td>
</tr>
<tr>
<td>b)让处理器跳转到弹出的返回地址，恢复调用前的代码区</td>
<td></td>
</tr>
</tbody></table>
<h1 id="第三讲-字符串安全"><a href="#第三讲-字符串安全" class="headerlink" title="第三讲 字符串安全"></a><strong><strong>第三讲 字符串安全</strong></strong></h1><h2 id="C-风格的字符串"><a href="#C-风格的字符串" class="headerlink" title="C-风格的字符串"></a><strong><strong>C-风格的字符串</strong></strong></h2><p>c风格的字符串由一个连续的字符序列组成，并以一个空字符（null ）作为结束。</p>
<p>➔ 一个指向字符串的指针实际上就是指向该字符串的起始字符。</p>
<p>➔ 字符串长度指空字符之前的字节数</p>
<p>➔ 字符串的值则是它所包含的按顺序排列的字符序列。</p>
<p>➔ 存储一个字符串所需要的字节数是字符串的字符数加1。 (x 是每个字符的大小)</p>
<h2 id="C-字符串"><a href="#C-字符串" class="headerlink" title="C++ 字符串"></a><strong><strong>C++ 字符串</strong></strong></h2><p>C++的标准化促进了：</p>
<p>➔ <strong>标准的类模板std::basic_string</strong></p>
<p>➔ 及它的<strong>char</strong> 实例化 <strong>std::string</strong></p>
<p>➔ 相对于C风格的字符串，<strong>basic_string</strong> 类更不容易出现安全漏洞 。</p>
<h2 id="常见的字符串操作错误"><a href="#常见的字符串操作错误" class="headerlink" title="常见的字符串操作错误"></a><strong><strong>常见的字符串操作错误</strong></strong></h2><p>最常见的错误有<br>➢ 无界字符串复制<br>➢ 空结尾错误<br>➢ 截断<br>➢ 差－错误<br>➢ 数组写入越界<br>➢ 不恰当的数据处理</p>
<h2 id="无边界字符串复制"><a href="#无边界字符串复制" class="headerlink" title="无边界字符串复制"></a><strong><strong>无边界字符串复制</strong></strong></h2><p>无边界字符串复制发生于从一个无边界数据源复制数据到一个定长的字符数组时</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> Password[<span class="number">80</span>];</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Enter 8 character password:&quot;</span>);</span><br><span class="line"><span class="built_in">gets</span>(Password);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复制和连接字符串时也容易出现错误，因为标准strcpy() 和strcat() 函数执行的都是无边界复制操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="number">2.</span> <span class="type">char</span> name[<span class="number">2048</span>];</span><br><span class="line"><span class="number">3.</span> <span class="built_in">strcpy</span>(name, argv[<span class="number">1</span>]);</span><br><span class="line"><span class="number">4.</span> <span class="built_in">strcat</span>(name, <span class="string">&quot; = &quot;</span>);</span><br><span class="line"><span class="number">5.</span> <span class="built_in">strcat</span>(name, argv[<span class="number">2</span>]);</span><br><span class="line">...</span><br><span class="line"><span class="number">6.</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单的解决方案"><a href="#简单的解决方案" class="headerlink" title="简单的解决方案"></a><strong><strong>简单的解决方案</strong></strong></h3><p>利用strlen() 测试输入字符串的长度然后动态分配内存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="number">2.</span> <span class="type">char</span> *buff = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>])+<span class="number">1</span>);</span><br><span class="line"><span class="number">3.</span> <span class="keyword">if</span> (buff != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="number">4.</span> <span class="built_in">strcpy</span>(buff, argv[<span class="number">1</span>]);</span><br><span class="line"><span class="number">5.</span> <span class="built_in">printf</span>(<span class="string">&quot;argv[1] = %s.\n&quot;</span>, buff);</span><br><span class="line"><span class="number">6.</span> &#125;</span><br><span class="line"><span class="number">7.</span> <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* Couldn&#x27;t get the memory - recover*/</span></span><br><span class="line"><span class="number">8.</span> &#125;</span><br><span class="line"><span class="number">9.</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">10.</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-无界字符串复制"><a href="#C-无界字符串复制" class="headerlink" title="C++无界字符串复制"></a><strong><strong>C++无界字符串复制</strong></strong></h2><p>对于下列的C＋＋程序，如果用户输入多于11个字符，也会导<br>致越界写。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="number">2.</span> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="number">3.</span> <span class="type">char</span> buf[<span class="number">12</span>];</span><br><span class="line"><span class="number">4.</span> cin &gt;&gt; buf;</span><br><span class="line"><span class="number">5.</span> cout &lt;&lt; <span class="string">&quot;echo: &quot;</span> &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line"><span class="number">6.</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单的解决方案-1"><a href="#简单的解决方案-1" class="headerlink" title="简单的解决方案"></a><strong><strong>简单的解决方案</strong></strong></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="number">2.</span> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="number">3.</span> <span class="type">char</span> buf[<span class="number">12</span>];</span><br><span class="line"><span class="number">3.</span> cin.<span class="built_in">width</span>(<span class="number">12</span>);</span><br><span class="line"><span class="number">4.</span> cin &gt;&gt; buf;</span><br><span class="line"><span class="number">5.</span> cout &lt;&lt; <span class="string">&quot;echo: &quot;</span> &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line"><span class="number">6.</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="空结尾错误"><a href="#空结尾错误" class="headerlink" title="空结尾错误"></a><strong><strong>空结尾错误</strong></strong></h2><p>当使用C风格字符时，另一个常见的问题是字符串末尾没有正确的空字符。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">16</span>];</span><br><span class="line"><span class="type">char</span> b[<span class="number">16</span>];</span><br><span class="line"><span class="type">char</span> c[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">strncpy</span>(a, <span class="string">&quot;0123456789abcdef&quot;</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">strncpy</span>(b, <span class="string">&quot;0123456789abcdef&quot;</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="built_in">strncpy</span>(c, a, <span class="built_in">sizeof</span>(c));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="strncpy-函数"><a href="#strncpy-函数" class="headerlink" title="strncpy 函数"></a><strong><strong>strncpy 函数</strong></strong></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strncpy</span><span class="params">(<span class="type">char</span> * restrict s1,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> <span class="type">char</span> * restrict s2,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure>

<p>从数组S2中复制不超过 <strong>n</strong> 个字符串 (空字符后的字符不会被复制) 到目标数组S1 *****中。</p>
<p>➔ *因此，如果第一个数组S2中的前n个字符中不存在空字符，那么其结果字符串将不会是以空字符结尾的。</p>
<h2 id="字符串截断"><a href="#字符串截断" class="headerlink" title="字符串截断"></a><strong><strong>字符串截断</strong></strong></h2><p>⚫<strong>一些限制字节数的函数通常用来防止缓冲区溢出漏洞</strong></p>
<p>➔ <strong>strncpy() 代替 strcpy()</strong></p>
<p>➔ <strong>fgets()代替 gets()</strong></p>
<p>➔ <strong>snprintf()代替 sprintf()</strong></p>
<p>⚫当目标字符数组的长度不足以容纳一个字符串的内容时，就会发生字符串截断</p>
<p>⚫字符串截断会丢失数据，有时也会导致软件漏洞</p>
<h2 id="数组写入越界"><a href="#数组写入越界" class="headerlink" title="数组写入越界"></a><strong><strong>数组写入越界</strong></strong></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="number">2.</span> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="number">3.</span> <span class="type">char</span> buff[<span class="number">128</span>];</span><br><span class="line"><span class="number">4.</span> <span class="type">char</span> *arg1 = argv[<span class="number">1</span>];</span><br><span class="line"><span class="number">5.</span> <span class="keyword">while</span> (arg1[i] != <span class="string">&#x27;\0&#x27;</span> ) &#123;</span><br><span class="line"><span class="number">6.</span> buff[i] = arg1[i];</span><br><span class="line"><span class="number">7.</span> i++;</span><br><span class="line"><span class="number">8.</span> &#125;</span><br><span class="line"><span class="number">9.</span> buff[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="number">10.</span> <span class="built_in">printf</span>(<span class="string">&quot;buff = %s\n&quot;</span>, buff);</span><br><span class="line"><span class="number">11.</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="程序栈"><a href="#程序栈" class="headerlink" title="程序栈"></a><strong><strong>程序栈</strong></strong></h2><p>⚫栈（ 栈 ）通过存储下列内容来追踪程序的执行和状态。<br>➢ 调用函数的返回地址<br>➢ 函数参数<br>➢ 局部 (临时）变量<br>⚫在下列情况下栈需要被修改<br>➢ 在函数调用期间<br>➢ 函数初始化期间<br>➢ 从子例程返回时</p>
<h3 id="栈粉碎"><a href="#栈粉碎" class="headerlink" title="栈粉碎"></a><strong><strong>栈粉碎</strong></strong></h3><p>⚫堆栈支持嵌套调用</p>
<p>⚫帧指由函数调用引发的压入栈的数据。</p>
<p>⚫栈用于存储</p>
<p>➔ 调用函数的返回地址</p>
<p>➔ 子例程的实际参数</p>
<p>➔ 局部（自动）变量</p>
<p>⚫当前帧的地址被存储到帧或者基址寄存器中(英特尔架构中的EBP)</p>
<p>⚫帧指针在栈中是一个定点的引用。</p>
<p>⚫下列情况出现时，栈要要被修改</p>
<p>➔ 子例程调用</p>
<p>➔ 子例程初始化</p>
<p>➔ 从子例程返回</p>
<p><strong>EIP：扩展指令指针  ESP: 扩展栈指针  EBP:扩展基指针</strong></p>
<h2 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a><strong><strong>缓冲区溢出</strong></strong></h2><p>当向为某特定数据结构分配的内存空间边界之外写入数据时， 就会发生缓冲区溢出。</p>
<p>➔当缓冲区溢出覆写分配给执行栈内存中的数据时，就会导致栈粉碎</p>
<p>➔成功的利用这个漏洞能够覆写栈返回地址，从而在目标机器中执行任意代码。</p>
<h2 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a><strong><strong>代码注入</strong></strong></h2><p>⚫攻击者创建一个恶意参数</p>
<p>➔一个蓄意构造的字符串，其中包含一个指向某些恶意代码的指针，该代码也由攻击者提供。</p>
<p>⚫当函数返回时，控制就被转移到了那段恶意代码。</p>
<p>➔注入的代码就会以与该有漏洞的程序相同的权限运行</p>
<p>➔攻击者通常都以“以root或其他较高权限运行”的程序为目标</p>
<p>⚫恶意参数的目的是把控制权转移给恶意代码</p>
<p>➔ 可能包含在恶意参数 (如本实例)中</p>
<p>➔ 可能在一个有效的输入操作期间注入恶意代码</p>
<p>➔ 恶意代码可以执行以其他任何形式编程所能执行的功能，</p>
<p>不过它们通常只是简单地在受害机器上开一个远程<strong>。</strong></p>
<h2 id="弧注入-return-into-libc"><a href="#弧注入-return-into-libc" class="headerlink" title="弧注入 (return-into-libc)"></a><strong><strong>弧注入 (return-into-libc)</strong></strong></h2><p>弧注入将控制转移到已经存在于程序内存空间中的代码中</p>
<p>➔ 弧注入的利用方式是在程序的控制流“团”中插入一段新的“弧’（表示控制流转移），而不是进行代码注入。</p>
<p>➔ 可以安装一个已有函数的地址（如system() 或exec ()，用于执行已存在于本地系统上的程序</p>
<p>➔ 更复杂的攻击可能会使用这种技术</p>
<h3 id="缓解措施"><a href="#缓解措施" class="headerlink" title="缓解措施"></a><strong><strong>缓解措施</strong></strong></h3><p>⚫缓解措施包括：</p>
<p>➔预防缓冲区溢出</p>
<p>➔侦测缓冲区溢出并安全地恢复，使得漏洞利用的企图无法得逞。</p>
<p>⚫防范策略</p>
<p>➔静态分配空间</p>
<p>➔动态分配空间</p>
<h3 id="静态方法-静态分配缓冲区"><a href="#静态方法-静态分配缓冲区" class="headerlink" title="静态方法  静态分配缓冲区"></a><strong>静态方法  静态分配缓冲区</strong></h3><p>假设一个固定大小的缓冲区</p>
<p>➔在缓冲区满了以后，不可能添加再数据</p>
<p>➔因为静态的方法丢弃了超出的数据，所以实际的程序数据会丢失。</p>
<p>➔因此，生成的字符串必须被充分验证</p>
<p><strong>输入验证</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="type">int</span> <span class="title">myfunc</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *arg)</span> </span>&#123;</span><br><span class="line"><span class="number">2.</span> <span class="type">char</span> buff[<span class="number">100</span>];</span><br><span class="line"><span class="number">3.</span> <span class="keyword">if</span> (<span class="built_in">strlen</span>(arg) &gt;= <span class="built_in">sizeof</span>(buff)) &#123;</span><br><span class="line"><span class="number">4.</span> <span class="built_in">abort</span>();</span><br><span class="line"><span class="number">5.</span> &#125;</span><br><span class="line"><span class="number">6.</span> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>strlcpy() 和 strlcat()</strong></p>
<p>采用一个更不容易出错的方式来复制和链接</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">strlcpy</span><span class="params">(<span class="type">char</span> *dst,<span class="type">const</span> <span class="type">char</span> *src, <span class="type">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">strlcat</span><span class="params">(<span class="type">char</span> *dst,<span class="type">const</span> <span class="type">char</span> *src, <span class="type">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>strlcpy()</strong> 从<strong>src</strong>复制空结尾的字符串到<strong>dst</strong> (直到<strong>size</strong> 大小的字符)。</p>
<p><strong>strlcat()</strong> 函数把非空结尾的字符串<strong>src</strong> 连接到<strong>dst</strong>末尾 (不超过<strong>size</strong> 的字符都能够连接到dst末尾)</p>
<p>两个函数都确保目标字符串对所有非零长度的缓冲区来说都是<br>非空结尾的。</p>
<p><strong><strong>ISO&#x2F;IEC “Security” TR 24731</strong></strong></p>
<p>➔strcpy_s() 代替strcpy()</p>
<p>➔strcat_s()代替strcat()</p>
<p>➔strncpy_s()代替strncpy()</p>
<p>➔strncat_s()代替strncat()</p>
<h3 id="strcpy-s-函数"><a href="#strcpy-s-函数" class="headerlink" title="strcpy_s() 函数"></a><strong><strong>strcpy_s() 函数</strong></strong></h3><p>把字符从源字符串复制到目标字符数组，直到并包括终止null字<br>符。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">errno_t</span> <span class="title">strcpy_s</span><span class="params">(<span class="type">char</span> * restrict s1,<span class="type">rsize_t</span> s1max,<span class="type">const</span> <span class="type">char</span> * restrict s2)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="动态方法-动态地分配缓冲区"><a href="#动态方法-动态地分配缓冲区" class="headerlink" title="动态方法  动态地分配缓冲区"></a><strong>动态方法  动态地分配缓冲区</strong></h2><p>⚫动态分配的缓冲区需要动态调整额外的内存。</p>
<p>⚫动态方法更好，而且不丢弃多余的数据。</p>
<p>⚫主要缺点是,如果输入被限制，则可能</p>
<p>➔耗尽机器内存</p>
<p>➔结果导致拒绝服务攻击</p>
<h3 id="防范策略"><a href="#防范策略" class="headerlink" title="防范策略"></a><strong><strong>防范策略</strong></strong></h3><p>为C提供丰富的字符串操作库，</p>
<p>➔ 拥有安全的语义</p>
<p>➔ 与遗留的库代码互操作</p>
<p>➔ 使用一种动态分配的方式，可以在需要时自动调整字符串的大小。</p>
<h3 id="safestr-t-类型"><a href="#safestr-t-类型" class="headerlink" title="safestr_t 类型"></a><strong><strong>safestr_t 类型</strong></strong></h3><p>safestr_t类型与char<em>是兼容的，并且可以将safestr_t转型为char</em>当作<br>C风格字符使用。<br> safestr_t类型保存了由该指针所引用的内存部分的说明信息（例如，<br>实际长度和分配的长度），保存子指针所指向的内存之前</p>
<p>⚫管理动态字符串</p>
<p>➔ 分配缓冲区</p>
<p>➔ 如果需要额外的内存，则重新调整内存大小</p>
<p>⚫管理字符串操作，以确保</p>
<p>➔ 字符串操作没有导致缓冲区溢出</p>
<p>➔ 数据没有丢失</p>
<p>➔ 字符串正常终止(字符串可能是也可能不是内部空结尾)</p>
<p>⚫缺点</p>
<p>➔ 无限制地消耗内存，可能导致拒绝服务攻击</p>
<p>➔ 性能开销</p>
<h1 id="第四讲-软件安全漏洞基础"><a href="#第四讲-软件安全漏洞基础" class="headerlink" title="第四讲 软件安全漏洞基础"></a><strong><strong>第四讲 软件安全漏洞基础</strong></strong></h1><h2 id="软件漏洞简介"><a href="#软件漏洞简介" class="headerlink" title="软件漏洞简介"></a><strong><strong>软件漏洞简介</strong></strong></h2><p>在形形色色的软件逻辑缺陷中，有一部分如果被利用能够引起非常严重的后果。</p>
<p>例如:SQL注入,跨站脚本,缓冲区溢出</p>
<p>我们通常把这类能够引起软件做一些“超出设计范围的事情”的bug称为漏洞</p>
<table>
<thead>
<tr>
<th></th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>BUG</td>
<td>功能性逻辑缺陷，影响软件的正常功能</td>
<td>执行结果错误、图标显示错误等</td>
</tr>
<tr>
<td>漏洞</td>
<td>安全性逻辑缺陷，通常情况下不影响软件的正常功能，但被攻击者成功利用后，有可能引起软件去执行额外的恶意代码</td>
<td>软件缓冲区溢出漏洞、网站的跨站脚本漏洞(XSS)、SQL注入漏洞等</td>
</tr>
</tbody></table>
<h3 id="典型的软件漏洞"><a href="#典型的软件漏洞" class="headerlink" title="典型的软件漏洞"></a><strong><strong>典型的软件漏洞</strong></strong></h3><p>缓冲区溢出漏洞：它发生的原理是，由于用户处理用户数据时使用了不限边界的拷贝，导致程序内部一些关键数据被覆盖，引发了安全问题，严重的缓冲区溢出漏洞会使得程序被利用而安装上木马或病毒</p>
<p>整数溢出漏洞：对于有符号的16位整数来说，它的最大值就是0x7fff，也就是十进制的32767，当赋值给一个整数的值为其最大值时，如果此时再加上1，就会发生整数型的溢出。</p>
<p>格式化字符串漏洞：格式化字符串漏洞是由于程序的数据输出函数中对输出数据的格式解析不当而发生的。</p>
<p><strong>SQL注入漏洞：</strong>通过控制传递给软件数据库操作语句 的关键变量来获得恶意控制软件数据库、获取有用信息或者制造恶意破坏的，甚至是控制用户计算机系统的漏洞，就成为”SQL注入漏洞”。</p>
<h3 id="软件漏洞的危害"><a href="#软件漏洞的危害" class="headerlink" title="软件漏洞的危害"></a><strong><strong>软件漏洞的危害</strong></strong></h3><p>无法正常使用,引发恶性事件,关键数据丢失,秘密信息泄漏,被安装木马病毒</p>
<h3 id="安全漏洞出现的原因"><a href="#安全漏洞出现的原因" class="headerlink" title="安全漏洞出现的原因"></a><strong><strong>安全漏洞出现的原因</strong></strong></h3><p>小作坊式的软件开发、赶进度带来的弊端、被轻视的软件安全测试、淡薄的安全思想、不完善的安全维护、</p>
<h2 id="漏洞挖掘、分析、利用简介"><a href="#漏洞挖掘、分析、利用简介" class="headerlink" title="漏洞挖掘、分析、利用简介"></a><strong><strong>漏洞挖掘、分析、利用简介</strong></strong></h2><p>⚫从技术角度讲，漏洞挖掘实际上是一种高级的测试(QA)。</p>
<p>⚫学术界一直热衷于使用静态分析的方法寻找源代码中的漏洞；</p>
<p>⚫而在工程界，不管是安全专家还是攻击者，普遍采用的漏洞挖掘方法是Fuzz，这实际是一种“灰”盒测试。</p>
<p>⚫当fuzz捕捉到软件一个严重的异常时，当你想透过厂商公布的简单描述了解漏洞细节的时候，我们就需要具备一定的漏洞分析能力。一般情况下，我们需要调试二进制级别的程序。</p>
<h2 id="PE文件格式简介-1"><a href="#PE文件格式简介-1" class="headerlink" title="PE文件格式简介"></a><strong><strong>PE文件格式简介</strong></strong></h2><p>PE(Portable Executable)是Win32平台下可执行文件遵守的数据格式。常见的可执行文件(如“*.exe”文件和“*.dll”文件)都是典型的PE文件。</p>
<p>PE 文 件 格 式 把 可 执 行 文 件 分 成 若 干 个 数 据 节(section)，不通的资源被存放在不同的节中。一个典型的PE文件包含的节如下：</p>
<table>
<thead>
<tr>
<th>DOS头</th>
</tr>
</thead>
<tbody><tr>
<td>PE签名</td>
</tr>
<tr>
<td>PE头文件</td>
</tr>
<tr>
<td>PE可选头</td>
</tr>
<tr>
<td>节表</td>
</tr>
<tr>
<td>.idata节</td>
</tr>
<tr>
<td>.text节</td>
</tr>
<tr>
<td>.data节</td>
</tr>
</tbody></table>
<h2 id="虚拟内存相关知识"><a href="#虚拟内存相关知识" class="headerlink" title="虚拟内存相关知识"></a><strong>虚拟内存相关知识</strong></h2><h3 id="PE文件与虚拟内存之间的映射-1"><a href="#PE文件与虚拟内存之间的映射-1" class="headerlink" title="PE文件与虚拟内存之间的映射"></a><strong>PE文件与虚拟内存之间的映射</strong></h3><p>⚫ <strong>文件偏移地址(File Offset)</strong></p>
<p>➢数据在PE文件中的地址叫做文件偏移地址。这是文件在磁盘上存放时相对于文件开头的偏移。</p>
<p>⚫ <strong>装载基址(Image Base)</strong></p>
<p>➢PE装入内存时的基地址。默认情况下，EXE文件在内存中的基地址是0x00400000,DLL文件是0x10000000。这些位置可以通过修改编译选项更改</p>
<p>⚫ <strong>虚拟内存地址(Virtual Address,VA)</strong></p>
<p>➢PE文件中的指令被装入内存后的地址。</p>
<p>⚫ <strong>相对虚拟地址(Relative Virtual Address,RVA)</strong></p>
<p>➢相对虚拟地址是内存地址相对于映射基址的偏移量。</p>
<p>➔ <strong>虚拟内存地址、映射基址、相对虚拟内存地址三</strong>者有如下关系 VA&#x3D;Image Base + RVA</p>
<h1 id="第五讲-漏洞利用技术"><a href="#第五讲-漏洞利用技术" class="headerlink" title="第五讲 漏洞利用技术"></a><strong><strong>第五讲 漏洞利用技术</strong></strong></h1><h2 id="shellcode概述"><a href="#shellcode概述" class="headerlink" title="shellcode概述"></a><strong><strong>shellcode概述</strong></strong></h2><h3 id="淹没返回地址"><a href="#淹没返回地址" class="headerlink" title="淹没返回地址"></a><strong><strong>淹没返回地址</strong></strong></h3><p>buffer[0-3]<br>buffer[4-7]<br>authenticated          左侧是变量的 排列顺序图<br>EBP<br>返回地址<br>观察一下我们发现我们只需要先放置16个字符串，然后接下来<br>的4个字节就能够淹没返回地址，达到控制返回地址的目的</p>
<h3 id="栈帧移位与jmp-esp"><a href="#栈帧移位与jmp-esp" class="headerlink" title="栈帧移位与jmp esp"></a><strong><strong>栈帧移位与jmp esp</strong></strong></h3><p>一般情况下，ESP寄存器中的地址总是指向系统栈中，且不会被溢出的数据破坏。函数返回时，ESP所指的位置恰好是我们所淹没的返回地址的下一个位置</p>
<h3 id="获取“跳板”的地址"><a href="#获取“跳板”的地址" class="headerlink" title="获取“跳板”的地址"></a><strong><strong>获取“跳板”的地址</strong></strong></h3><p>在利用跳板之前，我们必须在进程空间中找到一条jmp esp指令的地址作为“跳板”。除了PE文件的代码被读入内存空间，一些经常被用到的动态链接库也将会一同被映射到内存 。 其 中 ， 注 入kernel32.dll,user32.dll之类的动态链接库几乎会被所有的进程加载，且加载基址始终相同。</p>
<h2 id="缓冲区的组织"><a href="#缓冲区的组织" class="headerlink" title="缓冲区的组织"></a><strong><strong>缓冲区的组织</strong></strong></h2><p>填充物:可以是任何值，但是一般用NOP指令对应的0x90来进行填充，这样只要能跳进填充区，处理器最终也能顺序执行到shellcode。</p>
<p>淹没返回地址的数据：可以是跳转指令的地址，shellcode的起始地址，或者近似的shellcode地址（跳转进NOP填充区）</p>
<p>shellcode:可执行的机器代码。</p>
<h1 id="第六讲-漏洞挖掘与模糊测试"><a href="#第六讲-漏洞挖掘与模糊测试" class="headerlink" title="第六讲 漏洞挖掘与模糊测试"></a><strong><strong>第六讲 漏洞挖掘与模糊测试</strong></strong></h1><h2 id="漏洞挖掘技术简介"><a href="#漏洞挖掘技术简介" class="headerlink" title="漏洞挖掘技术简介"></a><strong><strong>漏洞挖掘技术简介</strong></strong></h2><p>工业界目前普遍采用的是进行Fuzz测试，与基于功能性的测试有所不同，Fuzz的主要目的是”崩溃crash”,”中断break”,”销毁destroy”。</p>
<p>Fuzz的测试用例往往是带有攻击性的畸形数据，用以触发各种类型的漏洞。<br>我们可以把Fuzz理解成为一种能自动进行”rough attack”尝试的工具。之所以说它是”rough attack”,是因为Fuzz往往可以触发一个缓冲区溢出的漏洞，但却不能实现有效的exploit。<br>测试人员需要实时地捕捉目标程序抛出的异常、发生的崩溃和寄存器等信息，综合判断这些错误是不是真正的可利用漏洞</p>
<h3 id="动态测试技术与静态代码审计的对比"><a href="#动态测试技术与静态代码审计的对比" class="headerlink" title="动态测试技术与静态代码审计的对比"></a><strong>动态测试技术与静态代码审计的对比</strong></h3><table>
<thead>
<tr>
<th></th>
<th>动态测试技术</th>
<th>静态代码审计</th>
</tr>
</thead>
<tbody><tr>
<td>主要技术</td>
<td>Fuzz等黑盒测试</td>
<td>数据流分析、类型验证系统、边界检验系统、状态机系统等</td>
</tr>
<tr>
<td>主要应用人群</td>
<td>攻击者</td>
<td>学者、QA工程师</td>
</tr>
<tr>
<td>优点</td>
<td>快捷，准确</td>
<td>检测出的漏洞数量多</td>
</tr>
<tr>
<td>缺点</td>
<td>不能发现系统里全部（或者大部分）漏洞</td>
<td>实现静态代码分析工具相当困难</td>
</tr>
</tbody></table>
<h3 id="Fuzz"><a href="#Fuzz" class="headerlink" title="Fuzz"></a>Fuzz</h3><p>Fuzz的测试用例往往是带有攻击性的畸形数据，用以触发各种类型的漏洞。<br>我们可以把Fuzz理解成为一种能自动进行”rough attack”尝试的工具。之所以说它是”rough attack”,是因为Fuzz往往可以触发一个缓冲区溢出的漏洞，但却不能实现有效的exploit。</p>
<p>Fuzz的测试优点是很少出现误报，能够迅速地找到真正的漏洞；缺点是Fuzz永远不能保证系统里已经没漏洞。</p>
<h2 id="文件类型漏洞挖掘—文件格式Fuzz的基本方法"><a href="#文件类型漏洞挖掘—文件格式Fuzz的基本方法" class="headerlink" title="文件类型漏洞挖掘—文件格式Fuzz的基本方法"></a><strong>文件类型漏洞挖掘—文件格式Fuzz的基本方法</strong></h2><p>不管IE还是OFFICE，它们都有一个共同点，那就是用文件作为程序的主要输入。从本质上来说，这些软件都是按照事先约定好的数据结构对文件中不同的数据域进行解析，以决定用什么颜色、在什么位置显示这些数据。<br>假如我们习惯了这样的思维，也就是假设他们所使用的文件是严格遵守软件规定的数据格式的。因为用Word生成的doc文件一般不会存在什么非法数据。<br>文件格式Fuzz就是利用这种“畸形文件”测试软件的方法。我们可以在网上找到很多FileFuzz的工具。</p>
<p><strong>一个File Fuzz工具通常包括以下几个步骤：</strong></p>
<p>(1)以一个正常的文件模板作为基础，按照一定规则产生一批畸形文件。<br>(2)将畸形文件逐一送入软件进行解析，并监视软件是否会抛出异常<br>(3)记录软件产生的错误信息，如寄存器状态、栈状态等。<br>(4)用日志或其他UI形式向测试人员展示异常信息，以进一步鉴定这些错误是否能被利用</p>
<blockquote>
<p><strong>Blind Fuzz</strong>即通常所说的“盲测”，就是在随机位置插入随机的数据以生成畸形文件。然而现代软件往往使用非常复杂的私有数据结构。</p>
</blockquote>
<blockquote>
<p>针对Blind Fuzz的不足，<strong>Smart Fuzz</strong>被越来越多地提出和应用。通常Smart Fuzz包括三方面的特征：<br>面向逻辑(Logic Oriented Fuzzing)<br>面向数据类型(Data Type Oriented Fuzzing)<br>基于样本(Sample Based Fuzzing)</p>
</blockquote>
<p><strong>面向数据类型测试：</strong>测试中可以生成的数据通常包括以下几种类型。</p>
<p>1）算术型：包括以HEX、ASCII、Unicode、Raw格式存在的各种数值。</p>
<p>2）指针型：包括Null指针、合法&#x2F;非法的内存指针等。</p>
<p>3）字符串型：包括超长字符串、缺少终止符(0x00)的字符串等。</p>
<p>4）特殊字符：包括#，@，’，&lt;,&gt;,&#x2F;,,..&#x2F;等等。</p>
<h1 id="第七讲-指针安全"><a href="#第七讲-指针安全" class="headerlink" title="第七讲 指针安全"></a><strong><strong>第七讲 指针安全</strong></strong></h1><h2 id="缓冲区溢出覆写指针条件："><a href="#缓冲区溢出覆写指针条件：" class="headerlink" title="缓冲区溢出覆写指针条件："></a>缓冲区溢出覆写指针条件：</h2><p>➔ 缓冲区与目标指针必须分配在同一个段内</p>
<p>➔ 缓冲区必须位于比目标指针更低的内存地址处</p>
<p>➔ 该缓冲区必须是界限不充分的，因此容易被缓冲区溢出利用</p>
<h2 id="虚函数攻击"><a href="#虚函数攻击" class="headerlink" title="虚函数攻击"></a><strong><strong>虚函数攻击</strong></strong></h2><p>多态是面向对象的一个重要特性，在C++中，这个特性主要靠对虚函数的动态调用来实现。</p>
<p>在仅仅关注漏洞利用的前提下，我们可以简单地把虚函数和虚表理解为一下几个要点。</p>
<p>1）C++类的成员函数在声明时，若使用关键字virtual进行修饰，则被称为虚函数</p>
<p>2）一个类中可能有很多个虚函数。</p>
<p>3）虚函数的入口地址被统一保存在虚表(Vtable)中。</p>
<p>4）对象在使用虚函数时，先通过虚表指针找到虚表，然后从虚表中取出最终的函数入口地址进行调用。</p>
<p>5）虚表指针保存在对象的内存空间中，紧接着虚表指针的是其他成员变量。</p>
<p>6）虚函数只有通过对象指针的引用才能显示出其动态调用的特性</p>
<h2 id="SEH攻击"><a href="#SEH攻击" class="headerlink" title="SEH攻击"></a><strong>SEH攻击</strong></h2><p>1）S.E.H结构体存放在系统栈中。</p>
<p>2）当线程初始化时，会自动向栈中安装一个S.E.H，作为线程默认的异常处理。</p>
<p>3）如果程序源代码中使用了__try{}__except{}或者Assert宏等异常处理机制，编译器将最终通过向当前函数栈帧中安装一个S.E.H来实现异常处理。</p>
<p>4）栈中一般会同时存在多个S.E.H</p>
<p>5）栈中的多个S.E.H通过链表指针在栈内由栈顶向栈底串成单向链表，位于链表最顶端的S.E.H通过T.E.B(线程环境块)0字节偏移处的指针标识。</p>
<p>6）当异常发生时，操作系统会中断程序，并首先从T.E.B的0字节偏移处取出距离栈顶最近的S.E.H，使用异常处理函数句柄所指向的代码来处理异常。</p>
<p>7）当离“事故现场”最近的异常处理函数运行失败时，将顺着S.E.H链表依次尝试其他的异常处理函数。</p>
<p>8）如果程序安装的所有异常处理函数都不能处理，系统将采用默认的异常处理函数。通常，这个函数会弹出一个对话框，然后强制关闭程序</p>
<blockquote>
<p>首先，S.E.H存放在栈内，我们学过的栈溢出漏洞可能会派上用场。<br>其次，我们可以精心制造出溢出数据来把S.E.H的异常处理的函数地址替换为shellcode的起始地址。<br>再次，溢出后错误的栈帧或堆块数据往往会触发异常，或者我们能查到哪些能触发异常的片段。<br>最后，当Windows开始处理溢出后的异常时，会把hellcode当作异常函数来处理异常。</p>
</blockquote>
<h1 id="第八讲-格式化输出"><a href="#第八讲-格式化输出" class="headerlink" title="第八讲 格式化输出"></a><strong>第八讲 格式化输出</strong></h1><p><strong>格式化输出函数参数由一个格式字符串和可变数目的参数构成</strong></p>
<p>➔格式化字符串提供了一组可以由格式化输出函数解释执行的指令<br>➔用户可以通过控制格式字符串的内容来控制格式化输出函数的执行</p>
<p><strong>变参函数在C语言中实现的局限性导致格式化输出函数的使用中容易产生漏洞！</strong></p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>复杂网络期末复习总结</title>
    <url>/2024/01/02/BUPT_note/Review%20of%20Complex%20network/</url>
    <content><![CDATA[<ol>
<li><h4 id="度、度分布的概念"><a href="#度、度分布的概念" class="headerlink" title="度、度分布的概念"></a><strong>度、度分布的概念</strong></h4><p>度：在网络中，度是一个用来描述节点（即网络中的个体）的重要性的概念。节点的度是指与该节点直接相连的边的数量。</p>
<p>度分布：度分布是描述网络中每个节点度数的概率分布。它是一个统计量，可以反映整个网络的结构特征。</p>
<p>节点 <code>n</code> 的度 <code>k(n) = 该节点的连接数</code></p>
<p>平均度  <code>&lt;k&gt;</code></p>
<p>度函数: 		<code>P(k) ： 一个随机选取的节点有 k 个连接的概率</code></p>
</li>
<li><h4 id="介数（中心性）概念"><a href="#介数（中心性）概念" class="headerlink" title="介数（中心性）概念"></a><strong>介数（中心性）概念</strong></h4><p>任意一对节点间最短路径所经过的次数<br>一个节点的介数就是一个节点在网络中所有最短路径中出现的频率<br>介数反映了相应的节点或边在整个网络中的作用和影响力，是一个全局几何量。<br>介数用于描述节点之间的连接强度和在网络中的重要性。介数可以通过计算节点之间的最短路径长度来衡量节点之间的连通性，从而反映节点在网络中的地位和作用。</p>
<p>介数在现实生活中的意义非常广泛，以下是列举的一些可能的现实意义：</p>
<ol>
<li>社交网络分析：介数可以帮助我们分析社交网络中节点之间的连接强度和信息传播效率。例如，高介数的节点可能在网络中扮演着信息传播的关键角色，对于社交网络中的群体动态和信息传播具有重要的影响。</li>
<li>网络安全：介数可以用于分析网络攻击路径和防御策略。例如，攻击者可以通过寻找高介数的节点来攻击网络，因此了解节点的介数分布可以帮助我们更好地防御网络攻击。</li>
<li>交通网络分析：介数可以用于分析交通网络中节点之间的连通性和运输效率。高介数的节点可能在网络中扮演着重要的交通枢纽角色，对于交通网络的运行和优化具有重要的意义。</li>
</ol>
<p><strong>介数中心性：</strong><br>从每块中的任一节点到其他某块中的任一节点的最短路径必然要经过节点H。<br>这种以经过某个节点的最短路径的数目来刻画节点重要性的指标就称为介数中心性(Betweeness centrality)，简称介数(BC)。</p>
<p><strong>计算介数中心性：</strong></p>
<p>计算介数中心性（Betweenness Centrality）通常涉及以下几个步骤：</p>
<ol>
<li><p>确定网络的最短路径:</p>
<ul>
<li>对于网络中的每一对节点 ( (s, t) )，找出所有最短路径。最短路径可以使用如Dijkstra算法或Floyd-Warshall算法来计算。</li>
</ul>
</li>
<li><p>计算每个节点的介数中心性:</p>
<ul>
<li>对于每个节点 ( v )（不包括起点和终点），计算在所有最短路径中 ( v ) 出现的次数。</li>
<li>对于每一对节点 ( (s, t) )，如果存在多条最短路径，那么每条路径对节点 ( v ) 的贡献应考虑为 ( \frac{1}{\text{路径数}} )。</li>
<li>对于每个节点 ( v )，其介数中心性 ( C_B(v) ) 定义为它出现在所有最短路径中的次数的总和，通常标准化为 ( \frac{C_B(v)}{(\text{节点数} - 1)(\text{节点数} - 2)&#x2F;2} )。</li>
</ul>
</li>
<li><p>标准化:</p>
<ul>
<li>为了使介数中心性的值与网络大小无关，通常对介数中心性进行标准化。</li>
</ul>
</li>
</ol>
</li>
<li><h4 id="聚集系数"><a href="#聚集系数" class="headerlink" title="聚集系数"></a><strong>聚集系数</strong></h4><p>聚类系数是一个度量网络中节点聚集成群体的倾向。具体来说，它衡量一个节点的邻居节点之间相互连接的程度。在一个给定的节点上，聚类系数计算的是该节点的邻居之间实际存在的边数与可能存在的最大边数之间的比例。</p>
<p>例如，在社交网络中，一个人的聚类系数高意味着他们的朋友彼此之间也很可能是朋友。高聚类系数通常表明网络中存在紧密连接的社区或群体。相反，低聚类系数可能表明网络的联系更为分散。</p>
<p>在复杂网络分析中，聚类系数是理解网络结构特征的重要工具，它有助于揭示网络中的社区结构、小世界特性等。不同类型的网络（如社交网络、生物网络、技术网络）的聚类系数特性可能有显著差异。</p>
<p>集聚系数（群系数）（Clustering coefficient）： 朋友的朋友还是不是朋友的情况</p>
<p>集聚系数及其分布<br>$$<br>M&#x3D;\sum_{l\in E;x,y\in N_v}\varphi^x_l\varphi^y_l\C_v&#x3D;\frac{M}{C^2_n}<br>$$<br>正则网络的集聚系数</p>
<p>(a) 全连接网络 	  <code>C = 1</code></p>
<p>(b) 最近邻居网络 	<code>C=3/4</code></p>
<p>(c) 星形网络    	$$C_{star}&#x3D;0\ or\ c_{star}&#x3D;1$$</p>
<p>随机网络的集聚系数	<code>C=p=&lt;k&gt;/N&lt;&lt;1</code></p>
</li>
<li><h4 id="粒子群算法"><a href="#粒子群算法" class="headerlink" title="粒子群算法"></a><strong>粒子群算法</strong></h4><p><strong>粒子群算法是一种基于鸟群捕食行为的优化算法，它利用群体中的个体对信息的共享和运动的演化来求解问题。</strong></p>
<p>粒子群优化（Particle Swarm Optimization，PSO）是一种基于种群的随机优化技术，其基本思想是受到鸟群觅食行为的启示。PSO 是一种群体智能（群体智能是一组集体智能，涵盖了多代理环境下的群体交互）。在一个 PSO 算法中，有一个种群在问题空间内飞行，每个个体（在这里被称为“粒子”）都有一个由速度和位置构成的向量。粒子通过追踪最佳粒子（个人的最佳）和整个群体中的最佳粒子（全局最佳）来更新其位置和速度。</p>
<p>PSO 算法的基本步骤包括初始化、速度和位置的设定、个体最佳和全局最佳的设定、更新速度和位置、以及更新个体最佳和全局最佳。</p>
<p>PSO 算法的主要优点包括：易于实现、收敛速度快、适用于解决不同类型的问题。这些优点使得 PSO 成为机器学习、神经网络和其他优化领域的重要候选者。</p>
<p>但是，虽然 PSO 有其优点，但它在算法的具体实现中仍有一些挑战需要克服，如学习率的设计、维数的影响以及全局搜索的难题等。因此，在使用 PSO 时，需要根据具体问题进行调整和优化。</p>
</li>
<li><h4 id="什么是小世界网络"><a href="#什么是小世界网络" class="headerlink" title="什么是小世界网络"></a><strong>什么是小世界网络</strong></h4><p><strong>这种网络属性意味着一些彼此并不相识的人，可以通过一条很短的熟人链条被联系在一起</strong></p>
<p>小世界网络是一种复杂网络模型，它具有两个主要的特点：</p>
<ol>
<li>节点度分布遵循幂律分布，即节点的度k（与该节点直接相连的节点数目）服从一个非常窄的小世界网络分布。这使得网络中的很多节点具有相对较高的度，从而保证了网络的聚集程度和连通性。</li>
<li>网络的平均路径长度非常短，即小世界效应显著。这意味着信息在网络中的传播速度非常快，信息传播的效率非常高。</li>
</ol>
<p>这种网络结构可以解释为，在网络中，一个人的朋友的朋友可能也是他的熟人，而网络中的节点数量却远少于实际的网络连接数量。这种特性使得小世界网络模型在社交网络、社交媒体、信息传播等领域得到了广泛的应用和关注。</p>
</li>
<li><h4 id="无标度网络特点"><a href="#无标度网络特点" class="headerlink" title="无标度网络特点"></a><strong>无标度网络特点</strong></h4><p>无标度网络是一种特殊的网络模型，其特点是节点的度分布遵循幂律分布，即大多数节点的度数相对较低，但也有少数节点具有非常高的度数，呈现出一种无标度的特性。</p>
<p>无标度网络的特点主要体现在以下几个方面：</p>
<ol>
<li><p>节点度分布的随机性：无标度网络中的节点度数分布是随机的，而且是非均衡的。这意味着节点的度数不是均匀分布的，而是集中分布在少数几个高度的节点上。</p>
</li>
<li><p>节点度的随机涨落：无标度网络中的节点度分布存在一个标度因子，而大多数节点的度数接近这个标度因子，但少数节点可能存在较大的偏差，从而导致节点的度数存在随机涨落。</p>
</li>
<li><p>网络的自相似性：无标度网络具有自相似性，即网络中的不同尺度具有相似的结构。这意味着在网络中，不同的节点之间存在着相似的关系，而这种关系并不是完全随机的。</p>
</li>
</ol>
<p>总之，无标度网络是一种特殊的网络模型，具有高度聚集性和自相似性等特点。这些特点使得无标度网络在许多领域中得到了广泛的应用和关注，如社交网络、信息传播、互联网等。</p>
</li>
<li><h4 id="六度分离概念"><a href="#六度分离概念" class="headerlink" title="六度分离概念"></a><strong>六度分离概念</strong></h4><p>六度分离概念是一个社交概念，指认为世界上任何两个人之间都只有六个人连接。这个概念是由哈佛大学的心理学教授Stanley Milgram在1967年提出的，他通过“小世界理论”认为，通过六度分离，任何两个不相识的人都可以通过熟人朋友等建立联系，形成一个社会网络。这个概念也说明了社交网络中人与人之间的联系的普遍性和重要性。</p>
</li>
<li><h4 id="混沌可预测性，混沌可预测吗？可长期预测还是可短期预测"><a href="#混沌可预测性，混沌可预测吗？可长期预测还是可短期预测" class="headerlink" title="混沌可预测性，混沌可预测吗？可长期预测还是可短期预测"></a><strong>混沌可预测性，混沌可预测吗？可长期预测还是可短期预测</strong></h4><p>混沌系统是否可预测取决于预测的时间尺度。一般来说，混沌系统在短期内的行为可能具有一定的可预测性，这是因为混沌系统通常具有敏感依赖于初值的特点，这意味着小的初始扰动在系统的演化过程中可能会放大，从而导致短期内的行为表现出一定的规律性。</p>
<p>然而，对于长期预测，混沌系统的可预测性变得更为复杂。一方面，混沌系统的动力学性质决定了它在长期内的行为可能呈现出随机性或复杂性，表现出“蝴蝶效应”的特点，即一个小扰动可能会在大范围内产生影响。这使得混沌系统的长期预测变得非常困难，甚至是不可能的。另一方面，对于某些混沌系统，如洛伦茨吸引子和 Rossler 吸引子等，在一定的条件下，长期行为也可能具有一定的可预测性。</p>
<p>总的来说，混沌系统是否可预测取决于预测的时间尺度。在短期内，混沌系统可能具有一定的可预测性，而在长期内，其行为可能呈现出随机性和复杂性，不可预测。不过，通过数学模型、计算机模拟和经验数据等手段，我们可以尝试对混沌系统进行短期或长期预测，从而为实际应用提供参考。</p>
</li>
<li><h4 id="列举复杂网络相关期刊"><a href="#列举复杂网络相关期刊" class="headerlink" title="列举复杂网络相关期刊"></a><strong>列举复杂网络相关期刊</strong></h4><p>复杂网络是一个多学科交叉的研究领域，覆盖物理学、计算机科学、数学和社会科学等多个领域。以下是一些主要的与复杂网络相关的期刊及其特点：</p>
<ol>
<li>Physical Review E</li>
</ol>
<ul>
<li><strong>特点</strong>：专注于统计、非线性和软物质物理学的研究。它包括了复杂网络的物理和数学特性的研究。</li>
</ul>
<ol start="2">
<li>Social Networks</li>
</ol>
<ul>
<li><strong>特点</strong>：专注于社交网络的理论和实证研究。涵盖社交网络分析的方法和应用，包括社交网络中的结构和功能。</li>
</ul>
<ol start="3">
<li>Network Science</li>
</ol>
<ul>
<li><strong>特点</strong>：涵盖网络科学的广泛主题，包括网络结构、动态和建模。适合跨学科研究，涉及社会学、经济学、计算机科学等领域。</li>
</ul>
<ol start="4">
<li>Journal of Complex Networks</li>
</ol>
<ul>
<li><strong>特点</strong>：集中在复杂网络的数学、物理和计算机科学方面。包括网络理论的发展和网络模型的应用。</li>
</ul>
<ol start="5">
<li>Advances in Complex Systems</li>
</ol>
<ul>
<li><strong>特点</strong>：研究复杂系统的多学科期刊，包括复杂网络的理论和应用研究。关注系统之间的相互作用和网络行为。</li>
</ul>
<ol start="6">
<li>IEEE Transactions on Network Science and Engineering</li>
</ol>
<ul>
<li><strong>特点</strong>：由IEEE出版，集中在网络科学和工程领域的应用研究。包括网络动力学、优化和网络中的数据分析。</li>
</ul>
<ol start="7">
<li>Chaos: An Interdisciplinary Journal of Nonlinear Science</li>
</ol>
<ul>
<li><strong>特点</strong>：专注于混沌理论及其在各种系统中的应用，包括复杂网络。涉及物理、工程、生物学和其他自然科学领域。</li>
</ul>
<ol start="8">
<li>European Physical Journal B</li>
</ol>
<ul>
<li><strong>特点</strong>：涵盖凝聚态物理、统计物理、原子分子和光物理等领域，包括复杂网络的物理特性研究。</li>
</ul>
<ol start="9">
<li>Computational Social Networks</li>
</ol>
<ul>
<li><strong>特点</strong>：专注于计算方法在社交网络分析中的应用。包括网络模型、社交媒体分析和社交网络挖掘等。</li>
</ul>
<ol start="10">
<li>Discrete Dynamics in Nature and Society</li>
</ol>
<ul>
<li><strong>特点</strong>：涉及自然和社会科学中的离散动态系统，包括网络理论、图论和应用数学在复杂系统中的应用。</li>
</ul>
</li>
<li><h4 id="用遗传算法求解函数最大值，课上专门说过。给一个函数，给一个范围，求最大值"><a href="#用遗传算法求解函数最大值，课上专门说过。给一个函数，给一个范围，求最大值" class="headerlink" title="用遗传算法求解函数最大值，课上专门说过。给一个函数，给一个范围，求最大值"></a><strong>用遗传算法求解函数最大值，课上专门说过。给一个函数，给一个范围，求最大值</strong></h4><p><em>下面解释用遗传算法求函数$$ f(x)&#x3D;x2, x^2[0,31]$$的最大值的一些重要步骤。这里只介绍第一代群体的生成过程与结果</em></p>
<p>(1) 编码<br>由于在该例中$$x\in [0,31]$$，因此，将变量x编码为5位长的二进制形式。如x&#x3D;13可表示为01101</p>
<p>(2) 初始群体的生成</p>
<p> 随机产生初始群体的每个个体，群体的大小为4(如表1).</p>
<p>(3)适应度计算</p>
<p> 将每个个体x的函数值 f(x)作为该个体的适应度。如个体01101的适应度为 $$f(13)&#x3D;13^2&#x3D;169$$<br>(4) 选择<br>计算每个个体的适应度所占的比例 $$\frac{f_i}{\sum^n_{j&#x3D;1}f_i}$$</p>
<p>(5) 交叉与变异</p>
<p>这里采用简单交叉操作：首先对配对库中的个体进行随机配对；其次，在配对个体中随机设定交叉处，配对个体彼此交换部分信息(如表1)。于是得到4个新个体，这4个新个体就形成了新一代群体。        比较新旧群体，不难发现新群体中个体适应度的平均值和最大值都有明显的提高。由此可见，新群体中的个体的确是朝着期望的方向进化了。</p>
</li>
<li><h4 id="利用混沌神经网络求解函数最小值"><a href="#利用混沌神经网络求解函数最小值" class="headerlink" title="利用混沌神经网络求解函数最小值"></a><strong>利用混沌神经网络求解函数最小值</strong></h4><p>例如，求$\min\left( x_{1}^{2} + 2x_{2}^{2} \right) &#x3D; E$</p>
<ol>
<li>求偏导</li>
</ol>
<blockquote>
<p>$$\frac{\partial E}{\partial x_{1}} &#x3D; 2x_{1}\frac{\partial E}{\partial x_{2}} &#x3D; 4x_{2}$$</p>
</blockquote>
<ol start="2">
<li>带入混沌神经网络</li>
</ol>
<p>$$\begin{aligned}<br> &amp; x_{1}(t) &#x3D; \frac{1}{1 + e^{- y_{1}(t)\left( 1 + \varepsilon_{1}(t)) \right.\ }} \<br> &amp; y_{1}(t + 1) &#x3D; ky_{1}(t) + \alpha\left( - 2x_{1} \right) - z_{1}(t)\left( x_{1}(t) - I_{0} \right) \<br> &amp; z_{1}(t + 1) &#x3D; (1 - \beta)z_{1}(t) \<br> &amp; \varepsilon_{1}(t + 1) &#x3D; (1 - \gamma)\varepsilon_{1}(t)<br>\end{aligned}$$</p>
<p>$$\begin{aligned}<br> &amp; x_{2}(t) &#x3D; \frac{1}{1 + e^{- y_{2}(t)\left( 1 + \varepsilon_{2}(t)) \right.\ }} \<br> &amp; y_{2}(t + 1) &#x3D; ky_{2}(t) + \alpha\left( - 4x_{2} \right) - z_{2}(t)\left( x_{2}(t) - I_{0} \right) \<br> &amp; z_{2}(t + 1) &#x3D; (1 - \beta)z_{2}(t) \<br> &amp; \varepsilon_{2}(t + 1) &#x3D; (1 - \gamma)\varepsilon_{2}(t)<br>\end{aligned}$$</p>
<p>（tips！注意到，偏导的地方要写成偏导的相反数！并且有n个偏导就要写n*4个式子）</p>
<ol start="3">
<li>使用混沌神经网络迭代计算求解，得到最小值时，$x_{1} &#x3D; 0,x_{2} &#x3D; 0$，函数值$E &#x3D; 0$。</li>
</ol>
</li>
<li><h4 id="交叉耦合构造散列函数"><a href="#交叉耦合构造散列函数" class="headerlink" title="交叉耦合构造散列函数"></a><strong>交叉耦合构造散列函数</strong></h4><p>该方法以交叉耦合映象格子为核心,<br>充分利用其不同于普通时空混沌系统的优良的混乱扩散特性 .首先<br>,将明文分组并行注入交叉耦合映象格子的各格点<br>.然后通过多轮混沌迭代使其具有良好的混沌特性 ,并同时利用<br>Logistic映射作为密钥生成器,对结果进行混沌调制。</p>
<p><strong>主模块：</strong></p>
<p>①将消息 M分割成 t个消息块 $M_{1}\ldots,M_{t}$ 每个消息块包含 n个字节<br>,且最后一个块填充 Mt &#x3D;＊…＊10… 0l(M).其中,<br>l(M)表示M的长度的二进制形式, 长度为 64 bit,不足 64 bit时高位添 1个介符<br>1再补 0。n可根据实际需要取值。</p>
<p>②将每个消息块中各字节元素按对应的ASCII码线性变换，线性变换公式为</p>
<p>$$C_{i,j} &#x3D; \left{ \begin{aligned}<br> &amp; - \frac{M_{i,j}}{128}\ \ \ \  &amp; &amp; 0 \leqslant A\left( M_{i,j} \right) \leqslant 127 \<br> &amp; \frac{M_{i,j} - 128}{128}\ \ \ \  &amp; &amp; 128 \leqslant A\left( M_{i,j} \right) \leqslant 225<br>\end{aligned}\ (1) \right.\ $$</p>
<p>③令第 i个消息块对应 $C_{i,1}\ldots,C_{i,n}$分别为交叉耦合映象格子中<br>n个格子初值,<br>且$x_{0}(1) &#x3D; C_{i,1},x_{0}(2) &#x3D; C_{i,2},\ldots,x_{0}(n) &#x3D; C_{i,n}.$其中,<br>$x_{0}(0)$和$x_{0}(n + 1)$由密钥生成模块产生.</p>
<p>④应用交叉耦合映象格子模型进行 R轮初值迭代, 得到<br>$x_{R}(1)\ldots,x_{R}(n).$</p>
<p>⑤根据式 (1), 对 $x_{R}(1)\ldots,x_{R}(n)$进行逆变换,<br>得到$X_{R}(1)\ldots,X_{R}(n).$</p>
<p>⑥将$X_{R}(1)\ldots,X_{R}(n).$循环左移$L_{i}$字节，得到<br>$Y_{R}(1)\ldots,Y_{R}(n).$</p>
<p>⑦每个消息块依次执行 ③ ～ ⑥, t个消息块即可变为 t组<br>$Y_{R}(1)\ldots,Y_{R}(n).$</p>
<p>⑧将得到的 t组 n字节 $Y_{R}(1)\ldots,Y_{R}(n).$按比特位异或,得到 8n bit的<br>Hash值.</p>
<p><strong>密钥生成模块：</strong></p>
<p>①将 128 bit初始密钥线性映射到 0 ～ 1之间, 作为 Logistic映射的初值。</p>
<p>②第 i组消息在主模块中的子密钥以第 i-1 组中第 2个子密钥的值作为初值,<br>分别迭代 100 + A(i)和 100 +A(i)+n+1轮得到.</p>
<p>③将最后一组消息所对应的第 2个子密钥作为初值,迭代 t轮, 得到<br>t个实数$s_{1}\ldots,s_{t}$.主模块中移动字节数 $L_{i} &#x3D; s_{i}(n - 1)$</p>
</li>
</ol>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>复习总结</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/01/16/BUPT_note/Review%20of%20Compilation%20principle/</url>
    <content><![CDATA[<p><strong>Project 1: 词法分析和语法分析</strong></p>
<p>在这个项目中，你将为BUPT编程语言（BPL）实现一个编译器的词法分析器和语法分析器。BPL是一种类C的编程语言，它去除了C标准中的大多数高级特性，比如宏和指针。项目的目标是编译BPL程序到MIPS32汇编代码。以下是关于词法分析和语法分析部分的详细说明。</p>
<p><strong>1. 词法分析 (Lexical Analysis)</strong>:</p>
<ul>
<li><strong>Flex工具</strong>: 你将使用GNU Flex生成词法分析器。Flex是一个快速的词法分析器生成器。你需要指定要匹配的令牌模式和对每个令牌应用的操作。Flex会将这些规格转换成一个NFA，然后将它转换成一个等价的DFA，并尽可能地最小化这个自动机，最终生成实现词法分析器的C代码。</li>
<li><strong>Flex编码</strong>: 在使用Flex时，你将使用正则表达式来定义模式，并使用C代码来定义动作。你将编写.lex文件，并通过Flex生成一个C源文件，该文件包含一个实现所有规则和相应动作的有限自动机。</li>
<li><strong>Flex特性</strong>: Flex还提供了一些有用的特性，如行号记录（yylineno）、输入和输出函数（input()和unput()），以及更多用于控制词法分析过程的函数。</li>
</ul>
<p><strong>2. 语法分析 (Syntax Analysis)</strong>:</p>
<ul>
<li><strong>Bison工具</strong>: 你将使用GNU Bison生成语法分析器。Bison是一个解析器生成器，你提供一个文法规范的输入，Bison将生成一个LALR(1)解析器来识别该文法的句子。这个解析器接受来自Flex的输入令牌流，以识别指定的上下文无关文法。</li>
<li><strong>Bison编码</strong>: 类似于Flex，Bison的源代码也包含可选的声明、定义和用户例程部分。你将为每个产生式关联一个动作，这允许你在使用该产生式进行规约时执行任何处理。你需要定义文法的每个非终结符，为每个规则指定优先级和结合性，并设置用于在词法分析器和解析器之间通信的全局变量。</li>
<li><strong>Bison特性</strong>: Bison还提供了一些高级特性，如符号位置信息、错误恢复和冲突解决机制等。这些特性可以帮助你更有效地实现语法分析器，并提供更稳健的错误处理和更精确的语法分析。</li>
</ul>
<p><strong>项目要求</strong>:</p>
<ul>
<li>你需要实现一个解析器，它接受单个命令行参数（BPL文件路径），并输出语法有效的BPL程序的语法树或报告代码中存在的所有词法&#x2F;语法错误。</li>
<li>你的解析器应该能够识别未定义字符或标记、结构非法等词法和语法错误，并为语法有效的BPL程序打印出其语法树。</li>
<li>你可以实现其他功能，如单行&#x2F;多行注释、宏预处理器、文件包含、for语句等。</li>
</ul>
<p>通过这个项目，你将学会如何使用现代的编译器工具（Flex和Bison）来自动化词法分析和语法分析过程，从而更深入地理解编译器前端的工作原理。同时，这也是构建编译器其他部分（如语义分析、中间代码生成、目标代码生成等）的基础。</p>
<p><strong>Project 2: 语义分析</strong></p>
<p>在Project 2中，你将继续构建BUPT编程语言（BPL）编译器的功能，专注于语义分析阶段。在前一个项目中完成词法和语法分析后，你已经能够生成语法有效的BPL程序的语法树。现在，语义分析阶段将确保程序有一个明确的定义，即验证程序的逻辑正确性，例如变量是否已声明、类型是否匹配等。</p>
<ol>
<li><p><strong>语义分析</strong>:</p>
<ul>
<li><strong>作用</strong>：语义分析主要确保程序中的所有声明和表达式在逻辑上是有意义和合法的，包括类型检查、变量声明、函数调用等。</li>
<li><strong>实现方式</strong>：不同于前一个项目中的工具辅助（如Flex和Bison），在这一阶段，你需要手动编写代码来实现语义分析，这可能是实现BPL编译器中最费力的部分。你需要设计各种数据结构（如符号表和数据类型表示）并仔细考虑它们最合适的实现方式。</li>
</ul>
</li>
<li><p><strong>符号表</strong>:</p>
<ul>
<li><strong>概述</strong>：符号表是映射名字到其关联信息的数据结构。在语义分析过程中，编译器将不断更新表中的信息以反映作用域内的内容。符号表的两个典型操作是插入和查找特定符号。</li>
<li><strong>实现</strong>：可以使用各种抽象数据类型来实现符号表，包括链表、二叉搜索树和哈希表。每种数据结构在空间&#x2F;时间复杂性和实现难度方面有所不同。你可以选择适合你需求的数据结构。</li>
</ul>
</li>
<li><p><strong>作用域检查</strong>:</p>
<ul>
<li><strong>概述</strong>：作用域检查是确定程序中的标识符是否在该位置可访问的过程。你可以使用不同的方法来实现支持作用域的符号表，比如命令式单一表方法或功能式独立表方法。</li>
<li><strong>实现</strong>：可以采用单一全局表，每个作用域内的符号在退出时移除；或者使用作用域栈，每个新的作用域开启一个新的符号表，并在作用域关闭时将其弹出。</li>
</ul>
</li>
<li><p><strong>类型检查</strong>:</p>
<ul>
<li><strong>类型系统</strong>：在编程语言中，类型是一组值和在这些值上操作的集合。BPL有两类数据类型：基本类型（由硬件直接提供，如int、char和float）和派生类型（由基本类型或派生类型聚合而成，如数组、结构体等）。</li>
<li><strong>类型等价性</strong>：如何确定两个类型是否等价？对于基本类型，问题很简单，例如int只等价于int。对于派生类型，事情就复杂多了。通常有两种类型等价性：命名等价性和结构等价性。命名等价性考虑类型的名称，而结构等价性考虑类型的结构。</li>
<li><strong>派生类型表示</strong>：实现层面上，代表原始类型使用常量就足够了。对于派生类型，例如数组和结构体，表示它们就比较复杂了。常见的技术是存储定义类型的基本信息为多级链表。</li>
</ul>
</li>
<li><p><strong>项目要求</strong>:</p>
<ul>
<li><strong>输入格式</strong>：与上一个项目相同，即执行文件<code>bplc</code>接受表示BPL程序路径的单个命令行参数。对于语义上合法的BPL程序，你的语义分析器不应该产生任何输出信息；否则，应该打印出有意义的错误信息。</li>
<li><strong>错误检测</strong>：你的分析器应该能够检测到一系列的语义错误，如未定义变量的使用、类型不匹配、函数调用参数不匹配等，并能够报告错误类型和行号。</li>
</ul>
</li>
</ol>
<p>通过这个项目，你将学习如何实现一个编译器的语义分析阶段，这是编译器理解程序并检测错误的关键环节。这个阶段需要对语言的类型系统、作用域规则和其他语义规则有深入的理解。</p>
<p><strong>Project 3: 中间代码生成</strong></p>
<ol>
<li><p><strong>概述</strong>：这个阶段的目的是让编译器为给定的源程序生成中间表示（IR），可以进一步优化以获得更好的运行时性能。IR是独立于机器和语言的源代码表示，大多数编译器首先将源程序翻译为某种形式的IR，然后将其转换为机器代码。IR的使用增强了抽象性，并实现了前端和后端之间更清晰的分离。大多数优化都是在中间代码上完成的。</p>
</li>
<li><p><strong>中间表示</strong>：中间表示有多种形式，包括线性IR、树IR和图IR等。这个阶段的输出是一种线性IR，特别是三地址代码（TAC），其中每条指令最多可以有三个操作数。这种IR有助于现代编译器优化，例如常量传播和死代码消除。TAC通常存储在一组四元组中，每个四元组包括一个操作符和两个源操作数及一个目标结果。</p>
</li>
<li><p><strong>运行时环境</strong>：编程语言提供了对硬件细节的抽象，但现代计算机硬件只能理解低级原语。编译器必须与操作系统配合以支持目标架构上的高级抽象，并生成额外的代码来维护高级功能。此外，编译器应该管理目标机制，以便生成的代码可以在相同的运行时环境中运行。</p>
</li>
<li><p><strong>数据表示</strong>：描述了如何在编译器中表示各种基本数据类型，包括字符、整数和布尔值等，以及指针的存储方式。此外，还介绍了如何在低级别上表示数组和结构体等复杂数据类型。</p>
</li>
<li><p><strong>函数调用</strong>：描述了函数调用的处理，包括活动函数的激活记录存储在堆栈中的细节以及参数传递的方法。详细介绍了按值传递和按引用传递这两种参数传递方式。</p>
</li>
<li><p><strong>翻译方案</strong>：要从解析树生成TAC，需要按后序遍历树，然后根据某些特定模式转换树节点。介绍了如何使用语法制导的翻译来完成此任务，并且为每个非终结符X实现一组translate_X函数。对于表达式和函数调用，提供了详细的翻译方案。</p>
</li>
<li><p><strong>项目要求</strong>：描述了项目的输入格式和假设条件，例如所有测试用例没有词法&#x2F;语法&#x2F;语义错误，只有整型原始类型变量等。这些假设意味着您可以在实现代码生成器时忽略它们的违规行为。</p>
</li>
</ol>
<p><strong>Project 4: 目标代码生成</strong></p>
<ol>
<li><p><strong>概述</strong>: 这个阶段是编译器工作流的最后一步，即目标代码生成。在前一阶段，三地址代码（TAC）作为中间表示（IR）已经被生成，但更底层的细节还未处理。目标代码生成是将这些三地址代码处理并最终生成可以在MIPS32机器上运行的可执行代码。</p>
</li>
<li><p><strong>实验环境</strong>: 描述了目标机器代码可以在模拟器中运行的环境设置。特别提到了SPIM模拟器，它是一个运行MIPS32程序的独立模拟器。</p>
</li>
<li><p><strong>指令选择</strong>:</p>
<ul>
<li><strong>编写MIPS32汇编</strong>: 介绍了MIPS32架构的基础知识，包括寄存器使用、数据移动和程序案例。讨论了如何将中间表示转换为机器代码，这个过程依赖于机器。</li>
<li><strong>翻译三地址码</strong>: 指出指令选择实际上是一个模式匹配问题。讨论了如何将TAC转换为数据操作和跳转指令，以及如何进行更优化的代码生成。</li>
</ul>
</li>
<li><p><strong>寄存器分配</strong>:</p>
<ul>
<li><strong>本地寄存器分配</strong>: 介绍了变量和寄存器数量的限制，以及如何在基本块内分配寄存器。探讨了寄存器分配的启发式算法，并提供了具体的寄存器分配实现例程。</li>
<li><strong>全局寄存器分配</strong>: 讨论了跨多个基本块分配寄存器的复杂性，并介绍了活性分析和图着色分配作为解决方案。这部分详细讨论了如何通过活性分析和图着色算法来进行有效的全局寄存器分配。</li>
</ul>
</li>
<li><p><strong>过程调用约定</strong>:</p>
<ul>
<li><strong>堆栈布局</strong>: 描述了堆栈帧的布局以及如何在过程调用中传递参数和返回值。讨论了寄存器和堆栈的使用约定，以及如何在过程调用中保存和恢复寄存器值。</li>
<li><strong>调用和返回序列</strong>: 详细说明了调用者和被调用者在过程调用中的责任，包括寄存器的保存和恢复，参数的传递，以及返回值的处理。</li>
</ul>
</li>
<li><p><strong>项目要求</strong>:</p>
<ul>
<li><strong>基本要求</strong>: 概述了项目的基础要求和假设条件，如中间代码的逻辑正确性，没有结构体或数组变量，以及所有整数常量都可以由MIPS32立即数表示。</li>
<li><strong>所需任务</strong>: 指出需要完成的两项主要任务，即寄存器分配和TAC翻译。讨论了如何设计和实现寄存器分配算法，以及如何翻译一些特定的TAC指令。</li>
</ul>
</li>
</ol>
<p>这份文档为目标代码生成阶段提供了详细的指导，包括理论知识、具体实施策略和项目要求，使学生能够理解并实现编译器的这一关键部分。<br>#</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/07/01/hello/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World test</title>
    <url>/2023/07/02/hello/hello-world-test/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>正文</p>
<p><code>代码段</code></p>
<ol>
<li>有序列表</li>
<li>+1</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure>

<p>链接测试：<a href="https://62.234.219.169/2023/07/20/hello-world/">Hello World | ZYH’s blog</a></p>
<p>emojy:  :laughing:</p>
<p>picture:</p>
<p>在线文件</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/favicon2.png" alt="我是水獭"></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo博客搭建（2）——配置客户端并建立连接</title>
    <url>/2023/07/16/hexo/Hexo_build02/</url>
    <content><![CDATA[<h1 id="相关链接和参考内容"><a href="#相关链接和参考内容" class="headerlink" title="相关链接和参考内容"></a>相关链接和参考内容</h1><p>Node：<a href="https://nodejs.org/zh-cn">Node.js (nodejs.org)</a></p>
<p>Git： <a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></p>
<p>Typora： <a href="https://www.typora.io/">https://www.typora.io/</a></p>
<p>hexo说明文档： <a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p>
<h1 id="本地安装和配置Hexo"><a href="#本地安装和配置Hexo" class="headerlink" title="本地安装和配置Hexo"></a>本地安装和配置Hexo</h1><p>请先自行安装git和node，这个教程就比较多了，在这里就不进行赘述了</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>



<h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h2><p>这里myblog可以去掉，加myblog只不过是为了使所生成的文件全都放到myblog文件夹中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init myblog  </span><br><span class="line">cd ./myblog</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>目前基本的hexo已经ok了，本地运行一下看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入：<code>http://localhost:4000/</code>即可查看</p>
<h2 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su zyh  //登录你用来上传博客的用户</span><br><span class="line">mkdir ~/.ssh   //创建存放密钥的文件夹</span><br><span class="line">vim ~/.ssh/authorized_keys  //写入密钥</span><br></pre></td></tr></table></figure>

<p>这里需要一个秘钥，在你的物理机上C:\Users\Administrator\ .ssh的文件中找到id_rsa文件（如未找到ssh文件请参考文末）</p>
<p>复制全部信息到你的服务器中</p>
<p>测试物理机与服务器能否跑通</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -v zyh@62.234.219.169 //服务器ip</span><br></pre></td></tr></table></figure>

<p>我们需要在config.yml中的最后一行编辑以下信息，然后咱们就可以把自己的博客推送上去了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repository: zyh@62.234.219.169:/home/zyh/zyh.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>

<p>然后就可以通过以下命令进行推送了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo -d</span><br></pre></td></tr></table></figure>



<h2 id="附录）本地Windows10使用Git-Bash创建密钥"><a href="#附录）本地Windows10使用Git-Bash创建密钥" class="headerlink" title="(附录）本地Windows10使用Git Bash创建密钥"></a>(附录）本地Windows10使用Git Bash创建密钥</h2><p>打开到本地的博客文件目录下，右键Git Bush进入命令框，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>输入完后一顿空格即可，之后会返回SHA256密钥和密钥图。并且在你用户界面下发现出现了.ssh文件夹。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（3）——Hexo的目录结构</title>
    <url>/2023/07/17/hexo/Hexo_build03/</url>
    <content><![CDATA[<p>本地部署后在系统盘的用户目录下生成Hexo文件，对其目录结构需要有一定的了解，在之后的Hexo配置和优化离不开里面的各种文件，因此需要对它的目录结构有一定了解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-- _config.yml</span><br><span class="line">|-- node_modules</span><br><span class="line">|-- scaffolds</span><br><span class="line">|-- source</span><br><span class="line">   |-- _posts</span><br><span class="line">|-- public</span><br><span class="line">|-- themes</span><br><span class="line">|-- .gitignore</span><br><span class="line">|-- db.json</span><br><span class="line">|-- package.json</span><br><span class="line">|-- package-lock.json</span><br></pre></td></tr></table></figure>

<p><code>_config.yml</code>：网站的全局配置文件，设置包括网站标题、副标题、作者、关键字和描述信息等。</p>
<p><code>node_modules</code>：是<code>nodejs</code>库文件目录，也就是我们通过”npm install”命令安装的文件位置</p>
<p><code>scaffolds</code>：本意是 “脚手架” 的意思，这里引申为模板文件夹。当你 <code>hexo new &lt;layout(布局)&gt; &lt;title&gt; 的时候</code>，Hexo 会根据该文件夹下的对应文件进行初始化构建。</p>
<p><code>source</code>：正如其名，<code>source</code> 文件夹存储一些直接来自用户的文件，它很重要，如果不出意外你的文章就是保存在这个文件夹下（<em>posts）。</em><code>posts</code> 目录下的md文件，会被编译成 html 文件，放到 public 文件夹下。</p>
<p><code>public</code>：参考 <code>source</code> 文件夹，在初始化后是没有 <code>public</code> 文件夹的，除非 <code>hexo g</code> 编译生成静态文件后，<code>public</code> 文件夹会自动生成。使用 <code>hexo clean</code> 清除 <code>db.json</code> 和 <code>public</code> 文件夹下的所有文件。</p>
<p><code>themes</code>：主题文件夹，存储主题。相关的主题可以在 Github 上免费采购。</p>
<p><code>.gitignore</code>：<code>.gitignore</code> 文件作用是声明不被 git 记录的文件，<code>hexo init &lt;folder&gt;</code> 也会产生一个 <code>.gitignore</code> 文件，可以先删除或者直接编辑，对hexo不会有影响。</p>
<p><code>db.json</code>：里面存放了一些由<code>source</code>目录下<code>.md</code> 的所有文件解析得到的数据</p>
<p><code>package.json</code>：框架的基本参数信息和它所依赖的插件，在 npm 安装时使用 <code>--save</code> 保存进去。</p>
<p><code>package-lock.json</code>：锁定安装时的包的版本号，并且需要上传到git，以保证其他人在npm install时大家的依赖能保证一致。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（1）——部署服务器和配置服务器端</title>
    <url>/2023/07/15/hexo/Hexo_build01/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭建自己的服务器是喜忧参半的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好处:</span><br><span class="line">1.不用担心别的第三方静态部署平台有什么变化；</span><br><span class="line">2.自己的其他东西也可以放到自己的服务器，拓展博客趣味性；</span><br><span class="line">3.没事自己捣鼓捣鼓，对个人的技术成长和作品展示都是有好处的，也是非常有意思的事情</span><br><span class="line">坏处:</span><br><span class="line">1.国内需要ICP备案和公安备案【香港澳门等除外】；</span><br><span class="line">2.可能需要一些技术能力，比如反向代理，linux知识；</span><br></pre></td></tr></table></figure>



<h1 id="选取配置"><a href="#选取配置" class="headerlink" title="选取配置"></a>选取配置</h1><ul>
<li><strong>腾讯云</strong></li>
</ul>
<p>腾讯云没有阿里云那么多云服务器业务型号，它主要强在轻量应用服务器的多配置机型，和标准云服务器的高带宽、大硬盘、带数据盘！</p>
<p>入门最高性价比推荐：腾讯云轻量应用服务器2核4G 5M带宽 一年168元，在促销的时候还有更多优惠。</p>
<ul>
<li><strong>阿里云</strong></li>
</ul>
<p>没什么好说的，入门机型没优势，价格偏高了，目前只有s6、c5、g5机型，c6、机型比较占优势。</p>
<ul>
<li><strong>华为云</strong></li>
</ul>
<p>目前阿里云和腾讯云经过一波价格调整，已经不是以前那种低价来占据市场了，完全内卷不动了，目前国内头部云厂商，云服务器折扣力度最大的，是华为云服务器，而且官网页面可领取优惠券。</p>
<ul>
<li><strong>硅云</strong></li>
</ul>
<p>硅云是中小型企业，专门针对香港和国外服务器，性价比挺高的术业有专攻，如果是想要建网站免备案，可选他们家。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此外选取国内租用云服务器需要备案，大概流程要一个月左右。租用香港及国外云服务器目前不需要备案。</span><br></pre></td></tr></table></figure>



<h1 id="购买设备"><a href="#购买设备" class="headerlink" title="购买设备"></a>购买设备</h1><h2 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h2><p>我选取的是腾讯云服务器——轻量应用服务器2核2G</p>
<p>6·18时候促销直接买的三年租用。</p>
<p>购买之后需要安装配置服务器系统：</p>
<p>地区：<code>北京五区</code>(离哪里近选择哪里) 系统：<code>CentOS 7.6 64位</code> 实例规格：<code>标准型S5</code></p>
<p>配置完之后就可以在<code>控制台-&gt;云服务器-&gt;实例</code>中看到自己购买的服务器啦~</p>
<h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p> 域名的出现是因为IP地址不方便记忆，因此通过DNS服务器可以通过好记的域名找到IP地址。如果不买域名完全可以用上方图片的IPv4地址访问服务器。</p>
<p>在腾讯云主页的域名特惠中可以选取不同的后缀，不同后缀的域名价格不同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top后缀域名一般最便宜</span><br><span class="line">cn、com、net较为常用</span><br></pre></td></tr></table></figure>



<h1 id="云服务器配置"><a href="#云服务器配置" class="headerlink" title="云服务器配置"></a>云服务器配置</h1><p>！！！建议不要直接安装自带配置软件的与服务器！！！</p>
<p>！！！不要一上来就安装宝塔！！！</p>
<p><em>宝塔在可视化安装软件时会将软件安装在 www 目录下，而不是常用命令行的安装目录，而且会缺失一些文件，不利于后续操作。</em></p>
<p><strong>开始配置：</strong></p>
<ol>
<li><p>安装依赖库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel </span><br></pre></td></tr></table></figure>
</li>
<li><p>安装编译工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel </span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否已安装Git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure>

<p>返回的结果<code>git version 1.8.3.1</code>即可</p>
</li>
<li><p>配置Git环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=$PATH:/usr/local/git/bin&#x27; &gt;&gt; /etc/bashrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/bashrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Git用户并修改权限</p>
<p>创建后期上传hexo的git指定用户，这里以hyh为例(这个用户名可以自定义，但是要保证后面的需要用户名的地方需要改成自己自定义的用户名即可)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adduser zyh</span><br><span class="line">passwd zyh</span><br></pre></td></tr></table></figure>

<p>需要注意的便是在设置密码时，设置密码时是没有回显的</p>
<p>赋予zyh用户相关权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers   # 设置权限</span><br><span class="line">vim /etc/sudoers # 编辑/etc/sudoers</span><br></pre></td></tr></table></figure>

<p>使用 set: nu 显示行号，找到100行左右，添加如下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root ALL=(ALL)  ALL</span><br><span class="line">zyh  ALL=(ALL)   ALL  #主要添加这句话（这里zyh是你刚才创建的用户名）</span><br></pre></td></tr></table></figure>

<p>直接:<code>wq!</code>，进行保存，保存后再次修改权限。因为 <code>sudoers</code>是只读文件，所有要使用 <code>!</code>进行保存，否则会失败。</p>
<p>将&#x2F;etc&#x2F;sudoers 修改成只读类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 /etc/sudoers   //改回权限</span><br></pre></td></tr></table></figure>



<p>创建hexo文件夹及赋予文件夹权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /home/hexo  #这个也是自定义的</span><br><span class="line">chown hyh:hyh -R /home/hexo #授予权限</span><br></pre></td></tr></table></figure>



<p>安装Nginx<br>这里基本没啥好说的，直接运行就可以，然后看到最后一行显示Complete就说明完事了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y nginx  </span><br></pre></td></tr></table></figure>



<p>这个时候我们可以通过以下命令，启动一下，看看效果，如果没有报错的话就ok</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>



<p>配置Nginx文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>在38行进行修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">	listen 80 default_server; </span><br><span class="line">	listen [::]:80 default_server; </span><br><span class="line">	server_name zhangyuanhe.top; #域名 </span><br><span class="line">	root /home/hexo; #网站目录</span><br></pre></td></tr></table></figure>

<p>保存退出后，重启服务器，<br>修改完配置以后，需要重启一下Nginx服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl reload nginx.service  </span><br></pre></td></tr></table></figure></li>
</ol>
<p>建立git仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/zyh</span><br><span class="line">git init --bare zyh.git</span><br><span class="line">chown zyh:zyh -R zyh.git</span><br></pre></td></tr></table></figure>

<p>同步网站根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim zyh.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>向其中加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/home/hexo --git-dir=/home/zyh/zyh.git checkout -f</span><br></pre></td></tr></table></figure>

<p>修改权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /home/zyh/zyh.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>在Windows10本地Hexo目录修改_config.yml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: zyh@62.234.219.169:/home/zyh/zyh.git    #用户名@服务器Ip:git仓库位置</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（4）——更换主题</title>
    <url>/2023/07/18/hexo/Hexo_build04/</url>
    <content><![CDATA[<p>Hexo的主题有很多，可以在其官网上选择自己喜欢的。</p>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p>Hexo官方主题页：<a href="https://hexo.io/themes/">Themes | Hexo</a></p>
<p>我使用的主题：<a href="https://github.com/zhangzeli/hexo-theme-butterfly">Butterfly</a></p>
<h1 id="更改方法"><a href="#更改方法" class="headerlink" title="更改方法"></a>更改方法</h1><p>在Github上下载了主题ZIP文件后，放到hexo文件夹根目录themes文件下解压。之后打开hexo文件夹中_config.yml，找到Extensions.theme将其改为hexo-theme-matery。重启本地服务器就可以看到主题改过来啦。</p>
<p>建议下载稳定版，在建立的Hexo博客文件根目录打开终端，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br></pre></td></tr></table></figure>

<p>打开根目录文件<code>_config.yml</code>更改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: Butterfly</span><br></pre></td></tr></table></figure>

<p>随后重新部署一下就可以看见更改后的主题了</p>
<p>以下步骤以后不再赘述：</p>
<p>输入以下代码可在本地查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>输入以下代码可部署到网站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo -d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
        <tag>Butterfly主题</tag>
      </tags>
  </entry>
  <entry>
    <title>信息系统安全期末复习总结</title>
    <url>/2024/01/01/BUPT_note/Review%20of%20Information%20System%20Security/</url>
    <content><![CDATA[<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a><strong>1. 基本概念</strong></h1><h2 id="信息系统概论"><a href="#信息系统概论" class="headerlink" title="信息系统概论"></a>信息系统概论</h2><h3 id="什么是信息系统"><a href="#什么是信息系统" class="headerlink" title="什么是信息系统"></a>什么是信息系统</h3><ul>
<li>信息系统是一个集成的组件集合，用于收集、存储和处理数据，以及传递信息、知识和数字产品。商业公司和其他组织依靠信息系统来执行和管理他们的运营、与客户和供应商互动，以及在市场上竞争。</li>
<li>信息系统是支持数据密集型应用程序的软件和硬件系统。</li>
</ul>
<h3 id="信息系统的架构、架构的复杂度"><a href="#信息系统的架构、架构的复杂度" class="headerlink" title="信息系统的架构、架构的复杂度"></a>信息系统的架构、架构的复杂度</h3><h4 id="单机架构"><a href="#单机架构" class="headerlink" title="*单机架构*"></a><em><strong>*单机架构*</strong></em></h4><p>在网站开设初期，应用数量与用户数都较少，可以把Tomcat和数据库部署在同一台服务器上。</p>
<h4 id="第一次演进：Tomcat与数据库分开部署"><a href="#第一次演进：Tomcat与数据库分开部署" class="headerlink" title="*第一次演进：Tomcat与数据库分开部署*"></a><em><strong>*第一次演进：Tomcat与数据库分开部署*</strong></em></h4><p>Tomcat和数据库分别独占服务器资源，显著提高两者各自性能</p>
<h4 id="第二次演进：引入本地缓存和分布式缓存"><a href="#第二次演进：引入本地缓存和分布式缓存" class="headerlink" title="*第二次演进：引入本地缓存和分布式缓存*"></a><em><strong>*第二次演进：引入本地缓存和分布式缓存*</strong></em></h4><p>在Tomcat服务器增加本地缓存，并在外部增加分布式缓存，缓存热门商品信息或热门商品的HTML页面等。通过缓存能把绝大多数请求在读写数据库前拦截掉，大大降低数据库压力</p>
<h4 id="第三次演进：引入反向代理实现负载均衡"><a href="#第三次演进：引入反向代理实现负载均衡" class="headerlink" title="*第三次演进：引入反向代理实现负载均衡*"></a><em><strong>*第三次演进：引入反向代理实现负载均衡*</strong></em></h4><p>在多台服务器上分别部署Tomcat，使用反向代理软件（Nginx）把请求均匀分发到每个Tomcat中。假设Tomcat最多支持100个并发，Nginx最多支持50000个并发，那么理论上Nginx把请求分发到500个Tomcat上，就能抗住50000个并发</p>
<h4 id="第四次演进：数据库读、写分离"><a href="#第四次演进：数据库读、写分离" class="headerlink" title="*第四次演进：数据库读、写分离*"></a><em><strong>*第四次演进：数据库读、写分离*</strong></em></h4><p>把数据库划分为读库和写库，读库可以有多个，通过同步机制把写库的数据同步到读库，对于需要查询最新写入数据场景，可通过在缓存中多写一份，通过缓存获得最新数据</p>
<h4 id="第五次演进：数据库按业务分库"><a href="#第五次演进：数据库按业务分库" class="headerlink" title="*第五次演进：数据库按业务分库*"></a><em><strong>*第五次演进：数据库按业务分库*</strong></em></h4><p>把不同业务的数据保存到不同的数据库中，降低业务之间的资源竞争，对于访问量大的业务，可以部署更多的服务器来支撑。这样同时导致跨业务的表无法直接做关联分析，需要通过其他途径来解决</p>
<h4 id="第六次演进：把大表拆分为小表"><a href="#第六次演进：把大表拆分为小表" class="headerlink" title="*第六次演进：把大表拆分为小表*"></a><em><strong>*第六次演进：把大表拆分为小表*</strong></em></h4><p>这种做法显著增加了数据库运维的难度，对DBA的要求较高!!!</p>
<p>比如针对评论数据，可按照商品ID进行hash，路由到对应的表中存储；针对支付记录，可按照小时创建表，每个小时表继续拆分为小表，使用用户ID或记录编号来路由数据。只要实时操作的表数据量足够小，请求能够足够均匀地分发到多台服务器上的小表，那数据库就能通过水平扩展的方式来提高性能</p>
<h4 id="第七次演进：使用LVS或F5使多个Nginx负载均衡"><a href="#第七次演进：使用LVS或F5使多个Nginx负载均衡" class="headerlink" title="*第七次演进：使用LVS或F5使多个Nginx负载均衡*"></a><em><strong>*第七次演进：使用LVS或F5使多个Nginx负载均衡*</strong></em></h4><p>LVS是软件，运行在操作系统内核态，可对TCP请求或更高层级的网络协议进行转发，因此支持的协议更丰富，并且性能也远高于Nginx，可假设单机的LVS可支持几十万个并发的请求转发；F5是一种负载均衡硬件，与LVS提供的能力类似，性能比LVS更高，但价格昂贵。</p>
<h4 id="第八次演进：通过DNS轮询实现机房间的负载均衡"><a href="#第八次演进：通过DNS轮询实现机房间的负载均衡" class="headerlink" title="*第八次演进：通过DNS轮询实现机房间的负载均衡*"></a><em><strong>*第八次演进：通过DNS轮询实现机房间的负载均衡*</strong></em></h4><p>在DNS服务器中可配置一个域名对应多个IP地址，每个IP地址对应到不同的机房里的虚拟IP。当用户访问<a href="http://www.taobao.com时,dns服务器会使用轮询策略或其他策略,来选择某个ip供用户访问/">www.taobao.com时，DNS服务器会使用轮询策略或其他策略，来选择某个IP供用户访问</a></p>
<h4 id="第九次演进：引入NoSQL数据库和搜索引擎等技术"><a href="#第九次演进：引入NoSQL数据库和搜索引擎等技术" class="headerlink" title="*第九次演进：引入NoSQL数据库和搜索引擎等技术*"></a><em><strong>*第九次演进：引入NoSQL数据库和搜索引擎等技术*</strong></em></h4><p>针对特定的场景，引入合适的解决方案。如对于海量文件存储，可通过分布式文件系统HDFS解决，对于key&#x2F;value类型的数据，可通过HBase和Redis等方案解决，对于全文检索场景，可通过搜索引擎如ElasticSearch解决，对于多维分析场景，可通过Kylin或Druid等方案解决</p>
<h4 id="第十次演进：大应用拆分为小应用"><a href="#第十次演进：大应用拆分为小应用" class="headerlink" title="*第十次演进：大应用拆分为小应用*"></a><em><strong>*第十次演进：大应用拆分为小应用*</strong></em></h4><p>按照业务板块来划分应用代码，使单个应用的职责更清晰，相互之间可以做到独立升级迭代。这时候应用之间可能会涉及到一些公共配置，可以通过分布式配置中心Zookeeper来解决</p>
<h4 id="第十一次演进：复用的功能抽离成微服务"><a href="#第十一次演进：复用的功能抽离成微服务" class="headerlink" title="*第十一次演进：复用的功能抽离成微服务*"></a><em><strong>*第十一次演进：复用的功能抽离成微服务*</strong></em></h4><p>如用户管理、订单、支付、鉴权等功能在多个应用中都存在，那么可以把这些功能的代码单独抽取出来形成一个单独的服务来管理，这样的服务就是所谓的微服务，应用和服务之间通过HTTP、TCP或RPC请求等多种方式来访问公共服务，每个单独的服务都可以由单独的团队来管理</p>
<h4 id="第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异"><a href="#第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异" class="headerlink" title="*第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异*"></a><em><strong>*第十二次演进：引入企业服务总线ESB屏蔽服务接口的访问差异*</strong></em></h4><p>通过ESB统一进行访问协议转换，应用统一通过ESB来访问后端服务，服务与服务之间也通过ESB来相互调用，以此降低系统的耦合程度。这种单个应用拆分为多个应用，公共服务单独抽取出来来管理，并使用企业消息总线来解除服务之间耦合问题的架构，就是所谓的SOA（面向服务）架构</p>
<h2 id="信息系统安全概论"><a href="#信息系统安全概论" class="headerlink" title="信息系统安全概论"></a>信息系统安全概论</h2><h3 id="信息系统常见的安全威胁"><a href="#信息系统常见的安全威胁" class="headerlink" title="信息系统常见的安全威胁"></a>信息系统常见的安全威胁</h3><h4 id="自然威胁"><a href="#自然威胁" class="headerlink" title="自然威胁"></a>自然威胁</h4><p>自然威胁通常不是故意造成的，但它们会对信息系统产生破坏性影响。</p>
<ol>
<li><p><strong>自然灾害</strong>：</p>
<ul>
<li>地震：可能破坏服务器室、数据中心和其他基础设施。</li>
<li>洪水：可能泛滥至关键设施，导致硬件损坏和数据丢失。</li>
<li>风暴和雷击：可能引起停电或电力浪涌，损坏设备。</li>
</ul>
</li>
<li><p><strong>火灾</strong>：</p>
<ul>
<li>火灾可能会摧毁物理设施，包括服务器、网络设备等。</li>
</ul>
</li>
<li><p><strong>环境变化</strong>：</p>
<ul>
<li>温度变化或湿度过高或过低都可能对敏感设备造成损害。</li>
</ul>
</li>
</ol>
<h4 id="人为威胁"><a href="#人为威胁" class="headerlink" title="人为威胁"></a>人为威胁</h4><p>人为威胁通常是有意为之的，旨在从中获利或者对信息系统产生破坏。</p>
<ol>
<li><strong>恶意软件攻击</strong>：<ul>
<li>病毒、蠕虫、特洛伊木马、勒索软件等。</li>
</ul>
</li>
<li><strong>网络钓鱼和社会工程</strong>：<ul>
<li>攻击者诱导用户提供敏感数据或执行不安全操作。</li>
</ul>
</li>
<li><strong>内部威胁</strong>：<ul>
<li>滥用权限、数据泄露或内部破坏活动。</li>
</ul>
</li>
<li><strong>数据泄露</strong>：<ul>
<li>由于不当的数据处理或安全措施不足导致敏感信息外泄。</li>
</ul>
</li>
<li><strong>篡改和破坏</strong>：<ul>
<li>数据或软件的故意篡改，以及对硬件的物理破坏。</li>
</ul>
</li>
<li><strong>拒绝服务（DoS&#x2F;DDoS）攻击</strong>：<ul>
<li>通过大量请求使网络服务不可用。</li>
</ul>
</li>
<li><strong>身份盗窃和冒用</strong>：<ul>
<li>盗用他人身份访问受限资源。</li>
</ul>
</li>
<li><strong>刻意的信息分发</strong>：<ul>
<li>例如，泄露机密文件，可能是出于政治、个人利益或其他原因.</li>
</ul>
</li>
</ol>
<h3 id="信息系统安全的概念"><a href="#信息系统安全的概念" class="headerlink" title="信息系统安全的概念"></a>信息系统安全的概念</h3><p>（1）基于信息保障的理解，信息系统安全保障是在信息系统的整个生命周期中，通过对信息系统的风险分析，制定并执行相应的安全保障策略，从技术、管理、工程和人员等方面提出安全保障要求，确保信息系统的保密性、完整性和可用性，降低安全风险到可接受的程度，从而保障系统实现组织机构的使命;</p>
<p>（2）基于风险控制的理解，即把系统的风险控制到一个可以接受的范围之内；</p>
<p>（3）基于状态迁移的理解，即系统的状态无论怎么迁移，也不可能进入对应不安全</p>
<p>状态的空间；</p>
<p>（4）基于时间的理解，即发现攻击的时间+做出响应的时间&lt;黑客实现攻击的时间；</p>
<p>（5）基于安全体系架构的理解，以云计算为例，讲稿提供了多种典型安全架构，它</p>
<p>们要么提供很好的隔离性，要么以可信、可控的方式，可以保证信息系统的业务连</p>
<p>续性。</p>
<p>（6）基于安全策略的理解，即一个信息系统是“安全系统”，指的是该系统达到了</p>
<p>当初设计时所制定的安全策略的要求。</p>
<h2 id="安全需求和安全策略"><a href="#安全需求和安全策略" class="headerlink" title="安全需求和安全策略"></a>安全需求和安全策略</h2><h3 id="安全需求，一般性的安全需求"><a href="#安全需求，一般性的安全需求" class="headerlink" title="安全需求，一般性的安全需求"></a>安全需求，一般性的安全需求</h3><p><strong>安全需求</strong>：就是在设计一个安全系统时<strong>期望得到的安全保障</strong></p>
<p><strong>一般性的安全需求</strong></p>
<p><strong>机密性需求</strong>，防止信息被泄漏给未授权的用户</p>
<p>​	自主安全策略、强制安全策略；需知原则</p>
<p><strong>完整性需求，</strong>防止未授权用户对信息的修改</p>
<p>​	维护系统资源在一个有效的、预期的状态，防止资源被不正确、不适当的修改；维</p>
<p>​	护系统不同部分的一致性；防止在涉及记账或审计的事件中“舞弊”行为的发生。</p>
<p><strong>可用性需求，</strong>保证授权用户对系统信息的可访问性</p>
<p>​	“授权用户的任何正确的输入，系统会有相应的正确的输出”</p>
<p><strong>可记账性需求，</strong>防止用户对访问过某信息或执行过某一操作以否认</p>
<p>​	可对发生的事件、操作等进行回溯</p>
<h3 id="安全策略：访问控制策略（包括-DAC、MAC-等），如何从安全策略的角度理解信息系统安全"><a href="#安全策略：访问控制策略（包括-DAC、MAC-等），如何从安全策略的角度理解信息系统安全" class="headerlink" title="安全策略：访问控制策略（包括 DAC、MAC 等），如何从安全策略的角度理解信息系统安全"></a>安全策略：访问控制策略（包括 DAC、MAC 等），如何从安全策略的角度理解信息系统安全</h3><p>最典型的安全策略是自主访问控制策略DAC和强制访问控制策略MAC，它们描绘了大部分系统的实际需求，并且这两类策略在多数安 全系统中都提供了相应的实施机制。</p>
<p><strong>自主访问控制策略</strong></p>
<p>允许系统中信息的拥有者按照自己的意愿去指定谁可以以何种访问模式去访问该客体</p>
<p>❖ 自主访问控制策略通常</p>
<p>➢ 基于系统内用户（如用户ID），加上对用户的访问授权（如权能表），或者客体的访问属性（如访问控制表ACL）来决定该用户是否有某权限访问该客体</p>
<p>❖ 或者基于要访问信息的内容</p>
<p>❖ 或者基于用户当时所处的角色</p>
<p><strong>强制访问控制策略</strong></p>
<p>在强制访问控制系统中，所有主体（用户，进程）和客体（文件，数据）都被分配了安全标签，安全标签标识一个安全等级。</p>
<p>➢ 主体（用户，进程）被分配一个安全等级</p>
<p>➢ 客体（文件，数据）也被分配一个安全等级</p>
<p>➢ 访问控制执行时对主体和客体的安全级别进行比较</p>
<p><strong>访问控制策略的组成</strong></p>
<p><strong>主体</strong></p>
<p>系统内行为的发起者。通常是用户发起的进程</p>
<p><strong>客体</strong></p>
<p>系统内所有主体行为的直接承担者</p>
<p><strong>系统环境（上下文）</strong></p>
<p>系统主、客体属性之外的某些状态</p>
<p>从安全策略的角度理解信息系统安全涉及到制定一套全面的指导原则和框架，这些原则和框架能够指导组织在技术、流程和人力层面上采取措施，以确保信息系统的保密性、完整性和可用性。</p>
<h3 id="主体、客体及其属性"><a href="#主体、客体及其属性" class="headerlink" title="主体、客体及其属性"></a>主体、客体及其属性</h3><p><strong>主体是系统内行为的发起者，通常是用户发起的进程</strong></p>
<p>​	<strong>信息的访问者（用户）</strong></p>
<p>​	一个获得授权可以访问系统资源的自然人。</p>
<p>​	授权包括：对信息的读&#x2F;写&#x2F;删除&#x2F;追加&#x2F;执行以及授予&#x2F;撤销另外一个用户对信息的访问权限等。</p>
<p>​	<strong>信息的拥有者</strong></p>
<p>​	该用户拥有对此信息的完全处理权限，除非该信息被系统另外加以访问控制。</p>
<p>​	<strong>系统管理员</strong></p>
<p>​	为使系统能正常运转，而对系统的运行进行管理的用户</p>
<p><strong>主体属性</strong></p>
<p>​	<strong>用户ID&#x2F;组ID</strong> </p>
<p>​	例如用于Unix按位的访问控制、常规自主访问控制</p>
<p>​	<strong>用户访问许可级别</strong></p>
<p>​	例如用于强制访问控制。</p>
<p>​	<strong>权能表</strong></p>
<p>​	例如用于强制访问控制。</p>
<p>​	<strong>角色</strong></p>
<p>​	例如用于Unix按位的访问控制、常规自主访问控制</p>
<p><strong>访问控制策略的相关方⎯⎯客体</strong></p>
<p>​	<strong>一般客体</strong></p>
<p>​	在系统内以客观、具体的形式存在的信息实体，如文件、目录等</p>
<p>​	<strong>设备客体</strong></p>
<p>​	指系统内的设备，如软盘、打印机等</p>
<p>​	<strong>特殊客体</strong></p>
<p>​	某些主体</p>
<p><strong>客体属性</strong></p>
<p>​	<strong>敏感性标签</strong></p>
<p>​	一个敏感性标签由2部分组成：信息的敏感性级别和范畴</p>
<p>​	<strong>访问控制列表</strong></p>
<p>​	表示系统中哪些用户可以对此信息进行何种访问</p>
<p>​	由信息的拥有者加以管理</p>
<h3 id="访问控制列表：标准访问控制列表，扩展访问控制列表，通配掩码"><a href="#访问控制列表：标准访问控制列表，扩展访问控制列表，通配掩码" class="headerlink" title="访问控制列表：标准访问控制列表，扩展访问控制列表，通配掩码"></a>访问控制列表：标准访问控制列表，扩展访问控制列表，通配掩码</h3><p><strong>标准ACL_靠近目的地址</strong></p>
<p>只使用数据包的源地址作为测试条件。所有决定是基于源IP地址的。</p>
<p>标准访问列表的创建根据 “动作”＋“源地址” ，即允许谁、拒绝谁的方法来创建</p>
<p><strong>扩展ACL——基于源地址、目的地址、协议、端口_靠近源地址</strong></p>
<p>可以测试IP包的第3层和第4层报头中的字段。包括源IP地址、目的IP地址、网络层报头中的协议字段（如，TCP、UDP、ICMP等）以及位于传输层报头中的端口号。</p>
<p><strong>通配掩码</strong></p>
<p>路由器使用<strong>IP地址</strong>和<strong>通配掩码</strong>（wildcard-mask）一起来分辨匹配的地址范围，它跟子网掩码刚好相反。</p>
<p>它不像子网掩码告诉路由器IP地址的哪一位属于网络号一样，通配符掩码告诉路由器为了判断出匹配，它需要检查IP地址中的多少位。</p>
<p><strong>通配掩码某位是0</strong>表示检查相应bit位的值</p>
<p><strong>通配掩码某位是1</strong>表示不检查（忽略）相应位的值</p>
<h2 id="信息系统的风险评估"><a href="#信息系统的风险评估" class="headerlink" title="信息系统的风险评估"></a>信息系统的风险评估</h2><h3 id="风险的概念"><a href="#风险的概念" class="headerlink" title="风险的概念"></a>风险的概念</h3><p>风险指在某一特定环境下，在某一特定时间段内，特定的威胁利用资产的一种或一组薄弱点，导致资产的丢失或损害的潜在可能性，即特定威胁事件发生的可能性与后果的结合。</p>
<h3 id="什么是安全风险评估"><a href="#什么是安全风险评估" class="headerlink" title="什么是安全风险评估"></a>什么是安全风险评估</h3><p><strong>安全风险组成的四要素：</strong>信息系统资产（Asset）、信息系统脆弱性（Vulnerability）、信息安全威胁（Threat）、信息系统安全保 护措施（Safeguard）。</p>
<h3 id="风险评估的要素"><a href="#风险评估的要素" class="headerlink" title="风险评估的要素"></a>风险评估的要素</h3><p><strong>风险评估围绕着资产、威胁、脆弱性和安全措施这些基本要素展开。</strong></p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231220191732221.png" alt="image-20231220191732221"></p>
<h2 id="信息系统等级保护"><a href="#信息系统等级保护" class="headerlink" title="信息系统等级保护"></a>信息系统等级保护</h2><h3 id="什么是等级保护，等级保护是《网络安全法》规定的一项基本制度"><a href="#什么是等级保护，等级保护是《网络安全法》规定的一项基本制度" class="headerlink" title="什么是等级保护，等级保护是《网络安全法》规定的一项基本制度"></a>什么是等级保护，等级保护是《网络安全法》规定的一项基本制度</h3><p><strong>网络安全等级保护是指对国家重要信息、法人和其他组织及公民的专有信息以及公开信息和存储、传输、处理这些信息的信息系统分等级实行安全保护，对信息系统中使用的信息安全产品实行按等级管理，对信息系统中发生的信息安全事件分等级响应、处置。</strong></p>
<p><strong>网络安全等级保护工作包括定级、备案、建设整改、等级测评、监督检查五个阶段。</strong></p>
<h2 id="信息系统的物理安全"><a href="#信息系统的物理安全" class="headerlink" title="信息系统的物理安全"></a>信息系统的物理安全</h2><h3 id="物理安全的概念，包括环境安全、介质安全、线路安全、供电安全等"><a href="#物理安全的概念，包括环境安全、介质安全、线路安全、供电安全等" class="headerlink" title="物理安全的概念，包括环境安全、介质安全、线路安全、供电安全等"></a>物理安全的概念，包括环境安全、介质安全、线路安全、供电安全等</h3><p><strong>环境安全</strong></p>
<p>对系统所在环境的安全保护</p>
<p>​	<strong>机房三度要求</strong></p>
<p>​	温度&#x2F;湿度&#x2F;洁净度</p>
<p>​	<strong>防火与防水要求</strong></p>
<p>​	为避免火灾、水灾，应采取如下具体措施:</p>
<p>​	（1）隔离</p>
<p>​	（2）火灾报警系统</p>
<p>​	（3）灭火设施</p>
<p>​	（4）管理措施</p>
<p>​	<strong>机房防盗要求</strong></p>
<p>​	<strong>机房防鼠</strong></p>
<p>​	<strong>防静电措施</strong></p>
<p>​	<strong>接地要求</strong></p>
<p>​	<strong>防雷击措施</strong></p>
<p>​	<strong>机房选址要求</strong></p>
<p><strong>线路安全</strong></p>
<p>窃听&#x2F;搭线窃听&#x2F;海底电缆窃听</p>
<p>光纤通信技术</p>
<p><strong>电源系统安全</strong></p>
<p>不间断电源（UPS）</p>
<p><strong>介质安全：</strong>电磁战</p>
<h3 id="电磁泄漏"><a href="#电磁泄漏" class="headerlink" title="电磁泄漏"></a>电磁泄漏</h3><p>电磁分析攻击作为最有效的旁路攻击技术之一，是通过在密码芯片周围放置线圈，测量芯片在运算期间辐射的电磁信号，研究电磁场与内部处理数据之间的相关性而获取内部秘密参量。</p>
<h3 id="电源调整器，不间断电源（UPS）"><a href="#电源调整器，不间断电源（UPS）" class="headerlink" title="电源调整器，不间断电源（UPS）"></a>电源调整器，不间断电源（UPS）</h3><h2 id="信息系统的可靠性"><a href="#信息系统的可靠性" class="headerlink" title="信息系统的可靠性"></a>信息系统的可靠性</h2><h3 id="可靠性及其度量指标（MTBF，MTTF，失效率，可靠度）"><a href="#可靠性及其度量指标（MTBF，MTTF，失效率，可靠度）" class="headerlink" title="可靠性及其度量指标（MTBF，MTTF，失效率，可靠度）;"></a>可靠性及其度量指标（MTBF，MTTF，失效率，可靠度）;</h3><h3 id="可维修产品、不可维修产品的可靠性指标，可用度"><a href="#可维修产品、不可维修产品的可靠性指标，可用度" class="headerlink" title="可维修产品、不可维修产品的可靠性指标，可用度"></a>可维修产品、不可维修产品的可靠性指标，可用度</h3><h4 id="可靠性的定义"><a href="#可靠性的定义" class="headerlink" title="*可靠性的定义*"></a><em><strong>*可靠性的定义*</strong></em></h4><p>在规定的条件下、在给定的时间内，系统能实施应有功能的能力。</p>
<h4 id="可靠性参数"><a href="#可靠性参数" class="headerlink" title="*可靠性参数*"></a><em><strong>*可靠性参数*</strong></em></h4><p>$T_{MTTF}：$平均失效前时间  <strong>不可修系统</strong></p>
<p>$T_{MTBF}：$平均故障间隔时间  <strong>可修系统</strong></p>
<p>$R：$<em><strong>*可靠度*</strong></em></p>
<p>$λ：$<em><strong>*失效率*</strong></em></p>
<h4 id="寿命"><a href="#寿命" class="headerlink" title="*寿命*"></a><em><strong>*寿命*</strong></em></h4><p>通常用一个非负随机变量$X$来描述产品的寿命。</p>
<p>$X$的分布函数为</p>
<p>$F(t) &#x3D; P{X \le t}，t\ge0$</p>
<p>有了寿命分布<em>F</em>(<em>t</em>) ，就知道产品的平均寿命</p>
<p>$EX&#x3D;\int_0^\infty tdF(t)$</p>
<h4 id="可靠度R"><a href="#可靠度R" class="headerlink" title="可靠度R"></a>可靠度R</h4><p>产品在时刻 <em>t</em> 之前都正常工作（不失效）的概率，即产品在时刻 <em>t</em>的生存概率，称为无故障工作概率（可靠度函数）</p>
<p>$$ R(t)&#x3D;P{X&gt;t}&#x3D;\int_0^\infty dF(t)&#x3D;\int_0^\infty f(t)dt \ 𝑹(t) +F(t)&#x3D;1$$</p>
<blockquote>
<p>假设 C 是一个具有 <em>N</em> 个元器件的数字系统，在一定的条件和环境（如温度、湿度、电压等）下运行，并且随着时间 <em>t</em> 的推移质量逐步下降</p>
</blockquote>
<p>系统<strong>C</strong>在时刻 <em>t</em> 能正常工作的概率<em>R(t)&#x3D;S(t)&#x2F;N</em></p>
<p>**<em>R</em>(<em>t</em>)**称为系统 <strong>C</strong> 在时刻 <em>t</em> 的可靠度。</p>
<h4 id="失效率λ"><a href="#失效率λ" class="headerlink" title="失效率λ"></a>失效率λ</h4><p>假设<em>F</em>(<em>t</em>)是绝对连续的，即存在分布密度函数$<em>f(t)&#x3D;F’(t)</em>$且$F(t)&#x3D;\int_0^tf(x)dx$</p>
<blockquote>
<p>将发生故障的条件概率密度叫做失效率。 $λ(t)&#x3D;f(t)&#x2F;R(t)&#x3D;-R’(t)&#x2F;R(t)$ 失效率**λ(<em>t</em>)**表示系统中元器件失效的速率。</p>
</blockquote>
<h4 id="λ-t-的浴缸形曲线（Bathtub-curve）"><a href="#λ-t-的浴缸形曲线（Bathtub-curve）" class="headerlink" title="λ(t)的浴缸形曲线（Bathtub-curve）"></a>λ(t)的浴缸形曲线（Bathtub-curve）</h4><p><strong>第一阶段 早期失效期（Infant Mortality）</strong></p>
<p>器件在开始使用时失效率很高，但随着产品工作时间的增加，失效率迅速降低。这一阶段失效的原因大多是由于设计、原材料和制造过程中的缺陷造成的。为了缩短这一阶段的时间，产品应在投入运行前进行试运转，以便及早发现、修正和排除故障；或通过试验进行筛选，剔除不合格品。</p>
<p><strong>第二阶段 偶然失效期，也称随机失效期（Random Failures）</strong></p>
<p>这一阶段的特点是失效率较低，且较稳定，往往可近似看作常数。这一时期是产品的良好使用阶段。由于在这一阶段中，产品失效率近似为一常数，故设<em></em>(<em>t</em>)&#x3D;<em>λ</em>（常数）由可靠度计算公式得$R(t)&#x3D;e^{-λt}$ 这一式表明<strong>设备的可靠性与失效率成指数关系</strong>。</p>
<p><strong>第三阶段 耗损失效期（Wearout）</strong></p>
<p>该阶段的失效率随时间的延长而急速增加，主要原因是器件的损失己非常的严重，寿命快到尽头了，可适当的维修或直接更换。</p>
<p>R(t)和λ的关系</p>
<p>可靠性不仅是时间<em>t</em>的函数，而且与失效率****λ****有着密切的关联。</p>
<p>$$ R(t)&#x3D;e^{\int^t_0\lambda(t)dt } $$</p>
<h4 id="可维修产品的平均维修时间"><a href="#可维修产品的平均维修时间" class="headerlink" title="*可维修产品的平均维修时间*"></a><em><strong>*可维修产品的平均维修时间*</strong></em></h4><p>可维修产品的可维护性平均维修时间（MTTR，Mean Time To Repair）来度量，即系统发生故障后维修和重新恢复正常运行平均花费的时间（即设备处于故障状态时间的平均值，或设备修复时间的平均值）。系统的可维护性越好，平均维修时间越短</p>
<p>$$ MTTR&#x3D;\int^\infty _0t\mu(t)dt$$</p>
<blockquote>
<p>$<em>\mu(t)</em>$是维修时间的概率密度函数</p>
</blockquote>
<h4 id="可维修产品的维修性指标：可用性"><a href="#可维修产品的维修性指标：可用性" class="headerlink" title="*可维修产品的维修性指标：可用性*"></a><em><strong>*可维修产品的维修性指标：可用性*</strong></em></h4><p>可维修产品的可用性定义为：</p>
<p>$$ \frac{MTBF}{MTBF+MTTR}*100% $$</p>
<p><strong>计算机系统可靠性举例</strong></p>
<p>已知世界上第一代电子管计算机ENIAC有20000个电子管，假 设每个电子管的失效率为&#x3D;0.5%&#x2F;kh（千小时），试求： （1）该计算机的MTTF； （2）若要求计算机的可靠性在95%以上，则至多可以工作多久？</p>
<p>$$ MTTF&#x3D;\frac{1}{\sum^n_{i&#x3D;1}\lambda_i}&#x3D;\frac{1}{\frac{0.05}{100}*\frac{1}{1000}*20000}&#x3D;\frac{1}{0.01}&#x3D;100H\ R(t)&#x3D;e^{-\frac{t}{MTTF}}\ t&#x3D;5H $$</p>
<h3 id="容错技术，故障检测和诊断技术，故障屏蔽技术，冗余技术"><a href="#容错技术，故障检测和诊断技术，故障屏蔽技术，冗余技术" class="headerlink" title="容错技术，故障检测和诊断技术，故障屏蔽技术，冗余技术"></a>容错技术，故障检测和诊断技术，故障屏蔽技术，冗余技术</h3><h4 id="故障检测和诊断"><a href="#故障检测和诊断" class="headerlink" title="故障检测和诊断"></a><strong>故障检测和诊断</strong></h4><p>故障检测（Fault Detection）：判断系统是否存在故障的过程故障检测的作用是确认系统是否发生了故障，指示故障的状态，即查找故障源和故障性质。一般来说，故障检测只能找到错误点（错误单元），不能准确找到故障点。</p>
<p>故障诊断（Fault Diagnosis）：检测出系统存在故障后要进行故障的定位，找出故障所在的位置。</p>
<h4 id="故障屏蔽技术"><a href="#故障屏蔽技术" class="headerlink" title="故障屏蔽技术"></a><strong>故障屏蔽技术</strong></h4><p>故障屏蔽技术是防止系统中的故障在该系统的信息结构中产生差错的各种措施的总称，其实质是在故障效应达到模块的输出以前，利用冗余资源将故障影响掩盖起来，达到容错目的。</p>
<h4 id="冗余技术"><a href="#冗余技术" class="headerlink" title="冗余技术"></a><strong>冗余技术</strong></h4><p>硬件冗余</p>
<p>时间冗余</p>
<p>软件冗余</p>
<p>信息冗余:<strong>奇偶校验</strong></p>
<p>所谓冗余就是超过系统实现正常功能的额外资源。</p>
<p><strong>硬件冗余：三模冗余</strong></p>
<p>三模冗余可以由用户手动完成，也可以依靠工具完成。Xilinx推出了XIlInXtMrtool ，可以方便地实现三模冗余设计，并且可以方便地配置被冗余项，大大方便了用户。</p>
<p><strong>时间冗余技术</strong></p>
<p>基本思想：重复执行指令或者一段程序来消除故障的影响，以达到容错的效果，它是用消耗时间来换取容错的目的</p>
<p><strong>三模冗余（TMR）</strong>是一种常见的容错技术，通过三个相同的系统或组件并行工作，并使用投票逻辑来确定最终输出。这种方式可以容忍一个子系统的故障，因为即便有一个子系统产生错误输出，另外两个正确的输出可以通过多数表决来决定正确的响应。</p>
<p>然而，TMR也有潜在的弱点，例如如果两个系统同时失败并产生了相同的错误输出，TMR可能会选择错误的结果。为了改进TMR的容错能力，可以采取以下措施：</p>
<h5 id="1-错误检测与恢复"><a href="#1-错误检测与恢复" class="headerlink" title="1. 错误检测与恢复"></a>1. 错误检测与恢复</h5><ul>
<li><strong>自我检查</strong>：在TMR系统中加入自检逻辑，使得每个模块在表决过程之前进行错误检查。</li>
<li><strong>错误恢复</strong>：当检测到错误时，启动错误恢复机制，如重置或重新同步该模块。</li>
<li><strong>动态重新配置</strong>：如果确定某个模块故障，可以动态将其从系统中移除并替换。</li>
</ul>
<h5 id="2-多数表决器与冗余"><a href="#2-多数表决器与冗余" class="headerlink" title="2. 多数表决器与冗余"></a>2. 多数表决器与冗余</h5><ul>
<li><strong>增加冗余级别</strong>：使用四模或更多模冗余系统来提高容错能力，如N模冗余可以容忍N&#x2F;2-1个错误。</li>
<li><strong>改进表决逻辑</strong>：采用更复杂的表决机制，例如加权表决、模糊逻辑表决或基于信任度的表决，以识别最可靠的模块输出。</li>
</ul>
<h5 id="3-组合多种容错技术"><a href="#3-组合多种容错技术" class="headerlink" title="3. 组合多种容错技术"></a>3. 组合多种容错技术</h5><ul>
<li><strong>时间冗余</strong>：在TMR系统中加入时间冗余技术，如回滚恢复或检查点，以便在出现错误时回到之前的状态。</li>
<li><strong>软件冗余</strong>：在不同的模块上运行不同版本的软件或算法（N版本编程），以降低软件故障的影响。</li>
</ul>
<h5 id="4-故障隔离与恢复"><a href="#4-故障隔离与恢复" class="headerlink" title="4. 故障隔离与恢复"></a>4. 故障隔离与恢复</h5><ul>
<li><strong>故障隔离</strong>：在系统中加入故障隔离机制，如隔离故障模块，阻止其影响其他模块。</li>
<li><strong>定期测试与维护</strong>：定期进行系统测试，以确保每个模块都在正常工作状态，并进行必要的维护和更新。</li>
</ul>
<h5 id="5-使用先进算法"><a href="#5-使用先进算法" class="headerlink" title="5. 使用先进算法"></a>5. 使用先进算法</h5><ul>
<li><strong>预测性故障处理</strong>：使用人工智能或机器学习算法来预测故障并提前处理，以减少故障的影响。</li>
<li><strong>比较和分析系统行为</strong>：对系统的行为进行实时分析，比较其与预期行为的差异来预测潜在的故障。</li>
</ul>
<p>通过结合这些改进措施，可以提高TMR系统的可靠性和容错能力，减少判决错误的可能性。然而，每种措施都可能带来额外的成本和复杂性，因此需要根据应用的关键性和可用资源来平衡设计选择。</p>
<h3 id="RAID-56重要"><a href="#RAID-56重要" class="headerlink" title="RAID(56重要)"></a>RAID(56重要)</h3><p>廉价磁盘冗余阵列（Redundant Arrays of Inexpensive Disks），以多个低成本磁盘构成磁盘子系统，提供比单一硬盘更完备的可靠性和高性能</p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231220230358791.png" alt="image-20231220230358791"></p>
<p><strong>数据基带条阵列（RAID0）</strong></p>
<p>分块无校验型，无冗余存储。简单将数据分配到各个磁盘上，不提供真正容错性。带区化至少需要2个硬盘，可支持8&#x2F;16&#x2F;32个磁盘</p>
<p>优点</p>
<p>➢ 允许多个小区组合成一个大分</p>
<p>➢ 更好地利用磁盘空间，延长磁盘寿命</p>
<p>➢ 多个硬盘并行工作，提高了读写性能</p>
<p>缺点</p>
<p>➢ 不提供数据保护，任一磁盘失效，数据可能丢失，且不能自动恢复。</p>
<p><strong>磁盘镜象（RAID1）</strong></p>
<p>每一组盘至少两台，数据同时以同样的方式写到两个盘上，两个盘互为镜象。磁盘镜象可以是分区镜象、全盘镜象。容错方式以空间换取，实施可以采用镜象或者双工技术</p>
<p>优点</p>
<p>➢ 可靠性高，策略简单，恢复数据时不必停机。</p>
<p>缺点</p>
<p>➢ 有效容量只有总容量的1&#x2F;2，利用率50%。由于磁盘冗余，硬件开销较大，成本较高</p>
<p><strong>循环奇偶校验阵列（RAID5）</strong></p>
<p>与RAID4类似，但校验数据不固定在一个磁盘上，而是循环地依次分布在不同的磁盘上，也称块间插入分布校验。它是目前采用最多、最流行的方式，至少需要3个硬盘。</p>
<p>优点</p>
<p>➢ 校验分布在多个磁盘中，写操作可以同时处理；</p>
<p>➢ 为读操作提供了最优的性能；</p>
<p>➢ 一个磁盘失效，分布在其他盘上的信息足够完成数据重建 </p>
<p>缺点</p>
<p>➢ 数据重建会降低读性能；</p>
<p>➢ 每次计算校验信息，写操作开销会增大，是一般存储操作时间的3倍。</p>
<p><strong>二维奇偶校验阵列（RAID6）</strong></p>
<p>RAID6是指带有两种分布存储的检验信息的磁盘阵列，它是对RAID5的扩展，主要是用于要求数据绝对不能出错的场合，使用了二种奇偶校验方法，需要N+2个磁盘</p>
<h3 id="纠删码（Erasure-Code）"><a href="#纠删码（Erasure-Code）" class="headerlink" title="纠删码（Erasure Code）"></a>纠删码（Erasure Code）</h3><p>是一种前向错误纠正技术（Forward ErrorCorrection，FEC），主要应用在网络传输中避免包的丢失，存储系统利用它来提高存储可靠性。相比多副本复制而言， 纠删码能够以更小的数据冗余度获得更高数据可靠性， 但编码方式较复杂，需要大量计算 。</p>
<p>EC的定义：Erasure Code是一种编码技术，它可以将n份原始数据，增加m份数据，并能通过n+m份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。</p>
<h2 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h2><h3 id="什么是计算机取证"><a href="#什么是计算机取证" class="headerlink" title="什么是计算机取证"></a>什么是计算机取证</h3><p><strong>计算机取证不过是简单地将计算机调查和分析技术应用于对潜在的、有法律效力的证据的确定与获取上。</strong></p>
<p><strong>计算机取证是使用软件和工具，按照一些预先定义的程序全面地检查计算机系统，以提取和保护有关计算机犯罪的证据。</strong></p>
<p>综合：<strong>计算机取证是指对能够为法庭接受的、足够可靠和有说服性的，存在于计算机和相关外设中的计算机证据的确认、保护、提取和归档的过程。</strong></p>
<h3 id="潜在证据"><a href="#潜在证据" class="headerlink" title="潜在证据"></a>潜在证据</h3><p><strong>证据通常都是在可以存储数据的硬件驱动器、存储设备或媒体中发现的。</strong></p>
<p>计算机取证是指使用科学方法和技术收集、保存、分析计算机系统、网络、通信设备中的数据，以作为法庭上的证据。在计算机取证过程中，潜在证据可能包括各种形式的数据和信息，这些数据可能存储在不同的地方，包括但不限于：</p>
<ol>
<li><p><strong>硬盘驱动器：</strong> 存储在硬盘上的文件、删除的文件、隐藏或未分配的磁盘空间中的数据、日志文件、系统恢复点和磁盘映像。</p>
</li>
<li><p><strong>移动存储设备：</strong> 如USB闪存驱动器、外部硬盘、SD卡、手机及其他便携式存储媒介中的数据。</p>
</li>
<li><p><strong>操作系统日志：</strong> 包括系统事件日志、安全日志、应用程序日志，它们记录了用户活动、系统错误、登录尝试和其他系统事件。</p>
</li>
<li><p><strong>网络设备：</strong> 如路由器、交换机、防火墙的日志文件，以及其他网络传输数据，可能包括网络流量、IP地址、MAC地址、传输的数据包等。</p>
</li>
<li><p><strong>云存储和服务：</strong> 云端的数据，包括在线文档、电子邮件、日历、通讯录、上传的照片和视频等。</p>
</li>
<li><p><strong>电子邮件：</strong> 电子邮件内容、附件、邮件头信息、已删除的邮件等。</p>
</li>
<li><p><strong>浏览器历史记录：</strong> 包括网页浏览历史、下载历史、书签、Cookies、缓存文件等。</p>
</li>
<li><p><strong>社交媒体：</strong> 社交网络上的帐户信息、聊天记录、发布的内容、好友列表、登录时间等。</p>
</li>
<li><p><strong>软件和应用程序：</strong> 安装在系统上的软件和应用程序可能包含有关用户行为的信息。</p>
</li>
<li><p><strong>内存：</strong> RAM中可以找到许多运行时的信息，如正在或最近运行的程序、系统状态、打开的文件等。</p>
</li>
<li><p><strong>元数据：</strong> 文件和文档的元数据，如创建时间、最后修改时间、作者信息等。</p>
</li>
<li><p><strong>加密的数据：</strong> 加密文件、硬盘或设备，需要破解密码才能访问其中的数据。</p>
</li>
<li><p><strong>日志文件：</strong> 各种系统和应用程序生成的日志文件记录了许多系统事件和用户活动。</p>
</li>
<li><p><strong>注册表信息：</strong> Windows注册表包含了系统和应用程序的配置信息，用户活动和设备使用记录。</p>
</li>
</ol>
<p>在进行计算机取证时，不仅要收集上述信息，还需要保持证据的完整性和可用性。这通常涉及到创建原始数据的完整副本（即制作镜像）并使用哈希值来保证数据未被更改。取证分析人员应该遵循严格的程序和协议，确保证据链完整且在法律程序中可以接受。</p>
<h2 id="操作系统安全"><a href="#操作系统安全" class="headerlink" title="操作系统安全"></a>操作系统安全</h2><h3 id="操作系统安全的概念"><a href="#操作系统安全的概念" class="headerlink" title="操作系统安全的概念"></a>操作系统安全的概念</h3><p>操作系统安全是指一系列的措施和技术，旨在保护操作系统免受未经授权访问、使用、泄露、破坏、修改或拒绝服务攻击。操作系统是计算机硬件和用户之间的接口，它管理着计算机资源和应用程序的执行。由于操作系统在计算机网络中的核心作用，其安全性对整个计算系统的安全至关重要。（chat）</p>
<h3 id="操作系统面临的一个主要威胁⎯⎯隐通道：时间隐通道和存储隐通道"><a href="#操作系统面临的一个主要威胁⎯⎯隐通道：时间隐通道和存储隐通道" class="headerlink" title="操作系统面临的一个主要威胁⎯⎯隐通道：时间隐通道和存储隐通道"></a>操作系统面临的一个主要威胁⎯⎯隐通道：时间隐通道和存储隐通道</h3><p><strong>Lampson关于隐通道的定义</strong>按常规不会用于传送信息但却被利用于泄漏信息的信息传送渠道。</p>
<p><strong>TCSEC关于隐通道的定义</strong>可以被进程利用来以违反系统安全策略的方式进行非法传输信息的通信通道</p>
<p>➢ 存储隐通道<br>❖ 限制：进程P不能与进程Q通信。<br>❖ 共享：文件系统。<br>❖ 目的：进程P想发送一条消息给进程Q。<br>❖ 一种使用存储隐通道的方法：<br>    ➢ 进程P在两进程都能读的一个目录中创建一个名为“send”的文件<br>    ➢ 进程Q要读消息前，Q删除文件send➢ 进程P创建一个文件，命名为0bit或者1bit来代表要传输的比特；<br>    ➢ 进程Q记录这个比特，并删除这个文件<br>    ➢ …<br>    ➢ 最后进程P创建一个名为“end”的文件。通信结束。</p>
<p>➢ 时间隐通道</p>
<p>❖ 针对KVM&#x2F;370系统的研究发现，可以基于两个虚拟机接收的CPU时间片来建立隐通道<br>    ➢ 若发送方想要发送比特0，则立即释放CPU<br>    ➢ 否则它将使用全部的时间片<br>    ➢ 接收方通过获得CPU的速度可以推断出前者发送的是0还是1<br>❖ 共享资源：CPU时间</p>
<h3 id="基于活动目录的域管理模式（提供一种集中的资源管理模式）：域，域控制器，OU-等概念"><a href="#基于活动目录的域管理模式（提供一种集中的资源管理模式）：域，域控制器，OU-等概念" class="headerlink" title="基于活动目录的域管理模式（提供一种集中的资源管理模式）：域，域控制器，OU 等概念"></a>基于活动目录的域管理模式（提供一种集中的资源管理模式）：域，域控制器，OU 等概念</h3><p><strong>活动目录（Active Directory，缩写为AD）</strong>是微软公司开发的一种目录服务，用于Windows域网络。它主要提供授权和认证的服务，使用LDAP（轻量级目录访问协议）、Kerberos和DNS等标准协议。活动目录允许管理员在网络范围内管理权限和控制对网络资源的访问。</p>
<h4 id="域"><a href="#域" class="headerlink" title="域"></a><strong>域</strong></h4><p><strong>就是共享用户账号、计算机账号和安全策略的计算机集合</strong></p>
<p><strong>域是一个安全边界</strong>：资源在一个域中参与共享。</p>
<p>域中集中存储用户账号的计算机就是域控制器，域控制器存储着目录数据并管理用户域的交互关系，包括用户登录过程、身份验证和目录搜索等。</p>
<h4 id="活动目录和域控制器"><a href="#活动目录和域控制器" class="headerlink" title="活动目录和域控制器"></a><strong>活动目录和域控制器</strong></h4><p><strong>一个域中可有一个或多个域控制器，各域控制器间可以相互复制活动目录</strong></p>
<h4 id="组织单元-（OU）"><a href="#组织单元-（OU）" class="headerlink" title="组织单元 （OU）"></a>组织单元 （OU）</h4><p>OU是一种类型的目录对象⎯⎯容器，其作用主要用来委派对用户、组及资源集合的管理权限<br>    ◼ 控制用户&#x2F;组对资源的访问<br>    ◼ 建立&#x2F;应用组策略对象<br>    ◼ 实现管理委派<br>    ◼ 组织具有公共属性的对象，如打印机</p>
<h3 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h3><p><strong>组策略GPMC</strong>⎯⎯“一对多”的管理</p>
<p>组策略是Windows Server 2003操作系统中提供的一种重要的更新和配置管理技术。<br>     系统管理员使用组策略来为计算机和用户组管理桌面配置指定的选项<br>     组策略很灵活，它包括如下的一些选项：基于注册表的策略设置、安全设置、软件安装、脚本、计算机启动与关闭、用户登录和注销，文件重定向等<br>     Windows Server 2003包括几百种可以配置的组策略设置。组策略设置允许企业管理员通过增强和控制用户桌面来减少总的开销</p>
<p>• 策略提供大量定制桌面的管理<br>• 组策略管理控制台（GPMC）让管理工作更简单<br>• RsOP得到组策略应用的结果<br>• 主要优势：<br>• 降低管理、支持与培训成本<br>• 提升用户工作效率<br>• 允许极大量的定制项目 – 其扩展性不会牺牲定制的灵活性</p>
<h1 id="2-基本原理"><a href="#2-基本原理" class="headerlink" title="2. 基本原理"></a>2. 基本原理</h1><h2 id="信息系统概论-1"><a href="#信息系统概论-1" class="headerlink" title="信息系统概论"></a>信息系统概论</h2><h3 id="针对“秒杀”及百万级并发等情况的架构设计，需要采用的关键技术"><a href="#针对“秒杀”及百万级并发等情况的架构设计，需要采用的关键技术" class="headerlink" title="针对“秒杀”及百万级并发等情况的架构设计，需要采用的关键技术"></a>针对“秒杀”及百万级并发等情况的架构设计，需要采用的关键技术</h3><p><strong>秒杀架构设计思路</strong></p>
<p><strong>将请求拦截在系统上游，降低下游压力：</strong>秒杀系统特点是并发量极大，但实际秒杀成功的请求数量却很少，所以如果不在前端拦截很可能造成数据库读写锁冲突，甚至导致死锁，最终请求超时。</p>
<p><strong>充分利用缓存：</strong>利用缓存可极大提高系统读写速度。</p>
<p><strong>消息中间件：</strong>消息队列可以削峰，将拦截大量并发请求，这是一个异步处理过程，后台业务根据自己的处理能力，从消息队列中主动的拉取请求消息进行业务处理。</p>
<p><strong>限流，削峰，异步处理，内存缓存，可拓展</strong></p>
<p><strong>关键技术：</strong></p>
<ol>
<li><p><strong>负载均衡</strong>：通过使用负载均衡器分散流量至多个服务器，可以提高系统的处理能力</p>
</li>
<li><p><strong>分布式缓存</strong>：使用如Redis或Memcached这样的分布式缓存系统可以极大地减少数据库的压力，通过缓存热点数据来快速响应用户请求。</p>
</li>
<li><p><strong>数据库分离</strong>：将读操作和写操作分离，通过读写分离和数据库集群来提高数据库的并发处理能力。</p>
</li>
<li><p><strong>消息队列</strong>：引入消息队列，可以平衡负载和解耦服务，通过异步处理来提高系统的响应速度和吞吐量。</p>
</li>
<li><p><strong>限流与降级</strong>：通过限流算法防止系统超载，确保系统稳定性。在高流量情况下，及时的服务降级也很关键。</p>
</li>
<li><p><strong>数据分片与分区</strong>：对数据库进行水平分区或使用分布式数据库，可将数据分散在不同的节点上，减少单点负载。</p>
</li>
<li><p><strong>服务的无状态设计</strong>：确保服务无状态，这样可以无缝扩展服务实例以处理更多的并发请求。</p>
</li>
<li><p><strong>CDN</strong>：使用内容分发网络（CDN）可以将静态资源缓存到离用户更近的地方，减少主服务器的负担。</p>
</li>
<li><p><strong>动静分离</strong>：通过将动态内容和静态内容分开处理，可以提高处理速度和效率。</p>
</li>
<li><p><strong>弹性伸缩</strong>：云服务提供了基于需求自动扩展和缩减服务器实例数量的能力，可以根据流量的实时变化来调整资源。</p>
</li>
<li><p><strong>数据库优化</strong>：包括数据库索引优化、查询优化和合理的数据库架构设计，以减少查询时间和提高效率。</p>
</li>
<li><p><strong>应用性能监控（APM）</strong>：使用各种监控工具来实时监控应用程序的性能，快速定位并解决性能瓶颈问题。</p>
</li>
</ol>
<h2 id="信息系统安全概论-1"><a href="#信息系统安全概论-1" class="headerlink" title="信息系统安全概论"></a>信息系统安全概论</h2><h3 id="信息系统为什么是脆弱的？"><a href="#信息系统为什么是脆弱的？" class="headerlink" title="信息系统为什么是脆弱的？"></a>信息系统为什么是脆弱的？</h3><p><strong>硬件组件</strong></p>
<p>信息系统硬件组件的安全隐患多来源于设计，主要表现为物理安全方面的问题。</p>
<p><strong>软件组件</strong></p>
<p>软件组件的安全隐患来源于设计和软件工程中的问题。</p>
<p>➢ 漏洞</p>
<p>➢ 不必要的功能冗余引起安全脆弱性；</p>
<p>➢ 未按安全等级要求进行模块化设计，安全等级不能达到预期</p>
<p><strong>网络和通信协议</strong></p>
<p>➢ TCP&#x2F;IP协议族本身的缺陷</p>
<p>➢ 基于TCP&#x2F;IP协议Internet的安全隐患</p>
<p>• 缺乏对用户身份的鉴别</p>
<p>• 缺乏对路由协议的鉴别认证</p>
<p>• TCP&#x2F;UDP的缺陷</p>
<h3 id="攻防不对称性及应对思路，拟态主动防御"><a href="#攻防不对称性及应对思路，拟态主动防御" class="headerlink" title="攻防不对称性及应对思路，拟态主动防御"></a>攻防不对称性及应对思路，拟态主动防御</h3><p>攻防不对称性是指在网络安全中，攻击者和防御者所面临的条件和需求不同，进而导致的力量不平衡。具体来说，攻击者只需找到系统中的一个漏洞即可实施攻击，而防御者则需要保护系统的所有潜在脆弱点，这显然是一项更艰巨的任务。</p>
<p>攻防不对称性的特点包括：</p>
<ul>
<li><strong>成本不对称</strong>：攻击者通常花费较少资源就能发起有效攻击，而防御者则需要投入大量资源来防御潜在的多样化攻击。</li>
<li><strong>知识不对称</strong>：攻击者只需要知道特定的漏洞信息就可以发起攻击，而防御者则需要全面了解整个信息系统的安全状况。</li>
<li><strong>倡议不对称</strong>：攻击者可以挑选时间和地点发起攻击，而防御者则需要时刻准备应对意料之外的攻击。</li>
</ul>
<h4 id="应对思路"><a href="#应对思路" class="headerlink" title="应对思路"></a>应对思路</h4><p>在面对攻防不对称性的挑战时，防御者可以采取以下策略来增强安全防御能力：</p>
<ol>
<li><p><strong>分层防御</strong>：通过多层安全措施来保护信息系统，即使攻击者突破了一层防御，其他层次的安全措施仍然可以阻止攻击的进一步发展。</p>
</li>
<li><p><strong>最小权限原则</strong>：只授予用户或系统完成其职责所必需的信息访问权限，以此减少攻击面。</p>
</li>
<li><p><strong>持续监测和审计</strong>：实施实时监控和定期审计，确保对系统的异常行为和安全事件能够及时发现并响应。</p>
</li>
<li><p><strong>定期更新和补丁管理</strong>：确保所有系统和软件都安装了最新的安全更新和补丁。</p>
</li>
<li><p><strong>安全意识教育</strong>：提高组织内部用户的安全意识，减少因用户失误导致的安全事件。</p>
</li>
<li><p><strong>事故响应计划</strong>：制定并实施有效的事故响应计划，以便在发生安全事件时能够迅速采取行动，减轻损失。</p>
</li>
</ol>
<h4 id="拟态主动防御"><a href="#拟态主动防御" class="headerlink" title="拟态主动防御"></a>拟态主动防御</h4><p>拟态防御是一种新型的安全防御技术，其基本思想是通过动态变换系统的攻击面，使攻击者无法准确掌握目标系统的真实状态，从而增加攻击者的不确定性和攻击成本。拟态防御可以通过以下方式实现：</p>
<ul>
<li><strong>动态变换</strong>：定期或根据某种算法自动更改系统配置，如IP地址、端口号、协议等，使攻击者难以确定有效攻击向量。</li>
<li><strong>混淆技术</strong>：在系统中部署虚假的信息和服务，迷惑攻击者，引导其走向陷阱或死胡同。</li>
<li><strong>强化随机性</strong>：采用随机化技术在系统设计和运行中引入不确定性，比如随机分配资源和任务，让攻击路径变得难以预测。</li>
<li><strong>主动应对</strong>：系统能够监测到攻击行为时，主动调整策略或者改变系统行为，对攻击者造成反制。</li>
</ul>
<p>采用拟态防御可以显著提高攻击的难度，从而在一定程度上缓解攻防不对称的问题。然而，这也需要更高级的设计和管理能力，确保系统在变换的过程中不会影响正常服务。</p>
<h3 id="5G-对信息系统安全带来的挑战"><a href="#5G-对信息系统安全带来的挑战" class="headerlink" title="5G 对信息系统安全带来的挑战"></a>5G 对信息系统安全带来的挑战</h3><p>5G网络是第五代移动通信技术，它为用户提供了更高的数据传输速率、更低的延迟和更高的连接密度。尽管这些优点为用户带来了许多便利，但5G技术的引入也给信息系统安全带来了新的挑战：</p>
<ol>
<li><p><strong>更大的攻击面</strong>：5G网络支持更多的设备连接，包括物联网(IoT)设备，这大大扩展了潜在的攻击面。每个设备都可能成为攻击者的目标。</p>
</li>
<li><p><strong>供应链风险</strong>：5G网络涉及复杂的供应链，其中包括多家供应商的设备和软件。供应链的安全弱点可能会影响整个网络。</p>
</li>
<li><p><strong>端到端加密挑战</strong>：随着5G网络对加密和隐私保护的要求提高，确保端到端加密的有效实施变得更加困难。</p>
</li>
<li><p><strong>更高的带宽和低延迟带来的问题</strong>：虽然这些特性改善了用户体验，但它们也使得发起大规模、高速度的攻击（比如DDoS攻击）更加容易。</p>
</li>
<li><p><strong>设备鉴别和管理问题</strong>：随着设备数量的激增，有效地识别和管理这些设备，确保它们都是安全的和符合政策的，变得更加困难。</p>
</li>
<li><p><strong>切片管理的复杂性</strong>：5G网络采用了网络切片技术，为不同的服务需求提供定制化的网络环境。每个切片都需要单独管理，提出了对安全策略和隔离机制的高要求。</p>
</li>
<li><p><strong>移动边缘计算(MEC)的安全性</strong>：5G促进了MEC的发展，将计算能力带到网络边缘靠近用户。这种分散型计算架构带来了数据存储和处理的安全性问题。</p>
</li>
<li><p><strong>物理层和无线接口的威胁</strong>：5G网络的无线接口和物理层也可能面临攻击，例如通过嗅探、欺骗和重放攻击来威胁数据的保密性和完整性。</p>
</li>
</ol>
<h4 id="应对措施"><a href="#应对措施" class="headerlink" title="应对措施"></a>应对措施</h4><p>针对以上挑战，可以采取以下措施来提高5G网络的信息系统安全：</p>
<ul>
<li><strong>增强设备安全</strong>：确保所有接入网络的设备都符合严格的安全标准。</li>
<li><strong>多层安全策略</strong>：实现针对不同网络层次和业务类型的安全策略，包括物理、网络、应用层的安全措施。</li>
<li><strong>身份管理和访问控制</strong>：强化用户和设备的身份管理系统，实施有效的访问控制策略。</li>
<li><strong>网络监控和异常检测</strong>：使用先进的监控工具和机器学习技术来检测异常行为和潜在的安全威胁。</li>
<li><strong>加强供应链安全</strong>：对供应链合作伙伴进行严格的安全审查，确保所有组件都符合安全标准。</li>
<li><strong>安全架构设计</strong>：在设计网络和服务时，将安全作为核心考虑因素。</li>
<li><strong>隔离和随机性</strong>：运用网络切片和虚拟化技术，确保不同服务之间的隔离，以及在安全配置中加入随机性，提高攻击的难度。</li>
</ul>
<h3 id="信息系统安全保障模型：CMM-框架"><a href="#信息系统安全保障模型：CMM-框架" class="headerlink" title="信息系统安全保障模型：CMM 框架"></a>信息系统安全保障模型：CMM 框架</h3><p>在安全技术上，不仅要考虑具体的产品和技术，更要考虑信息系统的安全技术体系架构。</p>
<p>建立相应的安全保障管理体系，形成长效和持续改进的安全管理机制。</p>
<p>建立相应的安全保障管理体系，形成长效和持续改进的安全管理机制。</p>
<p>注重人的安全意识以及安全专业技能和能力等。</p>
<p><strong>安全保障能力维</strong></p>
<p>第一能力级别0：未实施</p>
<p>第二能力级别1：基本执行</p>
<p>第三能力级别2：计划跟踪</p>
<p>第四能力级别3：充分定义</p>
<p>第五能力级别4：量化控制</p>
<p>第六能力级别5：持续改进</p>
<h2 id="安全需求和安全策略-1"><a href="#安全需求和安全策略-1" class="headerlink" title="安全需求和安全策略"></a>安全需求和安全策略</h2><h3 id="常见的自主访问控制模型：访问能力表（CL），访问控制列表（ACL）"><a href="#常见的自主访问控制模型：访问能力表（CL），访问控制列表（ACL）" class="headerlink" title="常见的自主访问控制模型：访问能力表（CL），访问控制列表（ACL）"></a>常见的自主访问控制模型：访问能力表（CL），访问控制列表（ACL）</h3><h4 id="访问能力表（Capability-List-CL）"><a href="#访问能力表（Capability-List-CL）" class="headerlink" title="访问能力表（Capability List, CL）"></a>访问能力表（Capability List, CL）</h4><p>访问能力表是一种基于能力的访问控制机制，它将权限与用户（或用户的程序）关联起来，而不是与资源关联。每个用户都有一个能力列表，指明了该用户能够访问的资源以及相应的访问权限。</p>
<p><strong>主要特点</strong>：</p>
<ul>
<li>每个用户或进程都有一个与之关联的能力列表。</li>
<li>能力列表指出用户可以访问的资源及其访问权限（如读、写、执行）。</li>
<li>能力可以被传递或委托，使得用户可以将某些权限授予其他用户或进程。</li>
</ul>
<p><strong>优势</strong>：</p>
<ul>
<li>权限的分发和管理与具体的资源分离开来。</li>
<li>可以方便地为用户配置一组资源的权限。</li>
<li>更容易实现权限的细粒度控制。</li>
</ul>
<p><strong>劣势</strong>：</p>
<ul>
<li>管理能力列表可能会变得复杂，尤其是在用户数目众多、系统资源广泛的情况下。</li>
<li>如果能力列表被泄露或未受到妥善保护，可能会产生安全风险。</li>
</ul>
<h4 id="访问控制列表（Access-Control-List-ACL）"><a href="#访问控制列表（Access-Control-List-ACL）" class="headerlink" title="访问控制列表（Access Control List, ACL）"></a>访问控制列表（Access Control List, ACL）</h4><p>访问控制列表是一种更为常见的访问控制机制，它将权限与资源关联起来。对于系统中的每个资源（如文件、目录或设备），都有一个对应的ACL，列出了具有访问该资源权限的所有用户及其访问级别。</p>
<p><strong>主要特点</strong>：</p>
<ul>
<li>每个资源（如文件或目录）都有一个与之关联的访问控制列表。</li>
<li>ACL列出了具有访问权限的用户或用户组以及各自的权限。</li>
<li>管理者可以对每个资源设置不同用户或用户组的不同权限。</li>
</ul>
<p><strong>优势</strong>：</p>
<ul>
<li>权限与资源直接关联，容易理解和管理。</li>
<li>适用于需要对单个资源进行精细访问控制的情况。</li>
<li>多数操作系统和文件系统都原生支持ACL。</li>
</ul>
<p><strong>劣势</strong>：</p>
<ul>
<li>对于需要大量权限变更的环境，维护ACL可能会变得繁琐。</li>
<li>对于每个资源，都需要独立设置和维护权限，难以批量操作。</li>
</ul>
<p>总的来说，CL提供了一种以用户或进程为中心的权限管理方式，而ACL则是以资源为中心的权限管理方式。在实现安全策略时，选择哪一种机制取决于特定的应用场景、安全需求以及管理复杂性的考虑。</p>
<h3 id="常见的强制访问控制模型：Bell-LaPadula、BIBA-原理、优缺点及其应用"><a href="#常见的强制访问控制模型：Bell-LaPadula、BIBA-原理、优缺点及其应用" class="headerlink" title="常见的强制访问控制模型：Bell-LaPadula、BIBA 原理、优缺点及其应用"></a>常见的强制访问控制模型：Bell-LaPadula、BIBA 原理、优缺点及其应用</h3><p>Bell-LaPadula和Biba模型都是传统的访问控制模型，旨在保护信息系统的安全。这两个模型是为了不同的安全目标而设计的，分别关注保密性和完整性。</p>
<h3 id="Bell-LaPadula模型"><a href="#Bell-LaPadula模型" class="headerlink" title="Bell-LaPadula模型"></a>Bell-LaPadula模型</h3><p><strong>原理</strong>:<br>Bell-LaPadula模型是第一个用于计算机安全性的形式数学模型，主要关注保护数据的保密性。它是在军事和政府环境中应对机密信息泄露问题而创建的。Bell-LaPadula模型通过以下两个核心规则来实现保密性目标：</p>
<ol>
<li><p><strong>简单安全性属性（Simple Security Property，也称为”no read up”，NRU）</strong>:<br>用户不得读取高于其安全级别的数据，防止泄露敏感信息。</p>
</li>
<li><p><strong>星形安全性属性（Star Property，也称为”no write down”，NWD）</strong>:<br>用户不得写入低于其安全级别的数据，防止敏感信息流向较低安全级别。</p>
<p>BLP 保密模型基于两种规则来保障数据的机密度与敏感度：</p>
<p>➢ 不上读（NRU）⎯⎯主体不可读安全级别高于它的数据</p>
<p>➢ 不下写（NWD）⎯⎯主体不可写安全级别低于它的数据</p>
</li>
</ol>
<p><strong>优点</strong>:</p>
<ul>
<li>提供了明确的安全性规则，易于实施在需要严格访问控制的环境中。</li>
<li>对于保密性要求非常严格的系统，如军事或政府秘密项目，模型提供了坚实的理论基础。</li>
</ul>
<p><strong>缺点</strong>:</p>
<ul>
<li>过分强调安全性，可能会限制信息的合法共享和灵活性。</li>
<li>不处理数据完整性和可用性问题。</li>
</ul>
<p><strong>应用</strong>:<br>Bell-LaPadula模型主要适用于需要严格保密性控制的环境，例如军事、情报和政府部门的高安全级别系统。</p>
<h3 id="Biba模型"><a href="#Biba模型" class="headerlink" title="Biba模型"></a>Biba模型</h3><p><strong>原理</strong>:<br>Biba模型是另一种经典的安全性模型，它的设计目的是保护数据的完整性，防止未授权的信息修改。它通过以下两个主要的规则来实施：</p>
<ol>
<li><p><strong>简单完整性属性（Simple Integrity Property，也称为”no write up”，NWU）</strong>:<br>用户不得写入高于其安全级别的数据，防止将错误或低质量的信息传递到更高的完整性级别。</p>
</li>
<li><p><strong>星形完整性属性（Star Property，也称为”no read down”，NRD）</strong>:<br>用户不得读取低于其安全级别的数据，以免受到低质量数据的影响。</p>
<p>BIBA模型基于两种规则来保障数据的完整性的保密性：</p>
<p>➢ <strong>不下读（NRU）属性主体不能读取安全级别低于它的数据</strong></p>
<p>➢<strong>不上写（NWD）属性主体不能写入安全级别高于它的数据</strong></p>
</li>
</ol>
<p><strong>优点</strong>:</p>
<ul>
<li>强调了数据的完整性和一致性。</li>
<li>适用于需要保持数据不变性和准确性的应用场景。</li>
</ul>
<p><strong>缺点</strong>:</p>
<ul>
<li>与Bell-LaPadula模型类似，Biba也不处理系统的可用性问题。</li>
<li>在实际中可能会限制数据的正常使用和共享。</li>
</ul>
<p><strong>应用</strong>:<br>Biba模型适用于那些对数据完整性要求极高的场所，如银行系统、医疗记录系统和任何需要确保数据不被未经授权篡改的环境。</p>
<p>总的来说，Bell-LaPadula模型和Biba模型各自针对信息系统安全的不同方面提供了理论框架和保护措施。然而，它们在现代信息系统中的应用可能受限于其在灵活性和完整性（Bell-LaPadula）或保密性（Biba）方面的局限性。实际应用中，可能需要结合其他模型和策略，如Clark-Wilson模型（数据完整性和商业决策的正确性）或角色基访问控制（RBAC）模型（基于用户角色的权限分配），以满足现代信息系统的多样性安全需求。</p>
<p>从这两个属性来看，BIBA与BLP模型的两个属性是相反的：</p>
<p>➢ BLP模型提供保密性；</p>
<p>➢ BIBA模型对于数据的完整性提供保障。</p>
<h3 id="安全策略如何应用到防火墙等安全设备中"><a href="#安全策略如何应用到防火墙等安全设备中" class="headerlink" title="安全策略如何应用到防火墙等安全设备中"></a>安全策略如何应用到防火墙等安全设备中</h3><p><strong>Internet</strong>上用户的安全级别为“公开”，依照<strong>BIBA</strong>模型，Web服务器上数据的完整性将得</p>
<p>到保障，<strong>Internet</strong>上的用户只能读取服务器上的数据而不能更改它。因此，任何<strong>POST</strong>操作</p>
<p>将被拒绝。</p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231220191040383.png" alt="image-20231220191040383"></p>
<h2 id="信息系统的风险评估-1"><a href="#信息系统的风险评估-1" class="headerlink" title="信息系统的风险评估"></a>信息系统的风险评估</h2><h3 id="风险处置策略"><a href="#风险处置策略" class="headerlink" title="风险处置策略"></a>风险处置策略</h3><p><strong>降低风险（Reduce Risk）</strong></p>
<p>采取适当的控制措施来降低风险，包括技术手段和管理手段，如安装防火墙，</p>
<p>杀毒软件，或是改善不规范的工作流程、制定业务连续性计划，等等。</p>
<p><strong>避免风险（Avoid Risk）</strong></p>
<p>通过消除可能导致风险发生的条件来避免风险的发生，如将公司内外网隔离</p>
<p>以避免来自互联网的攻击，或是将机房安置在不可能造成水患的位置，等等。</p>
<p><strong>转移风险（Transfer Risk)</strong></p>
<p>将风险全部或者部分地转移到其他责任方，例如购买商业保险。</p>
<p><strong>接受风险（Accept Risk）</strong></p>
<p>在实施了其他风险应对措施之后，对于残留的风险，可以有意识地选择接受。</p>
<h3 id="信息系统安全风险计算模型"><a href="#信息系统安全风险计算模型" class="headerlink" title="信息系统安全风险计算模型"></a>信息系统安全风险计算模型</h3><p>风险计算模型是对通过风险分析计算风险值过程的抽象，它主要包括资产评估、威胁评估、脆弱性评估。</p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231220192309588.png" alt="image-20231220192309588"><img src="D:\my_data\blog\zyhblog-img\image-20231220192334775.png" alt="image-20231220192334775"><em><strong>*资产等级计算公式*</strong></em></p>
<p>AV&#x3D;F(AC, AI, AA)</p>
<p>Asset Value 资产价值</p>
<p>Asset Confidentiality 资产保密性赋值</p>
<p>Asset Integrity 资产完整性赋值</p>
<p>Asset Availability 资产可用性赋值</p>
<p>例1：AV&#x3D;MAX(AC, AI, AA)</p>
<p>例2：AV&#x3D;AC+AI+AA</p>
<p>例3：AV&#x3D;AC×AI×AA</p>
<h4 id="威胁来源列表"><a href="#威胁来源列表" class="headerlink" title="*威胁来源列表*"></a><em><strong>*威胁来源列表*</strong></em></h4><table>
<thead>
<tr>
<th>来源</th>
<th></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>环境因素</td>
<td></td>
<td>断电、静电、灰尘、潮湿、温度、鼠蚁虫害、电磁干扰、洪灾、火灾、地震、意外 事故等环境危害或自然灾害，以及软件、硬件、数据、通信线路等方面的故障</td>
</tr>
<tr>
<td>人为因素</td>
<td>恶意人员</td>
<td>不满的或有预谋的内部人员对信息系统进行恶意破坏；</td>
</tr>
<tr>
<td>采用自主或内外勾结的方式盗窃机密信息或进行篡改，获取利益外部人员利用信息系统的脆弱性,对网络或系统的机密性、完整性和可用性进行破坏，以获取利益或炫耀能力</td>
<td></td>
<td></td>
</tr>
<tr>
<td>人为因素</td>
<td>非恶意人员</td>
<td>内部人员由于缺乏责任心，或者由于不关心和不专注，或者没有遵循规章制度和操作流程而导致故障或信息损坏；</td>
</tr>
<tr>
<td>内部人员由于缺乏培训、专业技能不足、不具备岗 位技能要求而导致信息系统故障或被攻击</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="风险计算方法"><a href="#风险计算方法" class="headerlink" title="风险计算方法"></a><strong>风险计算方法</strong></h4><p>$$风险值&#x3D;R(A, T, V) &#x3D; R(L(T, V), F(Ia,Va))$$</p>
<p><strong>R</strong>安全风险计算函数</p>
<p><strong>A</strong>资产</p>
<p><strong>T</strong>威胁</p>
<p><strong>V</strong>脆弱性</p>
<p><strong>Ia</strong>安全事件所作用的资产价值</p>
<p><strong>Va</strong> 脆弱性严重程度</p>
<p><strong>L</strong>威胁利用资产的脆弱性导致安全事件发生的可能性</p>
<p><strong>F</strong>安全事件发生后产生的损失</p>
<h2 id="信息系统等级保护-1"><a href="#信息系统等级保护-1" class="headerlink" title="信息系统等级保护"></a>信息系统等级保护</h2><h3 id="等级保护主要工作流程，定级的流程，备案的流程，备案地点"><a href="#等级保护主要工作流程，定级的流程，备案的流程，备案地点" class="headerlink" title="等级保护主要工作流程，定级的流程，备案的流程，备案地点"></a>等级保护主要工作流程，定级的流程，备案的流程，备案地点</h3><p><img src="D:\my_data\blog\zyhblog-img\image-20231220213058592.png" alt="image-20231220213058592"></p>
<h4 id="等级保护主要工作流程"><a href="#等级保护主要工作流程" class="headerlink" title="*等级保护主要工作流程*"></a><em><strong>*等级保护主要工作流程*</strong></em></h4><p>1 <strong>定级  定级是等级保护的首要环节</strong></p>
<p>2 <strong>备案 备案是等级保护的核心</strong></p>
<p>3 <strong>建设整改 建设整改是等级保护工作落实的关键</strong></p>
<p>4 <strong>等级测评 等级测评是评价安全保护状况的方法</strong></p>
<h4 id="定级流程"><a href="#定级流程" class="headerlink" title="定级流程"></a><strong>定级流程</strong></h4><p><img src="D:\my_data\blog\zyhblog-img\image-20231220213206332.png" alt="image-20231220213206332"></p>
<h4 id="备案的流程"><a href="#备案的流程" class="headerlink" title="备案的流程"></a><strong>备案的流程</strong></h4><p>运营、使用单位在确定等级后到所在地的市级及以上公安机关备案。</p>
<p>• 新建二级及以上信息系统在投入运营后30日内、已运行的二级及以上信息系统在等级确定30日内备案。</p>
<p>• 公安机关对信息系统备案情况进行审核，对符合要求的在10个工作日内颁发等级保护备案证明。</p>
<p>• 对于定级不准的，应当重新定级、重新备案。对于重新定级的，公安机关一般会建议备案单位组织专家进行重新定级评审，并报上级主管部门审批。</p>
<h4 id="备案地点"><a href="#备案地点" class="headerlink" title="备案地点"></a><strong>备案地点</strong></h4><p><strong>二级以上信息系统</strong></p>
<p>由信息系统运营使用单位(备案单位)到地市级以上公安机关网络安全保卫部门办理备案手续，填写《信息系统安全等级保护备案表》 。</p>
<p><strong>隶属于省级的备案单位</strong></p>
<p>其跨地（市）联网运行的信息系统，由省级公安机关网络安全保卫部门受理备案</p>
<p><strong>隶属于中央的在京单位</strong></p>
<p>其跨省或者全国统一联网运行并由主管部门统一定级的信息系统，由主管部门向公安部备案。</p>
<p><strong>跨省或者全国统一联网运行的信息系统</strong></p>
<p>在各地运行、应用的分支系统，由所在地地市级以上公安机关网络安全保卫部门受理备案。</p>
<p><strong>各部委统一定级信息系统在各地的分支系统</strong></p>
<p>即使是上级主管部门定级的，也要到当地公安网络安全保卫部门备案。</p>
<h3 id="等级保护主要工作：定级备案，建设整改，等级测评，监督检查"><a href="#等级保护主要工作：定级备案，建设整改，等级测评，监督检查" class="headerlink" title="等级保护主要工作：定级备案，建设整改，等级测评，监督检查"></a>等级保护主要工作：定级备案，建设整改，等级测评，监督检查</h3><p>等级保护制度是针对信息系统安全的一系列规定和措施，旨在确保信息系统达到一定的安全保护等级。这个制度通常涵盖了信息系统的定级备案、建设整改、等级测评和监督检查等主要工作。接下来，我会逐一详细介绍这些工作。</p>
<h4 id="1-定级备案"><a href="#1-定级备案" class="headerlink" title="1. 定级备案"></a>1. 定级备案</h4><p>在定级备案阶段，信息系统的管理者或者所有者需要对系统进行安全等级的划分。这个过程包括：</p>
<ul>
<li><strong>安全等级的划分</strong>：依据信息系统的业务特点和安全需求，以及系统可能面临的安全威胁，将系统分类到不同的安全等级中。</li>
<li><strong>风险评估</strong>：对系统可能受到的各种威胁和脆弱性进行评估，以确定系统应达到的安全保护等级。</li>
<li><strong>文件备案</strong>：将信息系统的安全等级和相关的风险评估结果报告给相关的监管机构，进行备案。</li>
</ul>
<h4 id="2-建设整改"><a href="#2-建设整改" class="headerlink" title="2. 建设整改"></a>2. 建设整改</h4><p>一旦完成了系统的定级工作，接下来就是根据评定的安全等级来进行系统的安全建设或者整改。这个阶段的工作包括：</p>
<ul>
<li><strong>安全措施的落实</strong>：根据信息系统的安全等级，实施必要的安全保护措施，如物理安全、网络安全、主机安全、应用安全、数据安全和紧急响应等。</li>
<li><strong>制定安全管理制度</strong>：包括安全操作规程、安全事件处理流程、用户管理规定等。</li>
<li><strong>人员培训</strong>：对管理人员、操作人员进行安全意识和技能培训，确保相关人员能够理解和遵守安全规程。</li>
<li><strong>系统整改</strong>：针对安全评估中发现的问题，进行必要的技术整改和管理整改。</li>
</ul>
<h4 id="3-等级测评"><a href="#3-等级测评" class="headerlink" title="3. 等级测评"></a>3. 等级测评</h4><p>等级测评是对信息系统实施的安全保护措施进行评价的过程，以确保这些措施能够满足既定的安全需求。这个阶段包括：</p>
<ul>
<li><strong>安全测评</strong>：通过内部检查或者聘请外部专业机构来进行系统的安全测评。</li>
<li><strong>评估报告</strong>：生成测评报告，其中详细说明测评过程、发现的问题以及改进建议。</li>
<li><strong>整改落实</strong>：根据测评报告中的建议，对系统进行进一步的整改。</li>
</ul>
<h4 id="4-监督检查"><a href="#4-监督检查" class="headerlink" title="4. 监督检查"></a>4. 监督检查</h4><p>为了确保信息系统安全保护措施的持续有效，需要进行定期的监督检查。这包括：</p>
<ul>
<li><strong>定期审计</strong>：定期对系统的安全状况进行审计，确保持续遵守安全规程和政策。</li>
<li><strong>监督检查</strong>：监管机构可能会定期进行监督检查，以确保信息系统的安全保护措施得到有效实施。</li>
<li><strong>连续监控</strong>：实施实时监控系统，以便对安全事件做出快速响应。</li>
</ul>
<p>等级保护工作要求信息系统的所有者、管理者和使用者共同参与，它是一个持续的过程，需要随着威胁环境和技术的发展而不断调整和完善。在不同国家和地区，等级保护的具体实施标准和流程可能会有所不同，但上述介绍的核心内容通常是普遍适用的。</p>
<h2 id="信息系统的物理安全-1"><a href="#信息系统的物理安全-1" class="headerlink" title="信息系统的物理安全"></a>信息系统的物理安全</h2><h3 id="环境安全：机房的三度要求，常见的消防设计、防盗措施等"><a href="#环境安全：机房的三度要求，常见的消防设计、防盗措施等" class="headerlink" title="环境安全：机房的三度要求，常见的消防设计、防盗措施等"></a>环境安全：机房的三度要求，常见的消防设计、防盗措施等</h3><p>温度、湿度和洁净度并称为三度，为保证计算机网络系统的正常运行，对机房内的三度都有明确的要求。为使机房内的三度达到规定的要求，空调系统、去湿机、除尘器是必不可少的设备。重要的计算机系统安放处还应配备专用的空调系统，它比公用的空调系统在加湿、除尘等方面有更高的要求</p>
<p><strong>温度：机房温度一般应控制在18～22℃</strong></p>
<p><strong>湿度：相对湿度一般控制在40％～60％为宜</strong></p>
<p><strong>洁净度：尘埃颗粒直径&lt;0.5微米，含尘量&lt;1万颗&#x2F;升</strong></p>
<p>《七氟丙烷（HFC-227ea）洁净气体灭火系统设计规范》</p>
<p><strong>机房防盗要求</strong></p>
<p>视频监视系统是一种更为可靠的防盗设备，能对计算机网络系统的外围环境、操作环境进行实时全程监控。对重要的机房，还应采取特别的防盗措施，如值班守卫、出入口安装金属探测装置等。</p>
<p>在需要保护的重要设备、存储媒体和硬件上贴上特殊标签（如磁性标签），当有人非法携带这些重要设备或物品外出时，检测器就会发出报警信号。</p>
<p>将每台重要的设备通过光纤电缆串接起来，并使光束沿光纤传输，如果光束传输受阻，则自动报警</p>
<h3 id="供电安全：GB-T-2887-2000-规定的三类供电方式，电源防护措施，接地与防雷要求"><a href="#供电安全：GB-T-2887-2000-规定的三类供电方式，电源防护措施，接地与防雷要求" class="headerlink" title="供电安全：GB&#x2F;T 2887-2000 规定的三类供电方式，电源防护措施，接地与防雷要求"></a>供电安全：GB&#x2F;T 2887-2000 规定的三类供电方式，电源防护措施，接地与防雷要求</h3><p><strong>GB&#x2F;T 2887-2000将供电方式分为三类</strong></p>
<p>一类供电 需要建立不间断供电系统。兵工厂、大型钢厂、火箭发射基地、医院等.</p>
<p>二类供电 需要建立带备用的供电系统。</p>
<p>三类供电 按一般用户供电考虑。</p>
<p><strong>电源防护措施</strong></p>
<p>不间断电源</p>
<p>电源相关操作</p>
<p>​		系统接地、正确开关机、电缆连接和卡的插拔、电源要匹配</p>
<p>电源调整器</p>
<p><strong>接地可以为计算机系统的数字电路提供一个稳定的0V参考电位</strong></p>
<h3 id="电磁泄漏产生的原理、电磁泄漏的途径及防护方法"><a href="#电磁泄漏产生的原理、电磁泄漏的途径及防护方法" class="headerlink" title="电磁泄漏产生的原理、电磁泄漏的途径及防护方法"></a>电磁泄漏产生的原理、电磁泄漏的途径及防护方法</h3><p>电磁泄漏指电子设备的杂散电磁能量通过导线或空间向外扩散。</p>
<p>任何处于工作状态的电磁信息设备，如计算机、打印机、复印机、传真机、手机电话等，都存在不同程度的电磁泄漏问题，这是无法摆脱的电磁现象。</p>
<p>如果这些泄漏“夹带”着设备所处理的信息，均可构成了电磁信息泄漏。</p>
<p><strong>电磁泄漏的途径</strong></p>
<p>以电磁波形式的辐射泄漏</p>
<p>电源线、控制线、信号线和地线造成的传导泄漏</p>
<p><strong>铜网式屏蔽室</strong></p>
<p>用于电子设备防电磁干扰、高频医疗设备、雷达产品实验测试等计量检测场所。</p>
<h2 id="信息系统的可靠性-1"><a href="#信息系统的可靠性-1" class="headerlink" title="信息系统的可靠性"></a>信息系统的可靠性</h2><h3 id="失效率的规律，失效率、寿命、可靠度三者之间关系的推导"><a href="#失效率的规律，失效率、寿命、可靠度三者之间关系的推导" class="headerlink" title="失效率的规律，失效率、寿命、可靠度三者之间关系的推导"></a>失效率的规律，失效率、寿命、可靠度三者之间关系的推导</h3><p>失效率（Failure Rate）、寿命（Lifetime）和可靠度（Reliability）是评估产品或系统性能的三个关键指标，并且它们之间存在一定的数学关系。下面是简要推导这些指标之间关系的过程。</p>
<h3 id="失效率（λ）"><a href="#失效率（λ）" class="headerlink" title="失效率（λ）"></a>失效率（λ）</h3><p>失效率通常表示为单位时间内的故障次数的期望值，通常使用“每小时故障数”（Failures per Hour）来表示。对于许多产品来说，失效率随时间的变化而变化，并且可以通过失效密度函数（failure density function）f(t)来描述。</p>
<h3 id="寿命（L）"><a href="#寿命（L）" class="headerlink" title="寿命（L）"></a>寿命（L）</h3><p>寿命通常是指产品或系统正常工作直到发生第一次故障所经历的时间。平均寿命可以通过失效率函数λ(t)来计算，如果λ(t)是恒定的，那么平均寿命就是失效率的倒数（1&#x2F;λ）。</p>
<h3 id="可靠度（R-t-）"><a href="#可靠度（R-t-）" class="headerlink" title="可靠度（R(t)）"></a>可靠度（R(t)）</h3><p>可靠度是指在特定时间t内系统或产品无故障正常工作的概率。它可以通过失效密度函数f(t)和可靠度函数R(t)来描述。可靠度函数是一个从零时刻开始到时间t的累积分布函数（CDF）的补，即：</p>
<p>$$ R(t) &#x3D; 1 - F(t) $$</p>
<p>其中，F(t)是累积分布函数，表示在时间t之前发生故障的概率。F(t)可以通过失效密度函数f(t)积分得到：</p>
<p>$$ F(t) &#x3D; \int_0^t f(x) dx $$</p>
<p>因此，可靠度R(t)也可以通过积分失效率λ(t)来表示：</p>
<p> $$R(t) &#x3D; e^{-\int_0^t \lambda(x) dx} $$</p>
<p>如果失效率是常数λ（即系统处于稳态失效率），则上述关系简化为：</p>
<p>$$ R(t) &#x3D; e^{-\lambda t} $$</p>
<p>所以，如果你知道了系统的失效率，你就可以计算出在任何给定时间t的可靠度。反过来，如果你知道了系统的可靠度函数，你也可以求出平均寿命（即平均无故障工作时间，MTTF），它是失效密度函数f(t)的期望值：</p>
<p>$$ MTTF &#x3D; \int_0^{\infty} t f(t) dt $$</p>
<p>对于恒定失效率的情况，MTTF简化为失效率的倒数：</p>
<p>$$MTTF &#x3D; \frac{1}{\lambda}$$</p>
<p>这些关系和推导基于对失效率和可靠度的连续时间分析。在实际应用中，失效率可能会随时间变化，例如对于新产品可能会遵循所谓的“浴盆曲线”（先下降后上升）。在这种情况下，以上简化的公式可能不适用，需要更复杂的模型来描述失效率随时间的变化。</p>
<h3 id="可靠性模型：串联，并联模型的寿命、可靠度推导"><a href="#可靠性模型：串联，并联模型的寿命、可靠度推导" class="headerlink" title="可靠性模型：串联，并联模型的寿命、可靠度推导"></a>可靠性模型：串联，并联模型的寿命、可靠度推导</h3><h4 id="串联系统"><a href="#串联系统" class="headerlink" title="*串联系统*"></a><em><strong>*串联系统*</strong></em></h4><p>假设第<em>i</em>个部件的寿命为$X_i$，可靠度为$<em>R_i(t)&#x3D;P{X_i &gt;t}，i&#x3D;1, 2, …,n,</em>$第$<em>i</em>$个部件的失效率为$<em>\lambda_i(t)</em>$$，X_1，X_2 ，…，X_n$相互独立。若</p>
<p>初始时刻$<em>t&#x3D;0</em>$，所有部件都是新的，且同时开始工作。</p>
<p>(1) 系统的寿命是： $X&#x3D;min{X_1 ，X_2，…，X_n}$</p>
<p>(2) 系统的可靠度是：</p>
<p>$$ R(t)&#x3D;P{min(X_1 ，X_2，…，X_n)&gt;t}&#x3D;\Pi^n_{i&#x3D;1}R_i(t)\ &#x3D;\Pi^n_{i&#x3D;1}exp{-\int^t_0\lambda_i(u)du} $$</p>
<p>(3) 系统的失效率为：</p>
<p>$$ \lambda(t)&#x3D;-\frac{R’(t)}{R(t)}&#x3D;\sum^n_{i&#x3D;1}\lambda_i(t) $$</p>
<p>(4) 系统的平均寿命为:</p>
<p>$$ MTTF&#x3D;\int^\infty_0R(t)dt&#x3D;\int^\infty_0exp{-\int^t_0\lambda(u)du}dt $$</p>
<p>当$R_i(t)&#x3D;exp{-\lambda_t}，i&#x3D;1, 2, …, n$时（及当第<em>i</em>个部件的命遵从参数为$<em>\lambda_i</em>$的</p>
<p>指数分布时），系统的可靠度和平均寿命为</p>
<p>$$ R(t)&#x3D;exp{-\sum^n_{i&#x3D;1}\lambda_it}\ MTTF&#x3D;\frac{1}{\sum^n_{i&#x3D;1}\lambda_i} $$</p>
<h4 id="并联系统"><a href="#并联系统" class="headerlink" title="*并联系统*"></a><em><strong>*并联系统*</strong></em></h4><p>(1) 系统的寿命是： $X&#x3D;max{X_1，X_2，…，X_n }$</p>
<p>(2) 系统的可靠度是：</p>
<p>$$ R(t)&#x3D;P{max(X_1 ，X_2，…，X_n)&gt;t}\ &#x3D;1-P{max(X_1 ，X_2，…，X_n)\le t } \ &#x3D;1-\Pi^n_{i&#x3D;1}[1-R_i(t)] $$</p>
<p>(3) 系统的平均寿命为：</p>
<p>$$ MTTF&#x3D;\int^\infty_0R(t)dt&#x3D;\sum^n_{i&#x3D;1}\frac{1}{\lambda_i}\ &#x3D;sum_{1\le&lt;i&lt;j\le n}\frac{1}{\lambda_1+\lambda_j}+…+(-1)^{n-1}\frac{1}{\lambda_1+…+\lambda_n} $$</p>
<h3 id="硬件可靠性和软件可靠性的不同"><a href="#硬件可靠性和软件可靠性的不同" class="headerlink" title="硬件可靠性和软件可靠性的不同"></a>硬件可靠性和软件可靠性的不同</h3><p>硬件可靠性和软件可靠性在概念上有一些基本的差异，这些差异主要反映了它们的固有属性和它们出错的本质。</p>
<h4 id="硬件可靠性"><a href="#硬件可靠性" class="headerlink" title="硬件可靠性"></a>硬件可靠性</h4><ol>
<li><strong>物理耗损</strong>：硬件可靠性受到物理组件老化和环境条件（如温度、湿度、机械应力等）的影响，这些因素会导致硬件随时间而退化。</li>
<li><strong>失效率</strong>：硬件的失效率可以通过“浴盆曲线”来描述，即开始时有较高的初期故障率（新品早期失效），然后进入一段低故障率的稳定期（有用寿命期），最后由于磨损和老化进入失效率上升的磨损期。</li>
<li><strong>可预测性</strong>：许多硬件故障是可以预测的，通过定期维护和替换部件可以预防。</li>
<li><strong>冗余设计</strong>：硬件系统经常通过冗余组件来提高可靠性，如RAID系统中的多硬盘冗余，电源和冷却系统的冗余配置等。</li>
<li><strong>测试与质量控制</strong>：硬件的质量可以在生产时通过物理测试来控制和保证。</li>
</ol>
<h4 id="软件可靠性"><a href="#软件可靠性" class="headerlink" title="软件可靠性"></a>软件可靠性</h4><ol>
<li><strong>设计和逻辑错误</strong>：软件故障通常是由设计不当、编程错误、逻辑漏洞等原因引起的，与物理磨损无关。</li>
<li><strong>失效行为</strong>：软件的失效率不遵循物理磨损的模式，软件不会因为时间推移而衰老，但软件的失效通常是由于不断发现的新错误或者在新环境中的不适应。</li>
<li><strong>不确定性和复杂性</strong>：软件系统经常涉及复杂的交互和非确定性的行为，这使得确保软件可靠性成为一项挑战。</li>
<li><strong>更新和补丁</strong>：软件通过更新和补丁程序来修正已知错误，因此，软件的可靠性可以通过软件更新来提高。</li>
<li><strong>测试的限制</strong>：由于软件的复杂性和使用情境的多样性，不可能测试软件的所有可能路径，因此总有未知错误的可能性。</li>
</ol>
<h4 id="综合对比"><a href="#综合对比" class="headerlink" title="综合对比"></a>综合对比</h4><ul>
<li><strong>稳态和动态行为</strong>：硬件通常在一定条件下具有稳定的行为，而软件则更多表现出动态和多变的行为。</li>
<li><strong>故障模式</strong>：硬件故障通常是随机的，而软件故障则是系统性的，一旦触发了软件中的某个错误，通常它总是在相同的条件下发生。</li>
<li><strong>修复方式</strong>：硬件故障的修复可能包括更换或修理物理组件，而软件故障的修复通常是修改代码或配置。</li>
</ul>
<p>总的来说，虽然两者都关注于减少故障并提高系统的整体可靠性，但由于硬件和软件在本质上有所不同，它们的可靠性策略和实施方法也不相同。硬件可靠性更多关注于物理特性和冗余设计，而软件可靠性则更侧重于设计、测试和持续的维护。</p>
<h3 id="软件的四种常见的可靠性模型及其主要思想"><a href="#软件的四种常见的可靠性模型及其主要思想" class="headerlink" title="软件的四种常见的可靠性模型及其主要思想"></a>软件的四种常见的可靠性模型及其主要思想</h3><p><strong>失效时间间隔模型</strong></p>
<p>这类模型最常用的方法是假定第i个失效到第i+1个失效间隔时间服从某一分布，而分布的参数依赖于各间隔时间内程序中的残留错误数。通过测试所得到的失效间隔时间数据来估计模型的参数，由获得的模型可以估算软件的可靠度以及各失效间的平均工作时间等；</p>
<p>另一种方法是把失效间隔时间看作随机过程，然后通过适当的时间序列模型来分析和描述软件的失效过程。这类模型有Jelinski-Moranda的非增长模型 、 Schick-Wolverton 模 型 、 Littlewood-Verrall 的 贝 叶 斯 模 型 和 GoelOkumoto的不完善模型等。</p>
<p><strong>缺陷计数模型</strong></p>
<p>这类模型关心的是在特定的时间间隔内软件的错误数或失效数，并假定故障累计数服从某个己知的随机过程，过程强度是时间的离散或连续函数，根据在给定的测试时间间隔发现的错误数或失效数来估计故障强度、均值等参数。随着错误的不断排除，在单位时间内发现的失效数将不断减少。当时间间隔事先确定时，在每个间隔时间内的失效次数就是随机变量。这类模型有Shooman模型、Musa的执行时间模型、Goel-Okumoto的NHPP模型、Goel的NHPP 模型和Musa-Okumoto的对数泊淞执行时间模型等等。</p>
<p><strong>基于输入域错误</strong></p>
<p>这类模型的基本思路是通过将一组已知的错误人为地植入到一个固有错误总数尚不清楚的程序中，然后在程序的测试中观察并统计发现的植入错误数和程序总的错误数，通过计数的比值估计程序的固有错误总数，从而得到软件可靠度及其有关指标。这类模型的代表是Mills的超几何分布模型。</p>
<p><strong>植入模型的模型</strong></p>
<p>这类模型的基本研究方法是根据程序的使用情况，找出程序可能输入的概率分布，根据这种分布产生一个测试用例的集合。由于得到输入的分布难度较大，一般将输入域划分成等价类，每个等价类与程序的一条执行路径相联。在输入域上随机抽取测试用例，执行相应的程序测试，观测故障，从而推断出各项指标。这类模型以Nelson模型为代表，还有Brown-Lipow的基于输入域模型和Ramamoorthy-Bastani的基于输入域模型。</p>
<h3 id="冗余技术：时间冗余，信息冗余，硬件冗余，软件冗余，三模冗余（硬件冗余）原理及优缺点，软件冗余技术的-N-Version-Programming-和-Recovery-Block-的对比"><a href="#冗余技术：时间冗余，信息冗余，硬件冗余，软件冗余，三模冗余（硬件冗余）原理及优缺点，软件冗余技术的-N-Version-Programming-和-Recovery-Block-的对比" class="headerlink" title="冗余技术：时间冗余，信息冗余，硬件冗余，软件冗余，三模冗余（硬件冗余）原理及优缺点，软件冗余技术的 N-Version Programming 和 Recovery Block 的对比"></a>冗余技术：时间冗余，信息冗余，硬件冗余，软件冗余，三模冗余（硬件冗余）原理及优缺点，软件冗余技术的 N-Version Programming 和 Recovery Block 的对比</h3><p>冗余是提高可靠性、可用性和系统鲁棒性的一种技术，通常通过在系统中加入额外的信息或组件来实现。不同类型的冗余有着不同的实现原理和相应的优缺点。</p>
<h4 id="时间冗余（Time-Redundancy）"><a href="#时间冗余（Time-Redundancy）" class="headerlink" title="时间冗余（Time Redundancy）"></a>时间冗余（Time Redundancy）</h4><p><strong>原理：</strong> 时间冗余通过在系统中多次执行同一操作来提高可靠性。如果第一次执行产生了错误，系统可以回滚到一个已知的良好状态，并重新执行该操作。</p>
<p><strong>优点：</strong></p>
<ul>
<li>不需要额外的硬件，节约成本。</li>
<li>可以动态应对偶发性错误。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>增加了系统的响应时间，降低了性能。</li>
<li>对于持续性错误无效，如由设计缺陷引起的软件错误。</li>
</ul>
<h4 id="信息冗余（Information-Redundancy）"><a href="#信息冗余（Information-Redundancy）" class="headerlink" title="信息冗余（Information Redundancy）"></a>信息冗余（Information Redundancy）</h4><p><strong>原理：</strong> 信息冗余利用额外的数据位（如校验位、奇偶校验、校验和、Hamming码等）来检测和&#x2F;或纠正错误。这在数据传输和存储系统中非常常见。</p>
<p><strong>优点：</strong></p>
<ul>
<li>能够检测或修正数据中的错误，提高数据完整性。</li>
<li>适用于数据通信和存储操作。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>需要额外的存储空间或带宽。</li>
<li>复杂的纠错码可能需要额外的计算资源。</li>
</ul>
<h4 id="硬件冗余（Hardware-Redundancy）"><a href="#硬件冗余（Hardware-Redundancy）" class="headerlink" title="硬件冗余（Hardware Redundancy）"></a>硬件冗余（Hardware Redundancy）</h4><p><strong>原理：</strong> 硬件冗余通过增加备用的物理组件（如备用服务器、电源、网络连接等）来提高系统可靠性。当一个组件失败时，备用组件可以接管其功能。</p>
<p><strong>优点：</strong></p>
<ul>
<li>提供即时的故障切换，提高系统的可用性。</li>
<li>增加的组件可以在检测到故障时即刻接管，减少了系统停机时间。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>成本高昂，因为需要购买额外的硬件设备。</li>
<li>物理空间要求可能增加。</li>
</ul>
<h4 id="软件冗余（Software-Redundancy）"><a href="#软件冗余（Software-Redundancy）" class="headerlink" title="软件冗余（Software Redundancy）"></a>软件冗余（Software Redundancy）</h4><p><strong>原理：</strong> 软件冗余通常指的是运行多个软件副本或使用不同算法实现相同功能，以便在一个副本失败时另一个可以接管。</p>
<p><strong>优点：</strong></p>
<ul>
<li>可以在不更改硬件的情况下增加可靠性。</li>
<li>能够应对软件缺陷和系统性错误。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>如果所有软件副本含有相同的缺陷，那么冗余可能无效。</li>
<li>对资源的需求增加（如内存和CPU时间）。</li>
</ul>
<h4 id="三模冗余（TMR-Triple-Modular-Redundancy）"><a href="#三模冗余（TMR-Triple-Modular-Redundancy）" class="headerlink" title="三模冗余（TMR, Triple Modular Redundancy）"></a>三模冗余（TMR, Triple Modular Redundancy）</h4><p><strong>原理：</strong> TMR是一种特殊类型的硬件冗余，它涉及三个相同的系统或组件并行工作，并通过表决逻辑来确定最终输出。如果一个组件故障，另外两个正确的输出可以通过多数表决得出正确的结果。</p>
<p><strong>优点：</strong></p>
<ul>
<li>可以容忍单个组件的故障而不影响整体系统。</li>
<li>提供了自动故障检测和修正能力。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>高昂的成本，因为需要三倍的硬件。</li>
<li>如果两个组件同时失败，系统可能无法正确决策。</li>
</ul>
<p>冗余的应用需根据系统要求、环境、故障模型以及成本效益分析来选择。在实际应用中，经常会组合使用不同类型的冗余策略来达到最佳的可靠性和成本效益平衡。</p>
<p><strong>“N-Version Programming”（N版本编程）和”Recovery Block”（恢复块）</strong>是两种不同的软件冗余技术，它们的目的都是为了提供容错能力并提高软件的可靠性。尽管目标类似，但它们的设计哲学、实现方式和适用场景有所不同。</p>
<h4 id="N版本编程（N-Version-Programming）"><a href="#N版本编程（N-Version-Programming）" class="headerlink" title="N版本编程（N-Version Programming）"></a>N版本编程（N-Version Programming）</h4><p><strong>原理：</strong></p>
<ul>
<li>N版本编程是通过独立地开发多个软件版本（称为“版本”），这些版本由不同的团队使用不同的工具和技术开发，以实现相同的规格和功能。</li>
<li>运行时，所有版本并行运行，它们的输出通过一个投票系统来决定最终结果。</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>提高了可靠性，因为不太可能所有版本都会在相同的输入下失败。</li>
<li>由于各个版本是独立开发的，它们可能会有不同的错误模式，从而降低全局故障的风险。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>成本高昂，需要多组开发团队和多倍的开发资源。</li>
<li>如果所有版本遵循相同的错误规格或理解，错误可能会在所有版本中重现。</li>
<li>投票机制的设计和实施可能复杂且需要精确。</li>
</ul>
<h4 id="恢复块（Recovery-Block）"><a href="#恢复块（Recovery-Block）" class="headerlink" title="恢复块（Recovery Block）"></a>恢复块（Recovery Block）</h4><p><strong>原理：</strong></p>
<ul>
<li>恢复块在设计上包含了主程序块和一个或多个备用程序块。每个块都试图完成相同的任务，但是如果主程序块失败（通过某种形式的验收测试来判定），控制就会传递到备用块。</li>
<li>备用块按顺序执行，直到一个块通过验收测试或所有块都失败为止。</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>实现简单，只有在主块失败时才会尝试执行备用块，从而节约了资源。</li>
<li>可以在不同级别的粒度上实现，例如，可以在整个程序、单个函数或者代码段的层面上应用恢复块。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>如果验收测试不能准确地检测到所有类型的错误，那么故障可能仍会被传递下去。</li>
<li>需要额外的时间来执行验收测试以及在块之间切换，可能会导致性能开销。</li>
<li>可能会增加编程复杂性，特别是在设计验收测试时。</li>
</ul>
<p><strong>对比：</strong><br>N版本编程和恢复块两种方法在实践中有不同的适用性和效果。N版本编程更注重在不同版本间提供多样性，从而减少共同故障的可能性，但成本高昂且实现复杂。恢复块则侧重于在一个版本失败时有序地退回到备用方案，通常实现起来更简单，成本较低，但其对验收测试的依赖性较高。</p>
<p>选择哪种技术取决于特定应用的需求、可用资源、预期的可靠性水平以及对性能的影响。在安全关键和高可靠性需求的系统中，这些技术或它们的组合可能是提高软件容错能力的有效方法。</p>
<h3 id="RAID5-RAID6-的原理"><a href="#RAID5-RAID6-的原理" class="headerlink" title="RAID5&#x2F;RAID6 的原理"></a>RAID5&#x2F;RAID6 的原理</h3><p>RAID（Redundant Array of Independent Disks，独立磁盘冗余阵列）是一种数据存储虚拟化技术，旨在提高数据存储的可靠性和性能。RAID通过将多块硬盘组合成一个或多个阵列来工作，数据被分散在这些硬盘上，以实现冗余和&#x2F;或提高速度。</p>
<h3 id="RAID-5"><a href="#RAID-5" class="headerlink" title="RAID 5"></a>RAID 5</h3><p><strong>原理：</strong></p>
<ul>
<li>RAID 5至少需要三块硬盘。它通过分布式奇偶校验来提供数据冗余。这意味着每个数据块和一个校验块被分布在不同的硬盘上。</li>
<li>数据和校验信息被分割成等大小的块，在所有驱动器上均匀分布。校验块由当前所有硬盘上的数据块计算得出，使用的是异或（XOR）操作。</li>
<li>如果一个硬盘出现故障，可以通过剩余硬盘上的数据块和校验块，使用XOR运算来重建丢失的数据。</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>提供了单块硬盘冗余，任何一块硬盘故障都能重建数据。</li>
<li>相对于RAID 1，RAID 5在使用更少的额外存储容量提供冗余的同时，还提供了良好的读取性能。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>写入性能由于要更新校验信息而受到影响。</li>
<li>当硬盘出现故障时，重建过程会占用大量的I&#x2F;O资源，并且在此期间，数据处于无冗余保护的状态，如果再有硬盘失败，数据会丢失。</li>
</ul>
<h3 id="RAID-6"><a href="#RAID-6" class="headerlink" title="RAID 6"></a>RAID 6</h3><p><strong>原理：</strong></p>
<ul>
<li>RAID 6类似于RAID 5，但它使用两个独立的奇偶校验块，而不是一个。这样，RAID 6可以容忍两块硬盘同时故障而不丢失数据。</li>
<li>RAID 6至少需要四块硬盘。它采用了更复杂的校验算法，通常是基于两个不同的异或运算。</li>
<li>与RAID 5一样，数据和校验块在所有驱动器上分布。但由于有两个校验块，RAID 6在处理校验时需要更多的计算。</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>相比RAID 5，RAID 6提供了更高的数据冗余，能够容忍两块硬盘同时故障。</li>
<li>适用于大容量硬盘和大型阵列，因为这些环境中硬盘故障的概率更高。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>写入性能损失比RAID 5更大，因为需要计算和写入两个校验块。</li>
<li>由于额外的校验块，RAID 6牺牲了更多的存储容量。</li>
</ul>
<p><strong>总结：</strong><br>RAID 5和RAID 6都是通过在硬盘之间分配数据和校验信息来提供冗余，但它们的冗余级别和性能特点不同。RAID 5在提供冗余和性能方面做了平衡，而RAID 6则更注重在更高的冗余级别。选择哪种RAID阵列取决于用户对性能、存储效率和数据安全的具体需求。</p>
<h3 id="Reed-Solomon-纠删码的基本原理及其在通信和大规模数据存储中的应用"><a href="#Reed-Solomon-纠删码的基本原理及其在通信和大规模数据存储中的应用" class="headerlink" title="Reed-Solomon 纠删码的基本原理及其在通信和大规模数据存储中的应用"></a>Reed-Solomon 纠删码的基本原理及其在通信和大规模数据存储中的应用</h3><p>erasure code有很多种，其中RS code是最基本的一种。RS codes是基于 Galois Field 的一种编码算法，在RS codes中使用$$GF(2^w)$$，其中$$2^w&gt;n+m$$.</p>
<p>因此，对每一段的<em>n</em>份数据，我们都可以通过B * D 得到：</p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231220235445622.png" alt="image-20231220235445622"></p>
<p>假如D1、D4、C2 失效，那么我们可以同时从矩阵B和B*D中，去掉响应的行，得到下面的等式</p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231220235501565.png" alt="image-20231220235501565"><img src="D:\my_data\blog\zyhblog-img\image-20231220235507658.png" alt="image-20231220235507658"></p>
<h2 id="计算机取证-1"><a href="#计算机取证-1" class="headerlink" title="计算机取证"></a>计算机取证</h2><h3 id="取证的范围"><a href="#取证的范围" class="headerlink" title="取证的范围"></a>取证的范围</h3><p>首先依据搜查令或其他授权，根据案件的细节、硬件和软件系统的性质、潜在证据以及整个获取证据现场的环境来确定哪些证据将要进行重点检查。</p>
<h3 id="取证过程应该遵循的原则"><a href="#取证过程应该遵循的原则" class="headerlink" title="取证过程应该遵循的原则"></a>取证过程应该遵循的原则</h3><ol>
<li>取证过程中不能对目标设备有任何改动，读取硬盘数据必须用“只读锁”</li>
<li>所有提取的文件都要经过签名，保证不被篡改</li>
<li>保存证据的硬盘每次使用前都要“洗盘”——清零操作（Erases）</li>
<li>尽可能优先提取易失性数据——内存、网络数据包等等</li>
<li>分析证据的工作应该在工作副本(对目标硬盘逐位、逐字节的镜像）上进行</li>
</ol>
<h3 id="取证的一般过程"><a href="#取证的一般过程" class="headerlink" title="取证的一般过程"></a>取证的一般过程</h3><ol>
<li>记录被检查系统的硬件和软件配置，确认被检查系统所包含的硬件和软件。</li>
<li>拆开被检查计算机，检查计算机的硬盘。注意：在这个过程中要注意避免静电和强磁场</li>
<li>确认将要收集的存储设备，这些存储设备既可能是内置的也可能是外置的，有的系统可能同时拥有这两种设备。</li>
<li>记录内置存储设备和硬件配置，包括：<br>驱动情况(例如，品牌、型号、尺寸、跳线、硬件接口等)<br>内部部件(例如，声卡、显卡、网卡、视频采集卡等。)</li>
<li>通过受控制的引导程序恢复可疑系统的配置信息</li>
<li>尽可能地将存储器从可疑计算机中拆卸下来，使用预先准备好的监测系统来进行证据的提取</li>
</ol>
<h3 id="常见的取证工具"><a href="#常见的取证工具" class="headerlink" title="常见的取证工具"></a>常见的取证工具</h3><p>确定系统的审核策略auditpol</p>
<p>转储Windows系统注册表中的特定信息（键）			reg</p>
<p>以文本文件格式转储注册表			regdump</p>
<p>转储SAM数据库，可破解密码			pwdump6</p>
<p>监控成功和失败的系统登录			NTLast</p>
<p>侦测隐藏在NTFS文件流中的文件			Sfind</p>
<p>扫描文件系统找出在某时段内被访问过的文件			Afind</p>
<p>转储Windows系统的事件日志			Dumpel</p>
<h2 id="操作系统安全-1"><a href="#操作系统安全-1" class="headerlink" title="操作系统安全"></a>操作系统安全</h2><h3 id="操作系统的一般性安全机制：隔离，访问控制，审计，加密"><a href="#操作系统的一般性安全机制：隔离，访问控制，审计，加密" class="headerlink" title="操作系统的一般性安全机制：隔离，访问控制，审计，加密"></a>操作系统的一般性安全机制：隔离，访问控制，审计，加密</h3><h4 id="隔离控制"><a href="#隔离控制" class="headerlink" title="隔离控制"></a><strong>隔离控制</strong></h4><p><strong>物理隔离</strong>：例如，把不同的打印机分配给不同安全级别的用户。</p>
<p><strong>时间隔离：</strong>例如，以不同安全级别的程序在不同的时间使用计算机。</p>
<p><strong>加密隔离</strong>：例如，把文件、数据加密，使无关人员无法阅读。</p>
<p><strong>逻辑隔离</strong></p>
<p>首先要对存储单元的地址进行保护：使非法用户不能访问那些受到保护的存储单元</p>
<p>其次要对被保护的存储单元提供各种类型的保护：最基本的保护类型是“读&#x2F;写”和“只读”。复杂一些的保护类型还包括“只执行”、“不能存取”等操作。不能存取的存储单元，若被用户存取时，系统要及时发出警报或中断程序执行。</p>
<h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a><strong>访问控制</strong></h4><p>访问控制是操作系统的安全控制核心。访问控制是确定谁能访问系统，能访问系统何种资源以及在何种程度上使用这些资源。访问控制包括对系统各种资源的存取控制</p>
<p><strong>身份认证、确定访问权限、实施访问控制的权限</strong></p>
<h4 id="安全审计"><a href="#安全审计" class="headerlink" title="安全审计"></a><strong>安全审计</strong></h4><p>要求任何影响系统安全性的行为都被跟踪和记录在案，安全系统拥有把用户标识与它被跟踪和记录的行为联系起来的能力。<br>• 审计信息必须有选择性的保留和保护，所有与安全相关的事件记录在审计日志文件中，所有审计数据必须防止受到未授权的访问、修改和破坏，以作为日后对事件调查的依据。<br>• 审计系统能记录以下事件：和标识与鉴别机制相关的事件、将客体导入用户地址空间的操作、删除客体、系统管理员执行的操作及其他与安全相关的事件。</p>
<h4 id="安全加密"><a href="#安全加密" class="headerlink" title="安全加密"></a>安全加密</h4><p><strong>加密机制用于安全传输</strong></p>
<p>一个IPSee安全策略由IP筛选器和筛选器操作两部分构成。其中IP筛选器决定哪些报文应当引起IPSee安全策略的关注，筛选器操作是指“允许”还是“拒绝”报文的通过。在Windows 2003Server系统的服务端和客户端都提供了对IPSee的支持，从而增强了安全性。</p>
<p><strong>加密机制用于文件安全</strong></p>
<p>EFS加密实际上综合了对称加密和不对称加密</p>
<h3 id="国产主流操作系统相对国外主流操作系统，在安全机制设计方面有什么特色"><a href="#国产主流操作系统相对国外主流操作系统，在安全机制设计方面有什么特色" class="headerlink" title="国产主流操作系统相对国外主流操作系统，在安全机制设计方面有什么特色"></a>国产主流操作系统相对国外主流操作系统，在安全机制设计方面有什么特色</h3><p>国产操作系统的发展主要是为了满足本国的法律法规要求、信息安全等级保护标准、以及本地化支持的需求。相对于国外的主流操作系统，国产操作系统在安全机制设计方面可能具有以下特色：</p>
<h4 id="1-符合本地法规"><a href="#1-符合本地法规" class="headerlink" title="1. 符合本地法规"></a>1. 符合本地法规</h4><p>国产操作系统往往更加符合本国的法律法规和政策要求，比如数据保护法、信息内容监管等，以保证操作系统及其应用的合规性。</p>
<h4 id="2-安全加固"><a href="#2-安全加固" class="headerlink" title="2. 安全加固"></a>2. 安全加固</h4><p>部分国产操作系统可能针对特定的安全威胁进行了加固，以应对国内网络环境中的特定安全挑战，如更高级别的身份验证、加密技术和访问控制等。</p>
<h4 id="3-可信计算"><a href="#3-可信计算" class="headerlink" title="3. 可信计算"></a>3. 可信计算</h4><p>为了增强系统的信任度，国产操作系统可能内置了支持可信计算的技术，包括硬件身份验证、系统完整性验证等。</p>
<h4 id="4-可审核性"><a href="#4-可审核性" class="headerlink" title="4. 可审核性"></a>4. 可审核性</h4><p>国产操作系统可能会提供更加透明的审计功能，方便对系统行为和数据流向进行监控、记录和审计，以追踪潜在的安全问题。</p>
<h4 id="5-私有化定制"><a href="#5-私有化定制" class="headerlink" title="5. 私有化定制"></a>5. 私有化定制</h4><p>国产操作系统可能提供更多的定制服务，以符合国内企业或政府部门的特定需求，包括私有云部署、定制化的安全策略和服务等。</p>
<h4 id="6-支持国产硬件和加密算法"><a href="#6-支持国产硬件和加密算法" class="headerlink" title="6. 支持国产硬件和加密算法"></a>6. 支持国产硬件和加密算法</h4><p>国产操作系统可能会有更好的支持国产CPU架构（如龙芯、飞腾等）和国产加密算法（如国密SM系列算法）的能力。</p>
<h4 id="7-系统更新与维护"><a href="#7-系统更新与维护" class="headerlink" title="7. 系统更新与维护"></a>7. 系统更新与维护</h4><p>在维护和系统更新方面，国产操作系统可能会强调更快的本地化响应速度，及时补丁发布和定制化的更新服务。</p>
<h4 id="8-本地化支持"><a href="#8-本地化支持" class="headerlink" title="8. 本地化支持"></a>8. 本地化支持</h4><p>国产操作系统提供更深层次的本地化支持，不仅限于语言包，还可能包括本地化的用户界面、帮助文档以及用户支持服务。</p>
<h4 id="9-应对国内网络环境"><a href="#9-应对国内网络环境" class="headerlink" title="9. 应对国内网络环境"></a>9. 应对国内网络环境</h4><p>国产操作系统可能会内置特定的功能和服务，以更好地应对中国特有的网络环境，如对国内常用应用和服务的优化。</p>
<p>需要指出的是，这些特色并不是说国外的主流操作系统不具备，而是国产操作系统可能会在这些方面做出更多本地化和定制化的设计。另外，不同的国产操作系统，在安全机制上的具体实现和特色会有所不同。</p>
<h3 id="基于活动目录的域管理（提供一种集中的资源管理模式）：域，域控制器，OU"><a href="#基于活动目录的域管理（提供一种集中的资源管理模式）：域，域控制器，OU" class="headerlink" title="基于活动目录的域管理（提供一种集中的资源管理模式）：域，域控制器，OU"></a>基于活动目录的域管理（提供一种集中的资源管理模式）：域，域控制器，OU</h3><p>见上</p>
<h3 id="物联网和虚拟化技术对操作系统带来的安全挑战"><a href="#物联网和虚拟化技术对操作系统带来的安全挑战" class="headerlink" title="物联网和虚拟化技术对操作系统带来的安全挑战"></a>物联网和虚拟化技术对操作系统带来的安全挑战</h3><p>伴随着大数据和云时代的到来，虚拟化技术的应用已经越来越成熟。如何运用虚拟化技术给终端客户提供一个安全、稳定、高效的桌面环境，成为了一个日益热门的话题。</p>
<p>物联网（IoT）和虚拟化技术是近年来信息技术领域的两个重要趋势，它们对操作系统的安全性提出了新的挑战。</p>
<h4 id="物联网（IoT）带来的安全挑战："><a href="#物联网（IoT）带来的安全挑战：" class="headerlink" title="物联网（IoT）带来的安全挑战："></a>物联网（IoT）带来的安全挑战：</h4><h5 id="1-设备多样性和管理难度"><a href="#1-设备多样性和管理难度" class="headerlink" title="1. 设备多样性和管理难度"></a>1. 设备多样性和管理难度</h5><p>物联网环境中，设备种类繁多，从传感器到智能家电，再到工业控制系统，这些设备运行的操作系统多样，且往往资源受限，这增加了维护和管理的复杂性。</p>
<h5 id="2-面向设备的安全攻击"><a href="#2-面向设备的安全攻击" class="headerlink" title="2. 面向设备的安全攻击"></a>2. 面向设备的安全攻击</h5><p>物联网设备由于资源有限，可能无法运行复杂的安全软件，这使得它们更容易受到攻击，如固件劫持、物理篡改等。</p>
<h5 id="3-数据安全和隐私保护"><a href="#3-数据安全和隐私保护" class="headerlink" title="3. 数据安全和隐私保护"></a>3. 数据安全和隐私保护</h5><p>物联网设备通常会收集大量个人或敏感数据，安全地存储和传输这些数据成为了一大挑战。</p>
<h5 id="4-网络安全问题"><a href="#4-网络安全问题" class="headerlink" title="4. 网络安全问题"></a>4. 网络安全问题</h5><p>物联网设备通常需要连接到互联网，这可能导致网络层面的安全问题，如DDoS攻击利用了大量未加密的物联网设备。</p>
<h5 id="5-更新和补丁分发"><a href="#5-更新和补丁分发" class="headerlink" title="5. 更新和补丁分发"></a>5. 更新和补丁分发</h5><p>物联网设备的更新机制往往不如传统 IT 系统那样成熟，这意味着安全漏洞可能长时间得不到修复。</p>
<h4 id="虚拟化技术带来的安全挑战："><a href="#虚拟化技术带来的安全挑战：" class="headerlink" title="虚拟化技术带来的安全挑战："></a>虚拟化技术带来的安全挑战：</h4><h5 id="1-虚拟化平台的安全"><a href="#1-虚拟化平台的安全" class="headerlink" title="1. 虚拟化平台的安全"></a>1. 虚拟化平台的安全</h5><p>虚拟化平台（如VMware、Xen、KVM等）本身的安全性至关重要，因为它们成为了多个虚拟机共享的基础设施。</p>
<h5 id="2-虚拟机逃逸攻击"><a href="#2-虚拟机逃逸攻击" class="headerlink" title="2. 虚拟机逃逸攻击"></a>2. 虚拟机逃逸攻击</h5><p>如果攻击者成功实施虚拟机逃逸，他们可以从一个虚拟机访问宿主机或者其他虚拟机，从而破坏整个虚拟化环境的隔离性。</p>
<h5 id="3-虚拟网络安全"><a href="#3-虚拟网络安全" class="headerlink" title="3. 虚拟网络安全"></a>3. 虚拟网络安全</h5><p>在虚拟化环境中，传统网络安全解决方案可能难以直接应用，因为虚拟机之间的网络交互可能完全在软件定义的网络内部进行。</p>
<h5 id="4-资源池共享安全问题"><a href="#4-资源池共享安全问题" class="headerlink" title="4. 资源池共享安全问题"></a>4. 资源池共享安全问题</h5><p>虚拟化环境中不同虚拟机共享相同的物理资源，如CPU和内存，这可能导致资源竞争以及隔离性的问题。</p>
<h5 id="5-快照和移动性带来的数据安全问题"><a href="#5-快照和移动性带来的数据安全问题" class="headerlink" title="5. 快照和移动性带来的数据安全问题"></a>5. 快照和移动性带来的数据安全问题</h5><p>虚拟机的快照和移动性功能，虽然带来了便利，但也带来了数据泄露的风险。</p>
<h5 id="6-管理和配置的复杂性"><a href="#6-管理和配置的复杂性" class="headerlink" title="6. 管理和配置的复杂性"></a>6. 管理和配置的复杂性</h5><p>虚拟化环境增加了管理和配置的复杂性，不当的配置可能导致安全漏洞。</p>
<p>为了应对这些挑战，操作系统需要集成更多的安全特性，比如增强的访问控制、隔离机制、加密技术以及实时的监控和响应系统。同时，对于物联网和虚拟化环境中的安全事件，需要有专门的检测和应对策略。此外，开发和维护适用于这些环境的安全准则和最佳实践也同样重要。</p>
<h3 id="身份认证协议，一次性口令（OTP），Kerberos-协议的原理"><a href="#身份认证协议，一次性口令（OTP），Kerberos-协议的原理" class="headerlink" title="身份认证协议，一次性口令（OTP），Kerberos 协议的原理"></a>身份认证协议，一次性口令（OTP），Kerberos 协议的原理</h3><p><strong>OTP的主要思路是</strong>：在登录过程中加入不确定因素，使每次登录过程中传送的口令信息都不相同，以提高登录过程安全性。</p>
<p>例如：登录密码&#x3D;MD5(用户名＋密码 ＋时间）系统接收到登录口令后做一个验算即可验证用户的合法性。</p>
<p><strong>Kerberos认证</strong></p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231222205144084.png" alt="image-20231222205144084"></p>
<p><strong>交换第一轮：获取票据许可票据</strong></p>
<p>​	<strong>Step (1) 用户请求票据许可票据</strong></p>
<p>➢ 用户请求票据许可票据的工作在登录工作站时进行。<br>➢ 登录时用户被要求输入用户名，输入后系统会向认证服务器AS以明文方式发送一条包含用户和TGS服务两者名字的请求。<br>$$<br>C\to AS:ID_C||ID_{tgs}||TS_1<br>$$<br>​	<strong>Step (2) AS发放票据许可票据和会话密钥</strong></p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231222213355240.png" alt="image-20231222213355240"></p>
<p><strong>第二轮：获取访问票据</strong></p>
<p>​	<strong>Step (3) C请求服务器票据</strong></p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231222213404437.png" alt="image-20231222213404437"></p>
<p>​	<strong>Step (4) TGS发放服务器票据和会话密钥</strong></p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231222213412913.png" alt="image-20231222213412913"></p>
<p><strong>第三轮：获取服务</strong></p>
<p>​	<strong>Step (5) 工作站将票据和认证符发给服务器</strong></p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20231222213419461.png" alt="image-20231222213419461"></p>
<p>​	<strong>Step (6) 服务器验证票据TicketS和认证符中的匹配，然后许可访问服务。</strong><br>$$<br>S\to C:E_{Kc,s}[TS_5+1]<br>$$</p>
<h3 id="组策略的主要优势，组策略和-OU-的关系"><a href="#组策略的主要优势，组策略和-OU-的关系" class="headerlink" title="组策略的主要优势，组策略和 OU 的关系"></a>组策略的主要优势，组策略和 OU 的关系</h3><p><strong>主要优势：</strong></p>
<p>• <strong>降低管理、支持与培训成本</strong></p>
<p>• <strong>提升用户工作效率</strong></p>
<p>• <strong>允许极大量的定制项目</strong> <strong>–</strong> <strong>其扩展性不会牺牲定制的灵活性</strong></p>
<p>组策略是一种用于中央管理和配置操作系统、应用程序和用户设置的工具，而组织单位（OU）是在Active Directory中用来组织用户、组和设备的容器。通过将组策略应用于特定的OU，管理员能够对网络中的不同用户和计算机群组进行精确和灵活的管理，同时利用OU的层级结构实现策略的继承和覆盖，从而实现高效的策略部署和权限控制。</p>
<h2 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h2><h3 id="数据库面临的安全威胁"><a href="#数据库面临的安全威胁" class="headerlink" title="数据库面临的安全威胁"></a>数据库面临的安全威胁</h3><p><strong>按照导致的后果分类</strong></p>
<p>• 信息泄露：未授权的用户有意&#x2F;无意得到的信息。</p>
<p>• 数据修改：未授权的数据修改，违反信息完整性。</p>
<p>• 拒绝服务：影响用户访问和数据库资源的使用。</p>
<p><strong>按照发生的方式分类</strong></p>
<p>​	<strong>偶然的、无意的侵犯或破坏</strong></p>
<p>​	• 自然或意外的灾害</p>
<p>​	• 硬件或软件的故障&#x2F;错误导致的数据丢失和泄露</p>
<p>​	• 人为的失误系和安全机制</p>
<p>​	<strong>蓄意的侵犯或敌意的攻击</strong></p>
<p>​	• 授权用户滥用、误用其权限</p>
<p>​	• 病毒、特洛伊木马、天窗（后门）、隐通道</p>
<p>​	• 绕过DBMS直接对数据进行读写</p>
<p>​	• 为了某种目的，故意把错误数据注入数据库，使之保存错误信息并随着时间的推移扩散</p>
<p><strong>按照表现形式的分类</strong></p>
<p>• 滥用过高权限</p>
<p>• 滥用合法权限</p>
<p>• 权限提升</p>
<p>• 平台漏洞</p>
<p>• SQL注入</p>
<p>• 审计记录不足</p>
<p>• 拒绝服务</p>
<h3 id="数据库的安全防御纵深体"><a href="#数据库的安全防御纵深体" class="headerlink" title="数据库的安全防御纵深体"></a>数据库的安全防御纵深体</h3><p><img src="D:\my_data\blog\zyhblog-img\image-20231222212721493.png" alt="image-20231222212721493"><img src="D:\my_data\blog\zyhblog-img\image-20231222212738244.png" alt="image-20231222212738244"></p>
<h3 id="数据库的安全漏洞"><a href="#数据库的安全漏洞" class="headerlink" title="数据库的安全漏洞"></a>数据库的安全漏洞</h3><p>数据库安全漏洞通常指的是那些可能被恶意用户利用以非法访问、窃取、损坏或篡改数据的系统弱点。数据库中的安全漏洞可能以不同形式存在，以下是一些常见的数据库安全漏洞类型：</p>
<ol>
<li><p><strong>SQL注入</strong>：这是一种常见的攻击手段，攻击者通过在应用程序的输入字段中输入恶意SQL代码，企图对数据库执行未授权的查询或操作。</p>
</li>
<li><p><strong>不恰当的权限配置</strong>：如果用户或应用程序被授予过多权限，它们就可能进行不应当的数据库修改，或访问不该访问的数据。</p>
</li>
<li><p><strong>敏感数据暴露</strong>：敏感信息未经加密或不正确的加密存储在数据库中，容易被泄漏。</p>
</li>
<li><p><strong>配置缺陷</strong>：数据库的默认配置可能不够安全，例如默认账户和密码未更改，导致易于被攻破。</p>
</li>
<li><p><strong>未更新的数据库系统</strong>：未及时安装数据库软件的补丁和更新可能会留下安全漏洞，易受已知漏洞的攻击。</p>
</li>
<li><p><strong>注入漏洞</strong>：不仅限于SQL注入，还包括其它形式的注入，如LDAP注入、ORM注入等。</p>
</li>
<li><p><strong>缓冲区溢出</strong>：当输入数据超出数据库引擎预期的处理能力时，可能会导致执行任意代码。</p>
</li>
<li><p><strong>不安全的存储过程和触发器</strong>：如果存储过程或触发器编写不当，它们可能成为执行不受控制的SQL代码的途径。</p>
</li>
<li><p><strong>信息泄露</strong>：系统错误信息包含敏感信息，如数据库结构细节、系统路径等，有助于攻击者构造攻击。</p>
</li>
<li><p><strong>身份认证绕过</strong>：如果认证机制有漏洞，攻击者可能无需合法凭据就能访问数据库。</p>
</li>
<li><p><strong>跨站脚本攻击（XSS）</strong>：如果数据库中存储的数据用于网页内容，未经适当清理就插入HTML页面，可能会执行恶意脚本。</p>
</li>
<li><p><strong>未充分保护的备份</strong>：数据库备份如果未加密或存储在不安全的位置，可能被攻击者访问。</p>
</li>
</ol>
<p>为了保护数据库免受安全漏洞的影响，重要的措施包括定期更新和打补丁、实施最小权限原则、加密敏感数据、使用入侵检测系统、进行安全审计以及提供安全意识培训等。</p>
<h1 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3. 基本操作"></a><strong>3.</strong> <strong>基本操作</strong></h1><h2 id="信息系统概述"><a href="#信息系统概述" class="headerlink" title="信息系统概述"></a>信息系统概述</h2><h3 id="能进行简单的信息系统架构设计，可参考讲义提供的阿里架构"><a href="#能进行简单的信息系统架构设计，可参考讲义提供的阿里架构" class="headerlink" title="能进行简单的信息系统架构设计，可参考讲义提供的阿里架构"></a>能进行简单的信息系统架构设计，可参考讲义提供的阿里架构</h3><p>简单的信息系统架构设计参考阿里巴巴的架构，显然需要考虑到系统的可扩展性、可靠性和高并发处理能力。以下是一个高层次的架构设计概要：</p>
<h4 id="基础设施层"><a href="#基础设施层" class="headerlink" title="基础设施层"></a>基础设施层</h4><ol>
<li><p><strong>云服务提供商</strong>：选择云服务，如阿里云，以便利用其弹性计算、存储和网络资源。</p>
</li>
<li><p><strong>全球负载均衡</strong>：使用DNS级别的负载均衡或阿里云的全局负载均衡服务确保跨地域的流量分配。</p>
</li>
</ol>
<h4 id="数据持久层"><a href="#数据持久层" class="headerlink" title="数据持久层"></a>数据持久层</h4><ol>
<li><p><strong>数据库</strong>：采用分布式数据库解决方案，如阿里云的PolarDB或RDS来处理高并发读写操作，实现读写分离和数据分片。</p>
</li>
<li><p><strong>缓存</strong>：使用Redis或Memcached作为缓存层减少对数据库的访问频率。</p>
</li>
<li><p><strong>存储</strong>：使用对象存储服务（如阿里云OSS）来存储和分发静态内容。</p>
</li>
</ol>
<h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><ol>
<li><p><strong>微服务架构</strong>：划分微服务，每个服务负责具体的业务功能，相互独立，通过阿里云的容器服务和Kubernetes进行管理。</p>
</li>
<li><p><strong>消息队列</strong>：采用RocketMQ等消息系统处理异步任务和解耦服务间的通信。</p>
</li>
<li><p><strong>API网关</strong>：使用API网关管理微服务的入口，提供认证、授权、流量控制等功能。</p>
</li>
</ol>
<h4 id="业务逻辑层"><a href="#业务逻辑层" class="headerlink" title="业务逻辑层"></a>业务逻辑层</h4><ol>
<li><p><strong>业务微服务</strong>：根据不同的业务功能划分服务，如订单处理、用户管理、产品目录等。</p>
</li>
<li><p><strong>定时任务服务</strong>：处理需要周期性执行的业务逻辑。</p>
</li>
</ol>
<h4 id="客户端层"><a href="#客户端层" class="headerlink" title="客户端层"></a>客户端层</h4><ol>
<li><p><strong>Web前端</strong>：使用现代JavaScript框架（如React或Vue.js）构建用户友好的单页面应用（SPA）。</p>
</li>
<li><p><strong>移动端</strong>：开发原生或混合移动应用。</p>
</li>
</ol>
<h4 id="辅助层"><a href="#辅助层" class="headerlink" title="辅助层"></a>辅助层</h4><ol>
<li><p><strong>CDN</strong>：内容分发网络缓存静态资源，减轻后端服务的压力。</p>
</li>
<li><p><strong>监控和日志</strong>：集成监控工具（如Prometheus）和日志服务（如ELK Stack）进行系统监控和日志分析。</p>
</li>
<li><p><strong>安全</strong>：实现网络安全策略、数据加密、DDoS防护等。</p>
</li>
</ol>
<h4 id="运维层"><a href="#运维层" class="headerlink" title="运维层"></a>运维层</h4><ol>
<li><p><strong>自动化部署</strong>：使用CI&#x2F;CD工具（如Jenkins）自动化部署流程。</p>
</li>
<li><p><strong>容器编排</strong>：使用Docker和Kubernetes进行容器化部署和管理。</p>
</li>
</ol>
<p>确保在设计时考虑到系统的可观测性、可维护性和灾难恢复能力。此外，对于“秒杀”类型的场景，还需要特别设计限流、熔断机制以及足够的预热和压力测试来确保系统在高负载下的稳定性。</p>
<h3 id="能针对特定的信息系统及其业务需求，设计相应的抗“秒杀”、“大并发”技术"><a href="#能针对特定的信息系统及其业务需求，设计相应的抗“秒杀”、“大并发”技术" class="headerlink" title="能针对特定的信息系统及其业务需求，设计相应的抗“秒杀”、“大并发”技术"></a>能针对特定的信息系统及其业务需求，设计相应的抗“秒杀”、“大并发”技术</h3><p><strong>将请求拦截在系统上游，降低下游压力：</strong>秒杀系统特点是并发量极大，但实际秒杀成功的请求数量却很少，所以如果不在前端拦截很可能造成数据库读写锁冲突，甚至导致死锁，最终请求超时。</p>
<p><strong>充分利用缓存：</strong>利用缓存可极大提高系统读写速度。</p>
<p><strong>消息中间件：</strong>消息队列可以削峰，将拦截大量并发请求，这是一个异步处理过程，后台业务根据自己的处理能力，从消息队列中主动的拉取请求消息进行业务处理。</p>
<h2 id="信息系统安全概论-2"><a href="#信息系统安全概论-2" class="headerlink" title="信息系统安全概论"></a>信息系统安全概论</h2><h3 id="根据业务使命、工作环境进行信息系统安全威胁分析"><a href="#根据业务使命、工作环境进行信息系统安全威胁分析" class="headerlink" title="根据业务使命、工作环境进行信息系统安全威胁分析"></a>根据业务使命、工作环境进行信息系统安全威胁分析</h3><p>进行信息系统安全威胁分析时，考虑业务使命和工作环境是至关重要的。以下是一个分析框架，它考虑了这些因素，并帮助识别和评估潜在的安全威胁。</p>
<h4 id="1-理解业务使命"><a href="#1-理解业务使命" class="headerlink" title="1. 理解业务使命"></a>1. 理解业务使命</h4><ul>
<li><strong>业务目标</strong>：确定业务的主要目标和目的，分析哪些信息系统对实现这些目标至关重要。</li>
<li><strong>关键资产</strong>：识别业务运作的关键资产，包括重要的数据类型、系统、技术和人力资源。</li>
<li><strong>业务流程</strong>：了解业务流程及其对信息系统的依赖程度，以及流程被破坏时对业务的影响。</li>
<li><strong>合规要求</strong>：考虑行业标准和法规要求，如GDPR、HIPAA、PCI-DSS等对信息安全管理的影响。</li>
</ul>
<h4 id="2-分析工作环境"><a href="#2-分析工作环境" class="headerlink" title="2. 分析工作环境"></a>2. 分析工作环境</h4><ul>
<li><strong>物理环境</strong>：评估信息系统所在的物理环境，包括访问控制、灾害风险（如洪水、火灾）和其他相关因素。</li>
<li><strong>网络环境</strong>：理解网络架构，包括互联网接入方式、内部网络隔离以及远程访问的安全性。</li>
<li><strong>技术栈</strong>：识别使用的所有技术（软件、硬件、云服务等），包括它们的安全状态和历史漏洞。</li>
<li><strong>操作环境</strong>：涉及日常操作中可能出现的风险，例如员工的安全意识水平、数据处理和存储的安全性等。</li>
</ul>
<h4 id="3-安全威胁分析"><a href="#3-安全威胁分析" class="headerlink" title="3. 安全威胁分析"></a>3. 安全威胁分析</h4><ul>
<li><strong>威胁识别</strong>：列出可能影响信息系统的所有潜在威胁，包括恶意软件、黑客攻击、内部威胁、物理盗窃等。</li>
<li><strong>威胁评估</strong>：针对每项威胁，评估其可能性和对业务的潜在影响。这通常涉及风险评估矩阵。</li>
<li><strong>脆弱性评估</strong>：识别系统的脆弱点，包括未打补丁的软件、弱密码政策、员工培训缺失等。</li>
</ul>
<h4 id="4-采取防御措施"><a href="#4-采取防御措施" class="headerlink" title="4. 采取防御措施"></a>4. 采取防御措施</h4><ul>
<li><strong>预防措施</strong>：根据分析结果实施必要的安全措施，如加强访问控制、更新和打补丁、安全配置和加密措施。</li>
<li><strong>监控和检测</strong>：部署监控系统以检测可疑行为和迹象，确保能够及时响应潜在攻击。</li>
<li><strong>应急计划</strong>：制定并练习应急响应计划，以便在安全事件发生时能迅速采取行动。</li>
</ul>
<h4 id="5-持续改进"><a href="#5-持续改进" class="headerlink" title="5. 持续改进"></a>5. 持续改进</h4><ul>
<li><strong>审计和复审</strong>：定期进行安全审计，以评估现有措施的有效性，并根据新出现的威胁和漏洞进行调整。</li>
<li><strong>教育与培训</strong>：定期对员工进行安全培训，提高他们的安全意识和应对安全威胁的能力。</li>
</ul>
<h3 id="能进行简单的信息系统安全架构设计，可参考讲义提供的云安全架构"><a href="#能进行简单的信息系统安全架构设计，可参考讲义提供的云安全架构" class="headerlink" title="能进行简单的信息系统安全架构设计，可参考讲义提供的云安全架构"></a>能进行简单的信息系统安全架构设计，可参考讲义提供的云安全架构</h3><p><img src="D:\my_data\blog\zyhblog-img\image-20231219230840678.png" alt="image-20231219230840678"></p>
<h2 id="安全需求和安全策略-2"><a href="#安全需求和安全策略-2" class="headerlink" title="安全需求和安全策略"></a>安全需求和安全策略</h2><h3 id="根据安全威胁分析安全需求"><a href="#根据安全威胁分析安全需求" class="headerlink" title="根据安全威胁分析安全需求"></a>根据安全威胁分析安全需求</h3><p>根据安全威胁分析安全需求是一个重要的步骤，用于确保信息系统的安全性。这个过程涉及识别可能影响系统安全的潜在威胁，并基于这些威胁制定相应的安全需求和措施。以下是这一过程中的关键步骤：</p>
<h4 id="1-威胁建模"><a href="#1-威胁建模" class="headerlink" title="1. 威胁建模"></a>1. 威胁建模</h4><p>威胁建模通常是分析安全威胁的第一步，旨在识别系统可能面临的安全威胁。它可以帮助确定攻击者可能利用的弱点和系统可能受到的攻击类型。常见的威胁建模方法包括STRIDE模型，它涵盖以下威胁类型：</p>
<ul>
<li><strong>Spoofing</strong>（身份冒充）</li>
<li><strong>Tampering</strong>（数据篡改）</li>
<li><strong>Repudiation</strong>（否认）</li>
<li><strong>Information Disclosure</strong>（信息泄露）</li>
<li><strong>Denial of Service</strong>（服务拒绝）</li>
<li><strong>Elevation of Privilege</strong>（提权）</li>
</ul>
<h4 id="2-风险评估"><a href="#2-风险评估" class="headerlink" title="2. 风险评估"></a>2. 风险评估</h4><p>在威胁建模的基础上，进行风险评估以确定哪些威胁具有最高的风险。风险通常根据两个因素评估：威胁的可能性和威胁的影响。这可以通过不同的风险评估框架进行，如FAIR（Factor Analysis of Information Risk）或传统的风险矩阵。</p>
<h4 id="3-定义安全需求"><a href="#3-定义安全需求" class="headerlink" title="3. 定义安全需求"></a>3. 定义安全需求</h4><p>通过识别最高风险的威胁，可以定义系统的安全需求。这些需求应该旨在减轻或消除风险。安全需求通常包括以下几个方面：</p>
<ul>
<li><strong>保密性</strong>：确保信息不被未授权的个人或系统访问。</li>
<li><strong>完整性</strong>：保护数据免受未授权的修改。</li>
<li><strong>可用性</strong>：确保在需要时能够访问信息和资源。</li>
<li><strong>认证</strong>：确保参与者的身份得到确认。</li>
<li><strong>授权</strong>：确保只有授权用户才能访问资源。</li>
<li><strong>审计</strong>：记录和监控系统活动，以便在问题发生时可以进行检查。</li>
</ul>
<h4 id="4-实施安全控制"><a href="#4-实施安全控制" class="headerlink" title="4. 实施安全控制"></a>4. 实施安全控制</h4><p>根据定义的安全需求，选择和实施合适的安全控制措施。控制措施可以是技术性的，比如使用防火墙、加密和入侵检测系统；也可以是管理性的，比如制定安全策略、培训和应急计划；还可以是物理性的，比如安全门禁系统和监控摄像头。</p>
<h4 id="5-验证和测试"><a href="#5-验证和测试" class="headerlink" title="5. 验证和测试"></a>5. 验证和测试</h4><p>实施安全控制后，需要验证和测试它们的有效性。这可以通过安全审计、渗透测试、漏洞扫描等方式进行。</p>
<h4 id="6-持续监控和评估"><a href="#6-持续监控和评估" class="headerlink" title="6. 持续监控和评估"></a>6. 持续监控和评估</h4><p>安全需求的制定并不是一次性的活动。必须定期监控系统以检测新的安全威胁，并对安全需求进行评估和更新。</p>
<p>通过这个连续的循环过程，组织可以确保他们的安全措施保持最新，能够应对不断变化的威胁环境。这个过程不仅适用于信息技术系统，还适用于物理安全和组织的各个方面。</p>
<h3 id="可根据需要编写标准-ACL-或扩展-ACL，特别是通配掩码的使用"><a href="#可根据需要编写标准-ACL-或扩展-ACL，特别是通配掩码的使用" class="headerlink" title="可根据需要编写标准 ACL 或扩展 ACL，特别是通配掩码的使用"></a>可根据需要编写标准 ACL 或扩展 ACL，特别是通配掩码的使用</h3><p><strong>创建标准ACL实例</strong></p>
<p>Router(config)# access-list 1 permit 192.168.1.0 0.0.0.255</p>
<p>Router(config)# access-list 1 permit 192.168.2.2 0.0.0.0</p>
<p>允许192.168.1.0&#x2F;24和主机192.168.2.2的流量通过</p>
<p><strong>Examples:</strong> <strong>扩展****ACL</strong></p>
<ol>
<li><strong>Lab_A(config)#access-list 110 deny tcp any host 172.16.30.2 eq www</strong></li>
</ol>
<p>含义：拒绝任何IP地址通过TCP协议访问主机172.16.30.2的www服务。隐含的意思是主机可以访问172.16.30.2的其它服务，限制更为细致。</p>
<ol start="2">
<li><strong>Lab_A(config)#access-list 110 permit tcp 192.168.10.0 0.0.0.255 host</strong></li>
</ol>
<p><strong>172.16.30.2 eq 23 log</strong></p>
<p>含义：允许网段192.168.10.0 255.255.255.0通过TCP协议访问主机172.16.30.2的23端口的服务即Telnet服务，且记录访问日志。</p>
<ol start="3">
<li><strong>Lab_A(config)#access-list 110 permit ip any any</strong></li>
</ol>
<p>含义：允许所有使用IP协议的IP访问其它所有IP，即允许所有。</p>
<h2 id="信息系统的风险评估-2"><a href="#信息系统的风险评估-2" class="headerlink" title="信息系统的风险评估"></a>信息系统的风险评估</h2><h3 id="给定某信息系统的业务使命及操作环境，可进行安全风险评估，包括：风险分析方法，资产分类方法及识别模型，威胁赋值，脆弱性赋值等"><a href="#给定某信息系统的业务使命及操作环境，可进行安全风险评估，包括：风险分析方法，资产分类方法及识别模型，威胁赋值，脆弱性赋值等" class="headerlink" title="给定某信息系统的业务使命及操作环境，可进行安全风险评估，包括：风险分析方法，资产分类方法及识别模型，威胁赋值，脆弱性赋值等"></a>给定某信息系统的业务使命及操作环境，可进行安全风险评估，包括：风险分析方法，资产分类方法及识别模型，威胁赋值，脆弱性赋值等</h3><p>进行安全风险评估是一个系统化的过程，涉及对可能影响信息系统的风险进行识别、评估和优先级排序。这个过程通常包括以下几个关键步骤：</p>
<h4 id="1-风险分析方法"><a href="#1-风险分析方法" class="headerlink" title="1. 风险分析方法"></a>1. 风险分析方法</h4><p>选择一个适合组织需求的风险分析方法是重要的第一步。常见的方法包括：</p>
<ul>
<li><strong>定性分析</strong>：依赖于专业知识和经验来评估风险的概率和影响，结果通常使用诸如”低”、”中”、”高”这样的等级来描述。</li>
<li><strong>定量分析</strong>：使用数值方法来计算风险概率和影响，通常依赖于历史数据和统计技术。</li>
<li><strong>半定量分析</strong>：结合定性和定量分析的优点，通过打分系统来量化风险。</li>
</ul>
<h4 id="2-资产分类方法及识别模型"><a href="#2-资产分类方法及识别模型" class="headerlink" title="2. 资产分类方法及识别模型"></a>2. 资产分类方法及识别模型</h4><p>对于信息系统来说，资产是指所有的信息资源和相关的组件，如硬件、软件、数据和人力资源。资产分类和识别是风险评估的基础。常用的分类方法包括：</p>
<ul>
<li><strong>按照功能</strong>：例如，服务器、用户终端、网络设备等。</li>
<li><strong>按照数据类型</strong>：如个人身份信息、财务报告、知识产权等。</li>
<li><strong>按照重要性</strong>：关键资产、重要资产和非关键资产。</li>
</ul>
<h4 id="3-威胁赋值"><a href="#3-威胁赋值" class="headerlink" title="3. 威胁赋值"></a>3. 威胁赋值</h4><p>威胁赋值是指识别可能对资产造成损害的所有潜在威胁，并对这些威胁的严重性进行评估。威胁可以来自多个来源，如自然灾害、技术故障、人为错误或恶意攻击。为了评估威胁，组织通常会：</p>
<ul>
<li><strong>列出威胁来源</strong>：包括内部和外部来源。</li>
<li><strong>评估威胁发生的可能性</strong>：通常分为“不太可能”、“可能”、“很可能”等。</li>
<li><strong>考虑威胁的潜在影响</strong>：对业务的影响，如财务损失、声誉损害等。</li>
</ul>
<h4 id="4-脆弱性赋值"><a href="#4-脆弱性赋值" class="headerlink" title="4. 脆弱性赋值"></a>4. 脆弱性赋值</h4><p>脆弱性是指系统、程序或网络中的弱点，可以被威胁所利用。脆弱性赋值包括以下步骤：</p>
<ul>
<li><strong>脆弱性扫描</strong>：使用自动工具检测系统的已知脆弱性。</li>
<li><strong>脆弱性评估</strong>：分析扫描结果，评估每个脆弱性被利用的可能性和潜在的影响。</li>
<li><strong>脆弱性优先级排序</strong>：确定哪些脆弱性最值得注意。</li>
</ul>
<h4 id="5-风险评估"><a href="#5-风险评估" class="headerlink" title="5. 风险评估"></a>5. 风险评估</h4><p>最后，结合威胁赋值和脆弱性赋值的结果来评估风险。风险可以定义为威胁和脆弱性相结合的概率与其潜在影响的乘积。对于每个风险，评估其：</p>
<ul>
<li><strong>概率</strong>：风险出现的可能性有多大。</li>
<li><strong>影响</strong>：如果风险实际发生，会对组织造成多大的损害。</li>
</ul>
<p>根据评估的结果，组织可以确定哪些风险需要优先处理，并制定相应的风险缓解措施。这可能包括技术控制（如加密和访问控制）、管理控制（如策略和流程）和物理控制（如安全门和监控相机）。</p>
<p>风险评估是一个动态的过程，需要定期更新，以反映新的威胁、脆弱性和业务环境的变化。</p>
<h2 id="信息系统等级保护-2"><a href="#信息系统等级保护-2" class="headerlink" title="信息系统等级保护"></a>信息系统等级保护</h2><h3 id="给定某信息系统的业务使命及操作环境，可进行定级和备案"><a href="#给定某信息系统的业务使命及操作环境，可进行定级和备案" class="headerlink" title="给定某信息系统的业务使命及操作环境，可进行定级和备案"></a>给定某信息系统的业务使命及操作环境，可进行定级和备案</h3><p>北京邮电大学教务系统是一个关键的信息系统，它处理学生的注册、课程分配、成绩记录等重要数据。进行定级和备案操作需遵循以下步骤：</p>
<h4 id="1-业务使命和操作环境分析"><a href="#1-业务使命和操作环境分析" class="headerlink" title="1. 业务使命和操作环境分析"></a>1. 业务使命和操作环境分析</h4><ul>
<li><strong>业务使命</strong>：教务系统的业务使命是管理学生的教育相关信息，包括课程注册、成绩管理、学位认证等。</li>
<li><strong>操作环境</strong>：教务系统在北京邮电大学校园内部署，在校园网络环境下运行，并由学校的IT部门维护。</li>
</ul>
<h4 id="2-定级"><a href="#2-定级" class="headerlink" title="2. 定级"></a>2. 定级</h4><h5 id="信息资产识别和价值评估"><a href="#信息资产识别和价值评估" class="headerlink" title="信息资产识别和价值评估"></a>信息资产识别和价值评估</h5><ul>
<li>确认教务系统中所有的硬件和软件资源，以及它们的配置。</li>
<li>评估学生和教职工的个人信息、成绩资料、课程信息等数据的价值和敏感性，因为这些信息通常包含个人隐私。</li>
</ul>
<h5 id="威胁和脆弱性分析"><a href="#威胁和脆弱性分析" class="headerlink" title="威胁和脆弱性分析"></a>威胁和脆弱性分析</h5><ul>
<li>确定可能对教务系统构成威胁的各种因素，包括网络攻击、内部数据泄露、自然灾害等。</li>
<li>分析系统存在的脆弱性，如软件漏洞、硬件故障或人为错误。</li>
</ul>
<h5 id="风险评估"><a href="#风险评估" class="headerlink" title="风险评估"></a>风险评估</h5><ul>
<li>结合资产价值、威胁和脆弱性来评估风险。</li>
<li>评估数据泄露、系统中断等对学校运营及声誉可能造成的影响。</li>
</ul>
<h5 id="安全等级划分"><a href="#安全等级划分" class="headerlink" title="安全等级划分"></a>安全等级划分</h5><ul>
<li>根据以上评估的结果，参照国家或行业的标准，给教务系统定一个合适的安全等级。</li>
<li>根据中国的相关标准，教务系统可能被定为三级或四级信息系统，因为它处理大量的个人敏感数据。</li>
</ul>
<h4 id="3-备案"><a href="#3-备案" class="headerlink" title="3. 备案"></a>3. 备案</h4><h5 id="编制备案材料"><a href="#编制备案材料" class="headerlink" title="编制备案材料"></a>编制备案材料</h5><ul>
<li>准备详细的系统描述，包括它的功能、数据流、用户访问模式等。</li>
<li>包含定级的相关文档，比如风险评估报告、安全保护措施描述、安全管理制度等。</li>
</ul>
<h5 id="提交备案"><a href="#提交备案" class="headerlink" title="提交备案"></a>提交备案</h5><ul>
<li>将所有准备好的材料提交给北京市海淀区公安局的信息网络安全监管部门。</li>
<li>包括备案申请表、系统等级评估报告、风险管理方案等。</li>
</ul>
<h5 id="后续跟进"><a href="#后续跟进" class="headerlink" title="后续跟进"></a>后续跟进</h5><ul>
<li>等待海淀区公安局审核并确认备案。</li>
<li>根据公安局的要求，可能需要提供额外的信息或对系统进行必要的安全改进。</li>
<li>在备案通过后，定期更新备案信息，如系统升级、安全事件等均可能需要重新评估和备案。</li>
</ul>
<p>进行定级和备案操作是为了确保教务系统的安全性，防护措施的适当性，并且遵守中国的法律法规要求，保护学生和教职工的个人信息安全。</p>
<h2 id="信息系统的物理安全-2"><a href="#信息系统的物理安全-2" class="headerlink" title="信息系统的物理安全"></a>信息系统的物理安全</h2><h3 id="机房设计和建设中应该考虑的安全因素"><a href="#机房设计和建设中应该考虑的安全因素" class="headerlink" title="机房设计和建设中应该考虑的安全因素"></a>机房设计和建设中应该考虑的安全因素</h3><p>在机房设计和建设中考虑的安全因素非常广泛，既包括物理安全措施，也包括环境控制、电源管理等。以下是一些关键的安全因素：</p>
<h4 id="物理安全"><a href="#物理安全" class="headerlink" title="物理安全"></a>物理安全</h4><ol>
<li><strong>门禁系统</strong>：确保只有授权人员能够进入机房。门禁系统通常包括卡片读取器、生物识别系统等。</li>
<li><strong>监控系统</strong>：安装视频监控设备监视机房内外的活动，以防止未授权的访问或其他安全事件。</li>
<li><strong>安全门和窗户</strong>：使用坚固的材料制作门和窗户，防止非法闯入。</li>
<li><strong>物理隔离</strong>：机房应与其他非关键区域物理隔离，减少潜在的物理风险。</li>
</ol>
<h3 id="火灾防护"><a href="#火灾防护" class="headerlink" title="火灾防护"></a>火灾防护</h3><ol>
<li><strong>自动喷水灭火系统</strong>：在必要时可采用，但不适用于高端电子设备。</li>
<li><strong>化学灭火系统</strong>：使用FM200或其他适用于机房的化学灭火剂。</li>
<li><strong>烟雾探测器和报警系统</strong>：确保一旦发生火情，立即发出警报并启动灭火系统。</li>
</ol>
<h4 id="环境控制"><a href="#环境控制" class="headerlink" title="环境控制"></a>环境控制</h4><ol>
<li><strong>温度和湿度控制</strong>：维持适宜的温度和湿度水平以保护设备免受损害。</li>
<li><strong>空调系统</strong>：设计高效的空调系统，并具备备用冷却系统以防主系统故障。</li>
</ol>
<h4 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h4><ol>
<li><strong>不间断电源（UPS）</strong>：确保在市电断电的情况下，关键设备能够继续运行。</li>
<li><strong>备用发电机</strong>：在长时间的电力中断时，能够供应机房所需的电力。</li>
<li><strong>电源分配单元（PDU）</strong>：合理分配电源，确保电力供应的稳定性与安全性。</li>
</ol>
<h4 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h4><ol>
<li><strong>网络安全设备</strong>：部署适当的防火墙和入侵检测系统来保障网络安全。</li>
<li><strong>数据备份</strong>：定期备份重要数据，并将备份保存在安全的离线位置。</li>
</ol>
<h4 id="管理措施"><a href="#管理措施" class="headerlink" title="管理措施"></a>管理措施</h4><ol>
<li><strong>访问记录</strong>：记录所有访问机房人员的详情，包括时间和日期。</li>
<li><strong>维护和操作程序</strong>：建立严格的维护和操作流程，确保每项操作都能追溯并符合安全规范。</li>
</ol>
<h4 id="法规遵从"><a href="#法规遵从" class="headerlink" title="法规遵从"></a>法规遵从</h4><ol>
<li><strong>符合当地法规</strong>：确保机房设计符合当地建筑、电力、消防等相关法规。</li>
<li><strong>行业标准遵从</strong>：遵循行业标准如TIA-942、ISO&#x2F;IEC 27001等。</li>
</ol>
<h4 id="灾害恢复"><a href="#灾害恢复" class="headerlink" title="灾害恢复"></a>灾害恢复</h4><ol>
<li><strong>灾害恢复计划</strong>：制定并定期测试灾害恢复计划，确保在灾难发生时能够快速恢复操作。</li>
</ol>
<p>这些安全因素的考虑能够确保机房免受各种潜在风险的影响，保障信息系统的稳定与数据的安全。在实际应用中，应根据机房的规模、功能和位置，以及所支持的业务的重要性，来确定上述安全措施的具体要求和实施方案。</p>
<h2 id="计算机取证-2"><a href="#计算机取证-2" class="headerlink" title="计算机取证"></a>计算机取证</h2><h3 id="知道常见的取证工具"><a href="#知道常见的取证工具" class="headerlink" title="知道常见的取证工具"></a>知道常见的取证工具</h3><p>确定系统的审核策略auditpol</p>
<p>转储Windows系统注册表中的特定信息（键）			reg</p>
<p>以文本文件格式转储注册表			regdump</p>
<p>转储SAM数据库，可破解密码			pwdump6</p>
<p>监控成功和失败的系统登录			NTLast</p>
<p>侦测隐藏在NTFS文件流中的文件			Sfind</p>
<p>扫描文件系统找出在某时段内被访问过的文件			Afind</p>
<p>转储Windows系统的事件日志			Dumpel</p>
<h3 id="制定一个简单的取证方案"><a href="#制定一个简单的取证方案" class="headerlink" title="制定一个简单的取证方案"></a>制定一个简单的取证方案</h3><p>制定一个简单的计算机取证方案包括多个步骤，每个步骤都需要遵循特定的协议和最佳实践。以下是一个基础的计算机取证方案示例：</p>
<h4 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h4><ul>
<li><strong>取证计划：</strong> 制定详细的取证分析计划，包括目标、作业范围、所需工具和资源等。</li>
<li><strong>法律考虑：</strong> 确保有合法权限进行取证调查，了解相关法律、法规和标准。</li>
<li><strong>取证工具和软件：</strong> 准备必要的取证工具，如磁盘镜像工具、文件恢复工具、取证分析软件等。</li>
<li><strong>取证团队：</strong> 确定参与取证分析的团队成员的角色和责任。</li>
</ul>
<h4 id="2-采集阶段"><a href="#2-采集阶段" class="headerlink" title="2. 采集阶段"></a>2. 采集阶段</h4><ul>
<li><strong>现场评估：</strong> 如果是实际现场，首先进行现场评估，记录现场情况，拍照或录像。</li>
<li><strong>证据保护：</strong> 确保证据不被篡改，避免在取证过程中电磁干扰或物理损坏。</li>
<li><strong>创建数据镜像：</strong> 对存储设备进行物理或逻辑镜像，并验证镜像的完整性（使用哈希值）。</li>
<li><strong>文档记录：</strong> 记录详细的证据采集过程，包括时间、日期、位置、人员、操作步骤等。</li>
</ul>
<h4 id="3-分析阶段"><a href="#3-分析阶段" class="headerlink" title="3. 分析阶段"></a>3. 分析阶段</h4><ul>
<li><strong>初步审查：</strong> 初步审查镜像文件以确认潜在的证据文件。</li>
<li><strong>文件恢复：</strong> 使用恢复工具寻找删除、隐藏或丢失的文件。</li>
<li><strong>日志文件分析：</strong> 分析系统、网络和应用程序的日志文件。</li>
<li><strong>关键词搜索：</strong> 执行关键词搜索，以查找相关的文件和通讯记录。</li>
<li><strong>时间线分析：</strong> 构建时间线，以了解事件发生的顺序。</li>
<li><strong>数据整理：</strong> 整理和分类发现的证据，准备报告。</li>
</ul>
<h4 id="4-文档和报告阶段"><a href="#4-文档和报告阶段" class="headerlink" title="4. 文档和报告阶段"></a>4. 文档和报告阶段</h4><ul>
<li><strong>报告编写：</strong> 编写详细的取证报告，包括方法、发现、结论和推荐。</li>
<li><strong>证据保管：</strong> 确保所有证据物品得到妥善保存，避免未授权访问和损坏。</li>
<li><strong>审阅和分析：</strong> 让同行或法律专家审阅报告，确保报告的准确性和完整性。</li>
</ul>
<h4 id="5-呈现阶段"><a href="#5-呈现阶段" class="headerlink" title="5. 呈现阶段"></a>5. 呈现阶段</h4><ul>
<li><strong>法庭陈述：</strong> 准备在法庭上作为证人陈述的材料，包括可视化展示证据。</li>
<li><strong>证据链维护：</strong> 在法庭上清晰地展示证据链，确保每一环都能够得到证明。</li>
</ul>
<h4 id="6-结束阶段"><a href="#6-结束阶段" class="headerlink" title="6. 结束阶段"></a>6. 结束阶段</h4><ul>
<li><strong>案件复盘：</strong> 审查整个案件处理过程，总结经验教训。</li>
<li><strong>数据销毁：</strong> 如果法律要求或客户同意，安全销毁敏感数据。</li>
</ul>
<p>在执行上述任何步骤时，都需要遵守诚信、保密和合法性的原则，确保证据的可靠性和法庭的可接受性。此外，整个过程中，团队成员应该接受定期培训，以确保他们的技能和知识与行业标准保持同步。</p>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>复习总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（5）——自定义Hexo文件</title>
    <url>/2023/07/19/hexo/Hexo_build05/</url>
    <content><![CDATA[<h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><p>修改站点配置文件 <code>_config.yml</code></p>
<p>默认语言是 <code>en</code></p>
<p>主题支持三种语言</p>
<ul>
<li>default(en)</li>
<li>zh-CN (简体中文)</li>
<li>zh-TW (繁体中文)</li>
</ul>
<h1 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h1><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改博客根目录的<code>_config.yml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: ZYH&#x27;s blog #网站标题</span><br><span class="line">subtitle: &#x27;&#x27; #网站副标题subtitle</span><br><span class="line"># 下面description,keywords，如果想让搜索引擎收录需要填上，这个做SEO优化必不可忽视的两个属性</span><br><span class="line">description: #网站描述</span><br><span class="line">keywords: #网站的关键词</span><br><span class="line">author: Charmes #作者，文章版权所显示的</span><br><span class="line">language: zh-CN #网站语言，不填写，默认为英文</span><br><span class="line">timezone: &#x27;&#x27; #时区，可以不填写</span><br></pre></td></tr></table></figure>



<h1 id="配置分类页"><a href="#配置分类页" class="headerlink" title="配置分类页"></a>配置分类页</h1><ol>
<li><p>新建分类categories 页</p>
<p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<p>编辑刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2023-07-21 00:57:33</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建标签tags页</p>
<p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 tags&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2023-07-21 00:57:33</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建关于我about页</p>
<p>同上，秩序把相关信息改成<code>about</code></p>
</li>
<li><p>新建留言板contact页（可选）</p>
<p>同上，秩序把相关信息改成<code>about</code></p>
</li>
<li><p>新建友情链接friends页（可选）</p>
<p>同上，秩序把相关信息改成<code>about</code></p>
<p>同时，在你的博客 <code>source</code> 目录下新建 _data 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    &quot;avatar&quot;: &quot;&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;&quot;,</span><br><span class="line">    &quot;introduction&quot;: &quot;&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建404页</p>
<p>同上，秩序把相关信息改成<code>about</code></p>
<p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 2018-09-30 17:25:30</span><br><span class="line">type: &quot;404&quot;</span><br><span class="line">layout: &quot;404&quot;</span><br><span class="line">description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（6）——魔改主题文件（基础）</title>
    <url>/2023/07/20/hexo/Hexo_build06/</url>
    <content><![CDATA[<h1 id="导航栏设置-Navigation-bar-settings"><a href="#导航栏设置-Navigation-bar-settings" class="headerlink" title="导航栏设置 (Navigation bar settings)"></a>导航栏设置 (Navigation bar settings)</h1><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p>主题配置文件中（注意不是根目录配置文件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nav:</span><br><span class="line">  logo: #image</span><br><span class="line">  display_title: true</span><br><span class="line">  fixed: false # fixed navigation bar</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>logo</td>
<td>网站的 logo，支持图片，直接填入图片链接</td>
</tr>
<tr>
<td>display_title</td>
<td>是否显示网站标题，填写 true 或者 false</td>
</tr>
<tr>
<td>fixed</td>
<td>是否固定状态栏，填写 true 或者 false</td>
</tr>
</tbody></table>
<h2 id="菜单-目录"><a href="#菜单-目录" class="headerlink" title="菜单&#x2F;目录"></a>菜单&#x2F;目录</h2><p>​	修改 <code>主题配置文件</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Home: / || fas fa-home</span><br><span class="line">Archives: /archives/ || fas fa-archive</span><br><span class="line">Tags: /tags/ || fas fa-tags</span><br><span class="line">Categories: /categories/ || fas fa-folder-open</span><br><span class="line">List||fas fa-list:</span><br><span class="line">  Music: /music/ || fas fa-music</span><br><span class="line">  Movie: /movies/ || fas fa-video</span><br><span class="line">Link: /link/ || fas fa-link</span><br><span class="line">About: /about/ || fas fa-heart</span><br></pre></td></tr></table></figure>

<p>必须是 <code>/xxx/</code>，后面<code>||</code>分开，然后写图标名。</p>
<p>如果不希望显示图标，图标名可不写。</p>
<p>默认子目录是展开的，如果你想要隐藏，在子目录里添加 <code>hide</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List||fas fa-list||hide:</span><br><span class="line">  Music: /music/ || fas fa-music</span><br><span class="line">  Movie: /movies/ || fas fa-video</span><br></pre></td></tr></table></figure>

<p>注意： 导航的文字可自行更改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  首页: / || fas fa-home</span><br><span class="line">  时间轴: /archives/ || fas fa-archive</span><br><span class="line">  标签: /tags/ || fas fa-tags</span><br><span class="line">  分类: /categories/ || fas fa-folder-open</span><br><span class="line">  清单||fa fa-heartbeat:</span><br><span class="line">    音乐: /music/ || fas fa-music</span><br><span class="line">    照片: /Gallery/ || fas fa-images</span><br><span class="line">    电影: /movies/ || fas fa-video</span><br><span class="line">  友链: /link/ || fas fa-link</span><br><span class="line">  关于: /about/ || fas fa-heart</span><br></pre></td></tr></table></figure>



<h1 id="代码-Code-Blocks"><a href="#代码-Code-Blocks" class="headerlink" title="代码 (Code Blocks)"></a>代码 (Code Blocks)</h1><h2 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h2><p>Butterfly 支持6种代码高亮样式：</p>
<ul>
<li>darker</li>
<li>pale night</li>
<li>light</li>
<li>ocean</li>
<li>mac</li>
<li>mac light</li>
</ul>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_theme: light</span><br></pre></td></tr></table></figure>



<h2 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h2><p>主题支持代码复制功能</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_copy: true</span><br></pre></td></tr></table></figure>



<h2 id="代码框展开-关闭"><a href="#代码框展开-关闭" class="headerlink" title="代码框展开&#x2F;关闭"></a>代码框展开&#x2F;关闭</h2><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击&gt;可展开代码</p>
<ul>
<li>true 全部代码框不展开，需点击&gt;打开</li>
<li>false 代码框展开，有&gt;点击按钮</li>
<li>none 不显示&gt;按钮</li>
</ul>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_shrink: true #代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span><br></pre></td></tr></table></figure>

<p>你也可以在<code>post/page</code>页对应的markdown文件<code>front-matter</code>添加highlight_shrink来独立配置。</p>
<p>当主题配置文件中的 <code>highlight_shrink</code> 设为<code>true</code>时，可在<code>front-matter</code>添加<code>highlight_shrink: false</code>来单独配置文章展开代码框。</p>
<p>当主题配置文件中的 <code>highlight_shrink</code> 设为<code>false</code>时，可在<code>front-matter</code>添加<code>highlight_shrink: true</code>来单独配置文章收缩代码框。</p>
<h2 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h2><p>在默认情况下，Hexo 在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code_word_wrap: true</span><br></pre></td></tr></table></figure>



<h1 id="社交图标-Social-Settings"><a href="#社交图标-Social-Settings" class="headerlink" title="社交图标 (Social Settings)"></a>社交图标 (Social Settings)</h1><p><code>Butterfly</code>支持 <code>font-awesome v6</code> 图标.</p>
<p>书写格式 图标名：<code>url || 描述性文字 || color</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  fab fa-github: https://github.com/xxxxx || Github || &quot;#hdhfbb&quot;</span><br><span class="line">  fas fa-envelope: mailto:xxxxxx@gmail.com || Email || &quot;#000000&quot;</span><br></pre></td></tr></table></figure>



<h1 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h1><p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  img: /img/avatar.png</span><br><span class="line">  effect: true # 头像会一直转圈</span><br></pre></td></tr></table></figure>



<h1 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h1><p>如果不要显示顶部图，可直接配置 <code>disable_top_img: true</code></p>
<p>顶部图的获取顺序，如果都没有配置，则不显示顶部图。</p>
<ol>
<li><p>页面顶部图的获取顺序：</p>
<p>各自配置的 <code>top_img &gt;</code> 配置文件的 <code>default_top_img</code></p>
</li>
<li><p>文章页顶部图的获取顺序：</p>
<p>各自配置的 <code>top_img &gt; cover &gt;</code> 配置文件的 <code>default_top_img</code></p>
</li>
</ol>
<p>配置中的值：</p>
<table>
<thead>
<tr>
<th>配置</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>index_img</td>
<td>主页的 top_img</td>
</tr>
<tr>
<td>default_top_img</td>
<td>默认的 top_img，当页面的 top_img 没有配置时，会显示 default_top_img</td>
</tr>
<tr>
<td>archive_img</td>
<td>归档页面的 top_img</td>
</tr>
<tr>
<td>tag_img</td>
<td>tag 子页面 的 默认 top_img</td>
</tr>
<tr>
<td>tag_per_img</td>
<td>tag 子页面的 top_img，可配置每个 tag 的 top_img</td>
</tr>
<tr>
<td>category_img</td>
<td>category 子页面 的 默认 top_img</td>
</tr>
<tr>
<td>category_per_img</td>
<td>category 子页面的 top_img，可配置每个 category 的 top_img</td>
</tr>
</tbody></table>
<p>并不推荐为每个 tag 和每个 category 都配置不同的顶部图，因为配置太多会拖慢生成速度</p>
<h1 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h1><p>文章的 <code>markdown</code> 文档上,在 <code>Front-matter</code> 添加 <code>cover</code> ,并填上要显示的图片地址。</p>
<p>如果不配置 <code>cover</code>,可以设置显示默认的 <code>cover</code>。</p>
<p>如果不想在首页显示 <code>cover</code>, 可以设置为 <code>false</code>。</p>
<p>文章封面的获取顺序 <code>Front-matter</code> 的 cover &gt; 配置文件的 default_cover &gt; false</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cover:</span><br><span class="line">  # 是否显示文章封面</span><br><span class="line">  index_enable: true #主页是否显示文章封面图</span><br><span class="line">  aside_enable: true #侧栏是否显示文章封面图</span><br><span class="line">  archives_enable: true #	归档页面是否显示文章封面图</span><br><span class="line">  # 封面显示的位置</span><br><span class="line">  # 三个值可配置 left , right , both</span><br><span class="line">  position: both</span><br><span class="line">  # 当没有设置cover时，默认的封面显示</span><br><span class="line">  default_cover: </span><br></pre></td></tr></table></figure>

<p>当配置多张图片时,会随机选择一张作为cover.此时写法应为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default_cover:</span><br><span class="line">  - https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg.png</span><br><span class="line">  - https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg2.png</span><br><span class="line">  - https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg3.png</span><br></pre></td></tr></table></figure>



<h1 id="页面-meta-显示"><a href="#页面-meta-显示" class="headerlink" title="页面 meta 显示"></a>页面 meta 显示</h1><p>这个选项是用来显示文章的相关信息的。</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_meta:</span><br><span class="line">  page:</span><br><span class="line">    date_type: both # created or updated or both 主页文章日期是创建日或者更新日或都显示</span><br><span class="line">    date_format: relative # date/relative 显示日期还是相对日期</span><br><span class="line">    categories: true # true or false 主页是否显示分类</span><br><span class="line">    tags: true # true or false 主页是否显示标签</span><br><span class="line">    label: true # true or false 显示描述性文字</span><br><span class="line">  post:</span><br><span class="line">    date_type: both # created or updated or both 文章页日期是创建日或者更新日或都显示</span><br><span class="line">    date_format: relative # date/relative 显示日期还是相对日期</span><br><span class="line">    categories: true # true or false 文章页是否显示分类</span><br><span class="line">    tags: true # true or false 文章页是否显示标签</span><br><span class="line">    label: true # true or false 显示描述性文字</span><br></pre></td></tr></table></figure>



<h1 id="主页文章节选-自动节选和文章页description"><a href="#主页文章节选-自动节选和文章页description" class="headerlink" title="主页文章节选(自动节选和文章页description)"></a>主页文章节选(自动节选和文章页description)</h1><p>因为主题UI的关係，主页文章节选只支持自动节选和文章页<code>description</code>。</p>
<p>在<code>butterfly</code>里，有四种可供选择</p>
<ol>
<li>description： 只显示<code>description</code></li>
<li>both： 优先选择&#96;&#96;，如果没有配置description，则显示自动节选的内容</li>
<li>auto_excerpt：只显示自动节选</li>
<li>false： 不显示文章内容</li>
</ol>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index_post_content:</span><br><span class="line">  method: 3</span><br><span class="line">  length: 500 # if you set method to 2 or 3, the length need to config</span><br></pre></td></tr></table></figure>



<h2 id="页面锚点"><a href="#页面锚点" class="headerlink" title="页面锚点"></a>页面锚点</h2><p>开启页面锚点后，当你在进行滚动时，页面链接会根据标题ID进行替换<br>(注意: 每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># anchor</span><br><span class="line"># when you scroll in post , the url will update according to header id.</span><br><span class="line">anchor:</span><br><span class="line">  button:</span><br><span class="line">    enable: false</span><br><span class="line">    always_show: false</span><br><span class="line">    icon: # the unicode value of Font Awesome icon, such as &#x27;\3423&#x27;</span><br><span class="line">  auto_update: false # when you scroll in post, the URL will update according to header id.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="复制相关配置"><a href="#复制相关配置" class="headerlink" title="复制相关配置"></a>复制相关配置</h2><p>可配置网站是否可以复制、复制的内容是否添加版权信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># copy settings</span><br><span class="line"># copyright: Add the copyright information after copied content (复制的内容后面加上版权信息)</span><br><span class="line">copy:</span><br><span class="line">  enable: true #	是否开启网站复制权限</span><br><span class="line">  copyright: #复制的内容后面加上版权信息</span><br><span class="line">    enable: true #	是否开启复制版权信息添加</span><br><span class="line">    limit_count: 50 #字数限制，当复制文字大于这个字数限制时，将在复制的内容后面加上版权信息</span><br></pre></td></tr></table></figure>



<h1 id="文章页相关配置"><a href="#文章页相关配置" class="headerlink" title="文章页相关配置"></a>文章页相关配置</h1><h2 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h2><p>为你的博客文章展示文章版权和许可协议。</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: false</span><br><span class="line">  author_href:</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></pre></td></tr></table></figure>



<h2 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h2><p>在你每篇文章的结尾，可以添加打赏按钮。相关二维码可以自行配置。</p>
<p>对于没有提供二维码的，可配置一张软件的<code>icon</code>图片，然后在link上添加相应的打赏链接。用户点击图片就会跳转到链接去。</p>
<p><code>link</code>可以不写，会默认为图片的链接。</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reward:</span><br><span class="line">  enable: true</span><br><span class="line">  QR_code:</span><br><span class="line">    - img: /img/wechat.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: 微信</span><br><span class="line">    - img: /img/alipay.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: 支付宝</span><br></pre></td></tr></table></figure>



<h1 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h1><p>在文章页，会有一个目录，用于显示TOC。</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  post: true #文章页是否显示 TOC</span><br><span class="line">  page: true #	普通页面是否显示 TOC</span><br><span class="line">  number: true #	是否显示章节数</span><br><span class="line">  expand: false #是否展开 TOC</span><br><span class="line">  style_simple: false # for post #简洁模式（侧边栏只显示 TOC, 只对文章页有效 ）</span><br><span class="line">  scroll_percent: true #	是否显示滚动进度百分比</span><br></pre></td></tr></table></figure>



<h1 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h1><p>可设置是否显示文章过期提醒，以更新时间为基准。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Displays outdated notice for a post (文章过期提醒)</span><br><span class="line">noticeOutdate:</span><br><span class="line">  enable: true</span><br><span class="line">  style: flat # style: simple/flat</span><br><span class="line">  limit_day: 365 # When will it be shown</span><br><span class="line">  position: top # position: top/bottom</span><br><span class="line">  message_prev: It has been</span><br><span class="line">  message_next: days since the last update, the content of the article may be outdated.</span><br></pre></td></tr></table></figure>

<p><code>limit_day</code>： 距离更新时间多少天才显示文章过期提醒</p>
<p><code>message_prev</code> ： 天数之前的文字</p>
<p><code>message_next</code>：天数之后的文字</p>
<h1 id="文章分页按钮"><a href="#文章分页按钮" class="headerlink" title="文章分页按钮"></a>文章分页按钮</h1><p>当文章封面设置为 false 时，或者没有获取到封面配置，分页背景将会显示主题色。</p>
<p>可设置分页的逻辑，也可以关闭分页显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># post_pagination (分页)</span><br><span class="line"># value: 1 || 2 || false</span><br><span class="line"># 1: The &#x27;next post&#x27; will link to old post</span><br><span class="line"># 2: The &#x27;next post&#x27; will link to new post</span><br><span class="line"># false: disable pagination</span><br><span class="line">post_pagination: false</span><br></pre></td></tr></table></figure>



<h1 id="Footer-设置"><a href="#Footer-设置" class="headerlink" title="Footer 设置"></a>Footer 设置</h1><h2 id="博客年份"><a href="#博客年份" class="headerlink" title="博客年份"></a>博客年份</h2><p><code>since</code>是一个来展示你站点起始时间的选项。它位于页面的最底部。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  owner:</span><br><span class="line">    enable: true</span><br><span class="line">    since: 2018</span><br></pre></td></tr></table></figure>



<h2 id="页脚自定义文本"><a href="#页脚自定义文本" class="headerlink" title="页脚自定义文本"></a>页脚自定义文本</h2><p><code>custom_text</code>是一个给你用来在页脚自定义文本的选项。通常你可以在这里写声明文本等。支持 HTML。</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom_text: Hi, welcome to my &lt;a href=&quot;https://butterfly.js.org/&quot;&gt;blog&lt;/a&gt;!</span><br></pre></td></tr></table></figure>

<p>对于部分人需要写 ICP 的，也可以写在 <code>custom_text</code>里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom_text: &lt;a href=&quot;icp链接&quot;&gt;&lt;img class=&quot;icp-icon&quot; src=&quot;icp图片&quot;&gt;&lt;span&gt;备案号：xxxxxx&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>



<h1 id="侧边栏设置-aside"><a href="#侧边栏设置-aside" class="headerlink" title="侧边栏设置 (aside)"></a>侧边栏设置 (aside)</h1><h2 id="侧边排版"><a href="#侧边排版" class="headerlink" title="侧边排版"></a>侧边排版</h2><p>可自行决定哪个项目需要显示，可决定位置，也可以设置不显示侧边栏。</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # left or right</span><br><span class="line">  display:</span><br><span class="line">    archive: true</span><br><span class="line">    tag: true</span><br><span class="line">    category: true</span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    description:</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: fab fa-github</span><br><span class="line">      text: Follow Me</span><br><span class="line">      link: https://github.com/xxxxxx</span><br><span class="line">  card_announcement:</span><br><span class="line">    enable: true</span><br><span class="line">    content: This is my Blog</span><br><span class="line">  card_recent_post:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 5 # if set 0 will show all</span><br><span class="line">    sort: date # date or updated</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_categories:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    expand: none # none/true/false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_tags:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 40 # if set 0 will show all</span><br><span class="line">    color: false</span><br><span class="line">    orderby: random # Order of tags, random/name/length</span><br><span class="line">    order: 1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_archives:</span><br><span class="line">    enable: true</span><br><span class="line">    type: monthly # yearly or monthly</span><br><span class="line">    format: MMMM YYYY # eg: YYYY年MM月</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_webinfo:</span><br><span class="line">    enable: true</span><br><span class="line">    post_count: true</span><br><span class="line">    last_push_date: true</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br></pre></td></tr></table></figure>



<h1 id="访问人数-busuanzi-UV-和-PV"><a href="#访问人数-busuanzi-UV-和-PV" class="headerlink" title="访问人数 busuanzi (UV 和 PV)"></a>访问人数 busuanzi (UV 和 PV)</h1><p>访问 busuanzi 的官方网站查看更多的介绍。<a href="http://busuanzi.ibruce.info/">不蒜子 - 极简网页计数器 (ibruce.info)</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br></pre></td></tr></table></figure>



<h2 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h2><p>网页已运行时间</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 6/7/2018 00:00:00  </span><br><span class="line">  ##网页开通时间</span><br><span class="line">  #格式: 月/日/年 时间</span><br><span class="line">  #也可以写成 年/月/日 时间</span><br></pre></td></tr></table></figure>



<h2 id="最新评论"><a href="#最新评论" class="headerlink" title="最新评论"></a>最新评论</h2><p>3.1.0 起支持</p>
<p>最新评论只会在刷新时才会去读取，并不会实时变化</p>
<blockquote>
<p>由于 API 有 访问次数限制，为了避免调用太多，主题默认存取期限为 10 分钟。也就是説，调用后资料会存在 localStorage 里，10分钟内刷新网站只会去 localStorage 读取资料。 10 分钟期限一过，刷新页面时才会去调取 API 读取新的数据。（ 3.6.0 新增了 storage 配置，可自行配置缓存时间）</p>
</blockquote>
<p>在侧边栏显示最新评论板块</p>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Aside widget - Newest Comments</span><br><span class="line">newest_comments:</span><br><span class="line">  enable: true</span><br><span class="line">  sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  limit: 6 #显示的数量</span><br><span class="line">  storage: 10 # unit: mins, save data to localStorage 设置缓存时间，单位 分钟</span><br><span class="line">  avatar: true #	是否显示头像</span><br></pre></td></tr></table></figure>



<h2 id="閲读模式"><a href="#閲读模式" class="headerlink" title="閲读模式"></a>閲读模式</h2><p>閲读模式下会去掉除文章外的内容，避免干扰閲读。</p>
<p>只会出现在文章页面，右下角会有閲读模式按钮。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readmode: true</span><br></pre></td></tr></table></figure>



<h2 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h2><p>右下角会有夜间模式按钮</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># dark mode</span><br><span class="line">darkmode:</span><br><span class="line">  enable: true</span><br><span class="line">  # dark mode和 light mode切换按钮</span><br><span class="line">  button: true #	是否在右下角显示日夜模式切换按钮</span><br><span class="line">  autoChangeMode: false</span><br><span class="line">  # Set the light mode time. The value is between 0 and 24. If not set, the default value is 6 and 18</span><br><span class="line">  start: # 8</span><br><span class="line">  end: # 22</span><br></pre></td></tr></table></figure>



<h2 id="滚动状态百分比"><a href="#滚动状态百分比" class="headerlink" title="滚动状态百分比"></a>滚动状态百分比</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># show scroll percent in scroll-to-top button</span><br><span class="line">rightside_scroll_percent: true</span><br></pre></td></tr></table></figure>



<h2 id="按钮排序"><a href="#按钮排序" class="headerlink" title="按钮排序"></a>按钮排序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Don&#x27;t modify the following settings unless you know how they work (非必要请不要修改 )</span><br><span class="line"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span><br><span class="line"># Don&#x27;t repeat 不要重复</span><br><span class="line">rightside_item_order:</span><br><span class="line">  enable: false</span><br><span class="line">  hide: # readmode,translate,darkmode,hideAside</span><br><span class="line">  show: # toc,chat,comment</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
        <tag>Butterfly主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（9）——魔改主题文件（高级）</title>
    <url>/2023/07/23/hexo/Hexo_build09/</url>
    <content><![CDATA[<h1 id="“前面的区域以后再来探索吧”"><a href="#“前面的区域以后再来探索吧”" class="headerlink" title="“前面的区域以后再来探索吧”"></a>“前面的区域以后再来探索吧”</h1>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
        <tag>Butterfly主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（7）——魔改主题文件（提高）</title>
    <url>/2023/07/21/hexo/Hexo_build07/</url>
    <content><![CDATA[<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="Algolia"><a href="#Algolia" class="headerlink" title="Algolia"></a>Algolia</h2><blockquote>
<p>记得运行 <code>hexo clean</code></p>
<p>如果你使用 <code>hexo-algoliasearch</code>，请记得配置 <code>fields</code> 参数的 <code>title, permalink 和 content</code></p>
<p>你需要安装 <code>hexo-algolia</code>或 <code>hexo-algoliasearch</code>. 根据它们的説明文档去做相应的配置。</p>
</blockquote>
<p>修改 主题配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">algolia_search:</span><br><span class="line">  enable: true</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 6</span><br></pre></td></tr></table></figure>



<h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><p>你需要安装 <code>hexo-generator-searchdb</code> 或者 <code>hexo-generator-search</code>，根据它的文档去做相应配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: false</span><br><span class="line">  # Preload the search data when the page loads. 预加载，开启后，进入网页后会自动加载搜索文件。关闭时，只有点击搜索按钮后，才会加载搜索文件</span><br><span class="line">  preload: false</span><br><span class="line">  # Show top n results per article, show all results by setting to -1 匹配的文章结果，默认显示最开始的 1段结果</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.将 html 字符串解码为可读字符串</span><br><span class="line">  unescape: false</span><br><span class="line">  CDN: #搜索文件的 CDN 地址（默认使用的本地链接）</span><br></pre></td></tr></table></figure>



<h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><p>从3.0.0开始，开启评论需要在comments-use中填写你需要的评论。</p>
<p>支持双评论显示，只需要配置两个评论（第一个为默认显示）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comments:</span><br><span class="line">  # Up to two comments system, the first will be shown as default</span><br><span class="line">  # Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo</span><br><span class="line">  use: Valine,Disqus #	使用的评论（请注意，最多支持两个，如果不需要请留空）</span><br><span class="line">  text: true # Display the comment name next to the button 	是否显示评论服务商的名字</span><br><span class="line">  # lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.是否为评论开启lazyload，开启后，只有滚动到评论位置时才会加载评论所需要的资源（开启 lazyload 后，评论数将不显示）</span><br><span class="line">  # If you set it to true, the comment count will be invalid</span><br><span class="line">  lazyload: true</span><br><span class="line">  count: true # Display comment count in top_img 	是否在文章顶部显示评论数</span><br><span class="line">  card_post_count: false # Display comment count in Home Page 是否在首页文章卡片显示评论数</span><br></pre></td></tr></table></figure>

<p>我这里刚开始配置的是Valine，后来因为加评论功能备案不好过就给删了。</p>
<p>遵循 Valine的指示去配置你的 LeanCloud 应用。以及查看相应的配置説明。</p>
<blockquote>
<p>开启 visitor 后，文章页的访问人数将改为 Valine 提供，而不是 不蒜子</p>
</blockquote>
<p>Valine于 v1.4.5 开始支持自定义表情，如果你需要自行配置，请在<code>emojiCDN</code>配置表情 CDN。</p>
<p>同时在<code>Hexo</code> 工作目录下的<code>source/_data/</code>创建一个<code>json</code>文件<code>valine.json</code>,等同于 <code>Valine</code> 需要配置的<code>emojiMaps</code></p>
<h2 id="再次开启评论"><a href="#再次开启评论" class="headerlink" title="再次开启评论"></a>再次开启评论</h2><p>由于valine已经落后了，所以这回又新开了一个评论功能，采用twikoo评论功能。安装详见<a href="https://www.bilibili.com/video/av646135382/?vd_source=845dacbec2fc56dd00bc736f8d842991">butterfly配置twikoo评论系统</a></p>
<p>挂载Akismet 反垃圾评论，按要求注册即可。</p>
<h1 id="美化-特效"><a href="#美化-特效" class="headerlink" title="美化&#x2F;特效"></a>美化&#x2F;特效</h1><h2 id="自定义主题色"><a href="#自定义主题色" class="headerlink" title="自定义主题色"></a>自定义主题色</h2><p>可以修改大部分UI颜色</p>
<blockquote>
<p>颜色值必须被双引号包裹，就像”#000”而不是#000。否则将会在构建的时候报错！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme_color:</span><br><span class="line">  enable: true</span><br><span class="line">  main: &quot;#49B1F5&quot;</span><br><span class="line">  paginator: &quot;#00c4b6&quot;</span><br><span class="line">  button_hover: &quot;#FF7242&quot;</span><br><span class="line">  text_selection: &quot;#00c4b6&quot;</span><br><span class="line">  link_color: &quot;#99a9bf&quot;</span><br><span class="line">  meta_color: &quot;#858585&quot;</span><br><span class="line">  hr_color: &quot;#A4D8FA&quot;</span><br><span class="line">  code_foreground: &quot;#F47466&quot;</span><br><span class="line">  code_background: &quot;rgba(27, 31, 35, .05)&quot;</span><br><span class="line">  toc_color: &quot;#00c4b6&quot;</span><br><span class="line">  blockquote_padding_color: &quot;#49b1f5&quot;</span><br><span class="line">  blockquote_background_color: &quot;#49b1f5&quot;</span><br><span class="line">  scrollbar_color: &quot;#49b1f5&quot;</span><br></pre></td></tr></table></figure>



<h2 id="主页top-img显示大小"><a href="#主页top-img显示大小" class="headerlink" title="主页top_img显示大小"></a>主页top_img显示大小</h2><p>默认的显示为全屏。site-info的区域会居中显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 主页设置</span><br><span class="line"># 默认top_img全屏，site_info在中间</span><br><span class="line"># 使用默认, 都无需填写（建议默认）</span><br><span class="line">index_site_info_top: # 主页标题距离顶部距离  例如 300px/300em/300rem/10%</span><br><span class="line">index_top_img_height:  #主页top_img高度 例如 300px/300em/300rem  不能使用百分比</span><br></pre></td></tr></table></figure>



<h2 id="网站背景"><a href="#网站背景" class="headerlink" title="网站背景"></a>网站背景</h2><p>默认显示白色，可设置图片或者颜色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 图片格式 url(http://xxxxxx.com/xxx.jpg)</span><br><span class="line"># 颜色（HEX值/RGB值/顔色单词/渐变色)</span><br><span class="line"># 留空 不显示背景</span><br><span class="line">background:</span><br></pre></td></tr></table></figure>

<blockquote>
<p>留意: 如果你的网站根目录不是’&#x2F;‘,使用本地图片时，需加上你的根目录。<br>例如：网站是 <a href="https://yoursite.com/blog,%E5%BC%95%E7%94%A8%E4%B8%80%E5%BC%A0img/xx.png%E5%9B%BE%E7%89%87%EF%BC%8C%E5%88%99%E8%AE%BE%E7%BD%AEbackground%E4%B8%BA">https://yoursite.com/blog,引用一张img/xx.png图片，则设置background为</a> &#96;url(&#x2F;blog&#x2F;img&#x2F;xx.png)</p>
</blockquote>
<h2 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h2><p>打字效果activate-power-mode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Typewriter Effect (打字效果)</span><br><span class="line"># https://github.com/disjukr/activate-power-mode</span><br><span class="line">activate_power_mode:</span><br><span class="line">  enable: true</span><br><span class="line">  colorful: true # open particle animation (冒光特效)</span><br><span class="line">  shake: true #  open shake (抖动特效)</span><br><span class="line">  mobile: false</span><br></pre></td></tr></table></figure>



<h2 id="背景特效"><a href="#背景特效" class="headerlink" title="背景特效"></a>背景特效</h2><h3 id="静止彩带"><a href="#静止彩带" class="headerlink" title="静止彩带"></a>静止彩带</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: false</span><br><span class="line">  size: 150</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br><span class="line">  click_to_change: false  #设置是否每次点击都更换綵带</span><br><span class="line">  mobile: false # false 手机端不显示 true 手机端显示</span><br></pre></td></tr></table></figure>



<h3 id="动态彩带"><a href="#动态彩带" class="headerlink" title="动态彩带"></a>动态彩带</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_fluttering_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  mobile: false # false 手机端不显示 true 手机端显示</span><br></pre></td></tr></table></figure>



<h3 id="光点"><a href="#光点" class="headerlink" title="光点"></a>光点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &#x27;0,0,255&#x27; #color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(note: use &#x27;,&#x27; to separate.)</span><br><span class="line">  opacity: 0.7 # the opacity of line (0~1), default: 0.5.</span><br><span class="line">  zIndex: -1 # z-index property of the background, default: -1.</span><br><span class="line">  count: 99 # the number of lines, default: 99.</span><br><span class="line">  mobile: false # false 手机端不显示 true 手机端显示</span><br></pre></td></tr></table></figure>



<h2 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h2><h3 id="烟花"><a href="#烟花" class="headerlink" title="烟花"></a>烟花</h3><p><code>zIndex</code>建议只在-1和9999上选<br><code>-1</code> 代表烟火效果在底部<br><code>9999</code> 代表烟火效果在前面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fireworks:</span><br><span class="line">  enable: true</span><br><span class="line">  zIndex: 9999 # -1 or 9999</span><br><span class="line">  mobile: false</span><br></pre></td></tr></table></figure>



<h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>要为Butterfly配上字数统计特性, 你需要如下几个步骤:</p>
<p>打开 hexo 工作目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save or yarn add hexo-wordcount</span><br></pre></td></tr></table></figure>

<p>修改 主题配置文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure>



<h1 id="Live2D教程-看板娘"><a href="#Live2D教程-看板娘" class="headerlink" title="Live2D教程-看板娘"></a>Live2D教程-看板娘</h1><p>参考：<a href="https://www.fomal.cc/posts/eec9786.html#%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%94%B5%E5%AD%90%E6%97%B6%E9%92%9F-%E5%AE%89%E7%9F%A5%E9%B1%BC">博客魔改教程总结(一) | Fomalhaut🥝</a></p>
<p>目前只推荐这个(因为消耗资源较少)，这是博客自带的看板娘，这孩子不会说话也不能换装，只会跟着你的鼠标晃动脑袋，不过有几款超可爱。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>在Hexo根目录<code>[BlogRoot]</code>下打开终端，输入以下指令安装必要插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开站点配置文件<code>[BlogRoot]\config.yml</code><br>搜索live2d,按照如下注释内容指示进行操作。<br>如果没有搜到live2d的配置项，就直接把以下内容复制到最底部。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true #开关插件版看板娘</span><br><span class="line">  scriptFrom: local # 默认</span><br><span class="line">  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets/ # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  # scriptFrom: https://npm.elemecdn.com/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko # npm-module package name</span><br><span class="line">    # use: wanko # 博客根目录/live2d_models/ 下的目录名</span><br><span class="line">    # use: ./wives/wanko # 相对于博客根目录的路径</span><br><span class="line">    # use: https://npm.elemecdn.com/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span><br><span class="line">  display:</span><br><span class="line">    position: right #控制看板娘位置</span><br><span class="line">    width: 150 #控制看板娘大小</span><br><span class="line">    height: 300 #控制看板娘大小</span><br><span class="line">  mobile:</span><br><span class="line">    show: true # 手机中是否展示</span><br></pre></td></tr></table></figure>
</li>
<li><p>完成后保存修改，在Hexo根目录下运行指令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>之所以必须要使用<code>hexo clean</code>是因为我们需要清空缓存重新生成静态页面，不然看板娘没被加入生成的静态页面里，是不会出现的。</p>
</li>
</ol>
<h2 id="更换"><a href="#更换" class="headerlink" title="更换"></a>更换</h2><ol>
<li><p>同样是在Hexo根目录<code>[BlogRoot]</code>下，打开终端，选择想要的看板娘进行安装，例如我这里用到的是 <code>live2d-widget-model-koharu</code>，一个Q版小正太。其他的模型也可以在<a href="https://huaji8.top/post/live2d-plugin-2.0/">模型预览</a>里查看以供选择。</p>
</li>
<li><p>输入指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-koharu</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在站点配置文件<code>[BlogRoot]\_config.yml</code>里找到<code>model</code>项修改为期望的模型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">model:</span><br><span class="line">  use: live2d-widget-model-koharu</span><br><span class="line">  # 默认为live2d-widget-model-wanko</span><br></pre></td></tr></table></figure>
</li>
<li><p>之后按部就班的运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>就能在<code>localhost:4000</code>上查看效果了。</p>
</li>
</ol>
<h2 id="卸载看板娘"><a href="#卸载看板娘" class="headerlink" title="卸载看板娘"></a>卸载看板娘</h2><p>卸载插件和卸载模型的指令都是通过npm进行操作的。在博客根目录<code>[BlogRoot]</code>打开终端，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d <span class="comment">#卸载看板娘插件</span></span><br><span class="line">npm uninstall live2d-widget-model-modelname <span class="comment">#卸载看板娘模型。记得替换modelname为看板娘名称</span></span><br></pre></td></tr></table></figure>

<p>卸载后为了保证配置项不出错，记得把<code>[BlogRoot]\_config.yml</code>里的配置项给注释或者删除掉。</p>
<h1 id="一图流教程"><a href="#一图流教程" class="headerlink" title="一图流教程"></a>一图流教程</h1><ol>
<li><p>在<code>[BlogRoot]\source</code>文件夹下新建一个文件夹<code>css</code>，该文件夹用于存放自定义的<code>css样式</code>，再新建一个名为<code>custom.css</code>，在里面写入以下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 页脚与头图透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 白天模式遮罩透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩透明 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>[BlogRoot]\_config.butterfly.yml</code>文件中的<code>inject</code>配置项的<code>head</code>子项加入以下代码，代表引入刚刚创建的<code>custom.css</code>文件（这是相对路径的写法）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom.css&quot; media=&quot;defer&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>[BlogRoot]\_config.butterfly.yml</code>文件中的<code>index_img</code>和<code>footer_bg</code>配置项取消头图与页脚图的加载项避免冗余加载</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>部分人反映一图流改完了背景图也没了，那大概率是你之前没设置背景图。在主题配置文件<code>[BlogRoot]\_config.butterfly.yml</code>文件中的<code>background</code>配置项设置背景图</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">background:</span> <span class="string">url(https://source.fomal.cc/img/home_bg.webp)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="黑夜霓虹灯1-0（js计时器实现）"><a href="#黑夜霓虹灯1-0（js计时器实现）" class="headerlink" title="黑夜霓虹灯1.0（js计时器实现）"></a>黑夜霓虹灯1.0（js计时器实现）</h1><p>此教程会有两处地方有霓虹灯效果：一个是大标题和个人信息的动态霓虹灯，默认周期为1200ms；另外的是菜单栏的小字有夜光效果，为你的博客增添几分赛博朋克风~</p>
<ol>
<li><p>首先在自定义的样式文件<code>[BlogRoot]\source\css\custom.css</code>中引入以下代码，变量部分<code>var(--theme-color)</code>可以换为自己喜欢的颜色，例如紫色<code>rgb(179, 71, 241)</code>，后面的颜色连续渐变效果根据个人喜好选择，有的人喜欢连续的，有的人喜欢断续的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 夜间模式菜单栏发光字 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#nav</span> <span class="selector-class">.site-page</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span> <span class="selector-class">.menus_item_child</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">var</span>(--theme-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 手机端适配 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#sidebar</span> <span class="selector-id">#sidebar-menus</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.site-page</span> &#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">var</span>(--theme-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 闪烁变动颜色连续渐变 */</span></span><br><span class="line"><span class="selector-id">#site-name</span>,</span><br><span class="line"><span class="selector-id">#site-title</span>,</span><br><span class="line"><span class="selector-id">#site-subtitle</span>,</span><br><span class="line"><span class="selector-id">#post-info</span>,</span><br><span class="line"><span class="selector-class">.author-info__name</span>,</span><br><span class="line"><span class="selector-class">.author-info__description</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: text-shadow <span class="number">1s</span> linear <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建文件<code>[BlogRoot]\source\js\light.js</code>并写入以下代码，本质就是计时器，大家可以根据自己的喜好调节闪烁周期，默认为<code>1200ms</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 霓虹灯效果</span></span><br><span class="line"><span class="comment">// 颜色数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;#39c5bb&quot;</span>, <span class="string">&quot;#f14747&quot;</span>, <span class="string">&quot;#f1a247&quot;</span>, <span class="string">&quot;#f1ee47&quot;</span>, <span class="string">&quot;#b347f1&quot;</span>, <span class="string">&quot;#1edbff&quot;</span>, <span class="string">&quot;#ed709b&quot;</span>, <span class="string">&quot;#5636ed&quot;</span>];</span><br><span class="line"><span class="comment">// 颜色索引</span></span><br><span class="line"><span class="keyword">var</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换颜色</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 仅夜间模式才启用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) == <span class="string">&#x27;dark&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-name&quot;</span>))</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-name&quot;</span>).<span class="property">style</span>.<span class="property">textShadow</span> = arr[idx] + <span class="string">&quot; 0 0 15px&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-title&quot;</span>))</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-title&quot;</span>).<span class="property">style</span>.<span class="property">textShadow</span> = arr[idx] + <span class="string">&quot; 0 0 15px&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-subtitle&quot;</span>))</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-subtitle&quot;</span>).<span class="property">style</span>.<span class="property">textShadow</span> = arr[idx] + <span class="string">&quot; 0 0 10px&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;post-info&quot;</span>))</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;post-info&quot;</span>).<span class="property">style</span>.<span class="property">textShadow</span> = arr[idx] + <span class="string">&quot; 0 0 5px&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;author-info__name&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">textShadow</span> = arr[idx] + <span class="string">&quot; 0 0 12px&quot;</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;author-info__description&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">textShadow</span> = arr[idx] + <span class="string">&quot; 0 0 12px&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        idx++;</span><br><span class="line">        <span class="keyword">if</span> (idx == <span class="number">8</span>) &#123;</span><br><span class="line">            idx = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 白天模式恢复默认</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-name&quot;</span>))</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-name&quot;</span>).<span class="property">style</span>.<span class="property">textShadow</span> = <span class="string">&quot;#1e1e1ee0 1px 1px 1px&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-title&quot;</span>))</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-title&quot;</span>).<span class="property">style</span>.<span class="property">textShadow</span> = <span class="string">&quot;#1e1e1ee0 1px 1px 1px&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-subtitle&quot;</span>))</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;site-subtitle&quot;</span>).<span class="property">style</span>.<span class="property">textShadow</span> = <span class="string">&quot;#1e1e1ee0 1px 1px 1px&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;post-info&quot;</span>))</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;post-info&quot;</span>).<span class="property">style</span>.<span class="property">textShadow</span> = <span class="string">&quot;#1e1e1ee0 1px 1px 1px&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;author-info__name&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">textShadow</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;author-info__description&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">textShadow</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启计时器</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="built_in">setInterval</span>(changeColor, <span class="number">1200</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>_config.butterfly.yml</code>引入以上两个文件，要注意的是，js文件这里必须为<code>defer</code>，不能为<code>ansyc</code>，保证脚本会延迟到整个页面都解析完后再执行，此时才有对应的元素进行操作：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;/js/light.js&quot;&gt;&lt;/script&gt;</span> <span class="comment"># 霓虹灯(必须defer否则有时候会不生效)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启项目即可看到效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="星空背景和流星特效"><a href="#星空背景和流星特效" class="headerlink" title="星空背景和流星特效"></a>星空背景和流星特效</h1><ol>
<li><p>在<code>[BlogRoot]/source/js</code>目录下新建<code>universe.js</code>，输入以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dark</span>(<span class="params"></span>) &#123;<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>=<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span>;<span class="keyword">var</span> n,e,i,h,t=<span class="number">.05</span>,s=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;universe&quot;</span>),o=!<span class="number">0</span>,a=<span class="string">&quot;180,184,240&quot;</span>,r=<span class="string">&quot;226,225,142&quot;</span>,d=<span class="string">&quot;226,225,224&quot;</span>,c=[];<span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;n=<span class="variable language_">window</span>.<span class="property">innerWidth</span>,e=<span class="variable language_">window</span>.<span class="property">innerHeight</span>,i=<span class="number">.216</span>*n,s.<span class="title function_">setAttribute</span>(<span class="string">&quot;width&quot;</span>,n),s.<span class="title function_">setAttribute</span>(<span class="string">&quot;height&quot;</span>,e)&#125;<span class="keyword">function</span> <span class="title function_">u</span>(<span class="params"></span>)&#123;h.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,n,e);<span class="keyword">for</span>(<span class="keyword">var</span> t=c.<span class="property">length</span>,i=<span class="number">0</span>;i&lt;t;i++)&#123;<span class="keyword">var</span> s=c[i];s.<span class="title function_">move</span>(),s.<span class="title function_">fadeIn</span>(),s.<span class="title function_">fadeOut</span>(),s.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">y</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">reset</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">giant</span>=<span class="title function_">m</span>(<span class="number">3</span>),<span class="variable language_">this</span>.<span class="property">comet</span>=!<span class="variable language_">this</span>.<span class="property">giant</span>&amp;&amp;!o&amp;&amp;<span class="title function_">m</span>(<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">x</span>=<span class="title function_">l</span>(<span class="number">0</span>,n-<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">y</span>=<span class="title function_">l</span>(<span class="number">0</span>,e),<span class="variable language_">this</span>.<span class="property">r</span>=<span class="title function_">l</span>(<span class="number">1.1</span>,<span class="number">2.6</span>),<span class="variable language_">this</span>.<span class="property">dx</span>=<span class="title function_">l</span>(t,<span class="number">6</span>*t)+(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>)+<span class="number">2</span>*t,<span class="variable language_">this</span>.<span class="property">dy</span>=-<span class="title function_">l</span>(t,<span class="number">6</span>*t)-(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>),<span class="variable language_">this</span>.<span class="property">fadingOut</span>=<span class="literal">null</span>,<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacity</span>=<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacityTresh</span>=<span class="title function_">l</span>(<span class="number">.2</span>,<span class="number">1</span>-<span class="number">.4</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)),<span class="variable language_">this</span>.<span class="property">do</span>=<span class="title function_">l</span>(<span class="number">5e-4</span>,<span class="number">.002</span>)+<span class="number">.001</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeIn</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingIn</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&gt;<span class="variable language_">this</span>.<span class="property">opacityTresh</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>+=<span class="variable language_">this</span>.<span class="property">do</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeOut</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&lt;<span class="number">0</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>-=<span class="variable language_">this</span>.<span class="property">do</span>/<span class="number">2</span>,(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">1</span>,<span class="variable language_">this</span>.<span class="title function_">reset</span>()))&#125;,<span class="variable language_">this</span>.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">if</span>(h.<span class="title function_">beginPath</span>(),<span class="variable language_">this</span>.<span class="property">giant</span>)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+a+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">comet</span>)&#123;h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">1.5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;<span class="number">30</span>;t++)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+(<span class="variable language_">this</span>.<span class="property">opacity</span>-<span class="variable language_">this</span>.<span class="property">opacity</span>/<span class="number">20</span>*t)+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>-<span class="variable language_">this</span>.<span class="property">dx</span>/<span class="number">4</span>*t,<span class="variable language_">this</span>.<span class="property">y</span>-<span class="variable language_">this</span>.<span class="property">dy</span>/<span class="number">4</span>*t-<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),h.<span class="title function_">fill</span>()&#125;<span class="keyword">else</span> h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="variable language_">this</span>.<span class="property">r</span>,<span class="variable language_">this</span>.<span class="property">r</span>);h.<span class="title function_">closePath</span>(),h.<span class="title function_">fill</span>()&#125;,<span class="variable language_">this</span>.<span class="property">move</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">x</span>+=<span class="variable language_">this</span>.<span class="property">dx</span>,<span class="variable language_">this</span>.<span class="property">y</span>+=<span class="variable language_">this</span>.<span class="property">dy</span>,!<span class="number">1</span>===<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;<span class="variable language_">this</span>.<span class="title function_">reset</span>(),(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n-n/<span class="number">4</span>||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">0</span>)&#125;,<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;o=!<span class="number">1</span>&#125;,<span class="number">50</span>)&#125;<span class="keyword">function</span> <span class="title function_">m</span>(<span class="params">t</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1e3</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="number">1</span>&lt;<span class="number">10</span>*t&#125;<span class="keyword">function</span> <span class="title function_">l</span>(<span class="params">t,i</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>()*(i-t)+t&#125;<span class="title function_">f</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,f,!<span class="number">1</span>),<span class="keyword">function</span>(<span class="params"></span>)&#123;h=s.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;i;t++)c[t]=<span class="keyword">new</span> y,c[t].<span class="title function_">reset</span>();<span class="title function_">u</span>()&#125;(),<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>)&#123;<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>)==<span class="string">&#x27;dark&#x27;</span>&amp;&amp;<span class="title function_">u</span>(),<span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(t)&#125;()&#125;;</span><br><span class="line"><span class="title function_">dark</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>[BlogRoot]/source/css</code>目录下新建<code>universe.css</code>，输入以下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 背景宇宙星光  */</span></span><br><span class="line"><span class="selector-id">#universe</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="comment">/* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */</span></span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>_config.butterfly.yml</code>的<code>inject</code>配置项中<code>bottom</code>下填入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;canvas</span> <span class="string">id=&quot;universe&quot;&gt;&lt;/canvas&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;/js/universe.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>_config.butterfly.yml</code>的<code>inject</code>配置项中<code>head</code>下填入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/universe.css&quot;&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新编译即可看到效果。</p>
</li>
</ol>
<h1 id="侧边栏电子时钟-安知鱼"><a href="#侧边栏电子时钟-安知鱼" class="headerlink" title="侧边栏电子时钟(安知鱼)"></a>侧边栏电子时钟(安知鱼)</h1><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>如果有安装店长的插件版侧边栏电子钟（与店长的电子钟冲突），在博客根目录<code>[BlogRoot]</code>下打开终端，运行以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载原版电子钟</span></span><br><span class="line">npm uninstall hexo-butterfly-clock</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装插件,在博客根目录<code>[BlogRoot]</code>下打开终端，运行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-clock-anzhiyu --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置信息，以下为写法示例<br>在主题配置文件<code>_config.butterfly.yml</code>（注意一定要主题配置文件）中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># electric_clock (安知鱼电子钟)</span></span><br><span class="line"><span class="comment"># see https://anzhiy.cn/posts/fc18.html</span></span><br><span class="line"><span class="attr">electric_clock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">loading:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/loading.gif</span> <span class="comment">#加载动画自定义</span></span><br><span class="line">  <span class="attr">clock_css:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.min.css</span></span><br><span class="line">  <span class="attr">clock_js:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-clock-anzhiyu/lib/clock.min.js</span></span><br><span class="line">  <span class="attr">ip_api:</span> <span class="string">https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0</span></span><br><span class="line">  <span class="attr">qweather_key:</span>  <span class="comment"># 和风天气key</span></span><br><span class="line">  <span class="attr">gaud_map_key:</span>  <span class="comment"># 高得地图web服务key</span></span><br><span class="line">  <span class="attr">default_rectangle:</span> <span class="literal">false</span> <span class="comment"># 开启后将一直显示rectangle位置的天气，否则将获取访问者的地理位置与天气</span></span><br><span class="line">  <span class="attr">rectangle:</span> <span class="number">113.34532</span><span class="string">,23.15624</span> <span class="comment"># 获取访问者位置失败时会显示该位置的天气，同时该位置为开启default_rectangle后的位置</span></span><br></pre></td></tr></table></figure>

<p>其中qweather_key 和gaud_map_key 最好自己去申请对应的 api key，默认使用<code>鱼</code>的，可能会被限制，不保证可靠性。</p>
</li>
<li><p>参数释义</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>备选值&#x2F;类型</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>priority</td>
<td>number</td>
<td>【可选】过滤器优先级，数值越小，执行越早，默认为 10，选填</td>
</tr>
<tr>
<td>enable</td>
<td>true&#x2F;false</td>
<td>【必选】控制开关</td>
</tr>
<tr>
<td>enable_page</td>
<td>path&#x2F;all</td>
<td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’&#x2F;‘,分类页面就填’&#x2F;categories&#x2F;‘。若要应用于所有页面，就填’all’，默认为 all</td>
</tr>
<tr>
<td>exclude</td>
<td>path</td>
<td>【可选】填写想要屏蔽的页面，可以多个。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载。</td>
</tr>
<tr>
<td>layout.type</td>
<td>id&#x2F;class</td>
<td>【可选】挂载容器类型，填写 id 或 class，不填则默认为 id</td>
</tr>
<tr>
<td><a href="http://layout.name/">layout.name</a></td>
<td>text</td>
<td>【必选】挂载容器名称</td>
</tr>
<tr>
<td>layout.index</td>
<td>0和正整数</td>
<td>【可选】前提是 layout.type 为 class，因为同一页面可能有多个 class，此项用来确认究竟排在第几个顺位</td>
</tr>
<tr>
<td>loading</td>
<td>URL</td>
<td>【可选】电子钟加载动画的图片</td>
</tr>
<tr>
<td>clock_css</td>
<td>URL</td>
<td>【可选】电子钟样式 CDN 资源</td>
</tr>
<tr>
<td>clock_js</td>
<td>URL</td>
<td>【可选】电子钟执行脚本 CDN 资源</td>
</tr>
<tr>
<td>ip_api</td>
<td>URL</td>
<td>【可选】获取时钟 IP 的 API</td>
</tr>
<tr>
<td>qweather_key</td>
<td>text</td>
<td>【可选】和风天气 key</td>
</tr>
<tr>
<td>gaud_map_key</td>
<td>text</td>
<td>【可选】高得地图 web 服务 key</td>
</tr>
<tr>
<td>default_rectangle</td>
<td>text</td>
<td>【可选】开启后将一直显示 rectangle 位置的天气，否则将获取访问者的地理位置与天气</td>
</tr>
<tr>
<td>rectangle</td>
<td>text</td>
<td>【可选】获取访问者位置失败时会显示该位置的天气，同时该位置为开启 default_rectangle 后的位置</td>
</tr>
</tbody></table>
<h1 id="个人卡片渐变色"><a href="#个人卡片渐变色" class="headerlink" title="个人卡片渐变色"></a>个人卡片渐变色</h1><p>在<code>[BlogRoot]\source\css\custom.css</code>自定义样式的文件中引入如下代码（最后记得在<code>inject</code>配置项引入!!!）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 侧边栏个人信息卡片动态渐变色 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    -<span class="number">45deg</span>,</span><br><span class="line">    <span class="number">#e8d8b9</span>,</span><br><span class="line">    <span class="number">#eccec5</span>,</span><br><span class="line">    <span class="number">#a3e9eb</span>,</span><br><span class="line">    <span class="number">#bdbdf0</span>,</span><br><span class="line">    <span class="number">#eec1ea</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgb</span>(<span class="number">66</span>, <span class="number">68</span>, <span class="number">68</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">400%</span>;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">  -moz-<span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite;</span><br><span class="line">  <span class="attribute">animation</span>: Gradient <span class="number">10s</span> ease infinite <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> Gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> Gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> Gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 黑夜模式适配 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#191919ee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个人信息Follow me按钮 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &gt; <span class="selector-id">#card-info-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3eb8be</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="直达底部按钮"><a href="#直达底部按钮" class="headerlink" title="直达底部按钮"></a>直达底部按钮</h1><p>在<code>[BlogRoot]\themes\butterfly\layout\includes\rightside.pug</code>做以下修改:</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">button#go-up(type=&quot;button&quot; title=_p(&quot;rightside.back_to_top&quot;))</span><br><span class="line">  i.fas.fa-arrow-up</span><br><span class="line"></span><br><span class="line"><span class="addition">+button#go-down(type=&quot;button&quot; title=&quot;直达底部&quot; onclick=&quot;btf.scrollToDest(document.body.scrollHeight, 500)&quot;)</span></span><br><span class="line"><span class="addition">+  i.fas.fa-arrow-down</span></span><br></pre></td></tr></table></figure>



<h2 id="文章H1-H6标题小风车转动效果"><a href="#文章H1-H6标题小风车转动效果" class="headerlink" title="文章H1~H6标题小风车转动效果"></a>文章H1~H6标题小风车转动效果</h2><ol>
<li><p>修改主题配置文件<code>_config.butterfly.yml</code>文件的<code>beautify</code>配置项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="comment"># title-prefix-icon: &#x27;\f0c1&#x27; 原内容</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">&#x27;\f863&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="string">&quot;#F47466&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>[BlogRoot]\source\css\custom.css</code> 中加入以下代码，可以自己调节一下转速:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文章页H1-H6图标样式效果 */</span></span><br><span class="line"><span class="comment">/* 控制风车转动速度 4s那里可以自己调节快慢 */</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h3</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h4</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h5</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-tag">h6</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: ccc <span class="number">4s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: ccc <span class="number">4s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> ccc &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> ccc &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置风车颜色 */</span></span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ef50a8</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.55rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.23rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fb7061</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.35rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.12rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffbf00</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.22rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.95rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.09rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a9e000</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">1.05rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.09rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#57c850</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.7rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5ec1e0</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.66rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* s设置风车hover动效 6s那里可以自己调节快慢*/</span></span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: ccc <span class="number">6s</span> linear infinite;</span><br><span class="line">  <span class="attribute">animation</span>: ccc <span class="number">6s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>_config.butterfly.yml</code>的<code>inject</code>配置项进行引入（不再赘述）。</p>
</li>
</ol>
<h1 id="三栏布局首页卡片"><a href="#三栏布局首页卡片" class="headerlink" title="三栏布局首页卡片"></a>三栏布局首页卡片</h1><ol>
<li><p>修改<code>[Blogroot]\themes\butterfly\layout\includes\mixins\post-ui.pug</code>,整个替换为下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mixin postUI(posts)</span><br><span class="line">  each article , index in page.posts.data</span><br><span class="line">    .recent-post-item</span><br><span class="line">      -</span><br><span class="line">        let link = article.link || article.path</span><br><span class="line">        let title = article.title || _p(&#x27;no_title&#x27;)</span><br><span class="line">        const position = theme.cover.position</span><br><span class="line">        let leftOrRight = position === &#x27;both&#x27;</span><br><span class="line">          ? index%2 == 0 ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">          : position === &#x27;left&#x27; ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">        let post_cover = article.cover</span><br><span class="line">        let no_cover = article.cover === false || !theme.cover.index_enable ? &#x27;no-cover&#x27; : &#x27;&#x27;</span><br><span class="line">      -</span><br><span class="line">      .recent-post-content(class=leftOrRight)</span><br><span class="line">        .recent-post-cover-shadow</span><br><span class="line">        .recent-post-cover</span><br><span class="line">          img.article-cover(src=url_for(post_cover) onerror=`this.onerror=null;this.src=&#x27;`+ url_for(theme.error_img.post_page) + `&#x27;` alt=title)</span><br><span class="line">        .recent-post-info</span><br><span class="line">          a.article-title(href=url_for(link) title=title)</span><br><span class="line">            .article-title-link= title</span><br><span class="line">          .recent-post-meta                </span><br><span class="line">            .article-meta-wrap</span><br><span class="line">              if (is_home() &amp;&amp; (article.top || article.sticky &gt; 0))</span><br><span class="line">                span.article-meta</span><br><span class="line">                  i.fas.fa-thumbtack.sticky</span><br><span class="line">                  span.sticky= _p(&#x27;sticky&#x27;)</span><br><span class="line">                  span.article-meta-separator |</span><br><span class="line">              if (theme.post_meta.page.date_type)</span><br><span class="line">                span.post-meta-date</span><br><span class="line">                  if (theme.post_meta.page.date_type === &#x27;both&#x27;)</span><br><span class="line">                    i.far.fa-calendar-alt</span><br><span class="line">                    span.article-meta-label=_p(&#x27;post.created&#x27;)</span><br><span class="line">                    time.post-meta-date-created(datetime=date_xml(article.date) title=_p(&#x27;post.created&#x27;) + &#x27; &#x27; + full_date(article.date))=date(article.date, config.date_format)</span><br><span class="line">                    span.article-meta-separator |</span><br><span class="line">                    i.fas.fa-history</span><br><span class="line">                    span.article-meta-label=_p(&#x27;post.updated&#x27;)</span><br><span class="line">                    time.post-meta-date-updated(datetime=date_xml(article.updated) title=_p(&#x27;post.updated&#x27;) + &#x27; &#x27; + full_date(article.updated))=date(article.updated, config.date_format)</span><br><span class="line">                  else</span><br><span class="line">                    - let data_type_updated = theme.post_meta.page.date_type === &#x27;updated&#x27;</span><br><span class="line">                    - let date_type = data_type_updated ? &#x27;updated&#x27; : &#x27;date&#x27;</span><br><span class="line">                    - let date_icon = data_type_updated ? &#x27;fas fa-history&#x27; :&#x27;far fa-calendar-alt&#x27;</span><br><span class="line">                    - let date_title = data_type_updated ? _p(&#x27;post.updated&#x27;) : _p(&#x27;post.created&#x27;)</span><br><span class="line">                    i(class=date_icon)</span><br><span class="line">                    span.article-meta-label=date_title</span><br><span class="line">                    time(datetime=date_xml(article[date_type]) title=date_title + &#x27; &#x27; + full_date(article[date_type]))=date(article[date_type], config.date_format)</span><br><span class="line">              if (theme.post_meta.page.categories &amp;&amp; article.categories.data.length &gt; 0)</span><br><span class="line">                span.article-meta</span><br><span class="line">                  span.article-meta-separator |</span><br><span class="line">                  i.fas.fa-inbox</span><br><span class="line">                  each item, index in article.categories.data</span><br><span class="line">                    a(href=url_for(item.path)).article-meta__categories #[=item.name]</span><br><span class="line">                    if (index &lt; article.categories.data.length - 1)</span><br><span class="line">                      i.fas.fa-angle-right.article-meta-link</span><br><span class="line">              if (theme.post_meta.page.tags &amp;&amp; article.tags.data.length &gt; 0)</span><br><span class="line">                span.article-meta.tags</span><br><span class="line">                  span.article-meta-separator |</span><br><span class="line">                  i.fas.fa-tag</span><br><span class="line">                  each item, index in article.tags.data</span><br><span class="line">                    a(href=url_for(item.path)).article-meta__tags #[=item.name]</span><br><span class="line">                    if (index &lt; article.tags.data.length - 1)</span><br><span class="line">                      span.article-meta-link #[=&#x27;•&#x27;]</span><br><span class="line">              </span><br><span class="line">              mixin countBlockInIndex</span><br><span class="line">                - needLoadCountJs = true</span><br><span class="line">                span.article-meta</span><br><span class="line">                  span.article-meta-separator |</span><br><span class="line">                  i.fas.fa-comments</span><br><span class="line">                  if block</span><br><span class="line">                    block</span><br><span class="line">                  span.article-meta-label= &#x27; &#x27; + _p(&#x27;card_post_count&#x27;)</span><br><span class="line">              </span><br><span class="line">              if theme.comments.card_post_count</span><br><span class="line">                case theme.comments.use[0]</span><br><span class="line">                  when &#x27;Disqus&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=full_url_for(link) + &#x27;#disqus_thread&#x27;)</span><br><span class="line">                        i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Disqusjs&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=full_url_for(link) + &#x27;#disqusjs&#x27;)</span><br><span class="line">                        span.disqus-comment-count(data-disqus-url=full_url_for(link))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Valine&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.valine-comment-count(data-xid=url_for(link))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Waline&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.waline-comment-count(id=url_for(link))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Twikoo&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a.twikoo-count(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Facebook Comments&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.fb-comments-count(data-href=urlNoIndex(article.permalink))</span><br><span class="line">                  when &#x27;Remark42&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.remark42__counter(data-url=urlNoIndex(article.permalink))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Artalk&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.artalk-count(data-page-key=url_for(link))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin      </span><br><span class="line">        a.article-content(href=url_for(link) title=title)</span><br><span class="line">          //- Display the article introduction on homepage</span><br><span class="line">          case theme.index_post_content.method</span><br><span class="line">            when false</span><br><span class="line">              - break</span><br><span class="line">            when 1</span><br><span class="line">              .article-content-text!= article.description</span><br><span class="line">            when 2</span><br><span class="line">              if article.description</span><br><span class="line">                .article-content-text!= article.description</span><br><span class="line">              else</span><br><span class="line">                - const content = strip_html(article.content)</span><br><span class="line">                - let expert = content.substring(0, theme.index_post_content.length) </span><br><span class="line">                - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">                .article-content-text!= expert</span><br><span class="line">            default</span><br><span class="line">              - const content = strip_html(article.content)</span><br><span class="line">              - let expert = content.substring(0, theme.index_post_content.length) </span><br><span class="line">              - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">              .article-content-text!= expert      </span><br><span class="line">        .recent-post-arrow</span><br><span class="line"></span><br><span class="line">    if theme.ad &amp;&amp; theme.ad.index</span><br><span class="line">      if (index + 1) % 3 == 0</span><br><span class="line">        .recent-post-item.ads-wrap!=theme.ad.index</span><br></pre></td></tr></table></figure>
</li>
<li><p>样式方案：移除滑动卡片，按屏幕宽度依次应用三栏、双栏、单栏。</p>
<p>新建目录<code>[Blogroot]\themes\butterfly\source\css\_index_card_style\</code>,并在下面新建对应的文件。</p>
<p>新建<code>[Blogroot]\themes\butterfly\source\css\_index_card_style\multicard.styl</code>,填入以下内容。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//default color:</span></span><br><span class="line"><span class="selector-pseudo">:root</span></span><br><span class="line">  <span class="attr">--recent-post-bgcolor</span>: <span class="built_in">rgba</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">0.5</span>)  <span class="comment">//默认背景</span></span><br><span class="line">  <span class="attr">--article-content-bgcolor</span>: <span class="number">#49b1f5</span> <span class="comment">//描述版块背景</span></span><br><span class="line">  <span class="attr">--recent-post-arrow</span>: <span class="number">#ffffff</span> <span class="comment">//箭头配色</span></span><br><span class="line">  <span class="attr">--recent-post-cover-shadow</span>: <span class="number">#ffffff</span> <span class="comment">//封面遮罩层配色，建议和默认值的颜色相对应。</span></span><br><span class="line">  <span class="attr">--recent-post-transition</span>: <span class="attribute">all</span> <span class="number">0.5s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.59</span>, <span class="number">0.01</span>, <span class="number">0.48</span>, <span class="number">1.17</span>)  //动画效果。不了解的不要改动</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  <span class="attr">--recent-post-bgcolor</span>: <span class="built_in">rgba</span>(<span class="number">35</span>,<span class="number">35</span>,<span class="number">35</span>,<span class="number">0.5</span>)</span><br><span class="line">  <span class="attr">--article-content-bgcolor</span>: <span class="number">#99999a</span></span><br><span class="line">  <span class="attr">--recent-post-arrow</span>: <span class="number">#37e2dd</span></span><br><span class="line">  <span class="attr">--recent-post-cover-shadow</span>: <span class="number">#232323</span></span><br><span class="line"><span class="comment">// 默认的首页卡片容器布局</span></span><br><span class="line"><span class="selector-class">.recent-posts</span></span><br><span class="line">  <span class="attribute">padding</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">15px</span></span><br><span class="line">  <span class="attribute">height</span> fit-content</span><br><span class="line">  <span class="selector-class">.recent-post-item</span></span><br><span class="line">    <span class="attribute">margin-bottom</span> <span class="number">15px</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">var</span>(--recent-post-bgcolor)</span><br><span class="line">    <span class="attribute">overflow</span> hidden</span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">15px</span></span><br><span class="line">    <span class="selector-class">.recent-post-content</span></span><br><span class="line">      <span class="attribute">display</span> flex</span><br><span class="line">      <span class="attribute">background</span> <span class="built_in">var</span>(--recent-post-bgcolor)</span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="selector-class">.recent-post-cover</span></span><br><span class="line">        <span class="attribute">display</span> flex</span><br><span class="line">        <span class="attribute">background</span> transparent</span><br><span class="line">      <span class="selector-class">.recent-post-info</span></span><br><span class="line">        <span class="attribute">display</span> flex</span><br><span class="line">        <span class="attribute">background</span> transparent</span><br><span class="line">        <span class="attribute">flex-direction</span> column</span><br><span class="line">        <span class="attribute">justify-content</span> center</span><br><span class="line">        <span class="attribute">align-items</span> center</span><br><span class="line">        <span class="selector-class">.article-title</span></span><br><span class="line">          <span class="attribute">height</span> <span class="number">50%</span></span><br><span class="line">          <span class="attribute">display</span>: flex</span><br><span class="line">          <span class="attribute">text-align</span>: center</span><br><span class="line">          <span class="attribute">align-items</span>: center</span><br><span class="line">          <span class="attribute">justify-content</span>: flex-end</span><br><span class="line">          <span class="attribute">flex-direction</span>: column</span><br><span class="line">          <span class="selector-class">.article-title-link</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="built_in">var</span>(--text-highlight-color)</span><br><span class="line">            <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br><span class="line">            <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">              <span class="attribute">color</span>: <span class="variable">$text</span>-hover</span><br><span class="line">        <span class="selector-class">.recent-post-meta</span></span><br><span class="line">          <span class="attribute">height</span> <span class="number">50%</span></span><br><span class="line">          <span class="attribute">display</span>: flex</span><br><span class="line">          <span class="attribute">text-align</span>: center</span><br><span class="line">          <span class="attribute">align-items</span>: center</span><br><span class="line">          <span class="attribute">justify-content</span>: flex-start</span><br><span class="line">          <span class="attribute">flex-direction</span>: column</span><br><span class="line">          <span class="selector-class">.article-meta-wrap</span></span><br><span class="line">            <span class="attribute">color</span> <span class="number">#969797</span></span><br><span class="line">            <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            <span class="selector-tag">a</span></span><br><span class="line">              <span class="attribute">color</span>: <span class="built_in">var</span>(--text-highlight-color)</span><br><span class="line">              <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br><span class="line">              <span class="attribute">color</span> <span class="number">#969797</span></span><br><span class="line">              <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">                <span class="attribute">color</span>: <span class="variable">$text</span>-hover</span><br><span class="line">      <span class="selector-class">.article-content</span></span><br><span class="line">        <span class="attribute">display</span> flex</span><br><span class="line">        <span class="attribute">text-align</span>: center</span><br><span class="line">        <span class="attribute">flex-direction</span> row</span><br><span class="line">        <span class="attribute">align-items</span> center</span><br><span class="line">        <span class="attribute">justify-content</span> center</span><br><span class="line">        <span class="selector-class">.article-content-text</span></span><br><span class="line">          <span class="attribute">display</span> -webkit-box</span><br><span class="line">          -webkit-box-orient vertical</span><br><span class="line">          <span class="attribute">text-overflow</span>: ellipsis</span><br><span class="line">          <span class="attribute">overflow</span> hidden</span><br><span class="line">          <span class="attribute">color</span> <span class="number">#fff</span></span><br><span class="line">          <span class="attribute">text-shadow</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">#000</span></span><br><span class="line">    &amp;<span class="selector-class">.ads-wrap</span></span><br><span class="line">      <span class="attribute">display</span>: block <span class="meta">!important</span></span><br><span class="line">      <span class="attribute">height</span>: auto <span class="meta">!important</span></span><br><span class="line">  nav<span class="selector-id">#pagination</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line"><span class="comment">// 卡片单元布局样式</span></span><br><span class="line"><span class="selector-class">.recent-posts</span></span><br><span class="line">  <span class="attribute">padding</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">15px</span></span><br><span class="line">  <span class="attribute">display</span> flex</span><br><span class="line">  <span class="attribute">flex-direction</span> row</span><br><span class="line">  <span class="attribute">flex-wrap</span> wrap</span><br><span class="line">  <span class="selector-class">.recent-post-item</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">15px</span></span><br><span class="line">    <span class="attribute">overflow</span> hidden</span><br><span class="line">    <span class="selector-class">.recent-post-content</span></span><br><span class="line">      <span class="attribute">flex-direction</span> column</span><br><span class="line">      <span class="attribute">flex-wrap</span> nowrap</span><br><span class="line">      <span class="attribute">align-items</span> center</span><br><span class="line">      <span class="attribute">max-height</span> <span class="number">350px</span></span><br><span class="line">      <span class="attribute">height</span>: auto</span><br><span class="line">      <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">      <span class="selector-class">.recent-post-cover</span></span><br><span class="line">        <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">        <span class="attribute">clip-path</span> <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">130px</span>,<span class="number">0</span> <span class="number">0</span>,<span class="number">100%</span> <span class="number">0</span>,<span class="number">100%</span> <span class="number">130px</span>,<span class="number">50%</span> <span class="number">100%</span>)</span><br><span class="line">        <span class="selector-tag">img</span></span><br><span class="line">          <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">          <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">          <span class="attribute">object-fit</span> cover</span><br><span class="line">      <span class="selector-class">.recent-post-info</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">150px</span></span><br><span class="line">        <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">        <span class="attribute">padding</span> <span class="number">0px</span> <span class="number">25px</span> <span class="number">5px</span> <span class="number">25px</span></span><br><span class="line">        <span class="selector-class">.article-title</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">40px</span></span><br><span class="line">          <span class="attribute">font-size</span> <span class="number">18px</span></span><br><span class="line">          <span class="selector-class">.article-title-link</span></span><br><span class="line">            -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">        <span class="selector-class">.recent-post-meta</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">20px</span></span><br><span class="line">          <span class="selector-class">.article-meta-wrap</span></span><br><span class="line">            <span class="attribute">font-size</span> <span class="number">12px</span></span><br><span class="line">            -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">      <span class="selector-class">.article-content</span></span><br><span class="line">        <span class="attribute">position</span> absolute</span><br><span class="line">        <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">        <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">        <span class="attribute">background</span> <span class="built_in">rgba</span>(<span class="number">25</span>,<span class="number">25</span>,<span class="number">25</span>,<span class="number">0.5</span>)</span><br><span class="line">        <span class="attribute">clip-path</span> <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">130px</span>,<span class="number">0</span> <span class="number">0</span>,<span class="number">100%</span> <span class="number">0</span>,<span class="number">100%</span> <span class="number">130px</span>,<span class="number">50%</span> <span class="number">100%</span>)</span><br><span class="line">        <span class="selector-class">.article-content-text</span></span><br><span class="line">          -webkit-line-clamp <span class="number">3</span></span><br><span class="line">          <span class="attribute">font-size</span> <span class="number">16px</span></span><br><span class="line">          <span class="attribute">margin</span> <span class="number">0px</span> <span class="number">25px</span> <span class="number">30px</span> <span class="number">25px</span></span><br><span class="line">          <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">            <span class="attribute">content</span> <span class="string">&quot;❝&quot;</span></span><br><span class="line">            <span class="attribute">font-size</span> <span class="number">20px</span></span><br><span class="line">          <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">            <span class="attribute">content</span> <span class="string">&quot;❞&quot;</span></span><br><span class="line">            <span class="attribute">font-size</span> <span class="number">20px</span></span><br><span class="line">      <span class="selector-class">.recent-post-arrow</span></span><br><span class="line">        <span class="attribute">display</span> block</span><br><span class="line">        <span class="attribute">background</span> <span class="built_in">var</span>(--article-content-bgcolor)</span><br><span class="line">        <span class="attribute">position</span> absolute</span><br><span class="line">        <span class="attribute">height</span> <span class="number">10px</span></span><br><span class="line">        <span class="attribute">width</span> <span class="number">20px</span></span><br><span class="line">        <span class="attribute">clip-path</span> <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>,<span class="number">100%</span> <span class="number">0</span>,<span class="number">50%</span> <span class="number">100%</span>)</span><br><span class="line">        <span class="attribute">top</span> <span class="number">20px</span></span><br><span class="line"><span class="comment">// 三栏布局滑动卡片样式</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1069px</span>)</span><br><span class="line">  .recent-posts</span><br><span class="line">    .recent-post-item</span><br><span class="line">      <span class="attribute">width</span> <span class="number">32.3%</span></span><br><span class="line">      margin <span class="number">0px</span> <span class="number">1%</span> <span class="number">20px</span> <span class="number">0px</span></span><br><span class="line">      .recent-post-content</span><br><span class="line">        .recent-post-info</span><br><span class="line">          .article-title</span><br><span class="line">            margin: <span class="number">0px</span> <span class="number">5px</span></span><br><span class="line">            .article-title-link</span><br><span class="line">              -webkit-line-clamp: <span class="number">1</span>;</span><br><span class="line">          <span class="selector-class">.recent-post-meta</span></span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">5px</span></span><br><span class="line">            <span class="selector-class">.article-meta-wrap</span></span><br><span class="line">              -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 双栏布局卡片自适应适配</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">572px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1068px</span>)</span><br><span class="line">  .recent-posts</span><br><span class="line">    .recent-post-item</span><br><span class="line">      <span class="attribute">width</span> <span class="number">47%</span></span><br><span class="line">      margin <span class="number">0px</span> <span class="number">3%</span> <span class="number">20px</span> <span class="number">0px</span></span><br><span class="line">// 单栏布局卡片自适应适配</span><br><span class="line">@media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">572px</span>)</span><br><span class="line">  .recent-posts</span><br><span class="line">    .recent-post-item</span><br><span class="line">      <span class="attribute">width</span> <span class="number">100%</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>[BlogRoot]\themes\butterfly\source\css\_page\homepage.styl</code>,将整文件内容替换为以下代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;index_card_style&#x27;</span>) == <span class="string">&#x27;slidecard&#x27;</span></span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;./_index_card_style/slidecard&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;index_card_style&#x27;</span>) == <span class="string">&#x27;multicard&#x27;</span></span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;./_index_card_style/multicard&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在主题配置文件<code>[BlogRoot]\_config.butterfly.yml</code>里新增配置项，这样我们就可以通过配置项自由切换使用哪款了：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主页卡片样式</span></span><br><span class="line"><span class="comment"># Docs: https://akilar.top/posts/d6b69c49/</span></span><br><span class="line"><span class="attr">index_card_style:</span> <span class="string">multicard</span> <span class="comment"># slidecard | multicard</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>为了不至于让首页的文章出现空缺，建议将首页生成的文章数量控制为1,2,3的公倍数。修改站点配置文件<code>[BlogRoot]\_config.yml</code>。找到以下配置项进行调整，注意这是站点配置文件本就有的配置项，不是新增配置项。建议是调整为12篇。如果你的侧边栏魔改内容特别多，那么建议改成18、24、30。务必确保文章卡片栏比侧栏完全展开要长，这样展示效果最好</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">12</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>本教程讨论的卡片都是考虑有封面和有描述的。所以需要保证你已经开启了相应的配置，查看主题配置文件<code>[BlogRoot]\_config.butterfly.yml</code>,找到配置项开启描述栏，建议选择2模式</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Display the article introduction on homepage</span></span><br><span class="line"><span class="comment"># 1: description</span></span><br><span class="line"><span class="comment"># 2: both (if the description exists, it will show description, or show the auto_excerpt)</span></span><br><span class="line"><span class="comment"># 3: auto_excerpt (default)</span></span><br><span class="line"><span class="comment"># false: do not show the article introduction</span></span><br><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="首页分类磁贴"><a href="#首页分类磁贴" class="headerlink" title="首页分类磁贴"></a>首页分类磁贴</h1><ol>
<li><p>安装插件,在博客根目录<code>[BlogRoot]</code>下打开终端，运行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加以下代码，注意要根据他的默认描述排序改为你自己对应的分类名字：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-categories-card</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/a9131002/</span></span><br><span class="line"><span class="attr">categoryBar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">column:</span> <span class="string">odd</span> <span class="comment"># odd：3列 | even：4列</span></span><br><span class="line">  <span class="attr">row:</span> <span class="number">1</span> <span class="comment">#显示行数，默认两行，超过行数切换为滚动显示</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">Ubuntu指南</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover1.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">玩转Win10</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover2.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">长篇小说连载</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover3.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">个人日记</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover4.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">诗词歌赋</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover5.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">杂谈教程</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover6.webp</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参数释义</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">备选值&#x2F;类型</th>
<th align="left">释义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">priority</td>
<td align="left">number</td>
<td align="left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td>
</tr>
<tr>
<td align="left">enable</td>
<td align="left">true&#x2F;false</td>
<td align="left">【必选】控制开关</td>
</tr>
<tr>
<td align="left">enable_page</td>
<td align="left">path&#x2F;all</td>
<td align="left">【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’&#x2F;‘,分类页面就填’&#x2F;categories&#x2F;‘。若要应用于所有页面，就填’all’，默认为’&#x2F;‘</td>
</tr>
<tr>
<td align="left">layout.type</td>
<td align="left">id&#x2F;class</td>
<td align="left">【可选】挂载容器类型，填写id或class，不填则默认为id</td>
</tr>
<tr>
<td align="left"><a href="http://layout.name/">layout.name</a></td>
<td align="left">text</td>
<td align="left">【必选】挂载容器名称</td>
</tr>
<tr>
<td align="left">layout.index</td>
<td align="left">0和正整数</td>
<td align="left">【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td>
</tr>
<tr>
<td align="left">column</td>
<td align="left">odd&#x2F;even</td>
<td align="left">【可选】显示列数，考虑到比例问题，只提供3列和4列，odd为3列， even为4列</td>
</tr>
<tr>
<td align="left">row</td>
<td align="left">number</td>
<td align="left">【可选】显示行数，默认两行，超过行数切换为滚动显示</td>
</tr>
<tr>
<td align="left">message.descr</td>
<td align="left">text</td>
<td align="left">分类描述,需要和你自己的文章分类一一对应。</td>
</tr>
<tr>
<td align="left">message.cover</td>
<td align="left">url</td>
<td align="left">分类背景,需要和你自己的文章分类一一对应。</td>
</tr>
<tr>
<td align="left">custom_css</td>
<td align="left">url</td>
<td align="left">【可选】自定义样式，会替换默认的css链接，可以下载文档给出的cdn链接后自主修改</td>
</tr>
</tbody></table>
<h1 id="首页分类磁贴1-0"><a href="#首页分类磁贴1-0" class="headerlink" title="首页分类磁贴1.0"></a>首页分类磁贴1.0</h1><p>这个插件主要实现了以下功能：</p>
<ol>
<li>自定义 tags 或 categories 的排列和展示</li>
<li>自定义 tags 或 categories 的展示图标，名称</li>
<li>自定义排列的行数，默认 2 行</li>
</ol>
<p><strong>教程：</strong></p>
<ol>
<li><p>在博客根目录<code>[BlogRoot]</code>下打开终端，运行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-magnet --save</span><br></pre></td></tr></table></figure>

<p>注意，一定要加 <code>--save</code>，不然本地预览的时候可能不会显示！！！</p>
</li>
<li><p>在网站配置文件<code>_config.yml</code>新增以下项 (注意不是主题配置文件)，这里的分类名字必须和你文章的分类名字一一对应：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">magnet:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  priority: 1</span><br><span class="line">  enable_page: /</span><br><span class="line">  <span class="built_in">type</span>: categories</span><br><span class="line">  devide: 2</span><br><span class="line">  display:</span><br><span class="line">    - name: 教程</span><br><span class="line">      display_name: 小冰の魔改教程</span><br><span class="line">      icon: 📚</span><br><span class="line">    - name: 游戏评测</span><br><span class="line">      display_name: 小冰の游戏评测</span><br><span class="line">      icon: 🎮</span><br><span class="line">    - name: 生活趣闻</span><br><span class="line">      display_name: 小冰の生活趣闻</span><br><span class="line">      icon: 🐱‍👓</span><br><span class="line">    - name: vue</span><br><span class="line">      display_name: 小冰の编程学习</span><br><span class="line">      icon: 👩‍💻</span><br><span class="line">    - name: 学习</span><br><span class="line">      display_name: 小冰の读书笔记</span><br><span class="line">      icon: 📒</span><br><span class="line">    - name: 随想</span><br><span class="line">      display_name: 小冰の胡思乱想</span><br><span class="line">      icon: 💡</span><br><span class="line">  color_setting:</span><br><span class="line">    text_color: black</span><br><span class="line">    text_hover_color: white</span><br><span class="line">    background_color: <span class="string">&quot;#f2f2f2&quot;</span></span><br><span class="line">    background_hover_color: <span class="string">&quot;#b30070&quot;</span></span><br><span class="line">  layout:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">id</span></span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height: auto&quot;&gt;&lt;div id=&quot;catalog_magnet&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  plus_style: <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置项的含义：</p>
<ul>
<li><p>enable</p>
<p>参数：true&#x2F;false<br>含义：是否开启插件</p>
</li>
<li><p>enable_page</p>
<p>参数：&#x2F;<br>含义：路由地址，如 &#x2F; 代表主页。&#x2F;me&#x2F; 代表自我介绍页等等</p>
</li>
<li><p>priority</p>
<p>参数：1<br>含义：插件的叠放顺序，数字越大，叠放约靠前。</p>
</li>
<li><p>type</p>
<p>参数：categories&#x2F;tags<br>含义：选择筛选分类还是标签</p>
</li>
<li><p>devide</p>
<p>参数：2<br>含义：表示分隔的列数，2 表示分为两列展示</p>
</li>
<li><p>display</p>
<p>参数：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">教程</span> <span class="comment"># 这里是tags或者categories的名称</span></span><br><span class="line">  <span class="attr">display_name:</span> <span class="string">小冰の魔改教程</span> <span class="comment"># 这里是替换的名称</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">📚</span> <span class="comment"># 这里是展示的图标</span></span><br></pre></td></tr></table></figure>

<p>含义：配置项，可自行设置，按照设置的顺序展示</p>
</li>
<li><p>color_setting</p>
<p>参数：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">text_color:</span> <span class="string">black</span> <span class="comment"># 文字默认颜色</span></span><br><span class="line"><span class="attr">text_hover_color:</span> <span class="string">white</span> <span class="comment"># 文字鼠标悬浮颜色</span></span><br><span class="line"><span class="attr">background_color:</span> <span class="string">&quot;#f2f2f2&quot;</span> <span class="comment"># 文字背景默认颜色</span></span><br><span class="line"><span class="attr">background_hover_color:</span> <span class="string">&quot;#b30070&quot;</span> <span class="comment"># 文字背景悬浮颜色</span></span><br></pre></td></tr></table></figure>

<p>含义：颜色配置项，可自行设置</p>
</li>
<li><p>layout</p>
<p>参数：type; （class&amp;id）<br>参数：name;<br>参数：index；（数字）<br>含义：如果说 magnet 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;我是墙&quot;</span> <span class="attr">id</span>=<span class="string">&quot;recent-posts&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- id=&gt;type  recent-posts=&gt;name    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;我是画框&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;我是纸&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这里通过js挂载magnet，也就是画画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>temple_html</p>
<p>参数：html 模板字段<br>含义：包含挂载容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;height: auto&quot;</span>&gt;</span> <span class="comment">&lt;!--文章容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;catalog_magnet&quot;</span>&gt;</span>  <span class="comment">&lt;!--挂载容器--&gt;</span></span><br><span class="line">    $&#123;temple_html_item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>plus_style</p>
<p>参数：“”<br>含义：提供可自定义的 style，如加入黑夜模式。</p>
</li>
</ul>
</li>
<li><p>执行 hexo 三连</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们可以看到黑夜模式看起来特别的别扭，因此还要做一下黑夜模式的颜色适配，在<code>custom.css</code>文件中添加以下代码适配黑夜模式(具体颜色可以自己调节)：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 小冰分类分类磁铁黑夜模式适配 */</span></span><br><span class="line"><span class="comment">/* 一般状态 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.magnet_link_context</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#1e1e1e</span>;</span><br><span class="line">  <span class="attribute">color</span>: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 鼠标悬浮状态 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.magnet_link_context</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#3ecdf1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
        <tag>Butterfly主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（10）——部署SSl证书</title>
    <url>/2023/07/25/hexo/Hexo_build10/</url>
    <content><![CDATA[<p> 部署SSL证书的意义在于，如果不部署SSL输入域名进入网站，浏览器会提示不安全的字样。别人看到这样的字样会犹豫是否进入，是否存在危险等。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729110435052.png" alt="image-20230729110435052"></p>
<h1 id="准备SSL证书"><a href="#准备SSL证书" class="headerlink" title="准备SSL证书"></a>准备SSL证书</h1><p>​        腾讯云是可以申请免费的SSL证书。在腾讯云中搜索找到SSL证书-&gt;我的证书-&gt;申请免费证书按照申请的提示输入信息即可（选取的是RSA加密）。之后就是等待腾讯云的审核和签发，这个等待时间一般在几个小时左右。申请完成后状态：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729110631777.png" alt="image-20230729110631777"></p>
<h1 id="安装Filezilla-软件"><a href="#安装Filezilla-软件" class="headerlink" title="安装Filezilla 软件"></a>安装Filezilla 软件</h1><p>​        打开Filezilla软件官网下载并安装，它是一个本机FTP软件，可以提供与云服务器接发文件的功能。</p>
<h1 id="云服务器安装FTP服务"><a href="#云服务器安装FTP服务" class="headerlink" title="云服务器安装FTP服务"></a>云服务器安装FTP服务</h1><ol>
<li><p>安装vsftpd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure>

<p>修改第12行，禁止匿名用户登录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">anonymous_enable=No </span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="上传SSL证书文件"><a href="#上传SSL证书文件" class="headerlink" title="上传SSL证书文件"></a>上传SSL证书文件</h1><p>​        打开Filezilla 软件输入云服务器IP等信息后连接，端口选用22端口。</p>
<p>​		 去腾讯云服务器下载SSL证书。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729110848329.png" alt="image-20230729110848329"></p>
<p>  在Filezilla 软件本地站点（左边一栏）找到你下载的SSL证书，双击即可提示上传到云服务器用户目录下。</p>
<h1 id="部署SSL证书"><a href="#部署SSL证书" class="headerlink" title="部署SSL证书"></a>部署SSL证书</h1><ol>
<li><p>文件默认上传至我们的用户文件夹下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/zyh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhangyuanhe.top.zip  zhangyuanhe.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压缩文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhangyuanhe.top.zip</span><br></pre></td></tr></table></figure>

<p>再ls查看目录返回的结果是：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729112613573.png" alt="image-20230729112613573"></p>
<p>可以看见有四个文件，这里只需要crt文件和key文件。</p>
</li>
<li><p>将Nginx文件夹下的文件复制到新建的文件夹下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /etc/nginx/ssl/</span><br><span class="line">cd /home/zhangyuanhe/Nginx</span><br></pre></td></tr></table></figure>

<p>用ls查看目录返回结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhangyuanhe.top_bundle.crt  zhangyuanhe.top.key</span><br></pre></td></tr></table></figure>

<p>复制到ssl文件夹下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp zhangyuanhe.top_bundle.crt /etc/nginx/ssl/</span><br><span class="line">cp zhangyuanhe.top.key /etc/nginx/ssl/</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开nginx.conf 文件夹 修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>删除掉下方最前面注释并进行更改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">        server_name  liuruibin.com; #域名</span><br><span class="line">        root         /home/hexo;    #网站主目录</span><br><span class="line"></span><br><span class="line">        ssl_certificate &quot;/etc/nginx/ssl/zhangyuanhe.top_bundle.crt&quot;; #crt文件路径</span><br><span class="line">        ssl_certificate_key &quot;/etc/nginx/ssl/zhangyuanhe.top.key&quot;;    #key文件路径</span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line">        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">		</span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        </span><br><span class="line">	   #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">                root /home/hexo;</span><br><span class="line">			  #定义首页索引文件名称</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否有报错，无报错重启服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（8）——魔改主题文件（进阶）</title>
    <url>/2023/07/22/hexo/Hexo_build08/</url>
    <content><![CDATA[<h1 id="夜间模式动画"><a href="#夜间模式动画" class="headerlink" title="夜间模式动画"></a>夜间模式动画</h1><p>详见：<a href="https://www.fomal.cc/posts/d739261b.html">博客魔改教程总结(一) | Fomalhaut🥝</a></p>
<ol>
<li><p>新建<code>[BlogRoot]\themes\butterfly\layout\includes\custom\sun_moon.pug</code>,这部分其实实质上就是一个svg文件，通过js操作它的旋转显隐，淡入淡出实现动画效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">svg(aria-hidden=&#x27;true&#x27;, style=&#x27;position:absolute; overflow:hidden; width:0; height:0&#x27;)</span><br><span class="line">  symbol#icon-sun(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M960 512l-128 128v192h-192l-128 128-128-128H192v-192l-128-128 128-128V192h192l128-128 128 128h192v192z&#x27;, fill=&#x27;#FFD878&#x27;, p-id=&#x27;8420&#x27;)</span><br><span class="line">    path(d=&#x27;M736 512a224 224 0 1 0-448 0 224 224 0 1 0 448 0z&#x27;, fill=&#x27;#FFE4A9&#x27;, p-id=&#x27;8421&#x27;)</span><br><span class="line">    path(d=&#x27;M512 109.248L626.752 224H800v173.248L914.752 512 800 626.752V800h-173.248L512 914.752 397.248 800H224v-173.248L109.248 512 224 397.248V224h173.248L512 109.248M512 64l-128 128H192v192l-128 128 128 128v192h192l128 128 128-128h192v-192l128-128-128-128V192h-192l-128-128z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8422&#x27;)</span><br><span class="line">    path(d=&#x27;M512 320c105.888 0 192 86.112 192 192s-86.112 192-192 192-192-86.112-192-192 86.112-192 192-192m0-32a224 224 0 1 0 0 448 224 224 0 0 0 0-448z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8423&#x27;)</span><br><span class="line">  symbol#icon-moon(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M611.370667 167.082667a445.013333 445.013333 0 0 1-38.4 161.834666 477.824 477.824 0 0 1-244.736 244.394667 445.141333 445.141333 0 0 1-161.109334 38.058667 85.077333 85.077333 0 0 0-65.066666 135.722666A462.08 462.08 0 1 0 747.093333 102.058667a85.077333 85.077333 0 0 0-135.722666 65.024z&#x27;, fill=&#x27;#FFB531&#x27;, p-id=&#x27;11345&#x27;)</span><br><span class="line">    path(d=&#x27;M329.728 274.133333l35.157333-35.157333a21.333333 21.333333 0 1 0-30.165333-30.165333l-35.157333 35.157333-35.114667-35.157333a21.333333 21.333333 0 0 0-30.165333 30.165333l35.114666 35.157333-35.114666 35.157334a21.333333 21.333333 0 1 0 30.165333 30.165333l35.114667-35.157333 35.157333 35.157333a21.333333 21.333333 0 1 0 30.165333-30.165333z&#x27;, fill=&#x27;#030835&#x27;, p-id=&#x27;11346&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建<code>[BlogRoot]\themes\butterfly\source\css\_layout\sun_moon.styl</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.Cuteen_DarkSky</span>,</span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span><span class="selector-pseudo">:before</span></span><br><span class="line">  <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">right</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">bottom</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">  <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#feb8b0</span>, <span class="number">#fef9db</span>)</span><br><span class="line">  <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">    <span class="attribute">transition</span> <span class="number">2s</span> ease all</span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#4c3f6d</span>, <span class="number">#6c62bb</span>, <span class="number">#93b1ed</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.DarkMode</span></span><br><span class="line">  <span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">99999999</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">top</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">200%</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">200%</span></span><br><span class="line">  -webkit-<span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">transform-origin</span> center bottom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">left</span> <span class="number">35%</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">40%</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#fefefe</span>, <span class="number">#fffbe8</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span></span><br><span class="line">  <span class="selector-tag">span</span></span><br><span class="line">    <span class="attribute">display</span> none</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menus_item</span></span><br><span class="line">  <span class="selector-tag">a</span></span><br><span class="line">    <span class="attribute">text-decoration</span> none<span class="meta">!important</span></span><br><span class="line"><span class="comment">//按钮相关，对侧栏按钮做过魔改的可以调整这里的数值</span></span><br><span class="line"><span class="selector-class">.icon-V</span></span><br><span class="line">  <span class="attribute">padding</span> <span class="number">5px</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建<code>[BlogRoot]\themes\butterfly\source\js\sun_moon.js</code>,去除了冗余代码，去jquery</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">switchNightMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">&#x27;&lt;div class=&quot;Cuteen_DarkSky&quot;&gt;&lt;div class=&quot;Cuteen_DarkPlanet&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>),</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;DarkMode&#x27;</span>) ? (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)) : (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)),</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;opacity 3s&#x27;</span>;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="title function_">remove</span>();</span><br><span class="line">          &#125;, <span class="number">1e3</span>);</span><br><span class="line">        &#125;, <span class="number">2e3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">const</span> nowMode = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (nowMode === <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">activateDarkMode</span>()</span><br><span class="line">    saveToLocal.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span> !== <span class="literal">undefined</span> &amp;&amp; btf.<span class="title function_">snackbarShow</span>(<span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">day_to_night</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">activateLightMode</span>()</span><br><span class="line">    saveToLocal.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle some cases</span></span><br><span class="line">  <span class="keyword">typeof</span> utterancesTheme === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">utterancesTheme</span>()</span><br><span class="line">  <span class="keyword">typeof</span> <span class="variable constant_">FB</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">loadFBComment</span>()</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">DISQUS</span> &amp;&amp; <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;disqus_thread&#x27;</span>).<span class="property">children</span>.<span class="property">length</span> &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">disqusReset</span>(), <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>[BlogRoot]\themes\butterfly\layout\includes\head.pug</code>,在文件末位加上一行</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">DIFF</span><br><span class="line">  //- global config</span><br><span class="line">  !=partial(&#x27;includes/head/config&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">  include ./head/config_site.pug</span><br><span class="line">  include ./head/noscript.pug</span><br><span class="line"></span><br><span class="line">  !=fragment_cache(&#x27;injectHeadJs&#x27;, function()&#123;return inject_head_js()&#125;)</span><br><span class="line"></span><br><span class="line">  !=fragment_cache(&#x27;injectHead&#x27;, function()&#123;return injectHtml(theme.inject.head)&#125;)</span><br><span class="line"><span class="addition">+ include ./custom/sun_moon.pug</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>[BlogRoot]\themes\butterfly\layout\includes\rightside.pug</code>,把原本的昼夜切换按钮替换掉</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  when &#x27;translate&#x27;</span><br><span class="line">    if translate.enable</span><br><span class="line">      button#translateLink(type=&quot;button&quot; title=_p(&#x27;rightside.translate_title&#x27;))= translate.default</span><br><span class="line">  when &#x27;darkmode&#x27;</span><br><span class="line">    if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line"><span class="deletion">-     button#darkmode(type=&quot;button&quot; title=_p(&#x27;rightside.night_mode_title&#x27;))</span></span><br><span class="line"><span class="deletion">-       i.fas.fa-adjust</span></span><br><span class="line"><span class="addition">+     a.icon-V.hidden(onclick=&#x27;switchNightMode()&#x27;,  title=_p(&#x27;rightside.night_mode_title&#x27;))</span></span><br><span class="line"><span class="addition">+       svg(width=&#x27;25&#x27;, height=&#x27;25&#x27;, viewBox=&#x27;0 0 1024 1024&#x27;)</span></span><br><span class="line"><span class="addition">+         use#modeicon(xlink:href=&#x27;#icon-moon&#x27;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>[BlogRoot]\_config.butterfly.yml</code>,引入一下js</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  bottom:</span><br><span class="line"><span class="addition">+    - &lt;script src=&quot;/js/sun_moon.js&quot; async&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启项目并切换夜间模式即可看见效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="夜间模式切换动画升级"><a href="#夜间模式切换动画升级" class="headerlink" title="夜间模式切换动画升级"></a>夜间模式切换动画升级</h1><blockquote>
<p>逛博客看见别人的切换动画有月亮，而且颜色也很好看，于是一顿f12操作下大概看懂原理，再结合现在的动画改进一下就是了。(注意：在做本魔改前，请先完成店长的夜间模式切换动画，同时最好也要有引入Vue+Element弹窗。本动画是基于店长的样式改进的，加入了弯月，切换到夜间模式是太阳变月亮，切换到白天模式是月亮变太阳，同时背景颜色也改为了我喜欢的。)</p>
</blockquote>
<p>效果预览</p>
<ol>
<li><p>替换原来的<code>[BlogRoot]\source\js\sun_moon.js</code>为以下代码，这里主要改进是由原来的<code>after</code>遮罩换为两个元素，再通过定时器来控制各自元素的透明度达到绘制太阳和月亮的目的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">switchNightMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">&#x27;&lt;div class=&quot;Cuteen_DarkSky&quot;&gt;&lt;div class=&quot;Cuteen_DarkPlanet&quot;&gt;&lt;div id=&quot;sun&quot;&gt;&lt;/div&gt;&lt;div id=&quot;moon&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>),</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;DarkMode&#x27;</span>) ? (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)) : (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)),</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;opacity 3s&#x27;</span>;</span><br><span class="line">                    <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="title function_">remove</span>();</span><br><span class="line">                    &#125;, <span class="number">1e3</span>);</span><br><span class="line">                &#125;, <span class="number">2e3</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">const</span> nowMode = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (nowMode === <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 先设置太阳月亮透明度</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sun&quot;</span>).<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;moon&quot;</span>).<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sun&quot;</span>).<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;moon&quot;</span>).<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">activateDarkMode</span>()</span><br><span class="line">        saveToLocal.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment">// GLOBAL_CONFIG.Snackbar !== undefined &amp;&amp; btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)</span><br><span class="line">        <span class="comment">// 延时弹窗提醒</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.$notify(&#123;</span><br><span class="line">                        <span class="attr">title</span>: <span class="string">&quot;关灯啦🌙&quot;</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&quot;当前已成功切换至夜间模式！&quot;</span>,</span><br><span class="line">                        <span class="attr">position</span>: <span class="string">&#x27;top-left&#x27;</span>,</span><br><span class="line">                        <span class="attr">offset</span>: <span class="number">50</span>,</span><br><span class="line">                        <span class="attr">showClose</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">5000</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 先设置太阳月亮透明度</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sun&quot;</span>).<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;moon&quot;</span>).<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sun&quot;</span>).<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;moon&quot;</span>).<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">activateLightMode</span>()</span><br><span class="line">        saveToLocal.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.$notify(&#123;</span><br><span class="line">                        <span class="attr">title</span>: <span class="string">&quot;开灯啦🌞&quot;</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&quot;当前已成功切换至白天模式！&quot;</span>,</span><br><span class="line">                        <span class="attr">position</span>: <span class="string">&#x27;top-left&#x27;</span>,</span><br><span class="line">                        <span class="attr">offset</span>: <span class="number">50</span>,</span><br><span class="line">                        <span class="attr">showClose</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">5000</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// handle some cases</span></span><br><span class="line">    <span class="keyword">typeof</span> utterancesTheme === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">utterancesTheme</span>()</span><br><span class="line">    <span class="keyword">typeof</span> <span class="variable constant_">FB</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">loadFBComment</span>()</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">DISQUS</span> &amp;&amp; <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;disqus_thread&#x27;</span>).<span class="property">children</span>.<span class="property">length</span> &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">disqusReset</span>(), <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换原来的<code>[BlogRoot]\themes\butterfly\source\css\_layout\sun_moon.styl</code>为以下代码，主要改变是的绘制太阳和月亮的矢量信息，还有背景颜色改进：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">复制成功</span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span>,</span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span><span class="selector-pseudo">:before</span></span><br><span class="line">  <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">right</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">bottom</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">  <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(to top, <span class="number">#f8cd71</span> <span class="number">0</span>, <span class="number">#5bfde9</span> <span class="number">80%</span>)</span><br><span class="line">  <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">    <span class="attribute">transition</span> <span class="number">2s</span> ease all</span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(to top, <span class="number">#30cfd0</span> <span class="number">0</span>, <span class="number">#330867</span> <span class="number">100%</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.DarkMode</span></span><br><span class="line">  <span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">99999999</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">top</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">200%</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">200%</span></span><br><span class="line">  -webkit-<span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">transform-origin</span> center bottom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="selector-id">#sun</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">left</span> <span class="number">44%</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">30%</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">6rem</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">6rem</span></span><br><span class="line">    <span class="attribute">background</span> <span class="number">#ffee94</span></span><br><span class="line">    <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="number">#ffee94</span></span><br><span class="line">    <span class="comment">// opacity 0</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#moon</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">left</span> <span class="number">44%</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">30%</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">6rem</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">6rem</span></span><br><span class="line">    <span class="attribute">box-shadow</span> -<span class="number">1.8em</span> <span class="number">1.8em</span> <span class="number">0</span> <span class="number">0.2em</span> <span class="number">#fff</span></span><br><span class="line">    <span class="comment">// opacity 1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// &amp;:after</span></span><br><span class="line">  <span class="comment">//   position absolute</span></span><br><span class="line">  <span class="comment">//   left 42%</span></span><br><span class="line">  <span class="comment">//   top 30%</span></span><br><span class="line">  <span class="comment">//   width 6rem</span></span><br><span class="line">  <span class="comment">//   height 6rem</span></span><br><span class="line">  <span class="comment">//   border-radius 50%</span></span><br><span class="line">  <span class="comment">//   content &#x27;&#x27;</span></span><br><span class="line">  <span class="comment">//   background #ffef9e</span></span><br><span class="line">  <span class="comment">//   box-shadow 0 0 30px #ffef9e</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span></span><br><span class="line">  <span class="selector-tag">span</span></span><br><span class="line">    <span class="attribute">display</span> none</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menus_item</span></span><br><span class="line">  <span class="selector-tag">a</span></span><br><span class="line">    <span class="attribute">text-decoration</span> none<span class="meta">!important</span></span><br><span class="line"><span class="comment">//按钮相关，对侧栏按钮做过魔改的可以调整这里的数值</span></span><br><span class="line"><span class="comment">// .icon-V</span></span><br><span class="line"><span class="comment">//   padding 5px</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启项目并切换夜间模式即可看到效果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="随机访问一篇文章"><a href="#随机访问一篇文章" class="headerlink" title="随机访问一篇文章"></a>随机访问一篇文章</h1><p>首先我们需要先下载baidusitemap插件<br>运行命令：<code>npm install hexo-generator-baidu-sitemap --save</code><br>相信大部分人的hexo版本都在3以上，所以不需要在config.yml进行配置。</p>
<blockquote>
<p>插件地址：<a href="https://www.npmjs.com/package/hexo-generator-baidu-sitemap">https://www.npmjs.com/package/hexo-generator-baidu-sitemap</a></p>
</blockquote>
<h2 id="添加随机文章函数"><a href="#添加随机文章函数" class="headerlink" title="添加随机文章函数"></a>添加随机文章函数</h2><p>然后在我们的自定义js文件中添加一个js函数<br><strong>自定义js看这篇文章：<a href="https://blog.leonus.cn/2022/custom.html">Hexo博客添加自定义css和js文件</a></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发现有时会和当前页面重复，加一个判断</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;/baidusitemap.xml&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">str</span> =&gt;</span> (<span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">DOMParser</span>()).<span class="title function_">parseFromString</span>(str, <span class="string">&quot;text/xml&quot;</span>)).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ls = data.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;url loc&#x27;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> url = ls[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * ls.<span class="property">length</span>)].<span class="property">innerHTML</span>;</span><br><span class="line">            <span class="keyword">if</span> (location.<span class="property">href</span> == url) <span class="keyword">continue</span>;</span><br><span class="line">            location.<span class="property">href</span> = url;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 阅读文章时看了一遍写的代码，发现加个数组和一个遍历完全没必要，改成下面这个即可。</span></span><br><span class="line"><span class="comment">// function randomPost() &#123;</span></span><br><span class="line"><span class="comment">//     fetch(&#x27;/baidusitemap.xml&#x27;).then(res =&gt; res.text()).then(str =&gt; (new window.DOMParser()).parseFromString(str, &quot;text/xml&quot;)).then(data =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         let ls = data.querySelectorAll(&#x27;url loc&#x27;);</span></span><br><span class="line"><span class="comment">//         location.href = ls[Math.floor(Math.random() * ls.length)].innerHTML</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="添加导航栏按钮"><a href="#添加导航栏按钮" class="headerlink" title="添加导航栏按钮"></a>添加导航栏按钮</h2><h3 id="魔改用户"><a href="#魔改用户" class="headerlink" title="魔改用户"></a>魔改用户</h3><p>添加好js之后，我们可以在右上角的按钮区添加一个按钮方便用户点击。</p>
<blockquote>
<p>注意：此方法只适合魔改的用户，没魔改的使用可能会乱码。没有css基础谨慎添加。<br>没有魔改的用户可以继续往下看，我专门准备了另一个方法。（还是那么贴心）</p>
</blockquote>
<p>打开<code>themes\butterfly\layout\includes\header\nav.pug</code>，在适当位置添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#randomPost</span><br><span class="line">  a.site-page.social-icon.search(href=&quot;javascript:;&quot; onclick=&quot;randomPost()&quot; title=&quot;随机访问一篇文章&quot;)</span><br><span class="line">    i.fas.fa-circle-notch.fa-fw</span><br></pre></td></tr></table></figure>

<h3 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h3><p>没有魔改的用户可以在配置中添加一个导航按钮</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">随机访问:</span> <span class="string">javascript:randomPost();</span> <span class="string">||</span> <span class="string">fa-solid</span> <span class="string">fa-shuffle</span></span><br></pre></td></tr></table></figure>

<p>如果你只想显示图标不想显示文字的话，你可以这么写(图标后面会有一个小空格，不影响)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">&quot;&quot;</span><span class="string">:</span> <span class="string">javascript:randomPost();</span> <span class="string">||</span> <span class="string">fa-solid</span> <span class="string">fa-shuffle</span></span><br></pre></td></tr></table></figure>



<h1 id="自定义右键菜单"><a href="#自定义右键菜单" class="headerlink" title="自定义右键菜单"></a>自定义右键菜单</h1><blockquote>
<p>右键菜单前置教程：昼夜切换动画、随机访问一篇文章，请完成这两个前置教程再来做这个，或者可以注释掉pug文件中对应的功能就不会出发相应不存在的函数了。</p>
</blockquote>
<ol>
<li><p>新建 <code>[BlogRoot]\themes\butterfly\layout\includes\rightmenu.pug</code>，编写以下内容：</p>
<p>我这里统一采用<code>font-Awesome</code>的图标，因为颜色比较统一，就没用iconfont的图标了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#rightMenu.js-pjax</span><br><span class="line">    .rightMenu-group.rightMenu-small</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:window.history.back();&quot;)</span><br><span class="line">            i.fa.fa-arrow-left</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:window.history.forward();&quot;)</span><br><span class="line">            i.fa.fa-arrow-right</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:window.location.reload();&quot;)</span><br><span class="line">            i.fa.fa-refresh</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:rmf.scrollToTop();&quot;)</span><br><span class="line">            i.fa.fa-arrow-up</span><br><span class="line">    .rightMenu-group.rightMenu-line.hide#menu-text</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:rmf.copySelect();&quot;)</span><br><span class="line">            i.fa.fa-copy</span><br><span class="line">            span=&#x27;复制&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:window.open(\&quot;https://www.baidu.com/s?wd=\&quot;+window.getSelection().toString());window.location.reload();&quot;)</span><br><span class="line">            i.fa.fa-search</span><br><span class="line">            span=&#x27;百度搜索&#x27;</span><br><span class="line">    .rightMenu-group.rightMenu-line.hide#menu-too</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:window.open(window.getSelection().toString());window.location.reload();&quot;)</span><br><span class="line">            i.fa.fa-link</span><br><span class="line">            span=&#x27;转到链接&#x27;</span><br><span class="line">    .rightMenu-group.rightMenu-line.hide#menu-paste</span><br><span class="line">        a.rightMenu-item(href=&#x27;javascript:rmf.paste()&#x27;)</span><br><span class="line">            i.fa.fa-copy</span><br><span class="line">            span=&#x27;粘贴&#x27;</span><br><span class="line">    .rightMenu-group.rightMenu-line.hide#menu-post</span><br><span class="line">        a.rightMenu-item(href=&quot;#post-comment&quot;)</span><br><span class="line">            i.fas.fa-comment</span><br><span class="line">            span=&#x27;空降评论&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:rmf.copyWordsLink()&quot;)</span><br><span class="line">            i.fa.fa-link</span><br><span class="line">            span=&#x27;复制本文地址&#x27;</span><br><span class="line">    .rightMenu-group.rightMenu-line.hide#menu-to</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:rmf.openWithNewTab()&quot;)</span><br><span class="line">            i.fa.fa-window-restore</span><br><span class="line">            span=&#x27;新窗口打开&#x27;</span><br><span class="line">        a.rightMenu-item#menu-too(href=&quot;javascript:rmf.open()&quot;)</span><br><span class="line">            i.fa.fa-link</span><br><span class="line">            span=&#x27;转到链接&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:rmf.copyLink()&quot;)</span><br><span class="line">            i.fa.fa-copy</span><br><span class="line">            span=&#x27;复制链接&#x27;</span><br><span class="line">    .rightMenu-group.rightMenu-line.hide#menu-img</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:rmf.saveAs()&quot;)</span><br><span class="line">            i.fa.fa-download</span><br><span class="line">            span=&#x27;保存图片&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:rmf.openWithNewTab()&quot;)</span><br><span class="line">            i.fa.fa-window-restore</span><br><span class="line">            span=&#x27;在新窗口打开&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:rmf.copyLink()&quot;)</span><br><span class="line">            i.fa.fa-copy</span><br><span class="line">            span=&#x27;复制图片链接&#x27;</span><br><span class="line">    .rightMenu-group.rightMenu-line</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:randomPost()&quot;)</span><br><span class="line">            i.fa.fa-paper-plane</span><br><span class="line">            span=&#x27;随便逛逛&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:switchNightMode();&quot;)</span><br><span class="line">            i.fa.fa-moon</span><br><span class="line">            span=&#x27;昼夜切换&#x27;</span><br><span class="line">        if is_post()||is_page()</span><br><span class="line">            a.rightMenu-item(href=&quot;javascript:rmf.switchReadMode();&quot;)</span><br><span class="line">                i.fa.fa-book</span><br><span class="line">                span=&#x27;阅读模式&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;/personal/about/&quot;)</span><br><span class="line">            i.fa.fa-info-circle</span><br><span class="line">            span=&#x27;关于博客&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:toggleWinbox();&quot;)</span><br><span class="line">            i.fas.fa-cog</span><br><span class="line">            span=&#x27;美化设置&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:rmf.fullScreen();&quot;)</span><br><span class="line">            i.fas.fa-expand</span><br><span class="line">            span=&#x27;切换全屏&#x27;</span><br><span class="line">        a.rightMenu-item(href=&quot;javascript:window.print();&quot;)</span><br><span class="line">            i.fa-solid.fa-print</span><br><span class="line">            span=&#x27;打印页面&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在 <code>[BlogRoot]/themes/butterfly/layout/includes/layout.pug</code>中引入（注意缩进，去掉+）</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=config.language data-theme=theme.display_mode class=htmlClassHideAside)</span><br><span class="line">  head</span><br><span class="line">    include ./head.pug</span><br><span class="line">  body</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    else</span><br><span class="line">      include ./404.pug</span><br><span class="line"></span><br><span class="line">    include ./rightside.pug</span><br><span class="line">    !=partial(&#x27;includes/third-party/search/index&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"><span class="addition">+    !=partial(&#x27;includes/rightmenu&#x27;,&#123;&#125;, &#123;cache:true&#125;)</span></span><br><span class="line">    include ./additional-js.pug</span><br></pre></td></tr></table></figure>
</li>
<li><p>在自定义的<code>custom.css</code>中加入以下样式描述菜单，其中重要的颜色我都做了备注，根据自己的需要修改</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 右键菜单 */</span></span><br><span class="line"><span class="selector-id">#rightMenu</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">height</span>: fit-content;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="comment">/* 菜单面板背景色 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--card-bg);</span><br><span class="line">    <span class="comment">/* 菜单面板文字颜色 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--font-color);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenu-group</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">7px</span> <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenu-group</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-last-child</span>(<span class="number">1</span>)) &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--font-color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenu-group</span><span class="selector-class">.rightMenu-small</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenu-group</span> <span class="selector-class">.rightMenu-item</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenu-group</span><span class="selector-class">.rightMenu-line</span> <span class="selector-class">.rightMenu-item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenu-group</span> <span class="selector-class">.rightMenu-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="comment">/* 鼠标悬浮选项颜色 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--text-bg-hover);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenu-group</span> <span class="selector-class">.rightMenu-item</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenu-group</span> <span class="selector-class">.rightMenu-item</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#rightMenu</span> <span class="selector-class">.rightMenu-group</span><span class="selector-class">.rightMenu-line</span> <span class="selector-class">.rightMenu-item</span> * &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rightMenu-group</span><span class="selector-class">.hide</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <code>[BlogRoot]/themes/butterfly/source/js/rightmenu.js</code>，并写入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setMask</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//设置遮罩</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;rmMask&quot;</span>)[<span class="number">0</span>] != <span class="literal">undefined</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;rmMask&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    mask = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    mask.<span class="property">className</span> = <span class="string">&quot;rmMask&quot;</span>;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;#fff&#x27;</span>;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;.0&#x27;</span>;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="number">998</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(mask);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;rightMenu&quot;</span>).<span class="property">style</span>.<span class="property">zIndex</span> = <span class="number">19198</span>;</span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertAtCursor</span>(<span class="params">myField, myValue</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IE 浏览器</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">selection</span>) &#123;</span><br><span class="line">        myField.<span class="title function_">focus</span>();</span><br><span class="line">        sel = <span class="variable language_">document</span>.<span class="property">selection</span>.<span class="title function_">createRange</span>();</span><br><span class="line">        sel.<span class="property">text</span> = myValue;</span><br><span class="line">        sel.<span class="title function_">select</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FireFox、Chrome等</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (myField.<span class="property">selectionStart</span> || myField.<span class="property">selectionStart</span> == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> startPos = myField.<span class="property">selectionStart</span>;</span><br><span class="line">        <span class="keyword">var</span> endPos = myField.<span class="property">selectionEnd</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存滚动条</span></span><br><span class="line">        <span class="keyword">var</span> restoreTop = myField.<span class="property">scrollTop</span>;</span><br><span class="line">        myField.<span class="property">value</span> = myField.<span class="property">value</span>.<span class="title function_">substring</span>(<span class="number">0</span>, startPos) + myValue + myField.<span class="property">value</span>.<span class="title function_">substring</span>(endPos, myField.<span class="property">value</span>.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (restoreTop &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            myField.<span class="property">scrollTop</span> = restoreTop;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myField.<span class="title function_">focus</span>();</span><br><span class="line">        myField.<span class="property">selectionStart</span> = startPos + myValue.<span class="property">length</span>;</span><br><span class="line">        myField.<span class="property">selectionEnd</span> = startPos + myValue.<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        myField.<span class="property">value</span> += myValue;</span><br><span class="line">        myField.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rmf = &#123;&#125;;</span><br><span class="line">rmf.<span class="property">showRightMenu</span> = <span class="keyword">function</span> (<span class="params">isTrue, x = <span class="number">0</span>, y = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> $rightMenu = $(<span class="string">&#x27;#rightMenu&#x27;</span>);</span><br><span class="line">    $rightMenu.<span class="title function_">css</span>(<span class="string">&#x27;top&#x27;</span>, x + <span class="string">&#x27;px&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;left&#x27;</span>, y + <span class="string">&#x27;px&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isTrue) &#123;</span><br><span class="line">        $rightMenu.<span class="title function_">show</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $rightMenu.<span class="title function_">hide</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rmf.<span class="property">copyWordsLink</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line">    <span class="keyword">let</span> txa = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;textarea&quot;</span>);</span><br><span class="line">    txa.<span class="property">value</span> = url;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(txa)</span><br><span class="line">    txa.<span class="title function_">select</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;Copy&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(txa);</span><br><span class="line">&#125;</span><br><span class="line">rmf.<span class="property">switchReadMode</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> $body = <span class="variable language_">document</span>.<span class="property">body</span></span><br><span class="line">    $body.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;read-mode&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> newEle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">    newEle.<span class="property">type</span> = <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    newEle.<span class="property">className</span> = <span class="string">&#x27;fas fa-sign-out-alt exit-readmode&#x27;</span></span><br><span class="line">    $body.<span class="title function_">appendChild</span>(newEle)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">clickFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $body.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;read-mode&#x27;</span>)</span><br><span class="line">        newEle.<span class="title function_">remove</span>()</span><br><span class="line">        newEle.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, clickFn)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newEle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, clickFn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制选中文字</span></span><br><span class="line">rmf.<span class="property">copySelect</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;Copy&#x27;</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回到顶部</span></span><br><span class="line">rmf.<span class="property">scrollToTop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;menus_items&quot;</span>)[<span class="number">1</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name-container&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;display:none&quot;</span>);</span><br><span class="line">    btf.<span class="title function_">scrollToDest</span>(<span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;, &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">popupMenu</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">oncontextmenu</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="comment">// if (event.ctrlKey) return true;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当关掉自定义右键时候直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (mouseMode == <span class="string">&quot;off&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&#x27;.rightMenu-group.hide&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>()) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#menu-text&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;post&#x27;</span>)) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#menu-post&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;page&#x27;</span>)) &#123;</span><br><span class="line">                $(<span class="string">&#x27;#menu-post&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> el = <span class="variable language_">window</span>.<span class="property">document</span>.<span class="property">body</span>;</span><br><span class="line">        el = event.<span class="property">target</span>;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="regexp">/^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&amp;&#x27;\*\+,;=.]+$/</span></span><br><span class="line">        <span class="keyword">if</span> (a.<span class="title function_">test</span>(<span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>()) &amp;&amp; el.<span class="property">tagName</span> != <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#menu-too&#x27;</span>).<span class="title function_">show</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (el.<span class="property">tagName</span> == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#menu-to&#x27;</span>).<span class="title function_">show</span>()</span><br><span class="line">            rmf.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (el.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;http://&quot;</span>) == -<span class="number">1</span> &amp;&amp; el.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;https://&quot;</span>) == -<span class="number">1</span> || el.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;yisous.xyz&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    pjax.<span class="title function_">loadUrl</span>(el.<span class="property">href</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    location.<span class="property">href</span> = el.<span class="property">href</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            rmf.<span class="property">openWithNewTab</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">window</span>.<span class="title function_">open</span>(el.<span class="property">href</span>);</span><br><span class="line">                <span class="comment">// window.location.reload();</span></span><br><span class="line">            &#125;</span><br><span class="line">            rmf.<span class="property">copyLink</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> url = el.<span class="property">href</span></span><br><span class="line">                <span class="keyword">let</span> txa = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;textarea&quot;</span>);</span><br><span class="line">                txa.<span class="property">value</span> = url;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(txa)</span><br><span class="line">                txa.<span class="title function_">select</span>();</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;Copy&quot;</span>);</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(txa);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tagName</span> == <span class="string">&#x27;IMG&#x27;</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#menu-img&#x27;</span>).<span class="title function_">show</span>()</span><br><span class="line">            rmf.<span class="property">openWithNewTab</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">window</span>.<span class="title function_">open</span>(el.<span class="property">src</span>);</span><br><span class="line">                <span class="comment">// window.location.reload();</span></span><br><span class="line">            &#125;</span><br><span class="line">            rmf.<span class="property">click</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                el.<span class="title function_">click</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            rmf.<span class="property">copyLink</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> url = el.<span class="property">src</span></span><br><span class="line">                <span class="keyword">let</span> txa = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;textarea&quot;</span>);</span><br><span class="line">                txa.<span class="property">value</span> = url;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(txa)</span><br><span class="line">                txa.<span class="title function_">select</span>();</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;Copy&quot;</span>);</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(txa);</span><br><span class="line">            &#125;</span><br><span class="line">            rmf.<span class="property">saveAs</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                <span class="keyword">var</span> url = el.<span class="property">src</span>;</span><br><span class="line">                <span class="keyword">var</span> filename = url.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>];</span><br><span class="line">                a.<span class="property">href</span> = url;</span><br><span class="line">                a.<span class="property">download</span> = filename;</span><br><span class="line">                a.<span class="title function_">click</span>();</span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tagName</span> == <span class="string">&quot;TEXTAREA&quot;</span> || el.<span class="property">tagName</span> == <span class="string">&quot;INPUT&quot;</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#menu-paste&#x27;</span>).<span class="title function_">show</span>();</span><br><span class="line">            rmf.<span class="property">paste</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                navigator.<span class="property">permissions</span></span><br><span class="line">                    .<span class="title function_">query</span>(&#123;</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;clipboard-read&#x27;</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result.<span class="property">state</span> == <span class="string">&#x27;granted&#x27;</span> || result.<span class="property">state</span> == <span class="string">&#x27;prompt&#x27;</span>) &#123;</span><br><span class="line">                            <span class="comment">//读取剪贴板</span></span><br><span class="line">                            navigator.<span class="property">clipboard</span>.<span class="title function_">readText</span>().<span class="title function_">then</span>(<span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">                                <span class="title function_">insertAtCursor</span>(el, text)</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="title class_">Snackbar</span>.<span class="title function_">show</span>(&#123;</span><br><span class="line">                                <span class="attr">text</span>: <span class="string">&#x27;请允许读取剪贴板！&#x27;</span>,</span><br><span class="line">                                <span class="attr">pos</span>: <span class="string">&#x27;top-center&#x27;</span>,</span><br><span class="line">                                <span class="attr">showAction</span>: <span class="literal">false</span>,</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> pageX = event.<span class="property">clientX</span> + <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">let</span> pageY = event.<span class="property">clientY</span>;</span><br><span class="line">        <span class="keyword">let</span> rmWidth = $(<span class="string">&#x27;#rightMenu&#x27;</span>).<span class="title function_">width</span>();</span><br><span class="line">        <span class="keyword">let</span> rmHeight = $(<span class="string">&#x27;#rightMenu&#x27;</span>).<span class="title function_">height</span>();</span><br><span class="line">        <span class="keyword">if</span> (pageX + rmWidth &gt; <span class="variable language_">window</span>.<span class="property">innerWidth</span>) &#123;</span><br><span class="line">            pageX -= rmWidth + <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pageY + rmHeight &gt; <span class="variable language_">window</span>.<span class="property">innerHeight</span>) &#123;</span><br><span class="line">            pageY -= pageY + rmHeight - <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mask = <span class="title function_">setMask</span>();</span><br><span class="line">        <span class="comment">// 滚动消失的代码和阅读进度有冲突，因此放到readPercent.js里面了</span></span><br><span class="line">        $(<span class="string">&quot;.rightMenu-item&quot;</span>).<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            $(<span class="string">&#x27;.rmMask&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;display: none&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="variable language_">window</span>).<span class="title function_">resize</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            rmf.<span class="title function_">showRightMenu</span>(<span class="literal">false</span>);</span><br><span class="line">            $(<span class="string">&#x27;.rmMask&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;display: none&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        mask.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            $(<span class="string">&#x27;.rmMask&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;display: none&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rmf.<span class="title function_">showRightMenu</span>(<span class="literal">true</span>, pageY, pageX);</span><br><span class="line">        $(<span class="string">&#x27;.rmMask&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;display: flex&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        rmf.<span class="title function_">showRightMenu</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="title function_">popupMenu</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addLongtabListener</span>(<span class="params">target, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="number">0</span> <span class="comment">// 初始化timer</span></span><br><span class="line"></span><br><span class="line">    target.<span class="property">ontouchstart</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="number">0</span> <span class="comment">// 重置timer</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">callback</span>();</span><br><span class="line">            timer = <span class="number">0</span></span><br><span class="line">        &#125;, <span class="number">380</span>) <span class="comment">// 超时器能成功执行，说明是长按</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target.<span class="property">ontouchmove</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer) <span class="comment">// 如果来到这里，说明是滑动</span></span><br><span class="line">        timer = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    target.<span class="property">ontouchend</span> = <span class="function">() =&gt;</span> &#123; <span class="comment">// 到这里如果timer有值，说明此触摸时间不足380ms，是点击</span></span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addLongtabListener</span>(box, popupMenu)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全屏</span></span><br><span class="line">rmf.<span class="property">fullScreen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">fullscreenElement</span>) <span class="variable language_">document</span>.<span class="title function_">exitFullscreen</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">requestFullscreen</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右键开关</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;mouse&quot;</span>) == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;mouse&quot;</span>, <span class="string">&quot;on&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mouseMode = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;mouse&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeMouseMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;mouse&quot;</span>) == <span class="string">&quot;on&quot;</span>) &#123;</span><br><span class="line">        mouseMode = <span class="string">&quot;off&quot;</span>;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;mouse&quot;</span>, <span class="string">&quot;off&quot;</span>);</span><br><span class="line">        <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.$notify(&#123;</span><br><span class="line">                        <span class="attr">title</span>: <span class="string">&quot;切换右键模式成功🍔&quot;</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&quot;当前鼠标右键已恢复为系统默认！&quot;</span>,</span><br><span class="line">                        <span class="attr">position</span>: <span class="string">&#x27;top-left&#x27;</span>,</span><br><span class="line">                        <span class="attr">offset</span>: <span class="number">50</span>,</span><br><span class="line">                        <span class="attr">showClose</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">5000</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mouseMode = <span class="string">&quot;on&quot;</span>;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;mouse&quot;</span>, <span class="string">&quot;on&quot;</span>);</span><br><span class="line">        <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.$notify(&#123;</span><br><span class="line">                        <span class="attr">title</span>: <span class="string">&quot;切换右键模式成功🍔&quot;</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&quot;当前鼠标右键已更换为网站指定样式！&quot;</span>,</span><br><span class="line">                        <span class="attr">position</span>: <span class="string">&#x27;top-left&#x27;</span>,</span><br><span class="line">                        <span class="attr">offset</span>: <span class="number">50</span>,</span><br><span class="line">                        <span class="attr">showClose</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">5000</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入jQuery依赖以及上述的css和js文件(<code>custom.css</code>默认已经引入了就不重复引用了)</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  bottom:</span><br><span class="line"><span class="addition">+    - &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn1.tianli0.top/npm/jquery@latest/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+    - &lt;script type=&quot;text/javascript&quot; src=&quot;/js/rightmenu.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>本来到这里重启项目就可以见效了，我这里还加了一个右键开关，取消了原来ctrl复合的右键开关策略。因此还需要加一个右键开关的按钮，在<code>[BlogRoot]\themes\butterfly\layout\includes\rightside.pug</code>中做如下的修改，目的就是把鼠标开关放到右边栏的设置隐藏项里面，这样我们就能随时随地开关右键功能了</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">      when &#x27;share&#x27;</span><br><span class="line">        button.share(type=&quot;button&quot; title=&#x27;分享链接&#x27; onclick=&quot;share()&quot;)</span><br><span class="line">          i.fas.fa-share-nodes</span><br><span class="line"></span><br><span class="line"><span class="addition">+      when &#x27;mouse&#x27;</span></span><br><span class="line"><span class="addition">+        button.share(type=&quot;button&quot; title=&#x27;右键模式&#x27; onclick=&quot;changeMouseMode()&quot;)</span></span><br><span class="line"><span class="addition">+          i.fas.fa-mouse</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#rightside</span><br><span class="line">  - const &#123; enable, hide, show &#125; = theme.rightside_item_order</span><br><span class="line"><span class="deletion">-  - const hideArray = enable ? hide &amp;&amp; hide.split(&#x27;,&#x27;) : [&#x27;readmode&#x27;,&#x27;translate&#x27;,&#x27;darkmode&#x27;]</span></span><br><span class="line"><span class="addition">+  - const hideArray = enable ? hide &amp;&amp; hide.split(&#x27;,&#x27;) : [&#x27;readmode&#x27;,&#x27;translate&#x27;,&#x27;darkmode&#x27;,&#x27;hideAside&#x27;, &#x27;mouse&#x27;]</span></span><br><span class="line">  - const showArray = enable ? show &amp;&amp; show.split(&#x27;,&#x27;) : [&#x27;toc&#x27;,&#x27;chat&#x27;,&#x27;share&#x27;,&#x27;comment&#x27;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启项目看看效果（可能会有问题，因为这个还是比较复杂的，有问题在评论区留言吧！）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="本站页脚设置"><a href="#本站页脚设置" class="headerlink" title="本站页脚设置"></a>本站页脚设置</h1><ol>
<li><p>首先要卸载店长的<code>hexo-butterfly-footer-beautify</code>插件，因为我将页脚直接写成一个pug，个人觉得插件很多冗余的地方用不到，因此卸载了，否则会冲突：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">复制成功npm un hexo-butterfly-footer-beautify --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>_config.butterfly.yml</code>或者站点配置文件<code>_config.yml</code>删除插件相关的配置项：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-footer_beautify:</span></span><br><span class="line"><span class="deletion">-  enable:</span></span><br><span class="line"><span class="deletion">-    timer: true # 计时器开关</span></span><br><span class="line"><span class="deletion">-    bdage: true # 徽标开关</span></span><br><span class="line"><span class="deletion">-  priority: 5 #过滤器优先权</span></span><br><span class="line"><span class="deletion">-  enable_page: all # 应用页面</span></span><br><span class="line"><span class="deletion">-  exclude: #屏蔽页面</span></span><br><span class="line"><span class="deletion">-    # - /posts/</span></span><br><span class="line"><span class="deletion">-    # - /about/</span></span><br><span class="line"><span class="deletion">-  layout: # 挂载容器类型</span></span><br><span class="line"><span class="deletion">-    type: id</span></span><br><span class="line"><span class="deletion">-    name: footer-wrap</span></span><br><span class="line"><span class="deletion">-    index: 0</span></span><br><span class="line"><span class="deletion">-  runtime_js: https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.js</span></span><br><span class="line"><span class="deletion">-  runtime_css: https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.css</span></span><br><span class="line"><span class="deletion">-  # 徽标部分配置项</span></span><br><span class="line"><span class="deletion">-  swiperpara: 0 #若非0，则开启轮播功能，每行徽标个数</span></span><br><span class="line"><span class="deletion">-  bdageitem:</span></span><br><span class="line"><span class="deletion">-    - link: https://hexo.io/ #徽标指向网站链接</span></span><br><span class="line"><span class="deletion">-      shields: https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo #徽标API</span></span><br><span class="line"><span class="deletion">-      message: 博客框架为Hexo_v6.2.0 #徽标提示语</span></span><br><span class="line"><span class="deletion">-    - link: https://butterfly.js.org/</span></span><br><span class="line"><span class="deletion">-      shields: https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span></span><br><span class="line"><span class="deletion">-      message: 主题版本Butterfly_v4.3.1</span></span><br><span class="line"><span class="deletion">-    - link: https://vercel.com/</span></span><br><span class="line"><span class="deletion">-      shields: https://img.shields.io/badge/Hosted-Vercel-brightgreen?style=flat&amp;logo=Vercel</span></span><br><span class="line"><span class="deletion">-      message: 本站采用多线部署，主线路托管于Vercel</span></span><br><span class="line"><span class="deletion">-    - link: https://dashboard.4everland.org/</span></span><br><span class="line"><span class="deletion">-    # https://img.shields.io/badge/Hosted-4EVERLAND-3FE2C1?style=flat&amp;logo=IPFS</span></span><br><span class="line"><span class="deletion">-      shields: https://img.shields.io/badge/Hosted-4EVERLAND-22DDDD?style=flat&amp;logo=IPFS</span></span><br><span class="line"><span class="deletion">-      message: 本站采用多线部署，备用线路托管于4EVERLAND</span></span><br><span class="line"><span class="deletion">-    - link: https://github.com/</span></span><br><span class="line"><span class="deletion">-      shields: https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span></span><br><span class="line"><span class="deletion">-      message: 本站项目由Github托管</span></span><br><span class="line"><span class="deletion">-    - link: http://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line"><span class="deletion">-      shields: https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span></span><br><span class="line"><span class="deletion">-      message: 本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span></span><br><span class="line"><span class="deletion">-  swiper_css: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span></span><br><span class="line"><span class="deletion">-  swiper_js: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span></span><br><span class="line"><span class="deletion">-  swiperbdage_init_js: https://npm.elemecdn.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将<code>[BlogRoot]/themes/butterfly/layout/includes/footer.pug</code>替换成如下代码这块东西分为几个部分，一个是以<code>#ft</code>为块的DOM，其中分为了<code>格言</code>、<code>猜你想看</code>、<code>推荐友链</code>三部分，参考图中的位置结合自己的喜好进行修改即可，图像、文字和链接均替换成你自己的（记住不要用我的链接！！！）；<code>if theme.footer.owner.enable</code>起这一块是主题指定的信息版权信息，我把主题配置项的<code>copyright</code>和<code>custom_text</code>这两项留空了，因此只会显示<code>©2022 By </code>；再然后就是<code>#workboard</code>这块，这块的信息由js逻辑写入与更新，可以自定义；最后是<code>p#ghbdages</code>这块，是徽标显示，大家可以到<a href="https://shields.io/">shields.io</a>按照自己的信息生成（不要用我的！！！）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制成功</span><br><span class="line">#footer-wrap</span><br><span class="line">  #ft</span><br><span class="line">    .ft-item-1</span><br><span class="line">      .t-top</span><br><span class="line">        .t-t-l</span><br><span class="line">          p.ft-t.t-l-t 格言🧬</span><br><span class="line">          .bg-ad</span><br><span class="line">            div</span><br><span class="line">              | 再看看那个光点，它就在这里，这是家园，这是我们 —— 你所爱的每一个人，你认识的一个人，你听说过的每一个人，曾经有过的每一个人，都在它上面度过他们的一生✨</span><br><span class="line">            .btn-xz-box</span><br><span class="line">              a.btn-xz(href=&#x27;https://stellarium.org/&#x27;) 点击开启星辰之旅</span><br><span class="line">        .t-t-r</span><br><span class="line">          p.ft-t.t-l-t 猜你想看💡</span><br><span class="line">          ul.ft-links</span><br><span class="line">            li</span><br><span class="line">              a(href=&#x27;/posts/eec9786.html&#x27;) 魔改指南</span><br><span class="line">              a(href=&#x27;/box/nav/&#x27;) 网址导航</span><br><span class="line">            li</span><br><span class="line">              a(href=&#x27;/social/link/&#x27;) 我的朋友</span><br><span class="line">              a(href=&#x27;/comments/&#x27;) 留点什么</span><br><span class="line">            li</span><br><span class="line">              a(href=&#x27;/personal/about/&#x27;) 关于作者</span><br><span class="line">              a(href=&#x27;/archives/&#x27;) 文章归档</span><br><span class="line">            li</span><br><span class="line">              a(href=&#x27;/categories/&#x27;) 文章分类</span><br><span class="line">              a(href=&#x27;/tags/&#x27;) 文章标签</span><br><span class="line">            li</span><br><span class="line">              a(href=&#x27;/box/Gallery/&#x27;) 我的画廊</span><br><span class="line">              a(href=&#x27;/personal/bb/&#x27;) 我的唠叨</span><br><span class="line">            li</span><br><span class="line">              a(href=&#x27;/site/time/&#x27;) 建设进程</span><br><span class="line">              a(href=&#x27;/site/census/&#x27;) 网站统计</span><br><span class="line">    .ft-item-2</span><br><span class="line">      p.ft-t 推荐友链⌛</span><br><span class="line">      .ft-img-group</span><br><span class="line">        .img-group-item</span><br><span class="line">          a(href=&#x27;https://www.fomal.cc/&#x27; title=&#x27;Fomalhaut🥝&#x27;)</span><br><span class="line">            img(src=&#x27;https://lskypro.acozycotage.net/LightPicture/2022/12/60e5d4e39da7c077.webp&#x27; alt=&#x27;&#x27;)</span><br><span class="line">        .img-group-item</span><br><span class="line">          a(href=&#x27;https://tzy1997.com/&#x27; title=&#x27;唐志远の博客&#x27;)</span><br><span class="line">            img(src=&#x27;https://lskypro.acozycotage.net/LightPicture/2022/12/4ab83cdce942463b.jpg&#x27; alt=&#x27;&#x27;)</span><br><span class="line">        .img-group-item</span><br><span class="line">          a(href=&#x27;https://akilar.top/&#x27; title=&#x27;Akilarの糖果屋&#x27;)</span><br><span class="line">            img(src=&#x27;https://lskypro.acozycotage.net/LightPicture/2022/12/6bf1ed05796db59c.jpg&#x27; alt=&#x27;&#x27;)</span><br><span class="line">        .img-group-item</span><br><span class="line">          a(href=&#x27;https://butterfly.js.org/&#x27; title=&#x27;Butterfly&#x27;)</span><br><span class="line">            img(src=&#x27;https://lskypro.acozycotage.net/LightPicture/2022/12/64cc6a7d508026e1.png&#x27; alt=&#x27;&#x27;)</span><br><span class="line">        .img-group-item</span><br><span class="line">          a(href=&#x27;https://anzhiy.cn/&#x27; title=&#x27;安知鱼&#x27;)</span><br><span class="line">            img(src=&#x27;https://lskypro.acozycotage.net/LightPicture/2022/12/1b33fef8f5fb7e63.jpg&#x27; alt=&#x27;&#x27;)</span><br><span class="line">        .img-group-item</span><br><span class="line">          a(href=&#x27;https://www.acozycotage.net/&#x27; title=&#x27;Acozycotage&#x27;)</span><br><span class="line">            img(src=&#x27;https://lskypro.acozycotage.net/LightPicture/2022/12/6a6fe6ebfd19c465.jpg&#x27; alt=&#x27;&#x27;)</span><br><span class="line">        .img-group-item</span><br><span class="line">          a(href=&#x27;https://cdn.netdun.net/&#x27; title=&#x27;网盾星球&#x27;)</span><br><span class="line">            img(src=&#x27;https://lskypro.acozycotage.net/LightPicture/2022/12/70dee3f9d1ca10f3.webp&#x27; alt=&#x27;&#x27;)</span><br><span class="line">        .img-group-item</span><br><span class="line">          a(href=&#x27;javascript:void(0)&#x27; title=&#x27;广告位招租&#x27;)</span><br><span class="line">            img(src=&#x27;https://lskypro.acozycotage.net/LightPicture/2022/12/65307a5828af6790.webp&#x27; alt=&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">  if theme.footer.owner.enable</span><br><span class="line">    - var now = new Date()</span><br><span class="line">    - var nowYear = now.getFullYear()</span><br><span class="line">    if theme.footer.owner.since &amp;&amp; theme.footer.owner.since != nowYear</span><br><span class="line">      .copyright</span><br><span class="line">        span!= `&lt;b&gt;&amp;copy;$&#123;theme.footer.owner.since&#125; - $&#123;nowYear&#125;&lt;/b&gt;`</span><br><span class="line">        span!= `&lt;b&gt;&amp;nbsp;&amp;nbsp;By $&#123;config.author&#125;&lt;/b&gt;`</span><br><span class="line">    else</span><br><span class="line">       .copyright</span><br><span class="line">         span!= `&lt;b&gt;&amp;copy;$&#123;nowYear&#125;&lt;/b&gt;`</span><br><span class="line">         span!= `&lt;b&gt;&amp;nbsp;&amp;nbsp;By $&#123;config.author&#125;&lt;/b&gt;`</span><br><span class="line">  if theme.footer.copyright</span><br><span class="line">    .framework-info</span><br><span class="line">      span= _p(&#x27;footer.framework&#x27;) + &#x27; &#x27;</span><br><span class="line">      a(href=&#x27;https://hexo.io&#x27;)= &#x27;Hexo&#x27;</span><br><span class="line">      span.footer-separator |</span><br><span class="line">      span= _p(&#x27;footer.theme&#x27;) + &#x27; &#x27;</span><br><span class="line">      a(href=&#x27;https://github.com/jerryc127/hexo-theme-butterfly&#x27;)= &#x27;Butterfly&#x27;</span><br><span class="line">  if theme.footer.custom_text</span><br><span class="line">    .footer_custom_text!=`$&#123;theme.footer.custom_text&#125;`</span><br><span class="line">    </span><br><span class="line">  #workboard</span><br><span class="line">  </span><br><span class="line">  p#ghbdages</span><br><span class="line">    a.github-badge(target=&#x27;_blank&#x27; href=&quot;https://hexo.io/&quot; style=&#x27;margin-inline:5px&#x27; title=&quot;博客框架为Hexo_v6.3.0&quot;)</span><br><span class="line">      img(src=&quot;https://sourcebucket.s3.ladydaily.com/badge/Frame-Hexo-blue.svg&quot; alt=&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    a.github-badge(target=&#x27;_blank&#x27; href=&quot;https://butterfly.js.org/&quot; style=&#x27;margin-inline:5px&#x27; title=&quot;主题版本Butterfly_v4.3.1&quot;)</span><br><span class="line">      img(src=&quot;https://sourcebucket.s3.ladydaily.com/badge/Theme-Butterfly-6513df.svg&quot; alt=&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    a.github-badge(target=&#x27;_blank&#x27; href=&quot;https://vercel.com/&quot; style=&#x27;margin-inline:5px&#x27; title=&quot;本站采用多线部署，主线路托管于Vercel&quot;)</span><br><span class="line">      img(src=&quot;https://sourcebucket.s3.ladydaily.com/badge/Hosted-Vercel-brightgreen.svg&quot; alt=&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    a.github-badge(target=&#x27;_blank&#x27; href=&quot;https://user.51.la/&quot; style=&#x27;margin-inline:5px&#x27; title=&quot;本站数据分析得益于51la技术支持&quot;)</span><br><span class="line">      img(src=&quot;https://sourcebucket.s3.ladydaily.com/badge/Analytics-51la-3db1eb.svg&quot; alt=&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    a.github-badge(target=&#x27;_blank&#x27; href=&quot;https://icp.gov.moe/?keyword=20226665&quot; style=&#x27;margin-inline:5px&#x27; title=&quot;本站已加入萌ICP豪华套餐，萌ICP备20226665号&quot;)</span><br><span class="line">      img(src=&quot;https://sourcebucket.s3.ladydaily.com/badge/萌ICP备-20226665-fe1384.svg&quot; alt=&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    a.github-badge(target=&#x27;_blank&#x27; href=&quot;https://bitiful.dogecast.com/buckets&quot; style=&#x27;margin-inline:5px&#x27; title=&quot;本网站经Service Worker分流至缤纷云对象存储&quot;)</span><br><span class="line">      img(src=&quot; https://sourcebucket.s3.ladydaily.com/badge/Bucket-缤纷云-9c62da.svg&quot; alt=&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    a.github-badge(target=&#x27;_blank&#x27; href=&quot;https://www.netdun.net/&quot; style=&#x27;margin-inline:5px&#x27; title=&quot;本站使用网盾星球提供CDN加速与防护&quot;)</span><br><span class="line">      img(src=&quot;https://sourcebucket.s3.ladydaily.com/badge/CDN-网盾星球-fff2cc.svg&quot; alt=&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    a.github-badge(target=&#x27;_blank&#x27; href=&quot;https://github.com/&quot; style=&#x27;margin-inline:5px&#x27; title=&quot;本网站源码由Github提供存储仓库&quot;)</span><br><span class="line">      img(src=&quot; https://sourcebucket.s3.ladydaily.com/badge/Source-Github-d021d6.svg&quot; alt=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>将以下代码复制到自定义的<code>custom.css</code>中，其中颜色、圆角等可以根据你自己的喜好进行修改:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">复制成功</span><br><span class="line"><span class="comment">/* tzy页脚样式 */</span></span><br><span class="line"><span class="selector-id">#ft</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span> <span class="number">255</span> <span class="number">255</span> / <span class="number">80%</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-item-1</span>,</span><br><span class="line"><span class="selector-class">.ft-item-2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-item-1</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-item-2</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.t-top</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.t-top</span> <span class="selector-class">.t-t-l</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.t-top</span> <span class="selector-class">.t-t-l</span> <span class="selector-class">.bg-ad</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-xz-box</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按钮背景颜色等 */</span></span><br><span class="line"><span class="selector-class">.btn-xz</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--btn-bg);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--btn-color);</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2.4</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-xz</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 按钮悬浮颜色 */</span></span><br><span class="line"><span class="selector-class">.btn-xz-box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-xz</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--text-bg-hover);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.t-top</span> <span class="selector-class">.t-t-r</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-links</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-links</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 链接悬浮颜色 */</span></span><br><span class="line"><span class="selector-class">.ft-links</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--theme-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-item-2</span> <span class="selector-class">.ft-img-group</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-t</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.t-l-t</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-item-2</span> <span class="selector-class">.ft-img-group</span> <span class="selector-class">.img-group-item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18.4%</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-item-2</span> <span class="selector-class">.ft-img-group</span> <span class="selector-class">.img-group-item</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ft-item-2</span> <span class="selector-class">.ft-img-group</span> <span class="selector-class">.img-group-item</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 头像悬浮颜色框 */</span></span><br><span class="line"><span class="selector-class">.ft-item-2</span> <span class="selector-class">.ft-img-group</span> <span class="selector-class">.img-group-item</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">var</span>(--theme-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.ft-item-1</span> &#123;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.ft-item-2</span> &#123;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.t-top</span> <span class="selector-class">.t-t-l</span> <span class="selector-class">.bg-ad</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">576px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.t-top</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.t-top</span> <span class="selector-class">.t-t-l</span> &#123;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.t-top</span> <span class="selector-class">.t-t-r</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页脚心跳动画 */</span></span><br><span class="line"><span class="selector-id">#heartbeat</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">animation</span>: iconAnimate <span class="number">1s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> iconAnimate &#123;</span><br><span class="line">  <span class="number">0%</span>,</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">10%</span>,</span><br><span class="line">  <span class="number">30%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span>,</span><br><span class="line">  <span class="number">40%</span>,</span><br><span class="line">  <span class="number">60%</span>,</span><br><span class="line">  <span class="number">80%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span>,</span><br><span class="line">  <span class="number">70%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> iconAnimate &#123;</span><br><span class="line">  <span class="number">0%</span>,</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">10%</span>,</span><br><span class="line">  <span class="number">30%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span>,</span><br><span class="line">  <span class="number">40%</span>,</span><br><span class="line">  <span class="number">60%</span>,</span><br><span class="line">  <span class="number">80%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span>,</span><br><span class="line">  <span class="number">70%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-o-keyframes</span> iconAnimate &#123;</span><br><span class="line">  <span class="number">0%</span>,</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">10%</span>,</span><br><span class="line">  <span class="number">30%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span>,</span><br><span class="line">  <span class="number">40%</span>,</span><br><span class="line">  <span class="number">60%</span>,</span><br><span class="line">  <span class="number">80%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span>,</span><br><span class="line">  <span class="number">70%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> iconAnimate &#123;</span><br><span class="line">  <span class="number">0%</span>,</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">10%</span>,</span><br><span class="line">  <span class="number">30%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span>,</span><br><span class="line">  <span class="number">40%</span>,</span><br><span class="line">  <span class="number">60%</span>,</span><br><span class="line">  <span class="number">80%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span>,</span><br><span class="line">  <span class="number">70%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后计时器还要往<code>#footer-wrap</code>这块元素上面写入网站运行时间等信息，新建文件<code>[BlogRoot]\source\js\runtime.js</code>，写入如下代码。这里要修改的几块东西是：<code>网站诞生时间</code>、<code>currentTimeHtml</code>这块东西；其中<code>currentTimeHtml</code>分为了两种模式，对应两个不同的图标，自行研究一下就懂！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">复制成功</span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createtime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 当前时间</span></span><br><span class="line">  now.<span class="title function_">setTime</span>(now.<span class="title function_">getTime</span>() + <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;08/01/2022 00:00:00&quot;</span>); <span class="comment">// 旅行者1号开始计算的时间</span></span><br><span class="line">  <span class="keyword">var</span> dis = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">23400000000</span> + ((now - start) / <span class="number">1000</span>) * <span class="number">17</span>); <span class="comment">// 距离=秒数*速度 记住转换毫秒</span></span><br><span class="line">  <span class="keyword">var</span> unit = (dis / <span class="number">149600000</span>).<span class="title function_">toFixed</span>(<span class="number">6</span>);  <span class="comment">// 天文单位</span></span><br><span class="line">  <span class="keyword">var</span> grt = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;08/09/2022 00:00:00&quot;</span>);	<span class="comment">// 网站诞生时间</span></span><br><span class="line">  <span class="keyword">var</span> days = (now - grt) / <span class="number">1e3</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>,</span><br><span class="line">    dnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(days),</span><br><span class="line">    hours = (now - grt) / <span class="number">1e3</span> / <span class="number">60</span> / <span class="number">60</span> - <span class="number">24</span> * dnum,</span><br><span class="line">    hnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours);</span><br><span class="line">  <span class="number">1</span> == <span class="title class_">String</span>(hnum).<span class="property">length</span> &amp;&amp; (hnum = <span class="string">&quot;0&quot;</span> + hnum);</span><br><span class="line">  <span class="keyword">var</span> minutes = (now - grt) / <span class="number">1e3</span> / <span class="number">60</span> - <span class="number">1440</span> * dnum - <span class="number">60</span> * hnum,</span><br><span class="line">    mnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes);</span><br><span class="line">  <span class="number">1</span> == <span class="title class_">String</span>(mnum).<span class="property">length</span> &amp;&amp; (mnum = <span class="string">&quot;0&quot;</span> + mnum);</span><br><span class="line">  <span class="keyword">var</span> seconds = (now - grt) / <span class="number">1e3</span> - <span class="number">86400</span> * dnum - <span class="number">3600</span> * hnum - <span class="number">60</span> * mnum,</span><br><span class="line">    snum = <span class="title class_">Math</span>.<span class="title function_">round</span>(seconds);</span><br><span class="line">  <span class="number">1</span> == <span class="title class_">String</span>(snum).<span class="property">length</span> &amp;&amp; (snum = <span class="string">&quot;0&quot;</span> + snum);</span><br><span class="line">  <span class="keyword">let</span> currentTimeHtml = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  (currentTimeHtml =</span><br><span class="line">    hnum &lt; <span class="number">18</span> &amp;&amp; hnum &gt;= <span class="number">9</span></span><br><span class="line">    ? <span class="string">`&lt;img class=&#x27;boardsign&#x27; src=&#x27;https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg&#x27; title=&#x27;什么时候能够实现财富自由呀~&#x27;&gt;&lt;br&gt; &lt;div style=&quot;font-size:13px;font-weight:bold&quot;&gt;本站居然运行了 <span class="subst">$&#123;dnum&#125;</span> 天 <span class="subst">$&#123;hnum&#125;</span> 小时 <span class="subst">$&#123;mnum&#125;</span> 分 <span class="subst">$&#123;snum&#125;</span> 秒 &lt;i id=&quot;heartbeat&quot; class=&#x27;fas fa-heartbeat&#x27;&gt;&lt;/i&gt; &lt;br&gt; 旅行者 1 号当前距离地球 <span class="subst">$&#123;dis&#125;</span> 千米，约为 <span class="subst">$&#123;unit&#125;</span> 个天文单位 🚀&lt;/div&gt;`</span></span><br><span class="line">    : <span class="string">`&lt;img class=&#x27;boardsign&#x27; src=&#x27;https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg&#x27; title=&#x27;下班了就该开开心心地玩耍~&#x27;&gt;&lt;br&gt; &lt;div style=&quot;font-size:13px;font-weight:bold&quot;&gt;本站居然运行了 <span class="subst">$&#123;dnum&#125;</span> 天 <span class="subst">$&#123;hnum&#125;</span> 小时 <span class="subst">$&#123;mnum&#125;</span> 分 <span class="subst">$&#123;snum&#125;</span> 秒 &lt;i id=&quot;heartbeat&quot; class=&#x27;fas fa-heartbeat&#x27;&gt;&lt;/i&gt; &lt;br&gt; 旅行者 1 号当前距离地球 <span class="subst">$&#123;dis&#125;</span> 千米，约为 <span class="subst">$&#123;unit&#125;</span> 个天文单位 🚀&lt;/div&gt;`</span>),</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;workboard&quot;</span>) &amp;&amp;</span><br><span class="line">    (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;workboard&quot;</span>).<span class="property">innerHTML</span> = currentTimeHtml);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置重复执行函数，周期1000ms</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createtime</span>();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>_config.butterfly.yml</code>引入该<code>runtime.js</code>文件：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  bottom: </span><br><span class="line"><span class="addition">+    - &lt;script defer src=&quot;/js/runtime.js&quot;&gt;&lt;/script&gt; # 页脚计时器</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>到这里你已经成功了 99.99%，最后重新编译运行即可看见效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="信息卡片头像状态"><a href="#信息卡片头像状态" class="headerlink" title="信息卡片头像状态"></a>信息卡片头像状态</h1><ol>
<li><p>修改<code>[BlogRoot]\themes\butterfly\layout\includes\widget\card_author.pug</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">if theme.aside.card_author.enable</span><br><span class="line">  .card-widget.card-info</span><br><span class="line">    .is-center</span><br><span class="line"><span class="deletion">-      .avatar-img</span></span><br><span class="line"><span class="deletion">-        img(src=url_for(theme.avatar.img) onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.error_img.flink) + `&#x27;` alt=&quot;avatar&quot;)</span></span><br><span class="line"><span class="addition">+      div.card-info-avatar</span></span><br><span class="line"><span class="addition">+        .avatar-img</span></span><br><span class="line"><span class="addition">+          img(src=url_for(theme.avatar.img) onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.error_img.flink) + `&#x27;` alt=&quot;avatar&quot;)</span></span><br><span class="line"><span class="addition">+        div.author-status-box</span></span><br><span class="line"><span class="addition">+          div.author-status</span></span><br><span class="line"><span class="addition">+            g-emoji.g-emoji(alias=&quot;palm_tree&quot; fallback-src=&quot;https://lskypro.acozycotage.net/LightPicture/2022/12/fe1dc0402e623096.jpg&quot;) 🐟</span></span><br><span class="line"><span class="addition">+            span 认真摸鱼中</span></span><br></pre></td></tr></table></figure>

<p>其实原理很简单，就是创建了一个新的容器把头像和容器都包住，再用css调节样式就行。<code>🐟</code>那里可以换成任意一个emoji，在win10下只要<code>win</code>+<code>.</code>就可以输入emoji，<code>认真摸鱼中</code>就是对这个状态的描述，建议长度和这个接近，<code>fallback-src</code>是备用链接，当有设备不支持这个emoji时候就用那个图，可以是该emoji的小截图</p>
</li>
<li><p>在<code>custom.css</code>中引入以下样式，可以自己进行微调：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card-info-avatar</span> <span class="selector-class">.author-status-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">28px</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d0d7de</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f8f8f8f8</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.4s</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.card-info-avatar</span> <span class="selector-class">.author-status-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#222222f2</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#5c6060</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-info-avatar</span> <span class="selector-class">.author-status-box</span> <span class="selector-class">.author-status</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-info-avatar</span> <span class="selector-class">.author-status-box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">105px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-info-avatar</span> <span class="selector-class">.author-status-box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.author-status</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">105px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-info-avatar</span> <span class="selector-class">.author-status-box</span> <span class="selector-class">.author-status</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card-widget</span> <span class="selector-class">.card-info-avatar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="头像呼吸灯"><a href="#头像呼吸灯" class="headerlink" title="头像呼吸灯"></a>头像呼吸灯</h1><ol>
<li><p>这个可以用js实现，也可以用纯css的关键帧实现，貌似css的性能会高点，在<code>custom.css</code>添加如下代码，颜色和时间啥的大家可以根据自己的喜好调节，其实就是关键帧之间通过某个插值方法连续变样式而已，会这一个你就会DIY各种高大上的动画啦</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 头像呼吸灯 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> <span class="selector-class">.avatar-img</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: huxi_light <span class="number">4s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.avatar-img</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: huxi_dark <span class="number">4s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> huxi_light &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#e9f5fa</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#e9f5fa</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#e9f5fa</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> huxi_dark &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#39c5bb</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#39c5bb</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#39c5bb</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启项目即可看到效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="网站恶搞标题"><a href="#网站恶搞标题" class="headerlink" title="网站恶搞标题"></a>网站恶搞标题</h1><ol>
<li><p>新建文件<code>[BlogRoot]\source\js\title.js</code>，写入以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态标题</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitile</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">    <span class="comment">//离开当前页面时标签显示内容</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;👀跑哪里去了~&#x27;</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//返回当前页面时标签显示内容</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;🐖抓到你啦～&#x27;</span>;</span><br><span class="line">    <span class="comment">//两秒后变回正常标题</span></span><br><span class="line">    titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitile</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件<code>_config.butterfly.yml</code>引入该文件：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">inject: </span><br><span class="line">  bottom: </span><br><span class="line"><span class="addition">+    - &lt;script async src=&quot;/js/title.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="右边滚动栏样式"><a href="#右边滚动栏样式" class="headerlink" title="右边滚动栏样式"></a>右边滚动栏样式</h1><p>在<code>custom.css</code>中加入以下代码，其中<code>var(--theme-color)</code>换成你自己的主题色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 滚动条样式 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">73</span>, <span class="number">177</span>, <span class="number">245</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>,</span><br><span class="line">    transparent <span class="number">75%</span>,</span><br><span class="line">    transparent</span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--theme-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="标签云增加文章数上下标"><a href="#标签云增加文章数上下标" class="headerlink" title="标签云增加文章数上下标"></a>标签云增加文章数上下标</h1><p><a href="https://blog.eurkon.com/post/6687849c.html">Butterfly 标签云增加文章数上下标 | Eurkon</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文教程主要针对 Hexo Butterfly 主题博客，在 Butterfly 主题中，<strong>文章标签页</strong>和<strong>标签侧边栏</strong>都有文章标签的词云图，但仅仅用字体大小表示某个标签下的文章数量是不明显的，可以在这个基础上加上表示某个标签下文章数的上下标，其中 <code>&lt;sup&gt;</code> 表示上标，<code>&lt;sub&gt;</code> 表示下标。</p>
<h2 id="修改-page-js"><a href="#修改-page-js" class="headerlink" title="修改 page.js"></a>修改 page.js</h2><ol>
<li><p>打开 <code>\themes\butterfly\layout\includes\page\tags.pug</code> 文件和 <code>\themes\butterfly\layout\includes\widget\card_tags.pug</code> 文件，发现绘制彩色标签云都是使用了 <code>cloudTags</code> 函数。</p>
<p>另外一个绘制标签云的 <code>tagcloud</code> 函数是 hexo 自带的，有兴趣的可以到 <code>\node_modules\hexo\lib\plugins\helper\tagcloud.js</code> 研究，这里不多介绍。</p>
</li>
<li><p>搜索 <code>cloudTags</code> 函数，可以在 <code>\themes\butterfly\scripts\helpers\page.js</code> 找到绘制标签云的代码，增加 <code>&lt;sup&gt;$&#123;tag.length&#125;&lt;/sup&gt;</code> 或 <code>&lt;sub&gt;$&#123;tag.length&#125;&lt;/sub&gt;</code> 可绘制表示标签文章数的上下标。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">hexo.extend.helper.register(&#x27;cloudTags&#x27;, function (options = &#123;&#125;) &#123;</span><br><span class="line">  const theme = hexo.theme.config</span><br><span class="line">  const env = this</span><br><span class="line">  let source = options.source</span><br><span class="line">  const minfontsize = options.minfontsize</span><br><span class="line">  const maxfontsize = options.maxfontsize</span><br><span class="line">  const limit = options.limit</span><br><span class="line">  const unit = options.unit || &#x27;px&#x27;</span><br><span class="line"></span><br><span class="line">  let result = &#x27;&#x27;</span><br><span class="line">  if (limit &gt; 0) &#123;</span><br><span class="line">    source = source.limit(limit)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const sizes = []</span><br><span class="line">  source.sort(&#x27;length&#x27;).forEach(tag =&gt; &#123;</span><br><span class="line">    const &#123; length &#125; = tag</span><br><span class="line">    if (sizes.includes(length)) return</span><br><span class="line">    sizes.push(length)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  const length = sizes.length - 1</span><br><span class="line">  source.forEach(tag =&gt; &#123;</span><br><span class="line">    const ratio = length ? sizes.indexOf(tag.length) / length : 0</span><br><span class="line">    const size = minfontsize + ((maxfontsize - minfontsize) * ratio)</span><br><span class="line">    let style = `font-size: $&#123;parseFloat(size.toFixed(2))&#125;$&#123;unit&#125;;`</span><br><span class="line">    const color = &#x27;rgb(&#x27; + Math.floor(Math.random() * 201) + &#x27;, &#x27; + Math.floor(Math.random() * 201) + &#x27;, &#x27; + Math.floor(Math.random() * 201) + &#x27;)&#x27; // 0,0,0 -&gt; 200,200,200</span><br><span class="line">    style += ` color: $&#123;color&#125;`</span><br><span class="line"><span class="deletion">-   result += `&lt;a href=&quot;$&#123;env.url_for(tag.path)&#125;&quot; style=&quot;$&#123;style&#125;&quot;&gt;$&#123;tag.name&#125;&lt;/a&gt;`</span></span><br><span class="line"><span class="addition">+   result += `&lt;a href=&quot;$&#123;env.url_for(tag.path)&#125;&quot; style=&quot;$&#123;style&#125;&quot;&gt;$&#123;tag.name&#125;&lt;sup&gt;$&#123;tag.length&#125;&lt;/sup&gt;&lt;/a&gt;`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  return result</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Hexo-三连"><a href="#Hexo-三连" class="headerlink" title="Hexo 三连"></a>Hexo 三连</h2><p>执行 Hexo 三连</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
        <tag>Butterfly主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（11）——使用COS图床</title>
    <url>/2023/07/26/hexo/Hexo_build11/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​        腾讯云COS服务名为对象存储，是腾讯云提供的一种存储海量文件的分布式存储服务，用户可通过网络随时存储和查看数据。腾讯云 COS 使所有用户都能使用具备高扩展性、低成本、可靠和安全的数据存储服务。</p>
<p>​    图床也就是专门提供存储图片的地方，我们只要通过图床提供的 API 接口，把图片上传上去，就可以通过外链访问了，根本不用操心图片是怎么存的，硬盘空间不够了，硬盘坏了，访问速度比较慢等等问题，这些图床都会帮我们搞定，他们会用各种技术帮我们做图片相关的优化和服务，比如多机互备、CDN 加速、图片处理、图片鉴黄、文本识别等等。</p>
<h1 id="腾讯云COS服务"><a href="#腾讯云COS服务" class="headerlink" title="腾讯云COS服务"></a>腾讯云COS服务</h1><p>​        根据简介已经可以了解到，腾讯云COS可以将本地的照片分布式存储到各节点服务器上，这样让访问者距离这些存储资源更加的近，从而减少访问等待时间，提高访问者体验。并且对象存储可以减轻博客上传时间慢，图片存储占本地空间等等问题。另外，腾讯云首次开通COS可以提供个人6个月共50GB的标准存储容量，就算是6个月过去一个月需要的也就是几块钱，也算是白嫖喽~</p>
<ol>
<li><p>创建储存桶</p>
<p><code>搜索对象存储-&gt;存储桶列表-&gt;创建存储桶</code></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729132334725.png" alt="image-20230729132334725"></p>
<p>之后弹出设置框，填写名称、所属地域以及访问权限：<code>公有读私有写</code>，之后点击确定即可。</p>
</li>
<li><p>设置防盗链</p>
<p> 在你创建了图床后，会出现一种情况：你存放的图片被一些访问者看上，他通过引用你图片的链接来用于他处展示，这样花的是你的访问量，但是是他用到了别处，因此需要设置防盗链添加允许哪些域名或者服务器可以通过链接展示照片。</p>
<p>​    在你创建的桶中右侧<code>列表-&gt;安全管理-&gt;防盗链设置-&gt;防盗链当前状态开启-&gt;白名单-&gt;允许referer-&gt;添加可以访问的域名或ip</code>。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729133002011.png" alt="image-20230729133002011"></p>
</li>
<li><p>COS客户端下载</p>
<p>​    腾讯云推出了COS客户端，方便用户进行上传下载以及图片操作等功能，更加方便不用在控制台一堆服务中搜索COS了。感觉一种网盘的感觉。</p>
</li>
</ol>
<h1 id="Typora-PicGo编辑图片上传一步到位"><a href="#Typora-PicGo编辑图片上传一步到位" class="headerlink" title="Typora+PicGo编辑图片上传一步到位"></a>Typora+PicGo编辑图片上传一步到位</h1><p>​        虽然有COS客户端，但是对于写文章后还需要手动上传，并且还要将文章中本地位置换成图片链接，所以引入了PicGo软件啦。</p>
<ol>
<li><p>下载安装PicGo</p>
<p>​    根据自己的系统下载相应文件下载地址。</p>
<p> Windows系统下我下载的是PicGo-Setup-2.3.0-beta.3.exe，之后按照步骤安装即可。</p>
<p>（下载后该软件不会自动打开，可以在右下角找到运行图标）</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729133227705.png" alt="image-20230729133227705"></p>
<p>PicGo设置</p>
<p>​    可以看到在图床设置中PicGo支持许多图床，这里只用腾讯云COS作为演示，如果不需要其他图床可以在PicGo设置中取消掉无用图床。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729133405436.png" alt="image-20230729133405436"></p>
<ul>
<li><code>SecretID/Key</code>:在腾讯云访问管理-&gt;访问密钥-&gt;API密钥管理中可以找到。</li>
<li><code>APPID</code>:在右上角头像的用户信息中复制粘贴。</li>
<li><code>存储空间名</code>:存储桶的名字。</li>
<li><code>存储路径</code>:指上传到存储桶中的位置，不填则是主目录，若填img&#x2F;则是存到img文件夹下，后面的&#x2F;不能省。</li>
<li><code>自定义域名</code>:其实这个就是上传完图片，图片的域名前缀。可以在桶的概览-&gt;域名信息-&gt;访问域名复制粘贴过来。</li>
</ul>
</li>
<li><p>配置Typora</p>
<p>左上角文件-&gt;偏好设置-&gt;图像进行以下设置即可。</p>
<p>​    设置完之后可以点击验证图片上传选项，显示上传成功并且存储桶中添加了两张照片即可说明配置完成。</p>
</li>
<li><p>PicGo插件</p>
<p>​        PicGo支持许多插件，可以在插件设置中查询并安装，前提是安装了npm。</p>
<p>只需要搜索插件最后一段名称即可查到，以我安装的自定义图像文件名和前缀的插件为例:</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729133642625.png" alt="image-20230729133642625"></p>
</li>
<li><p>使用方法</p>
<p>都配置好了就可以体验下啦。</p>
<p>使用的时候可以直接复制粘贴图片到<code>Typora</code>文章中，根据上方的设置它会被存到<code>C:\Users\CLAY\img</code>，之后再Typora上方<code>格式-&gt;图像-&gt;上传本地所有图片</code>，之后就会发现图片的地址变成了图片的URL地址。也可以<code>右键-&gt;上传图片</code>单独上传。<br>如果不是文章中的图片，可以直接将图片拖到<code>PicGo上传区</code>上传，并且可以选择连接格式（上传后直接可以直接粘贴）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（12）——网站SEO优化</title>
    <url>/2023/07/26/hexo/Hexo_build12/</url>
    <content><![CDATA[<p>   网站推广是一个比较烦人的事情，特别是对于专心搞技术的来说，可能就不是很擅长，那么怎么才能让别人知道我们网站呢？也就是说我们需要想办法让别人通过搜索就可以搜索到博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好。</p>
<blockquote>
<p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p>
</blockquote>
<h1 id="百度收录站点"><a href="#百度收录站点" class="headerlink" title="百度收录站点"></a>百度收录站点</h1><p>​        首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入<code>site:&lt;域名&gt;</code>,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729161224909.png" alt="image-20230729161224909"></p>
<h2 id="验证网络所有权"><a href="#验证网络所有权" class="headerlink" title="验证网络所有权"></a>验证网络所有权</h2><p>登录百度站长搜索资源平台， 只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击添加网站然后输入你的站点地址。在填完网址选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有2种：</p>
<ul>
<li>文件验证。</li>
<li>html标签验证</li>
</ul>
<p>​        我是用的是文件验证的方式：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729161642882.png" alt="image-20230729161642882"></p>
<p>只需要下载验证文件，复制到&#x2F;mylog&#x2F;source中，并在其最上方加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>不然hexo会解析文件，避免hexo对其进行操作。之后<code>hexo clean，hexo g -d</code>部署后返回网页完成验证即可。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729164353402.png" alt="image-20230729164353402"></p>
<h1 id="生成网站地图"><a href="#生成网站地图" class="headerlink" title="生成网站地图"></a>生成网站地图</h1><p>需要使用<code>npm</code>自动生成网站的<code>sitemap</code>，然后将生成的<code>sitemap</code>提交到百度和其他搜索引擎。</p>
<ul>
<li><p>安装<code>sitemap</code>插件下属两个分别针对谷歌和百度的插件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<p>在安装过程中可能报出网络问题，设置<code>proxy</code>的错误，只需要先执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改Hexo配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> # URL</span><br><span class="line"> ## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line"> url: https://liuruibin.com</span><br><span class="line"> root: /</span><br><span class="line"> permalink: posts/:abbrlink.html  </span><br><span class="line">permalink_defaults:</span><br><span class="line"> pretty_urls:</span><br><span class="line"> trailing_index: true </span><br><span class="line">   trailing_html: true </span><br></pre></td></tr></table></figure>

<p>主要是<code>url</code>更改成自己的站点<code>url</code>。执行完<code>hexo g</code>命令之后就会在<code>/mylog/public</code>生成<code>sitemap.xml</code>文件和<code>baidusitemap.xml</code>文件，可以通过：<code>https://zhangyuanhe.top/baidusitemap.xml</code>, 查看该文件是否生成，其中<code>sitemap.xml</code>文件是搜索引擎通用的文件，<code>baidusitemap.xml</code>是百度专用的<code>sitemap</code>文件。</p>
</li>
<li><p>向百度提交连接</p>
<p>提交链接有四种方法，我使用的是主动推送的方式：</p>
<p>首先安装插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure>

<p>然后再根目录的配置文件中新增字段:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 80             # 提交最新的一个链接</span><br><span class="line">  host: liuruibin.com # 在百度站长平台中注册的域名</span><br><span class="line">  token: xxxxxxxxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt  # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure>

<p>密钥是在站点之家的普通收录一栏，链接<code>=</code>符号后就是密钥。</p>
<p>最后加入新的<code>deploye</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> - type: baidu_url_submitter</span><br></pre></td></tr></table></figure>

<p>这样执行<code>hexo deploy</code>的时候，新的链接就会被推送了。</p>
</li>
</ul>
<h1 id="谷歌收录站点"><a href="#谷歌收录站点" class="headerlink" title="谷歌收录站点"></a>谷歌收录站点</h1><p>​        相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，需要科学上网(iGuge谷歌访问助手)。google站点平台：<code>https://www.google.com/webmasters/</code>。之后<code>注册登录Google Search Console-&gt;站点地图-&gt;添加新的站点地图</code>输入之前在<code>public</code>生成的<code>sitemap</code>文件的地址即可：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230729175953566.png" alt="image-20230729175953566"></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建（13）——简洁化处理，插件删除</title>
    <url>/2023/07/26/hexo/Hexo_build13/</url>
    <content><![CDATA[<h1 id="网站打字特效"><a href="#网站打字特效" class="headerlink" title="网站打字特效"></a>网站打字特效</h1><p>开启方法在<a href="https://zhangyuanhe.top/2023/07/21/hexo/Hexo_build07/">Hexo博客搭建（7）——魔改主题文件（提高） | ZYH’s blog (zhangyuanhe.top)</a>中，现已关闭</p>
<h1 id="Live2D-看板娘"><a href="#Live2D-看板娘" class="headerlink" title="Live2D - 看板娘"></a>Live2D - 看板娘</h1><p>已将插件删除，需要重新安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line">npm install --save live2d-widget-model-hijiki</span><br></pre></td></tr></table></figure>

<p>开启方法在<a href="https://zhangyuanhe.top/2023/07/21/hexo/Hexo_build07/">Hexo博客搭建（7）——魔改主题文件（提高） | ZYH’s blog (zhangyuanhe.top)</a>中，现已开启</p>
<h1 id="星空背景和流星特效"><a href="#星空背景和流星特效" class="headerlink" title="星空背景和流星特效"></a>星空背景和流星特效</h1><p>开启方法在<a href="https://zhangyuanhe.top/2023/07/21/hexo/Hexo_build07/">Hexo博客搭建（7）——魔改主题文件（提高） | ZYH’s blog (zhangyuanhe.top)</a>中，现已开启</p>
<h1 id="侧边栏电子时钟-安知鱼"><a href="#侧边栏电子时钟-安知鱼" class="headerlink" title="侧边栏电子时钟 (安知鱼)"></a>侧边栏电子时钟 (安知鱼)</h1><p>开启方法在<a href="https://zhangyuanhe.top/2023/07/21/hexo/Hexo_build07/">Hexo博客搭建（7）——魔改主题文件（提高） | ZYH’s blog (zhangyuanhe.top)</a>中，现已开启</p>
<p>已将插件删除，需要重新安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-clock-anzhiyu --save</span><br></pre></td></tr></table></figure>

<h1 id="个人卡片渐变色"><a href="#个人卡片渐变色" class="headerlink" title="个人卡片渐变色"></a>个人卡片渐变色</h1><p>开启方法在<a href="https://zhangyuanhe.top/2023/07/21/hexo/Hexo_build07/">Hexo博客搭建（7）——魔改主题文件（提高） | ZYH’s blog (zhangyuanhe.top)</a>中，现已开启</p>
<h1 id="首页分类磁贴"><a href="#首页分类磁贴" class="headerlink" title="首页分类磁贴"></a>首页分类磁贴</h1><p>开启方法在<a href="https://zhangyuanhe.top/2023/07/21/hexo/Hexo_build07/">Hexo博客搭建（7）——魔改主题文件（提高） | ZYH’s blog (zhangyuanhe.top)</a>中，现已关闭</p>
<p>已将插件删除，需要重新安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure>

<p>代码已经注释</p>
<h1 id="随机访问一篇文章"><a href="#随机访问一篇文章" class="headerlink" title="随机访问一篇文章"></a>随机访问一篇文章</h1><p>开启方法在<a href="https://zhangyuanhe.top/2023/07/22/hexo/Hexo_build08/">Hexo 博客搭建（8）—— 魔改主题文件（进阶） | ZYH’s blog (zhangyuanhe.top)</a>中，现已开启</p>
<p>已将插件删除，需要重新安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<p>代码已经注释</p>
<h1 id="自定义右键菜单"><a href="#自定义右键菜单" class="headerlink" title="自定义右键菜单"></a>自定义右键菜单</h1><p>开启方法在<a href="https://zhangyuanhe.top/2023/07/22/hexo/Hexo_build08/">Hexo 博客搭建（8）—— 魔改主题文件（进阶） | ZYH’s blog (zhangyuanhe.top)</a>中，现已开启</p>
<p>代码已经注释</p>
<h1 id="头像呼吸灯"><a href="#头像呼吸灯" class="headerlink" title="头像呼吸灯"></a>头像呼吸灯</h1><p>开启方法在<a href="https://zhangyuanhe.top/2023/07/22/hexo/Hexo_build08/">Hexo 博客搭建（8）—— 魔改主题文件（进阶） | ZYH’s blog (zhangyuanhe.top)</a>中，现已开启</p>
<p>代码已经注释</p>
<h1 id="网站恶搞标题"><a href="#网站恶搞标题" class="headerlink" title="网站恶搞标题"></a>网站恶搞标题</h1><p>开启方法在<a href="https://zhangyuanhe.top/2023/07/22/hexo/Hexo_build08/">Hexo 博客搭建（8）—— 魔改主题文件（进阶） | ZYH’s blog (zhangyuanhe.top)</a>中，现已开启</p>
<p>代码已经注释</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理Lab1——编写链表功能代码</title>
    <url>/2023/11/20/Information_Security_Experiment/Compilation_principle/CP_Lab1/</url>
    <content><![CDATA[<h1 id="一、-实验内容"><a href="#一、-实验内容" class="headerlink" title="一、 实验内容"></a>一、 实验内容</h1><p>1.配置 docker 环境</p>
<p>2.编写链表功能代码</p>
<p>3.使用 python 代码进行测试</p>
<h1 id="二、-实验过程"><a href="#二、-实验过程" class="headerlink" title="二、 实验过程"></a>二、 实验过程</h1><ol>
<li>安装 docker</li>
</ol>
<p>1）查询电脑配置，根据说明在 Windows10 系统下安装 docker</p>
<p>2）安装好后进行换源</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1-1705499901047-1.png" alt="img"> </p>
<p>3）配置 docker-compose，导入作业文件</p>
<ol start="2">
<li>链表代码实现</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2-1705499901047-2.png" alt="img"> </p>
<p>根据需求实现功能代码，详见源码</p>
<ol start="3">
<li>进入 docker 环境，编译 c 程序，进行验证</li>
</ol>
<p>1）找到程序位置 cd mnt&#x2F;Workspace&#x2F;lab1&#x2F;</p>
<p>2）编译 c 程序 make libll</p>
<p>3）进行检验 python3 ll_test.py</p>
<h1 id="三、-测试结果"><a href="#三、-测试结果" class="headerlink" title="三、 测试结果"></a>三、 测试结果</h1><p>Docker 搭建结果</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3.png" alt="img"> </p>
<p>程序校验结果</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4-1705499901047-3.png" alt="img"> </p>
<h1 id="四、-遇到困难和解决办法"><a href="#四、-遇到困难和解决办法" class="headerlink" title="四、 遇到困难和解决办法"></a>四、 遇到困难和解决办法</h1><ol>
<li>docker 搭建下载速度慢问题：直接更换国内源进行下载</li>
<li>在运行 docker环境时要更换管理员权限，否则无法进行操作</li>
</ol>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理Lab3——实现Bison与Flex的交互</title>
    <url>/2023/11/20/Information_Security_Experiment/Compilation_principle/CP_Lab3/</url>
    <content><![CDATA[<h1 id="一、-实验内容"><a href="#一、-实验内容" class="headerlink" title="一、 实验内容"></a>一、 实验内容</h1><ol>
<li>实现Bison与Flex的交互</li>
<li>编码实现Bison实验</li>
</ol>
<h1 id="二、-实验过程"><a href="#二、-实验过程" class="headerlink" title="二、 实验过程"></a>二、 实验过程</h1><p> Bison与Flex的交互</p>
<ol>
<li>在docker环境中进入cale所在文件目录</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps14-1705500170639-1.jpg" alt="img"></p>
<ol start="2">
<li>根据指令运行代码，实现运算功能</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps15-1705500170639-2.jpg" alt="img"></p>
<p><em><strong>*编码实现Bison实验*</strong></em></p>
<p>编写实现代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax.y</span><br><span class="line"></span><br><span class="line">1. %&#123; </span><br><span class="line">2. #include&quot;lex.yy.c&quot; </span><br><span class="line">3. ***\*int\**** result=1; </span><br><span class="line">4. ***\*void\**** yyerror(***\*const\**** ***\*char\**** *s)&#123;result = 0;&#125; </span><br><span class="line">5. %&#125; </span><br><span class="line">6. %token LP RP LB RB LC RC </span><br><span class="line">7. %% </span><br><span class="line">8. String: %empty  </span><br><span class="line">9. | String RestOfString </span><br><span class="line">10. ; </span><br><span class="line">11. RestOfString: LP String RP </span><br><span class="line">12. | LB String RB </span><br><span class="line">13. | LC String RC </span><br><span class="line">14. | String String </span><br><span class="line">15. ; </span><br><span class="line">16. %% </span><br><span class="line">17. </span><br><span class="line"></span><br><span class="line">**18.** ***\*int\**** validParentheses(***\*char\**** *expr)&#123; </span><br><span class="line"></span><br><span class="line">19. yy_scan_string(expr); </span><br><span class="line">20. yyparse(); </span><br><span class="line">21. ***\*return\**** result; </span><br><span class="line">22. &#125; </span><br></pre></td></tr></table></figure>



<p>运行指令，实现成功</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps16-1705500170639-3.jpg" alt="img"></p>
<h1 id="三、-遇到困难和解决办法"><a href="#三、-遇到困难和解决办法" class="headerlink" title="三、 遇到困难和解决办法"></a>三、 遇到困难和解决办法</h1><ol>
<li>编写代码是return值一直受%empty 影响，如果想要通过String String{$$&#x3D; $1 &amp;&amp; $2}实现会返回错误结果。应该更改其他实现方法。</li>
</ol>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理Lab4——实现错误检测</title>
    <url>/2023/11/20/Information_Security_Experiment/Compilation_principle/CP_Lab4/</url>
    <content><![CDATA[<h1 id="一、-实验内容"><a href="#一、-实验内容" class="headerlink" title="一、 实验内容"></a>一、 实验内容</h1><ol>
<li>实现错误检测，并使程序继续运行</li>
</ol>
<h1 id="二、-实验过程"><a href="#二、-实验过程" class="headerlink" title="二、 实验过程"></a>二、 实验过程</h1><ol>
<li>运行未实现功能的代码，可以看见错误点没有返回信息</li>
<li>编写syntax.y文件，进行error处理</li>
</ol>
<p>syntax.y</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">%&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span><span class="string">&quot;lex.yy.c&quot;</span></span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">yyerror</span><span class="params">()</span></span>;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%token LC RC LB RB COLON COMMA</span><br><span class="line">%token STRING NUMBER</span><br><span class="line">%token TRUE FALSE VNULL</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">Json:</span><br><span class="line">      Value</span><br><span class="line">    | LB Values RB COMMA error &#123; <span class="built_in">puts</span>(<span class="string">&quot;Comma after the close, recovered&quot;</span>); &#125;</span><br><span class="line">    | LB Values RB RB error &#123; <span class="built_in">puts</span>(<span class="string">&quot;Extra close, recovered&quot;</span>); &#125;</span><br><span class="line">    | LC Members RC Values error &#123; <span class="built_in">puts</span>(<span class="string">&quot;Extra value after close, recovered&quot;</span>); &#125;</span><br><span class="line">    ;</span><br><span class="line">Value:</span><br><span class="line">      Object</span><br><span class="line">    | Array</span><br><span class="line">    | STRING</span><br><span class="line">    | NUMBER &#123;<span class="keyword">if</span>($<span class="number">1</span>==<span class="number">0</span>) &#123;<span class="built_in">yyerror</span>();i++;<span class="built_in">puts</span>(<span class="string">&quot;Numbers cannot have leading zeroes, recovered&quot;</span>);&#125;&#125;</span><br><span class="line">    | TRUE</span><br><span class="line">    | FALSE</span><br><span class="line">    | VNULL</span><br><span class="line">    ;</span><br><span class="line">Object:</span><br><span class="line">      LC RC</span><br><span class="line">    | LC Members RC</span><br><span class="line">    ;</span><br><span class="line">Members:</span><br><span class="line">      Member</span><br><span class="line">    | Member COMMA RC error &#123; <span class="built_in">puts</span>(<span class="string">&quot;Extra comma, recovered&quot;</span>); &#125;</span><br><span class="line">    | Member COMMA Members</span><br><span class="line">    ;</span><br><span class="line">Member:</span><br><span class="line">      STRING COLON Value</span><br><span class="line">    | STRING Value error &#123; <span class="built_in">puts</span>(<span class="string">&quot;Missing colon, recovered&quot;</span>); &#125;</span><br><span class="line">    | STRING COLON COLON Value error &#123; <span class="built_in">puts</span>(<span class="string">&quot;Double colon, recovered&quot;</span>); &#125;</span><br><span class="line">    | STRING COMMA Values error &#123; <span class="built_in">puts</span>(<span class="string">&quot;Comma instead of colon, recovered&quot;</span>); &#125;</span><br><span class="line">    | error &#123; <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;<span class="built_in">puts</span>(<span class="string">&quot;Comma instead if closing brace, recovered&quot;</span>);i++; &#125;&#125;</span><br><span class="line">    ;</span><br><span class="line">Array:</span><br><span class="line">      LB RB</span><br><span class="line">    | LB Values RB</span><br><span class="line">    | LB Values error &#123; <span class="built_in">puts</span>(<span class="string">&quot;Unclosed array, recovered&quot;</span>); &#125;</span><br><span class="line">    | LB Values RC error &#123; <span class="built_in">puts</span>(<span class="string">&quot;mismatch, recovered&quot;</span>); &#125;</span><br><span class="line">    | COMMA Values error &#123; <span class="built_in">puts</span>(<span class="string">&quot;&lt;-- missing value, recovered&quot;</span>); &#125;</span><br><span class="line">    ;</span><br><span class="line">Values:</span><br><span class="line">      Value</span><br><span class="line">    | Value COMMA Values</span><br><span class="line">    | Value COLON Values error&#123; <span class="built_in">puts</span>(<span class="string">&quot;Colon instead of comma, recovered&quot;</span>); &#125;</span><br><span class="line">    | COMMA error &#123; <span class="built_in">puts</span>(<span class="string">&quot;double extra comma, recovered&quot;</span>); &#125;</span><br><span class="line">    | Value COMMA error &#123; <span class="built_in">puts</span>(<span class="string">&quot;extra comma, recovered&quot;</span>); &#125;</span><br><span class="line">    ;</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">yyerror</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;syntax error: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Usage: %s &lt;file_path&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!(yyin = <span class="built_in">fopen</span>(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>))) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">yyparse</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="3">
<li>运行指令，实现成功</li>
</ol>
<p>没有程序运行的warning警告，说明没有s&#x2F;r或者r&#x2F;r冲突<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps17-1705500268928-1.jpg" alt="img"><br>运行结果如下<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps18-1705500268928-2.jpg" alt="img"></p>
<h1 id="三、-代码解释"><a href="#三、-代码解释" class="headerlink" title="三、 代码解释"></a>三、 代码解释</h1><p>Json中部分差错处理:</p>
<p>  LB Values RB COMMA error { puts(“Comma after the close, recovered”); }</p>
<p>在大括号后匹配到“，”进入这一语句</p>
<p>  LB Values RB RB error { puts(“Extra close, recovered”); }</p>
<p>如果匹配到两个大括号发生这一错误</p>
<p>  LC Members RC Values error { puts(“Extra value after close, recovered”); }</p>
<p>在大括号后匹配到其他value值，进入这一语句</p>
<p>Value中部分差错处理:</p>
<p>  NUMBER {if($1&#x3D;&#x3D;0) {yyerror();i++;puts(“Numbers cannot have leading zeroes, recovered”);}}</p>
<p>NUMBER为零表面无法直接进行错误处理，因此读入时进行判断，如果为零在执行错误处理操作</p>
<p>Members中部分差错处理:</p>
<p>  Member COMMA RC error { puts(“Extra comma, recovered”); }</p>
<p>对于数据中的额外逗号进行处理</p>
<p>Member中部分差错处理:</p>
<p>  STRING Value error { puts(“Missing colon, recovered”); }</p>
<p>对分号丢失进行匹配处理</p>
<p>  STRING COLON COLON Value error { puts(“Double colon, recovered”); }</p>
<p>对双分号进行匹配处理</p>
<p>  STRING COMMA Values error { puts(“Comma instead of colon, recovered”); }</p>
<p>如果‘，’代替了‘；’进行匹配处理</p>
<p>  error { if(i&#x3D;&#x3D;0){puts(“Comma instead if closing brace, recovered”);i++; }}</p>
<p>这里处理的是‘，’替代了结束符，由于这一语句不好表现，其他错误处理又能完全进行匹配，所以这里直接用error进行匹配</p>
<p>Array:</p>
<p>  LB Values error { puts(“Unclosed array, recovered”); }</p>
<p>进行array丢失处理</p>
<p>  LB Values RC error { puts(“mismatch, recovered”); }</p>
<p>返回错误处理</p>
<p>  COMMA Values error { puts(“&lt;– missing value, recovered”); }</p>
<p>如果两逗号之间无数值说明丢失数值，但为和双逗号进行区分，找到区别之处在于，数值丢失后，后一逗号之后还有value值</p>
<p>Values:</p>
<p>  Value COLON Values error{ puts(“Colon instead of comma, recovered”); }</p>
<p>同上，符号写错</p>
<p>  COMMA error { puts(“double extra comma, recovered”); }</p>
<p>如语句后又单独匹配到‘，’说明有双逗号</p>
<p>  Value COMMA error { puts(“extra comma, recovered”); }</p>
<p>值后又有逗号，说明出现额外逗号</p>
<h1 id="四、-遇到困难和解决办法"><a href="#四、-遇到困难和解决办法" class="headerlink" title="四、 遇到困难和解决办法"></a>四、 遇到困难和解决办法</h1><ol>
<li>在编写过程中经常出现warning冲突警告，需要合理调整语句所在位置才能消除。</li>
</ol>
<p>​	</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理Lab2——了解词法分析器生成器Lex并进行使用</title>
    <url>/2023/11/20/Information_Security_Experiment/Compilation_principle/CP_Lab2/</url>
    <content><![CDATA[<h1 id="一、-实验内容"><a href="#一、-实验内容" class="headerlink" title="一、 实验内容"></a>一、 实验内容</h1><ol>
<li>了解词法分析器生成器Lex并进行使用</li>
<li>学习Lex程序的结构</li>
</ol>
<h1 id="二、-实验过程"><a href="#二、-实验过程" class="headerlink" title="二、 实验过程"></a>二、 实验过程</h1><p>1.运行wc程序示例 </p>
<p>（1）启动docker环境，进入实验目录</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5-1705500056790-1.jpg" alt="img"> </p>
<p>（2）运行wc目标，并和Linux自带wc命令进行比较</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6-1705500056790-2.jpg" alt="img"> </p>
<p>从以上结果可以看出，自主实现的wc命令比Linux分出的词更多。</p>
<p>（3）区别分析</p>
<p>在自主实现的wc语句中使用以下语句进行分词</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps7-1705500056790-3.jpg" alt="img"> </p>
<p>当 Lex 分析器遇到一个或多个字母字符（即一个单词）时，它会增加 words 变量的计数，并且使用 strlen(yytext) 来计算这个单词的长度，并将结果累加到 chars 变量上。这就是以字母字符为单词的语义划分方式，而不考虑单词之间的标点符号或空格。因此只有遇到完整单词之后就会计数器加一。</p>
<p>而在Linux的wc指令中通过以下代码进行单词计数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">count_words</span> <span class="params">(<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">enum</span> &#123; NEWLINE_STATE, WORD_STATE, SPACE_STATE, ENDOFWORD_STATE &#125; state;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="comment">/* States.  */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">switch</span> (c)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line"></span><br><span class="line">   state = NEWLINE_STATE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>:</span><br><span class="line"></span><br><span class="line">   state = SPACE_STATE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">   state = WORD_STATE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (state == NEWLINE_STATE)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (c != EOF)</span><br><span class="line"></span><br><span class="line">​    ++linecount;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (state == SPACE_STATE)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (last_word_state == WORD_STATE)</span><br><span class="line"></span><br><span class="line">​    ++wordcount;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> last_word_state = state;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该代码中 count_words 函数使用一个有限状态自动机来处理文本字符，根据字符类型划分单词。当遇到空格字符（包括空格和制表符）时，它将从单词状态切换到空格状态，并递增单词计数。</p>
<p>因此二者分词方式上存在区别，统计词数也有所不同。</p>
<p>3.Flex标识符练习</p>
<p>（1）进入目录文件夹，执行操作指令</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps8-1705500056790-4.jpg" alt="img"> </p>
<p>（2）观察执行结果</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps9-1705500056790-6.jpg" alt="img"> </p>
<p>发现输出中的行号与令牌的行号不匹配</p>
<p>（3）查看源代码进行更改</p>
<p>检查发现在输出语句中调用的行号未使用递增，导致输出行号错误</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;line %d: %s\n&quot;</span>, lines, yytext);</span><br></pre></td></tr></table></figure>

<p>对其进行更改从而实现行号的更新</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> identifier_line = <span class="number">1</span>; <span class="comment">// 初始化为第一行</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#123;letter_&#125;(&#123;letter_&#125;|&#123;digit&#125;)* &#123; </span><br><span class="line"></span><br><span class="line">  identifiers++; </span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;line %d: %s\n&quot;</span>, identifier_line, yytext); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\n &#123; </span><br><span class="line"></span><br><span class="line">  identifier_line++; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）更新后重新进行编译执行</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps10-1705500056790-5.jpg" alt="img"> </p>
<p>（5）关键代码分析</p>
<p>%{ … %} 部分：这部分包含了在词法分析器中使用的宏定义和全局变量的声明。</p>
<p>正则表达式定义：在 letter、letter_ 和 digit 部分定义了正则表达式片段，分别用于匹配字母、字母或下划线、和数字。</p>
<p>%% 部分：这是Lex规则的主体部分，其中定义了词法分析规则。</p>
<p>int main(int argc, char **argv) 函数：这是程序的入口点。代码能够识别文本文件中的标识符并输出它们的行号和文本。</p>
<p>4.ipaddr练习</p>
<p>（1）尝试直接输出，发现报错</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps11-1705500056791-7.jpg" alt="img"> </p>
<p>（2）更改代码，编写正则表达式</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps12-1705500056791-8.jpg" alt="img"> </p>
<p>（3）检查输出结果</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps13-1705500056791-9.jpg" alt="img"> </p>
<h1 id="三、-遇到困难和解决办法"><a href="#三、-遇到困难和解决办法" class="headerlink" title="三、 遇到困难和解决办法"></a>三、 遇到困难和解决办法</h1><ol>
<li>docker打开时出错，需要更改指令重新实现，具体如下</li>
</ol>
<p>管理员身份打开命令行工具  netsh winsock reset</p>
<p>就可以重新打开docker,如果不成功，再重启电脑就好了。可以就不用重启了。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理Lab5——编写symtab_ll.c</title>
    <url>/2023/11/20/Information_Security_Experiment/Compilation_principle/CP_Lab5/</url>
    <content><![CDATA[<h1 id="一、-实验内容"><a href="#一、-实验内容" class="headerlink" title="一、 实验内容"></a>一、 实验内容</h1><p>1.编写symtab_ll.c </p>
<p>2.使用 python 代码进行测试</p>
<h1 id="二、-实验过程"><a href="#二、-实验过程" class="headerlink" title="二、 实验过程"></a>二、 实验过程</h1><p> 编写symtab_ll.c </p>
<p>1） 初始化:<br>初始化时需要分配一个新的结构体节点，并将内容置零，‘next’初始化为NULL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">symtab *symtab_init()&#123;</span><br><span class="line">    symtab *self = malloc(sizeof(symtab));</span><br><span class="line">    memset(self, &#x27;\0&#x27;, sizeof(symtab));</span><br><span class="line">    self-&gt;next = NULL;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2） 插入:<br>将新条目插入到链表中，需要遍历链表，检查给定的键是否已经存在。如果不存在，它创建一个新节点，用提供的键和值初始化其条目，并将其追加到链表的末尾。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int symtab_insert(symtab *self, char *key, VAL_T value)&#123;</span><br><span class="line">    symtab *ptr = self;</span><br><span class="line">    while(ptr-&gt;next != NULL)&#123;</span><br><span class="line">        if(strcmp(ptr-&gt;entry.key, key) == 0)</span><br><span class="line">            return 0;</span><br><span class="line">        ptr = ptr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    symtab *node = malloc(sizeof(symtab));</span><br><span class="line">    memset(node, &#x27;\0&#x27;, sizeof(symtab));</span><br><span class="line">    entry_init(&amp;node-&gt;entry, key, value);</span><br><span class="line">    node-&gt;next = NULL;</span><br><span class="line">    ptr-&gt;next = node;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3） 查找:<br>查找给定键，先遍历链表，如果找到键，就返回相应的值；否则返回 -1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VAL_T symtab_lookup(symtab *self, char *key)&#123;</span><br><span class="line">    symtab *ptr = self;</span><br><span class="line">    while(ptr != NULL)&#123;</span><br><span class="line">        if(strcmp(ptr-&gt;entry.key, key) == 0)</span><br><span class="line">            return ptr-&gt;entry.value;</span><br><span class="line">        ptr = ptr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4） 删除:<br>从符号表中移除给定键对应的条目，遍历链表，找到匹配的键后删除相应的节点，并释放相关的内存。如果成功删除，则返回 1；否则返回 0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int symtab_remove(symtab *self, char *key)&#123;</span><br><span class="line">    symtab *ptr = self, *tmp;</span><br><span class="line">    while(ptr-&gt;next != NULL) &#123;</span><br><span class="line">        if(strcmp(ptr-&gt;next-&gt;entry.key, key) == 0)&#123;</span><br><span class="line">            tmp = ptr-&gt;next;</span><br><span class="line">            ptr-&gt;next = ptr-&gt;next-&gt;next;</span><br><span class="line">            free(tmp);</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        ptr = ptr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、-测试结果"><a href="#三、-测试结果" class="headerlink" title="三、 测试结果"></a>三、 测试结果</h1><p>Test.py运行成功</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps19-1705500415918-1.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制编辑修改</title>
    <url>/2023/08/04/Information_Security_Experiment/assembler_language/AL1/</url>
    <content><![CDATA[<ol>
<li>第一次打开exe文件发现乱码，是因为编辑语言错误。</li>
<li>打开控制面板，调节语言。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1-1691139848774-2.jpg" alt="img"> </p>
<ol start="3">
<li>可以正常打开源文件</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2-1691139848773-1.jpg" alt="img"> </p>
<ol start="4">
<li>使用010Editir另存源文件</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3-1691139848774-5.jpg" alt="img"> </p>
<ol start="5">
<li>找到要修改的位置</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4-1691139848774-3.jpg" alt="img"> </p>
<ol start="6">
<li>找到更改代码</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5-1691139848774-4.jpg" alt="img"> </p>
<ol start="7">
<li>完成修改</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6-1691139848774-6.jpg" alt="img"> </p>
<ol start="8">
<li>保存后运行程序，实验成功</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps7-1691139848774-7.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5加密程序解flag</title>
    <url>/2023/08/04/Information_Security_Experiment/assembler_language/AL2/</url>
    <content><![CDATA[<p>****问题-1：****找到开头“This program cannot be run …” 这个字符串的内存起始地址（即字符串的指针），并准确计算该字符串的长度；</p>
<p>1.运行程序寻找字符串位置</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps8-1691140040878-1.jpg" alt="img"> </p>
<ol start="2">
<li>打开IDA寻找字符串</li>
</ol>
<p>发现无法找到目标字符串<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps9-1691140040878-2.jpg" alt="img"><br>3.通过for fun找到主函数，查看伪代码。</p>
<p>分析得知各功能实现应%S所实现的内容。</p>
<p>从而定位其地址<em><strong>*0x40004E*</strong></em></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps10-1691140040878-4.jpg" alt="img"> </p>
<p>4.将程序放入010Editor找到相应位置，然后数字节。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps11-1691140040878-3.jpg" alt="img"> </p>
<p>共计****44****个字节</p>
<p>****问题-2：****需要结合具体的加密操作逻辑，说明所发现的加密算法。</p>
<ol>
<li>由第一个子函数可知，输入的字符串长度有固定要求。</li>
</ol>
<p>输入内容被保存在byte_407444。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps12-1691140040878-6.jpg" alt="img"> </p>
<p>且长度必须为9.</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps13-1691140040878-5.jpg" alt="img"> </p>
<p>2.打开第二个子函数，可以看见其中并无加密转码操作，还是在确认输入内容的范围。</p>
<p>3.在第三个函数</p>
<p>首先在18行有一次混淆交换</p>
<p>随后有sub_40210C(Str1, (int)byte_407444, 5)说明进行了另一种交换</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps14-1691140040878-7.jpg" alt="img"> </p>
<p>进入发现是将byte_407444的前五个字符进行MD5加密。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps15-1691140040879-9.jpg" alt="img"> </p>
<p>随后密文Str1与Str2进行比较</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps16-1691140040879-13.jpg" alt="img"> </p>
<p>4.根据以上推断，可知flag经过一次加密后，前五位经MD5加密后与Str2进行比较，后四位直接进行比较。</p>
<p>根据MD5要求写出脚本</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps17-1691140040879-10.jpg" alt="img"> </p>
<p>得到密文为<em><strong>*K502G32Z2*</strong></em></p>
<p>5.在解密第一层加密方法，这是一个类仿射加密</p>
<p>范思宇：通过dbg按顺序尝试各个字符的对应关系，从而一一对照找到原flag。</p>
<p>例如输入123456789，就可得知对应密文为0BEHKNQTW。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps18-1691140040878-8.jpg" alt="img"> </p>
<p>依次类推，可以推出原文为<em><strong>*5M1LE_L0L*</strong></em></p>
<p>张原赫：找到初次转码后密文的储存位置</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps19-1691140040879-14.jpg" alt="img"> </p>
<p>更改存储内容继续运行</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps20-1691140040879-12.jpg" alt="img"> </p>
<p>得到结果。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps21-1691140040879-11.jpg" alt="img"> </p>
<p>不足：该方法可以得到结果但是无法拿到flag。</p>
<p>所以使用脚本进行转换</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps22-1691140040879-15.jpg" alt="img"> </p>
<p>得到flag。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理Project2——编写语义分析</title>
    <url>/2023/11/20/Information_Security_Experiment/Compilation_principle/CP_Project2/</url>
    <content><![CDATA[<p><strong>Project 2: 语义分析</strong></p>
<p>在Project 2中，你将继续构建BUPT编程语言（BPL）编译器的功能，专注于语义分析阶段。在前一个项目中完成词法和语法分析后，你已经能够生成语法有效的BPL程序的语法树。现在，语义分析阶段将确保程序有一个明确的定义，即验证程序的逻辑正确性，例如变量是否已声明、类型是否匹配等。</p>
<ol>
<li><p><strong>语义分析</strong>:</p>
<ul>
<li><strong>作用</strong>：语义分析主要确保程序中的所有声明和表达式在逻辑上是有意义和合法的，包括类型检查、变量声明、函数调用等。</li>
<li><strong>实现方式</strong>：不同于前一个项目中的工具辅助（如Flex和Bison），在这一阶段，你需要手动编写代码来实现语义分析，这可能是实现BPL编译器中最费力的部分。你需要设计各种数据结构（如符号表和数据类型表示）并仔细考虑它们最合适的实现方式。</li>
</ul>
</li>
<li><p><strong>符号表</strong>:</p>
<ul>
<li><strong>概述</strong>：符号表是映射名字到其关联信息的数据结构。在语义分析过程中，编译器将不断更新表中的信息以反映作用域内的内容。符号表的两个典型操作是插入和查找特定符号。</li>
<li><strong>实现</strong>：可以使用各种抽象数据类型来实现符号表，包括链表、二叉搜索树和哈希表。每种数据结构在空间&#x2F;时间复杂性和实现难度方面有所不同。你可以选择适合你需求的数据结构。</li>
</ul>
</li>
<li><p><strong>作用域检查</strong>:</p>
<ul>
<li><strong>概述</strong>：作用域检查是确定程序中的标识符是否在该位置可访问的过程。你可以使用不同的方法来实现支持作用域的符号表，比如命令式单一表方法或功能式独立表方法。</li>
<li><strong>实现</strong>：可以采用单一全局表，每个作用域内的符号在退出时移除；或者使用作用域栈，每个新的作用域开启一个新的符号表，并在作用域关闭时将其弹出。</li>
</ul>
</li>
<li><p><strong>类型检查</strong>:</p>
<ul>
<li><strong>类型系统</strong>：在编程语言中，类型是一组值和在这些值上操作的集合。BPL有两类数据类型：基本类型（由硬件直接提供，如int、char和float）和派生类型（由基本类型或派生类型聚合而成，如数组、结构体等）。</li>
<li><strong>类型等价性</strong>：如何确定两个类型是否等价？对于基本类型，问题很简单，例如int只等价于int。对于派生类型，事情就复杂多了。通常有两种类型等价性：命名等价性和结构等价性。命名等价性考虑类型的名称，而结构等价性考虑类型的结构。</li>
<li><strong>派生类型表示</strong>：实现层面上，代表原始类型使用常量就足够了。对于派生类型，例如数组和结构体，表示它们就比较复杂了。常见的技术是存储定义类型的基本信息为多级链表。</li>
</ul>
</li>
<li><p><strong>项目要求</strong>:</p>
<ul>
<li><strong>输入格式</strong>：与上一个项目相同，即执行文件<code>bplc</code>接受表示BPL程序路径的单个命令行参数。对于语义上合法的BPL程序，你的语义分析器不应该产生任何输出信息；否则，应该打印出有意义的错误信息。</li>
<li><strong>错误检测</strong>：你的分析器应该能够检测到一系列的语义错误，如未定义变量的使用、类型不匹配、函数调用参数不匹配等，并能够报告错误类型和行号。</li>
</ul>
</li>
</ol>
<p>通过这个项目，你将学习如何实现一个编译器的语义分析阶段，这是编译器理解程序并检测错误的关键环节。这个阶段需要对语言的类型系统、作用域规则和其他语义规则有深入的理解。</p>
<p>lex.l</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span><span class="string">&quot;syntax.tab.h&quot;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> MAX_ID_SIZE 256 </span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> line = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Head</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> terminal;</span><br><span class="line">        <span class="type">char</span> type[<span class="number">200</span>];</span><br><span class="line">        <span class="type">char</span> id[<span class="number">200</span>];</span><br><span class="line">        <span class="type">char</span> value_type[<span class="number">200</span>];   <span class="comment">//用于标记EXP的类型</span></span><br><span class="line">        <span class="type">int</span> rvalue;           <span class="comment">//用于标记是否是右值</span></span><br><span class="line">        <span class="type">int</span> lineno;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">Head</span>* child;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">Head</span>* next;</span><br><span class="line">    &#125;Node;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Head</span>* <span class="built_in">create_Node</span>(<span class="type">int</span> terminal,<span class="type">char</span>* type, <span class="type">char</span>* id, Node* child,Node* next,<span class="type">int</span> lineno);</span><br><span class="line"></span><br><span class="line">    <span class="function">Node* <span class="title">create_Node</span><span class="params">(<span class="type">int</span> terminal, <span class="type">char</span>* type, <span class="type">char</span>* id, Node* child, Node* next, <span class="type">int</span> lineno)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node* newNode = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span> (newNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;Memory allocation error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newNode-&gt;terminal = terminal;</span><br><span class="line">        newNode-&gt;lineno = (lineno == <span class="number">0</span> &amp;&amp; child != <span class="literal">NULL</span>) ? child-&gt;lineno : lineno;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (type != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">strncpy</span>(newNode-&gt;type, type, <span class="built_in">sizeof</span>(newNode-&gt;type) - <span class="number">1</span>);</span><br><span class="line">            newNode-&gt;type[<span class="built_in">sizeof</span>(newNode-&gt;type) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newNode-&gt;type[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (id != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">strncpy</span>(newNode-&gt;id, id, <span class="built_in">sizeof</span>(newNode-&gt;id) - <span class="number">1</span>);</span><br><span class="line">            newNode-&gt;id[<span class="built_in">sizeof</span>(newNode-&gt;id) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newNode-&gt;id[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newNode-&gt;child = child;</span><br><span class="line">        newNode-&gt;next = next;</span><br><span class="line">        newNode-&gt;rvalue = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print_tree</span><span class="params">(Node* root, <span class="type">int</span> depth)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于非空节点，进行缩进处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(root-&gt;type, <span class="string">&quot;empty&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; depth; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印终端节点（叶子节点）的信息</span></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;terminal == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, root-&gt;type);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对特定类型的节点，打印额外的信息</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(root-&gt;type, <span class="string">&quot;ID&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(root-&gt;type,<span class="string">&quot;TYPE&quot;</span>) == <span class="number">0</span> ||</span><br><span class="line">                <span class="built_in">strcmp</span>(root-&gt;type, <span class="string">&quot;INT&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(root-&gt;type,<span class="string">&quot;FLOAT&quot;</span>) == <span class="number">0</span> || </span><br><span class="line">                <span class="built_in">strcmp</span>(root-&gt;type, <span class="string">&quot;CHAR&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;: %s&quot;</span>, root-&gt;id);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(root-&gt;type, <span class="string">&quot;empty&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 对于非终端且非空节点，打印节点类型和所在行号</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s (%d)\n&quot;</span>, root-&gt;type, root-&gt;lineno);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归打印子节点，增加缩进深度</span></span><br><span class="line">        <span class="built_in">print_tree</span>(root-&gt;child, depth + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归打印兄弟节点，保持当前缩进深度</span></span><br><span class="line">        <span class="built_in">print_tree</span>(root-&gt;next, depth);</span><br><span class="line">    &#125;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%option noyywrap</span><br><span class="line"></span><br><span class="line">int_        [<span class="number">0</span><span class="number">-9</span>]+|<span class="number">0</span>x[<span class="number">0</span><span class="number">-9</span>a-fA-F]+</span><br><span class="line">float_      [<span class="number">0</span><span class="number">-9</span>]+<span class="string">&quot;.&quot;</span>[<span class="number">0</span><span class="number">-9</span>]+</span><br><span class="line">id_         [a-zA-Z_][a-zA-Z0<span class="number">-9</span>_]*</span><br><span class="line">char_       \<span class="string">&#x27;.\&#x27;</span>|\<span class="string">&#x27;\\x[0-9a-fA-F]&#123;2&#125;\&#x27;</span></span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"><span class="string">&quot;int&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;TYPE&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> TYPE; &#125;</span><br><span class="line"><span class="string">&quot;float&quot;</span>               &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;TYPE&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> TYPE; &#125;</span><br><span class="line"><span class="string">&quot;char&quot;</span>                &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;TYPE&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> TYPE; &#125;</span><br><span class="line"><span class="string">&quot;struct&quot;</span>              &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;STRUCT&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> STRUCT; &#125;</span><br><span class="line"><span class="string">&quot;if&quot;</span>                  &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;IF&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> IF; &#125;</span><br><span class="line"><span class="string">&quot;else&quot;</span>                &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;ELSE&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> ELSE; &#125;</span><br><span class="line"><span class="string">&quot;while&quot;</span>               &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;WHILE&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> WHILE; &#125;</span><br><span class="line"><span class="string">&quot;return&quot;</span>              &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;RETURN&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> RETURN; &#125;</span><br><span class="line">&#123;int_&#125;              &#123;yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;INT&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> INT;&#125;</span><br><span class="line">&#123;float_&#125;             &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;FLOAT&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> FLOAT; &#125;</span><br><span class="line">&#123;id_&#125;               &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;ID&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> ID; &#125;</span><br><span class="line">&#123;char_&#125;             &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;CHAR&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> CHAR; &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;.&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;DOT&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> DOT; &#125;</span><br><span class="line"><span class="string">&quot;;&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;SEMI&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> SEMI; &#125;</span><br><span class="line"><span class="string">&quot;,&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;COMMA&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> COMMA; &#125;</span><br><span class="line"><span class="string">&quot;=&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;ASSIGN&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> ASSIGN; &#125;</span><br><span class="line"><span class="string">&quot;&lt;&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;LT&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> LT; &#125;</span><br><span class="line"><span class="string">&quot;&gt;&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;GT&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> GT; &#125;</span><br><span class="line"><span class="string">&quot;&lt;=&quot;</span>                &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;LE&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> LE; &#125;</span><br><span class="line"><span class="string">&quot;&gt;=&quot;</span>                &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;GE&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> GE; &#125;</span><br><span class="line"><span class="string">&quot;!=&quot;</span>                &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;NE&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> NE; &#125;</span><br><span class="line"><span class="string">&quot;==&quot;</span>                &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;EQ&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> EQ; &#125;</span><br><span class="line"><span class="string">&quot;+&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;PLUS&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> PLUS; &#125;</span><br><span class="line"><span class="string">&quot;-&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;MINUS&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> MINUS; &#125;</span><br><span class="line"><span class="string">&quot;*&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;MUL&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> MUL; &#125;</span><br><span class="line"><span class="string">&quot;/&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;DIV&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> DIV; &#125;</span><br><span class="line"><span class="string">&quot;&amp;&amp;&quot;</span>                &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;AND&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> AND; &#125;</span><br><span class="line"><span class="string">&quot;||&quot;</span>                &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;OR&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> OR; &#125;</span><br><span class="line"><span class="string">&quot;!&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;NOT&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> NOT; &#125;</span><br><span class="line"><span class="string">&quot;(&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;LP&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> LP; &#125;</span><br><span class="line"><span class="string">&quot;)&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;RP&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> RP; &#125;</span><br><span class="line"><span class="string">&quot;[&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;LB&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> LB; &#125;</span><br><span class="line"><span class="string">&quot;]&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;RB&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> RB; &#125;</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;LC&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> LC; &#125;</span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>                 &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;RC&quot;</span>,yytext,<span class="literal">NULL</span>,<span class="literal">NULL</span>,line);<span class="keyword">return</span> RC; &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;/*&quot;</span>([^*]|[*][^/]|[*][*]+[^*/])*<span class="string">&quot;*/&quot;</span>  &#123;<span class="comment">/* ignore comments */</span>&#125;</span><br><span class="line">[ \t\r]+            &#123;<span class="comment">/* ignore whitespace */</span>&#125;</span><br><span class="line"><span class="string">&quot;\n&quot;</span>    &#123;line++;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>x([<span class="number">0</span><span class="number">-9</span>a-fA-F]|[g-zG-Z])+     &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;ILLEGAL_HEX_INT&quot;</span>, yytext, <span class="literal">NULL</span>, <span class="literal">NULL</span>, line); <span class="keyword">return</span> ILLEGAL_HEX_INT; &#125;</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>]&#123;id_&#125;          &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;ILLEGAL_ID&quot;</span>, yytext, <span class="literal">NULL</span>, <span class="literal">NULL</span>, line); <span class="keyword">return</span> ILLEGAL_ID; &#125;</span><br><span class="line"><span class="string">&#x27;\\x.*&#x27;</span>                        &#123; yylval.node=<span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;ILLEGAL_CHAR&quot;</span>, yytext, <span class="literal">NULL</span>, <span class="literal">NULL</span>, line); <span class="keyword">return</span> ILLEGAL_CHAR; &#125;</span><br><span class="line">.                   &#123; yylval.node = <span class="built_in">create_Node</span>(<span class="number">1</span>,<span class="string">&quot;ILLEGAL&quot;</span>, yytext, <span class="literal">NULL</span>, <span class="literal">NULL</span>, line); <span class="keyword">return</span> ILLEGAL; &#125;</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>syntax.y</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lex.yy.c&quot;</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myhead.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">yyerror</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Node* root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connect_to_next</span><span class="params">(<span class="type">int</span> next_num, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (next_num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有节点或参数数量为负，不执行任何操作</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    va_list valist;</span><br><span class="line">    <span class="built_in">va_start</span>(valist, next_num); </span><br><span class="line"></span><br><span class="line">    Node* temp = <span class="built_in">va_arg</span>(valist, Node*); <span class="comment">// 获取第一个节点</span></span><br><span class="line">    Node* prev = temp; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; next_num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = <span class="built_in">va_arg</span>(valist, Node*); <span class="comment">// 获取下一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">            prev-&gt;next = temp; </span><br><span class="line">        &#125;</span><br><span class="line">        prev = temp; <span class="comment">// 更新</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">        temp-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">va_end</span>(valist); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> is_in_function=<span class="literal">false</span>;<span class="comment">//标记当前是否在函数体内部，如果不是，则不允许定义变量</span></span><br><span class="line">    <span class="type">char</span> *current_function_name;<span class="comment">//标记当前所在的函数名</span></span><br><span class="line">    <span class="type">bool</span> index_error=<span class="literal">false</span>; <span class="comment">//标记数组下标是否出错</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">find_compst_return</span><span class="params">(Node *Compst, <span class="type">char</span> *expected_type)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_nested_statements</span><span class="params">(Node *stmt, <span class="type">char</span> *expected_type)</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 结构体操作 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert_vardec</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node-&gt;child-&gt;next) &#123;</span><br><span class="line">            <span class="comment">// 如果子节点没有next成员，则不是数组类型</span></span><br><span class="line">            <span class="built_in">add_dec</span>(node-&gt;child-&gt;id, last_type, node-&gt;lineno);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果子节点有next成员，则为数组类型</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">add_dec</span>(node-&gt;child-&gt;child-&gt;id, <span class="string">&quot;array&quot;</span>, node-&gt;lineno)) &#123;</span><br><span class="line">                <span class="built_in">add_array</span>(node-&gt;child-&gt;child-&gt;id, last_type, node-&gt;lineno);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert_ExtDecList</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理当前变量声明</span></span><br><span class="line">        <span class="built_in">insert_vardec</span>(node-&gt;child);</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;child-&gt;next) &#123;</span><br><span class="line">            <span class="comment">// 如果存在多个变量声明（逗号分隔），递归处理余下的声明</span></span><br><span class="line">            <span class="built_in">insert_ExtDecList</span>(node-&gt;child-&gt;next-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_struct_member_deflist</span><span class="params">(Node* node, <span class="type">char</span>* struct_name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//用于处理struct内部的成员声明</span></span><br><span class="line">        <span class="comment">//node为DefList</span></span><br><span class="line">        <span class="comment">//struct_name为结构体名</span></span><br><span class="line">        <span class="keyword">if</span>(!node||!node-&gt;child)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* temp=node-&gt;child;</span><br><span class="line">        <span class="comment">//temp即Def</span></span><br><span class="line">        Node* temp2=temp-&gt;child;</span><br><span class="line">        <span class="comment">//temp2即Specifier</span></span><br><span class="line">        <span class="comment">//char* type=temp2-&gt;child-&gt;id;</span></span><br><span class="line">        <span class="type">char</span> *type;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(temp2-&gt;child-&gt;type,<span class="string">&quot;TYPE&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//不是结构体</span></span><br><span class="line">            type=temp2-&gt;child-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//是结构体</span></span><br><span class="line">            type=temp2-&gt;child-&gt;child-&gt;next-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">        Node *temp3=temp-&gt;child-&gt;next;</span><br><span class="line">        <span class="comment">//temp3即DecList</span></span><br><span class="line">        <span class="keyword">while</span>(temp3)</span><br><span class="line">        &#123;</span><br><span class="line">            Node* temp4=temp3-&gt;child;</span><br><span class="line">            <span class="comment">//temp4即Dec</span></span><br><span class="line">            Node* temp5=temp4-&gt;child;</span><br><span class="line">            <span class="comment">//temp5即VarDec</span></span><br><span class="line">            <span class="keyword">if</span>(temp5-&gt;child-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//不是数组</span></span><br><span class="line">                <span class="built_in">add_struct_member</span>(struct_name,temp5-&gt;child-&gt;id,type,temp5-&gt;lineno);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//是数组</span></span><br><span class="line">                <span class="built_in">add_struct_member</span>(struct_name,temp5-&gt;child-&gt;child-&gt;id,<span class="string">&quot;array&quot;</span>,temp5-&gt;lineno);</span><br><span class="line">                <span class="built_in">add_array</span>(temp5-&gt;child-&gt;child-&gt;id,type,temp5-&gt;lineno);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp3-&gt;child-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//Dec COMMA DecList</span></span><br><span class="line">                temp3=temp3-&gt;child-&gt;next-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//Dec</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;child)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Def DefList</span></span><br><span class="line">            <span class="built_in">add_struct_member_deflist</span>(node-&gt;child-&gt;next,struct_name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Def</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 函数参数和变量插入 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert_function_args</span><span class="params">(<span class="type">char</span> *func_name, Node *node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果节点为空，没有更多的变量需要处理，返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理当前的ParamDec节点</span></span><br><span class="line">        Node *param = node-&gt;child;</span><br><span class="line">        Node *specifier = param-&gt;child;</span><br><span class="line">        Node *vardec = specifier-&gt;next;</span><br><span class="line">        <span class="type">char</span> *type = specifier-&gt;child-&gt;id; <span class="comment">// 获取类型</span></span><br><span class="line">        <span class="type">char</span> *name = vardec-&gt;child-&gt;id;    <span class="comment">// 获取变量名</span></span><br><span class="line">        <span class="comment">// 为简单起见，此处假设参数是非数组类型</span></span><br><span class="line">        <span class="built_in">add_func_args</span>(func_name, name, type, param-&gt;lineno);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果存在COMMA，说明后面还有参数，递归处理后续的VarList</span></span><br><span class="line">        Node *nextParam = node-&gt;child-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (nextParam != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(nextParam-&gt;type, <span class="string">&quot;COMMA&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">insert_function_args</span>(func_name, nextParam-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert_func_variables</span><span class="params">(Node *Dec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果不在函数内部或输入节点为空，则不需要处理</span></span><br><span class="line">        <span class="keyword">if</span> (!is_in_function || Dec == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在函数体内部</span></span><br><span class="line">        Node *VarDec = Dec-&gt;child;</span><br><span class="line">        <span class="type">char</span> *var_name;</span><br><span class="line">        <span class="type">char</span> *var_type;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是否为数组类型</span></span><br><span class="line">        <span class="keyword">if</span> (VarDec-&gt;child-&gt;next) &#123;</span><br><span class="line">            <span class="comment">// 处理数组类型的变量</span></span><br><span class="line">            var_name = VarDec-&gt;child-&gt;child-&gt;id;</span><br><span class="line">            var_type = <span class="string">&quot;array&quot;</span>;</span><br><span class="line">            <span class="built_in">add_func_variables</span>(current_function_name, var_name, var_type, VarDec-&gt;lineno);</span><br><span class="line">            <span class="built_in">add_array</span>(var_name, last_type, VarDec-&gt;lineno);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 处理普通变量</span></span><br><span class="line">            var_name = VarDec-&gt;child-&gt;id;</span><br><span class="line">            var_type = last_type;</span><br><span class="line">            <span class="built_in">add_func_variables</span>(current_function_name, var_name, var_type, VarDec-&gt;lineno);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查赋值语句并验证类型匹配</span></span><br><span class="line">        Node *Assign = VarDec-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (Assign &amp;&amp; <span class="built_in">strcmp</span>(Assign-&gt;type, <span class="string">&quot;ASSIGN&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            Node *Exp = Assign-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(Exp-&gt;value_type, <span class="string">&quot;error&quot;</span>) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(Exp-&gt;value_type, last_type) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Error type 5 at line %d: Type mismatched for assignment\n&quot;</span>, Exp-&gt;lineno);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 表达式检查 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_type</span><span class="params">(Node *exp, <span class="type">const</span> <span class="type">char</span> *expected_type, <span class="type">int</span> error_type, <span class="type">int</span> lineno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(exp-&gt;value_type, <span class="string">&quot;error&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 类型已经是错误，之前的步骤中已经报错，此处不再重复。</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (expected_type != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(exp-&gt;value_type, expected_type) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type %d at line %d: Type mismatched for operands\n&quot;</span>, error_type, lineno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_single_arithmetic_exp</span><span class="params">(Node *exp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 检查单个Exp的类型是否为int或者float</span></span><br><span class="line">        <span class="built_in">check_type</span>(exp, <span class="literal">NULL</span>, <span class="number">7</span>, exp-&gt;lineno);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(exp-&gt;value_type, <span class="string">&quot;int&quot;</span>) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(exp-&gt;value_type, <span class="string">&quot;float&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 7 at line %d: Type mismatched for operands, expected int or float\n&quot;</span>, exp-&gt;lineno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_single_logical_exp</span><span class="params">(Node *exp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 检查单个Exp的类型是否为int</span></span><br><span class="line">        <span class="built_in">check_type</span>(exp, <span class="string">&quot;int&quot;</span>, <span class="number">7</span>, exp-&gt;lineno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_exp_arithmetic_symbols</span><span class="params">(Node *exp1, Node *exp2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 假设算术运算只能由int或float类型的变量进行</span></span><br><span class="line">        <span class="built_in">check_type</span>(exp1, <span class="literal">NULL</span>, <span class="number">7</span>, exp1-&gt;lineno);</span><br><span class="line">        <span class="built_in">check_type</span>(exp2, <span class="literal">NULL</span>, <span class="number">7</span>, exp2-&gt;lineno);</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(exp1-&gt;value_type, <span class="string">&quot;int&quot;</span>) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(exp1-&gt;value_type, <span class="string">&quot;float&quot;</span>) != <span class="number">0</span>) || </span><br><span class="line">            (<span class="built_in">strcmp</span>(exp2-&gt;value_type, <span class="string">&quot;int&quot;</span>) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(exp2-&gt;value_type, <span class="string">&quot;float&quot;</span>) != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 7 at line %d: Type mismatched for operands, expected int or float\n&quot;</span>, exp1-&gt;lineno);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(exp1-&gt;value_type, exp2-&gt;value_type) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 7 at line %d: Type mismatched for operands, expected same type\n&quot;</span>, exp1-&gt;lineno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_exp_logical_symbols</span><span class="params">(Node *exp1, Node *exp2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 假设逻辑运算只能由int类型的变量进行</span></span><br><span class="line">        <span class="built_in">check_type</span>(exp1, <span class="string">&quot;int&quot;</span>, <span class="number">7</span>, exp1-&gt;lineno);</span><br><span class="line">        <span class="built_in">check_type</span>(exp2, <span class="string">&quot;int&quot;</span>, <span class="number">7</span>, exp2-&gt;lineno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_exp_assign</span><span class="params">(Node *exp1, Node *exp2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用于检查赋值语句左右两边的类型是否匹配</span></span><br><span class="line">        <span class="built_in">check_type</span>(exp1, <span class="literal">NULL</span>, <span class="number">6</span>, exp1-&gt;lineno);</span><br><span class="line">        <span class="built_in">check_type</span>(exp2, <span class="literal">NULL</span>, <span class="number">5</span>, exp2-&gt;lineno);</span><br><span class="line">        <span class="keyword">if</span> (exp1-&gt;rvalue) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 6 at line %d: rvalue on the left side of assignment operator\n&quot;</span>, exp1-&gt;lineno);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(exp1-&gt;value_type, exp2-&gt;value_type) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 5 at line %d: Type mismatched for assignment\n&quot;</span>, exp1-&gt;lineno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_Exp_with_specific_type</span><span class="params">(Node *Exp, <span class="type">char</span> *expected_type)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用于检查Exp的类型是否为expected_type</span></span><br><span class="line">        <span class="built_in">check_type</span>(Exp, expected_type, <span class="number">7</span>, Exp-&gt;lineno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_Def</span><span class="params">(Node *Def)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// expected_type 为定义的类型</span></span><br><span class="line">        <span class="type">char</span> *expected_type = last_type;</span><br><span class="line">        Node *DecList = Def-&gt;child-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 循环处理定义列表中的所有声明</span></span><br><span class="line">        <span class="keyword">while</span> (DecList) &#123;</span><br><span class="line">            Node *Dec = DecList-&gt;child;</span><br><span class="line">            Node *VarDec = Dec-&gt;child;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果存在赋值（ASSIGN），检查表达式（Exp）的类型是否匹配</span></span><br><span class="line">            Node *Assign = VarDec-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (Assign &amp;&amp; <span class="built_in">strcmp</span>(Assign-&gt;type, <span class="string">&quot;ASSIGN&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                Node *Exp = Assign-&gt;next;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(Exp-&gt;value_type, <span class="string">&quot;error&quot;</span>) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(Exp-&gt;value_type, expected_type) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Error type 5 at line %d: Type mismatched for assignment\n&quot;</span>, Exp-&gt;lineno);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移动到下一个声明，如果存在</span></span><br><span class="line">            DecList = (Dec-&gt;next &amp;&amp; <span class="built_in">strcmp</span>(Dec-&gt;next-&gt;type, <span class="string">&quot;COMMA&quot;</span>) == <span class="number">0</span>) ? Dec-&gt;next-&gt;next : <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置节点的值为右值 </span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_rvalue</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node) &#123;</span><br><span class="line">            node-&gt;rvalue = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置节点的类型</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_EXP_value_type</span><span class="params">(Node *node, <span class="type">char</span> *type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node &amp;&amp; type) &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(node-&gt;value_type, type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 函数参数和返回类型检查 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_func_return_type</span><span class="params">(Node* Compst, <span class="type">char</span> *expected_type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!is_in_function || Compst == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果不在函数内部或者Compst为空，则不需要处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归检查函数体中的返回语句</span></span><br><span class="line">        <span class="built_in">find_compst_return</span>(Compst, expected_type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">find_compst_return</span><span class="params">(Node *Compst, <span class="type">char</span> *expected_type)</span> </span>&#123;</span><br><span class="line">        Node *stmtlist = Compst-&gt;child-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (stmtlist &amp;&amp; stmtlist-&gt;child) &#123;</span><br><span class="line">            Node *stmt = stmtlist-&gt;child;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(stmt-&gt;child-&gt;type, <span class="string">&quot;RETURN&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                Node *exp = stmt-&gt;child-&gt;next;</span><br><span class="line">                <span class="keyword">if</span> (exp &amp;&amp; <span class="built_in">strcmp</span>(exp-&gt;value_type, expected_type) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(exp-&gt;value_type, <span class="string">&quot;error&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Error type 8 at line %d: The return type mismatched\n&quot;</span>, exp-&gt;lineno);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(stmt-&gt;child-&gt;type, <span class="string">&quot;CompSt&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">find_compst_return</span>(stmt-&gt;child, expected_type);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 处理可能嵌套的结构，如if-else和while语句</span></span><br><span class="line">                <span class="built_in">check_nested_statements</span>(stmt, expected_type);</span><br><span class="line">            &#125;</span><br><span class="line">            stmtlist = stmtlist-&gt;next ? stmtlist-&gt;next-&gt;child : <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_nested_statements</span><span class="params">(Node *stmt, <span class="type">char</span> *expected_type)</span> </span>&#123;</span><br><span class="line">        Node *head = stmt-&gt;child;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(head-&gt;type, <span class="string">&quot;Stmt&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(head-&gt;child-&gt;type, <span class="string">&quot;CompSt&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">find_compst_return</span>(head-&gt;child, expected_type);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(head-&gt;child-&gt;type, <span class="string">&quot;RETURN&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    Node *exp = head-&gt;child-&gt;next;</span><br><span class="line">                    <span class="keyword">if</span> (exp &amp;&amp; <span class="built_in">strcmp</span>(exp-&gt;value_type, expected_type) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(exp-&gt;value_type, <span class="string">&quot;error&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Error type 8 at line %d: The return type mismatched\n&quot;</span>, exp-&gt;lineno);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_func_args</span><span class="params">(<span class="type">char</span> *func_name, Node *Args, <span class="type">int</span> arg_index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查找函数定义</span></span><br><span class="line">        <span class="type">int</span> func_index;</span><br><span class="line">        <span class="keyword">for</span>(func_index = <span class="number">0</span>; func_index &lt; def_num; func_index++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(def[func_index].name, func_name) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有找到函数，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(func_index == def_num) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        Node *current_arg = Args-&gt;child;</span><br><span class="line">        <span class="comment">// 检查参数个数和类型是否匹配</span></span><br><span class="line">        <span class="keyword">if</span>(arg_index &lt; def[func_index].arg_num) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(current_arg-&gt;value_type, def[func_index].args[arg_index].type) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Error type 9 at line %d: Unmatched argument type for Function \&quot;%s\&quot;\n&quot;</span>, current_arg-&gt;lineno, func_name);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 9 at line %d: Too many arguments for Function \&quot;%s\&quot;\n&quot;</span>, current_arg-&gt;lineno, func_name);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归检查下一个参数，如果存在</span></span><br><span class="line">        <span class="keyword">if</span>(current_arg-&gt;next) &#123;</span><br><span class="line">            <span class="built_in">check_func_args</span>(func_name, current_arg-&gt;next-&gt;next, arg_index + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(arg_index + <span class="number">1</span> &lt; def[func_index].arg_num) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 9 at line %d: Too few arguments for Function \&quot;%s\&quot;\n&quot;</span>, current_arg-&gt;lineno, func_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">check_func_without_args</span><span class="params">(<span class="type">char</span> *func_name, <span class="type">int</span> lineno)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查找函数定义</span></span><br><span class="line">        <span class="type">int</span> func_index;</span><br><span class="line">        <span class="keyword">for</span>(func_index = <span class="number">0</span>; func_index &lt; def_num; func_index++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(def[func_index].name, func_name) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有找到函数，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(func_index == def_num) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(def[func_index].arg_num != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 9 at line %d: Function \&quot;%s\&quot; expects no arguments\n&quot;</span>, lineno, func_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 数组操作检查 */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check_exp_array</span><span class="params">(Node *array_exp, Node *index_exp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果下标或数组表达式的类型已经是错误，不再进行检查</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(index_exp-&gt;value_type, <span class="string">&quot;error&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(array_exp-&gt;value_type, <span class="string">&quot;error&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查是否应用了下标操作符到非数组类型的变量上</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(array_exp-&gt;value_type, <span class="string">&quot;array&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 10 at line %d: Indexing operator ([...]) applied to non-array variable \&quot;%s\&quot;.\n&quot;</span>, array_exp-&gt;lineno, array_exp-&gt;id);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查下标是否为整型</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(index_exp-&gt;value_type, <span class="string">&quot;int&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 12 at line %d: Array index is not an integer.\n&quot;</span>, index_exp-&gt;lineno);</span><br><span class="line">            index_error = <span class="literal">true</span>; <span class="comment">// 确保外部标记了存在下标错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">find_array_elem_type</span><span class="params">(Node *exp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 找到数组的ID节点</span></span><br><span class="line">        Node *id = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (exp-&gt;child &amp;&amp; !found) &#123;</span><br><span class="line">            exp = exp-&gt;child;</span><br><span class="line">            Node *temp = exp;</span><br><span class="line">            <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(temp-&gt;type, <span class="string">&quot;ID&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    id = temp;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在定义中查找匹配的数组并返回其元素类型</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, id-&gt;id) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> def[i].elem_type;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 如果没有找到匹配的定义，返回NULL</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 结构体成员检查 */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check_exp_structure</span><span class="params">(Node *structure_exp, Node *member_id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果表达式类型有错误，则不再检查</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(structure_exp-&gt;value_type, <span class="string">&quot;error&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(member_id-&gt;value_type, <span class="string">&quot;error&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否为结构体</span></span><br><span class="line">        <span class="type">bool</span> is_structure_found = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dec_num &amp;&amp; !is_structure_found; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dec[i].name, structure_exp-&gt;value_type) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dec[i].type, <span class="string">&quot;structure&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Error type 13 at line %d: Illegal member access on non-structure variable \&quot;%s\&quot;\n&quot;</span>, </span><br><span class="line">                        structure_exp-&gt;lineno, structure_exp-&gt;id);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                is_structure_found = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有找到对应的结构体定义，则报错</span></span><br><span class="line">        <span class="keyword">if</span> (!is_structure_found) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 13 at line %d: Illegal member access on non-structure variable \&quot;%s\&quot;\n&quot;</span>, </span><br><span class="line">                structure_exp-&gt;lineno, structure_exp-&gt;id);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查结构体内是否有该成员</span></span><br><span class="line">        <span class="type">char</span> *type = <span class="built_in">find_structure_member_type</span>(structure_exp-&gt;value_type, member_id-&gt;id);</span><br><span class="line">        <span class="keyword">if</span> (!type) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 14 at line %d: Structure &#x27;%s&#x27; has no member named &#x27;%s&#x27;\n&quot;</span>, </span><br><span class="line">                structure_exp-&gt;lineno, structure_exp-&gt;value_type, member_id-&gt;id);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 函数调用检查 */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check_if_func_exist</span><span class="params">(<span class="type">char</span> *name, <span class="type">int</span> lineno)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 首先检查全局声明是否包含该名称</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dec_num; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dec[i].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 名称匹配，检查是否为函数类型</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dec[i].type, <span class="string">&quot;function&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Error type 11 at Line %d: &#x27;%s&#x27; is not a function name.\n&quot;</span>, lineno, name);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接下来检查当前函数内部是否有同名的参数或局部声明</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, current_function_name) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 检查参数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; def[i].arg_num; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].args[j].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Error type 11 at Line %d: &#x27;%s&#x27; is a parameter, not a function.\n&quot;</span>, lineno, name);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 检查局部声明</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; def[i].dec_num; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].dec[j].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].dec[j].type, <span class="string">&quot;function&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;Error type 11 at Line %d: &#x27;%s&#x27; is not a function name.\n&quot;</span>, lineno, name);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果前面的检查都没有返回，意味着函数未定义</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error type 2 at Line %d: Function \&quot;%s\&quot; is invoked without definition.\n&quot;</span>, lineno, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 变量检查 */</span></span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">check_exp_id</span><span class="params">(Node *id)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> *type = <span class="string">&quot;error&quot;</span>; <span class="comment">// 默认类型为 &quot;error&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先在全局声明中检索</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dec_num; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dec[i].name, id-&gt;id) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> dec[i].type; <span class="comment">// 找到匹配，返回对应类型</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再检查是否为某个结构体定义的成员</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; def[i].dec_num; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].dec[j].name, id-&gt;id) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> def[i].dec[j].type; <span class="comment">// 找到匹配，返回对应类型</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后检查是否为当前函数的参数或局部变量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, current_function_name) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 检查参数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; def[i].arg_num; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].args[j].name, id-&gt;id) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> def[i].args[j].type; <span class="comment">// 找到匹配，返回对应类型</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 检查局部变量</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; def[i].dec_num; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].dec[j].name, id-&gt;id) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> def[i].dec[j].type; <span class="comment">// 找到匹配，返回对应类型</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果标识符未定义并且处于函数内部，则打印错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(type, <span class="string">&quot;error&quot;</span>) == <span class="number">0</span> &amp;&amp; is_in_function) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 1 at line %d: Undefined variable \&quot;%s\&quot;.\n&quot;</span>, id-&gt;lineno, id-&gt;id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type; <span class="comment">// 如果没有找到匹配的声明，返回 &quot;error&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%<span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>     num;</span><br><span class="line">    <span class="type">char</span>*   str;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Head</span>* node; <span class="comment">/*&quot;struct&quot; is indispensable*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%right ASSIGN</span><br><span class="line">%left OR</span><br><span class="line">%left AND</span><br><span class="line">%left LT LE GT GE NE EQ</span><br><span class="line">%left PLUS MINUS</span><br><span class="line">%left MUL DIV</span><br><span class="line">%right NOT NEGATIVE</span><br><span class="line">%nonassoc LC RC LB RB LP RP DOT</span><br><span class="line"></span><br><span class="line">%token &lt;node&gt; ID INT FLOAT CHAR STRUCT RETURN IF ELSE WHILE PLUS MINUS MUL DIV AND OR LT LE GT GE NE EQ NOT ASSIGN TYPE LP RP LB RB LC RC SEMI COMMA DOT ILLEGAL ILLEGAL_ID ILLEGAL_HEX_INT ILLEGAL_CHAR</span><br><span class="line"></span><br><span class="line">%type &lt;node&gt; Program ExtDefList ExtDef ExtDecList Specifier StructSpecifier VarDec FunDec VarList ParamDec CompSt StmtList Stmt DefList Def DecList Dec Exp Args</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">Program: ExtDefList &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Program&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);root=$$;&#125;</span><br><span class="line"></span><br><span class="line">ExtDefList: ExtDef ExtDefList  &#123;<span class="built_in">connect_to_next</span>(<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">2</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDefList&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">          | <span class="comment">/* empty */</span>         &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;empty&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">100</span>);&#125;</span><br><span class="line"></span><br><span class="line">ExtDef: Specifier ExtDecList SEMI   &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDef&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">insert_ExtDecList</span>($<span class="number">2</span>);&#125;</span><br><span class="line">      | Specifier ExtDecList error  &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing semicolon &#x27;;&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno);&#125;</span><br><span class="line">      | Specifier SEMI              &#123;<span class="built_in">connect_to_next</span>(<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">2</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDef&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">      | Specifier FunDec CompSt     &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDef&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="keyword">if</span>(is_in_function)&#123;<span class="built_in">set_func_return_type</span>(current_function_name,$<span class="number">1</span>-&gt;child-&gt;id);<span class="built_in">check_func_return_type</span>($<span class="number">3</span>,$<span class="number">1</span>-&gt;child-&gt;id);&#125;is_in_function=<span class="literal">false</span>;&#125;</span><br><span class="line"></span><br><span class="line">ExtDecList: VarDec                      &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDecList&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">           | VarDec COMMA ExtDecList    &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDecList&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">Specifier: TYPE                         &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Specifier&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">set_last_type</span>($<span class="number">1</span>-&gt;id);&#125;</span><br><span class="line">          | StructSpecifier             &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Specifier&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">StructSpecifier: STRUCT ID LC DefList RC    &#123;<span class="built_in">connect_to_next</span>(<span class="number">5</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>,$<span class="number">5</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;StructSpecifier&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="keyword">if</span>(<span class="built_in">add_dec</span>($<span class="number">2</span>-&gt;id,<span class="string">&quot;structure&quot;</span>,$<span class="number">2</span>-&gt;lineno)&amp;&amp;<span class="built_in">add_func_or_struct</span>($<span class="number">2</span>-&gt;id,$<span class="number">2</span>-&gt;lineno,<span class="string">&quot;structure&quot;</span>))&#123;<span class="built_in">add_struct_member_deflist</span>($<span class="number">4</span>,$<span class="number">2</span>-&gt;id);&#125;&#125;</span><br><span class="line">               | STRUCT ID                  &#123;<span class="built_in">connect_to_next</span>(<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">2</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;StructSpecifier&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">set_last_type</span>($<span class="number">2</span>-&gt;id);&#125;</span><br><span class="line"></span><br><span class="line">VarDec: ID                              &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;VarDec&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">       | ILLEGAL_ID error               &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: illegal identifier &#x27;%s&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno,$<span class="number">1</span>-&gt;id);&#125;</span><br><span class="line">       | VarDec LB INT RB               &#123;<span class="built_in">connect_to_next</span>(<span class="number">4</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;VarDec&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">FunDec: ID LP VarList RP                &#123;<span class="built_in">connect_to_next</span>(<span class="number">4</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;FunDec&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="keyword">if</span>(<span class="built_in">add_dec</span>($<span class="number">1</span>-&gt;id,<span class="string">&quot;function&quot;</span>,$<span class="number">1</span>-&gt;lineno)&amp;&amp;<span class="built_in">add_func_or_struct</span>($<span class="number">1</span>-&gt;id,$<span class="number">1</span>-&gt;lineno,<span class="string">&quot;function&quot;</span>))&#123;<span class="built_in">insert_function_args</span>($<span class="number">1</span>-&gt;id,$<span class="number">3</span>);current_function_name=$<span class="number">1</span>-&gt;id;is_in_function=<span class="literal">true</span>;&#125; <span class="keyword">else</span>&#123;is_in_function=<span class="literal">false</span>;&#125;&#125;</span><br><span class="line">       | ID LP RP                       &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;FunDec&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="keyword">if</span>(<span class="built_in">add_dec</span>($<span class="number">1</span>-&gt;id,<span class="string">&quot;function&quot;</span>,$<span class="number">1</span>-&gt;lineno)&amp;&amp;<span class="built_in">add_func_or_struct</span>($<span class="number">1</span>-&gt;id,$<span class="number">1</span>-&gt;lineno,<span class="string">&quot;function&quot;</span>))&#123;current_function_name=$<span class="number">1</span>-&gt;id;is_in_function=<span class="literal">true</span>;&#125; <span class="keyword">else</span>&#123;is_in_function=<span class="literal">false</span>;&#125;&#125;</span><br><span class="line">       | ID LP VarList error            &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing closing symbols &#x27;)&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno);&#125;  </span><br><span class="line">       | ID LP error                    &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing closing symbols &#x27;)&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno);&#125; </span><br><span class="line"></span><br><span class="line">VarList: ParamDec COMMA VarList         &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;VarList&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">        | ParamDec                      &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;VarList&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">ParamDec: Specifier VarDec              &#123;<span class="built_in">connect_to_next</span>(<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">2</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;ParamDec&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">CompSt: LC DefList StmtList RC          &#123;<span class="built_in">connect_to_next</span>(<span class="number">4</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;CompSt&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">StmtList: Stmt StmtList                 &#123;<span class="built_in">connect_to_next</span>(<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">2</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;StmtList&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">         |Stmt Def StmtList error       &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: definition after statement\n&quot;</span>, $<span class="number">2</span>-&gt;lineno);&#125;</span><br><span class="line">         | <span class="comment">/* empty */</span>                  &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;empty&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">100</span>);&#125;</span><br><span class="line"></span><br><span class="line">Stmt: Exp SEMI                          &#123;<span class="built_in">connect_to_next</span>(<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">2</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">    | CompSt                            &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">    | RETURN Exp SEMI                   &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">    | RETURN Exp error                  &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing semicolon &#x27;;&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno);&#125;     </span><br><span class="line">    | IF LP Exp RP Stmt                 &#123;<span class="built_in">connect_to_next</span>(<span class="number">5</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>,$<span class="number">5</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">    | IF LP Exp RP Stmt ELSE Stmt       &#123;<span class="built_in">connect_to_next</span>(<span class="number">7</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>,$<span class="number">5</span>,$<span class="number">6</span>,$<span class="number">7</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">    | WHILE LP Exp RP Stmt              &#123;<span class="built_in">connect_to_next</span>(<span class="number">5</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>,$<span class="number">5</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">DefList: Def DefList                    &#123;<span class="built_in">connect_to_next</span>(<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">2</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;DefList&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">        | <span class="comment">/* empty */</span>                   &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;empty&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">100</span>);&#125;</span><br><span class="line"></span><br><span class="line">Def: Specifier DecList SEMI             &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Def&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_Def</span>($$);&#125;</span><br><span class="line">    | Specifier DecList error           &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing semicolon &#x27;;&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno);&#125;</span><br><span class="line"></span><br><span class="line">DecList: Dec                            &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;DecList&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">        | Dec COMMA DecList             &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;DecList&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">Dec: VarDec                             &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Dec&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">insert_func_variables</span>($$);&#125;</span><br><span class="line">    | VarDec ASSIGN Exp                 &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Dec&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">insert_func_variables</span>($$);&#125;</span><br><span class="line"></span><br><span class="line">Exp: Exp ASSIGN Exp                     &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_assign</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);&#125;</span><br><span class="line">    | Exp AND Exp                       &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_logical_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);&#125;</span><br><span class="line">    | Exp OR Exp                        &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_logical_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);&#125;    </span><br><span class="line">    | Exp LT Exp                        &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_logical_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);&#125;    </span><br><span class="line">    | Exp LE Exp                        &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_logical_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);&#125;    </span><br><span class="line">    | Exp GT Exp                        &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_logical_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);&#125;</span><br><span class="line">    | Exp GE Exp                        &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_logical_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);&#125;</span><br><span class="line">    | Exp NE Exp                        &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_logical_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);&#125;</span><br><span class="line">    | Exp EQ Exp                        &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_logical_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);&#125;</span><br><span class="line">    | Exp PLUS Exp                      &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_arithmetic_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,$<span class="number">1</span>-&gt;value_type);&#125;</span><br><span class="line">    | Exp MINUS Exp                     &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_arithmetic_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,$<span class="number">1</span>-&gt;value_type);&#125;</span><br><span class="line">    | Exp MUL Exp                       &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_arithmetic_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,$<span class="number">1</span>-&gt;value_type);&#125;</span><br><span class="line">    | Exp DIV Exp                       &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_exp_arithmetic_symbols</span>($<span class="number">1</span>,$<span class="number">3</span>);<span class="built_in">set_rvalue</span>($$);<span class="built_in">set_EXP_value_type</span>($$,$<span class="number">1</span>-&gt;value_type);&#125;</span><br><span class="line">    | LP Exp RP                         &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">strcpy</span>($$-&gt;value_type,$<span class="number">2</span>-&gt;value_type);$$-&gt;rvalue=$<span class="number">2</span>-&gt;rvalue;&#125;    <span class="comment">//(b)</span></span><br><span class="line">    | LP Exp error                      &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing closing symbols &#x27;)&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno);&#125;</span><br><span class="line">    | MINUS Exp                         &#123;<span class="built_in">connect_to_next</span>(<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">2</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_single_arithmetic_exp</span>($<span class="number">2</span>);$$-&gt;rvalue=$<span class="number">2</span>-&gt;rvalue;<span class="built_in">set_EXP_value_type</span>($$,$<span class="number">2</span>-&gt;value_type);&#125;</span><br><span class="line">    | NOT Exp                           &#123;<span class="built_in">connect_to_next</span>(<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">2</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">check_single_logical_exp</span>($<span class="number">2</span>);$$-&gt;rvalue=$<span class="number">2</span>-&gt;rvalue;<span class="built_in">set_EXP_value_type</span>($$,$<span class="number">2</span>-&gt;value_type);&#125;</span><br><span class="line">    | ID LP Args RP                     &#123;<span class="built_in">connect_to_next</span>(<span class="number">4</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="keyword">if</span>(<span class="built_in">check_if_func_exist</span>($<span class="number">1</span>-&gt;id,$<span class="number">1</span>-&gt;lineno))&#123;<span class="built_in">check_func_args</span>($<span class="number">1</span>-&gt;id,$<span class="number">3</span>,<span class="number">0</span>);<span class="built_in">set_EXP_value_type</span>($$,<span class="built_in">find_func_return_type</span>($<span class="number">1</span>-&gt;id));&#125; <span class="keyword">else</span>&#123;<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;error&quot;</span>);&#125;&#125;         <span class="comment">//调用函数a(...)</span></span><br><span class="line">    | ID LP Args error                  &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing closing symbols &#x27;)&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno);&#125;</span><br><span class="line">    | ID LP RP                          &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="keyword">if</span>(<span class="built_in">check_if_func_exist</span>($<span class="number">1</span>-&gt;id,$<span class="number">1</span>-&gt;lineno))&#123;<span class="built_in">check_func_without_args</span>($<span class="number">1</span>-&gt;id,$<span class="number">1</span>-&gt;lineno);<span class="built_in">set_EXP_value_type</span>($$,<span class="built_in">find_func_return_type</span>($<span class="number">1</span>-&gt;id));&#125; <span class="keyword">else</span>&#123;<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;error&quot;</span>);&#125;&#125;    <span class="comment">//调用函数，无参数</span></span><br><span class="line">    | Exp LB Exp RB                     &#123;<span class="built_in">connect_to_next</span>(<span class="number">4</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="keyword">if</span>(<span class="built_in">check_exp_array</span>($<span class="number">1</span>,$<span class="number">3</span>))&#123;<span class="keyword">if</span>(index_error)&#123;<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;None&quot;</span>);index_error=<span class="literal">false</span>;&#125;<span class="keyword">else</span>&#123;<span class="built_in">set_EXP_value_type</span>($$,<span class="built_in">find_array_elem_type</span>($<span class="number">1</span>));&#125;&#125;<span class="keyword">else</span>&#123;<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;error&quot;</span>);&#125;&#125;     <span class="comment">//数组访问a[...]</span></span><br><span class="line">    | Exp DOT ID                        &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="keyword">if</span>(<span class="built_in">check_exp_structure</span>($<span class="number">1</span>,$<span class="number">3</span>))&#123;<span class="built_in">set_EXP_value_type</span>($$,<span class="built_in">find_structure_member_type</span>($<span class="number">1</span>-&gt;value_type,$<span class="number">3</span>-&gt;id));&#125;<span class="keyword">else</span>&#123;<span class="built_in">strcpy</span>($$-&gt;value_type,<span class="string">&quot;None&quot;</span>);&#125;&#125;    <span class="comment">//结构体</span></span><br><span class="line">    | ID                                &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">set_EXP_value_type</span>($$,<span class="built_in">check_exp_id</span>($<span class="number">1</span>));&#125;</span><br><span class="line">    | INT                               &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;int&quot;</span>);$$-&gt;rvalue=<span class="number">1</span>;&#125;</span><br><span class="line">    | FLOAT                             &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;float&quot;</span>);$$-&gt;rvalue=<span class="number">1</span>;&#125;</span><br><span class="line">    | CHAR                              &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);<span class="built_in">set_EXP_value_type</span>($$,<span class="string">&quot;char&quot;</span>);$$-&gt;rvalue=<span class="number">1</span>;&#125;</span><br><span class="line">    | ILLEGAL error                     &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: unknown lexeme &#x27;%s&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno,$<span class="number">1</span>-&gt;id);&#125;</span><br><span class="line">    | ILLEGAL_HEX_INT error             &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: illegal hexadecimal integer &#x27;%s&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno,$<span class="number">1</span>-&gt;id);&#125;</span><br><span class="line">    | ILLEGAL_CHAR error                &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: illegal hex_character &#x27;%s&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;lineno,$<span class="number">1</span>-&gt;id);&#125;</span><br><span class="line">    | Exp ILLEGAL Exp error             &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: illegal operator &#x27;%s&#x27;\n&quot;</span>, $<span class="number">2</span>-&gt;lineno,$<span class="number">2</span>-&gt;id);&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">Args: Exp COMMA Args                    &#123;<span class="built_in">connect_to_next</span>(<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>);$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Args&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line">     | Exp                              &#123;$$=<span class="built_in">create_Node</span>(<span class="number">0</span>,<span class="string">&quot;Args&quot;</span>,<span class="string">&quot;&quot;</span>,$<span class="number">1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">yyerror</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;Syntax error at line %d: %s\n&quot;, line, s);</span></span><br><span class="line">    <span class="comment">//printf(&quot;Error type B at line &quot;);</span></span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Usage: %s &lt;file_path&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(yyin = <span class="built_in">fopen</span>(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>))) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">yyparse</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//print_tree(root,0);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    printf(&quot;\ntables:\n&quot;);</span></span><br><span class="line"><span class="comment">    //打印符号表</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;dec_num;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%s %s\n&quot;,dec[i].name,dec[i].type);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //打印定义表</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;def_num;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%s \n&quot;,def[i].name);</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;def[i].arg_num;j++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%s %s\n&quot;,def[i].args[j].name,def[i].args[j].type);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;def[i].dec_num;j++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            printf(&quot;%s %s\n&quot;,def[i].dec[j].name,def[i].dec[j].type);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        printf(&quot;return_type:%s\n&quot;,def[i].return_type);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">FLEX=flex</span><br><span class="line">BISON=bison</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: bplc clean</span></span><br><span class="line"></span><br><span class="line"><span class="section">bplc: bin/bplc</span></span><br><span class="line"></span><br><span class="line"><span class="section">bin/bplc: bin myhead.o syntax.tab.o</span></span><br><span class="line">	<span class="variable">$(CC)</span> -o bin/bplc myhead.o syntax.tab.o -lfl -ly</span><br><span class="line"></span><br><span class="line"><span class="section">myhead.o: myhead.cpp</span></span><br><span class="line">	<span class="variable">$(CXX)</span> -c myhead.cpp -o myhead.o</span><br><span class="line"></span><br><span class="line"><span class="section">syntax.tab.o: syntax.tab.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c syntax.tab.c -o syntax.tab.o</span><br><span class="line"></span><br><span class="line"><span class="section">syntax.tab.c: syntax.y lex.yy.c</span></span><br><span class="line">	<span class="variable">$(BISON)</span> -t -d syntax.y</span><br><span class="line"></span><br><span class="line"><span class="section">lex.yy.c: lex.l</span></span><br><span class="line">	<span class="variable">$(FLEX)</span> lex.l</span><br><span class="line"></span><br><span class="line"><span class="section">bin:</span></span><br><span class="line">	mkdir bin</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	@rm -f lex.yy.c syntax.tab.* ./bin/* *.o</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>bplc_test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DATA = pathlib.Path(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jsonparser_output</span>(<span class="params">json_file</span>):</span><br><span class="line">    out = subprocess.check_output([<span class="string">&#x27;./bin/bplc&#x27;</span>, json_file])</span><br><span class="line">    <span class="keyword">return</span> out.decode().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_jsonchecker_fail_syntaxonly</span>():</span><br><span class="line">    data = DATA</span><br><span class="line">    <span class="keyword">for</span> bplfile <span class="keyword">in</span> data.glob(<span class="string">&#x27;*.bpl&#x27;</span>):</span><br><span class="line">        out = jsonparser_output(bplfile)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;For file <span class="subst">&#123;bplfile.name&#125;</span>:&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(out)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span>*<span class="number">80</span>)</span><br><span class="line">        subfolder_name = <span class="string">&quot;out&quot;</span></span><br><span class="line">        temp=bplfile.name[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">        file_name = <span class="string">f&quot;./<span class="subst">&#123;subfolder_name&#125;</span>/&quot;</span>+temp+<span class="string">&quot;.out&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># check_jsonchecker_fail_withlexical()</span></span><br><span class="line">check_jsonchecker_fail_syntaxonly()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>myhead.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYHEAD_H_  <span class="comment">// 防止头文件重复包含</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYHEAD_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus  <span class="comment">// 允许C++调用C语言代码</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体，用于描述变量声明</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];  <span class="comment">// 变量名</span></span><br><span class="line">    <span class="type">char</span> type[<span class="number">100</span>];  <span class="comment">// 变量类型</span></span><br><span class="line">&#125; declare;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体，用于描述复杂类型的定义，包括数组、结构体和函数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];          <span class="comment">// 名称</span></span><br><span class="line">    <span class="type">char</span> elem_type[<span class="number">100</span>];     <span class="comment">// 对于数组类型，表示元素的类型</span></span><br><span class="line">    declare dec[<span class="number">100</span>];        <span class="comment">// 存储结构体成员或函数内部变量</span></span><br><span class="line">    <span class="type">char</span> return_type[<span class="number">100</span>];   <span class="comment">// 对于函数类型，表示返回值类型</span></span><br><span class="line">    declare args[<span class="number">100</span>];       <span class="comment">// 对于函数，存储参数列表</span></span><br><span class="line">    <span class="type">int</span> arg_num;             <span class="comment">// 函数参数的数量</span></span><br><span class="line">    <span class="type">int</span> dec_num;             <span class="comment">// dec数组中的元素数量</span></span><br><span class="line">&#125; definition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> declare dec[<span class="number">100</span>];     <span class="comment">// 全局变量表</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> dec_num;          <span class="comment">// 全局变量数目</span></span><br><span class="line"><span class="keyword">extern</span> definition def[<span class="number">100</span>];  <span class="comment">// 复杂类型定义数组</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> def_num;          <span class="comment">// 复杂类型定义数目</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> last_type[<span class="number">100</span>];  <span class="comment">// 上一次定义的类型名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_last_type</span><span class="params">(<span class="type">char</span> *type)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_dec</span><span class="params">(<span class="type">char</span> *name, <span class="type">char</span> *type, <span class="type">int</span> lineno)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_array</span><span class="params">(<span class="type">char</span> *name, <span class="type">char</span> *elem_type, <span class="type">int</span> lineno)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_func_or_struct</span><span class="params">(<span class="type">char</span> *name, <span class="type">int</span> lineno, <span class="type">char</span> *type)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_func_and_struct_dec</span><span class="params">(<span class="type">char</span> *name, <span class="type">char</span> *dec_name, <span class="type">char</span> *type)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">find_id_type</span><span class="params">(<span class="type">char</span> *name)</span></span>;</span><br><span class="line"><span class="function">declare* <span class="title">find_func_or_struct_dec</span><span class="params">(<span class="type">char</span> *name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">find_func_return_type</span><span class="params">(<span class="type">char</span> *name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_struct_member</span><span class="params">(<span class="type">char</span> *struct_name, <span class="type">char</span> *member_name, <span class="type">char</span> *member_type, <span class="type">int</span> lineno)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_func_args</span><span class="params">(<span class="type">char</span> *func_name, <span class="type">char</span> *arg_name, <span class="type">char</span> *arg_type, <span class="type">int</span> lineno)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_func_variables</span><span class="params">(<span class="type">char</span> *func_name, <span class="type">char</span> *variable_name, <span class="type">char</span> *variable_type, <span class="type">int</span> lineno)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">find_structure_member_type</span><span class="params">(<span class="type">char</span> *struct_name, <span class="type">char</span> *member_name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_func_return_type</span><span class="params">(<span class="type">char</span> *func_name, <span class="type">char</span> *return_type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* MYHEAD_H_ */</span></span></span><br></pre></td></tr></table></figure>



<p>myhead.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myhead.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line">declare dec[<span class="number">100</span>];<span class="comment">//定义的变量表</span></span><br><span class="line"><span class="type">int</span> dec_num=<span class="number">0</span>;<span class="comment">//定义的变量数目</span></span><br><span class="line">definition def[<span class="number">100</span>];<span class="comment">//定义的array,struct,function</span></span><br><span class="line"><span class="type">int</span> def_num=<span class="number">0</span>;<span class="comment">//定义的array,struct,function数目</span></span><br><span class="line"><span class="type">char</span> last_type[<span class="number">100</span>];<span class="comment">//最后一次定义的类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_last_type</span><span class="params">(<span class="type">char</span> *type)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(last_type, type);  <span class="comment">// 直接复制类型名称到 last_type</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_dec</span><span class="params">(<span class="type">char</span> *name, <span class="type">char</span> *type, <span class="type">int</span> lineno)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查变量是否已经被定义过</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dec_num; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dec[i].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 根据已存在变量类型区分错误类型</span></span><br><span class="line">            <span class="type">const</span> <span class="type">char</span> *errorType =</span><br><span class="line">                <span class="built_in">strcmp</span>(dec[i].type, <span class="string">&quot;function&quot;</span>) == <span class="number">0</span> ? <span class="string">&quot;function&quot;</span> :</span><br><span class="line">                <span class="built_in">strcmp</span>(dec[i].type, <span class="string">&quot;structure&quot;</span>) == <span class="number">0</span> ? <span class="string">&quot;structure&quot;</span> :</span><br><span class="line">                <span class="string">&quot;variable&quot;</span>;</span><br><span class="line">            <span class="type">int</span> errorTypeCode = <span class="built_in">strcmp</span>(errorType, <span class="string">&quot;function&quot;</span>) == <span class="number">0</span> ? <span class="number">4</span> :</span><br><span class="line">                                <span class="built_in">strcmp</span>(errorType, <span class="string">&quot;structure&quot;</span>) == <span class="number">0</span> ? <span class="number">15</span> :</span><br><span class="line">                                <span class="number">3</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type %d at Line %d: Redefined %s \&quot;%s\&quot;.\n&quot;</span>, errorTypeCode, lineno, errorType, name);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加新的定义</span></span><br><span class="line">    <span class="built_in">strcpy</span>(dec[dec_num].name, name);</span><br><span class="line">    <span class="built_in">strcpy</span>(dec[dec_num].type, type);</span><br><span class="line">    dec_num++;  <span class="comment">// 增加定义计数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_array</span><span class="params">(<span class="type">char</span> *name, <span class="type">char</span> *elem_type, <span class="type">int</span> lineno)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查数组是否已经被定义过</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type 3 at Line %d: Redefined variable \&quot;%s\&quot;.\n&quot;</span>, lineno, name);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加新的数组定义</span></span><br><span class="line">    <span class="built_in">strcpy</span>(def[def_num].name, name);</span><br><span class="line">    <span class="built_in">strcpy</span>(def[def_num].elem_type, elem_type);</span><br><span class="line">    def[def_num].dec_num = <span class="number">0</span>;  <span class="comment">// 初始化数组内部变量计数为0</span></span><br><span class="line">    def_num++;  <span class="comment">// 增加定义计数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_func_or_struct</span><span class="params">(<span class="type">char</span> *name, <span class="type">int</span> lineno, <span class="type">char</span> *type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查是否已经定义过同名的函数或结构体</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 错误处理，根据类型输出不同的错误信息</span></span><br><span class="line">            <span class="type">int</span> errorTypeCode = <span class="built_in">strcmp</span>(type, <span class="string">&quot;function&quot;</span>) == <span class="number">0</span> ? <span class="number">4</span> : <span class="number">15</span>;</span><br><span class="line">            <span class="type">const</span> <span class="type">char</span> *typeText = <span class="built_in">strcmp</span>(type, <span class="string">&quot;function&quot;</span>) == <span class="number">0</span> ? <span class="string">&quot;function&quot;</span> : <span class="string">&quot;structure&quot;</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error type %d at Line %d: Redefined %s \&quot;%s\&quot;.\n&quot;</span>, errorTypeCode, lineno, typeText, name);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加新的函数或结构体定义</span></span><br><span class="line">    <span class="built_in">strcpy</span>(def[def_num].name, name);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(type, <span class="string">&quot;function&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        def[def_num].arg_num = <span class="number">0</span>; <span class="comment">// 为函数初始化参数数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    def[def_num].dec_num = <span class="number">0</span>; <span class="comment">// 初始化成员或局部变量数量</span></span><br><span class="line">    def_num++; <span class="comment">// 增加定义计数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_func_and_struct_dec</span><span class="params">(<span class="type">char</span> *name, <span class="type">char</span> *dec_name, <span class="type">char</span> *type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查找并为特定的函数或结构体添加成员定义</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(def[i].dec[def[i].dec_num].name, dec_name);</span><br><span class="line">            <span class="built_in">strcpy</span>(def[i].dec[def[i].dec_num].type, type);</span><br><span class="line">            def[i].dec_num++; <span class="comment">// 更新成员计数</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">find_id_type</span><span class="params">(<span class="type">char</span> *name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历变量表，查找匹配的变量类型</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dec_num; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(dec[i].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dec[i].type; <span class="comment">// 返回找到的变量类型</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 找不到时返回NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">declare* <span class="title">find_func_or_struct_dec</span><span class="params">(<span class="type">char</span> *name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历定义列表，寻找匹配的函数或结构体</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> def[i].dec; <span class="comment">// 找到后返回其声明数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 未找到返回NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">find_func_return_type</span><span class="params">(<span class="type">char</span> *name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历定义列表，寻找匹配的函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> def[i].return_type; <span class="comment">// 找到后返回其返回类型</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 未找到返回NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_struct_member</span><span class="params">(<span class="type">char</span> *struct_name, <span class="type">char</span> *member_name, <span class="type">char</span> *member_type, <span class="type">int</span> lineno)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历定义列表以查找指定的结构体</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, struct_name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 检查成员是否已经定义在结构体中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; def[i].dec_num; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].dec[j].name, member_name) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Error type 15 at Line %d: Redefined field \&quot;%s\&quot;.\n&quot;</span>, lineno, member_name);</span><br><span class="line">                    <span class="keyword">return</span>; <span class="comment">// 找到重复定义，报错并退出</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将新成员添加到结构体定义中</span></span><br><span class="line">            <span class="built_in">strcpy</span>(def[i].dec[def[i].dec_num].name, member_name);</span><br><span class="line">            <span class="built_in">strcpy</span>(def[i].dec[def[i].dec_num].type, member_type);</span><br><span class="line">            def[i].dec_num++; <span class="comment">// 更新成员数量</span></span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 成功添加后退出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_func_args</span><span class="params">(<span class="type">char</span> *func_name, <span class="type">char</span> *arg_name, <span class="type">char</span> *arg_type, <span class="type">int</span> lineno)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历定义列表以查找指定的函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, func_name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 检查参数是否已经定义在函数中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; def[i].arg_num; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].args[j].name, arg_name) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Error type 3 at Line %d: Redefined variable \&quot;%s\&quot;.\n&quot;</span>, lineno, arg_name);</span><br><span class="line">                    <span class="keyword">return</span>; <span class="comment">// 找到重复定义，报错并退出</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将新参数添加到函数定义中</span></span><br><span class="line">            <span class="built_in">strcpy</span>(def[i].args[def[i].arg_num].name, arg_name);</span><br><span class="line">            <span class="built_in">strcpy</span>(def[i].args[def[i].arg_num].type, arg_type);</span><br><span class="line">            def[i].arg_num++; <span class="comment">// 更新参数数量</span></span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 成功添加后退出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_func_variables</span><span class="params">(<span class="type">char</span> *func_name, <span class="type">char</span> *variable_name, <span class="type">char</span> *variable_type, <span class="type">int</span> lineno)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历已定义列表以查找指定函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, func_name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 在找到的函数中遍历检查是否存在同名变量</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; def[i].dec_num; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].dec[j].name, variable_name) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Error type 3 at Line %d: Redefined variable \&quot;%s\&quot;.\n&quot;</span>, lineno, variable_name);</span><br><span class="line">                    <span class="keyword">return</span>; <span class="comment">// 发现重复定义，报错并退出</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若未发现重复定义，则添加新变量</span></span><br><span class="line">            <span class="built_in">strcpy</span>(def[i].dec[def[i].dec_num].name, variable_name);</span><br><span class="line">            <span class="built_in">strcpy</span>(def[i].dec[def[i].dec_num].type, variable_type);</span><br><span class="line">            def[i].dec_num++; <span class="comment">// 更新变量数量</span></span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 添加成功后退出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">find_structure_member_type</span><span class="params">(<span class="type">char</span> *struct_name, <span class="type">char</span> *member_name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历定义列表查找指定结构体</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, struct_name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 在找到的结构体中遍历检查是否存在指定成员</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; def[i].dec_num; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].dec[j].name, member_name) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> def[i].dec[j].type; <span class="comment">// 找到成员，返回其类型</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 指定成员不存在</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 指定结构体不存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_func_return_type</span><span class="params">(<span class="type">char</span> *name, <span class="type">char</span> *type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历已定义列表以查找指定函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; def_num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(def[i].name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(def[i].return_type, type); <span class="comment">// 找到函数，设置返回类型</span></span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 设置成功后退出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理Project1——编写词法分析和语法分析</title>
    <url>/2023/11/20/Information_Security_Experiment/Compilation_principle/CP_Project1/</url>
    <content><![CDATA[<p><strong>Project 1: 词法分析和语法分析</strong></p>
<p>在这个项目中，你将为BUPT编程语言（BPL）实现一个编译器的词法分析器和语法分析器。BPL是一种类C的编程语言，它去除了C标准中的大多数高级特性，比如宏和指针。项目的目标是编译BPL程序到MIPS32汇编代码。以下是关于词法分析和语法分析部分的详细说明。</p>
<p><strong>1. 词法分析 (Lexical Analysis)</strong>:</p>
<ul>
<li><strong>Flex工具</strong>: 你将使用GNU Flex生成词法分析器。Flex是一个快速的词法分析器生成器。你需要指定要匹配的令牌模式和对每个令牌应用的操作。Flex会将这些规格转换成一个NFA，然后将它转换成一个等价的DFA，并尽可能地最小化这个自动机，最终生成实现词法分析器的C代码。</li>
<li><strong>Flex编码</strong>: 在使用Flex时，你将使用正则表达式来定义模式，并使用C代码来定义动作。你将编写.lex文件，并通过Flex生成一个C源文件，该文件包含一个实现所有规则和相应动作的有限自动机。</li>
<li><strong>Flex特性</strong>: Flex还提供了一些有用的特性，如行号记录（yylineno）、输入和输出函数（input()和unput()），以及更多用于控制词法分析过程的函数。</li>
</ul>
<p><strong>2. 语法分析 (Syntax Analysis)</strong>:</p>
<ul>
<li><strong>Bison工具</strong>: 你将使用GNU Bison生成语法分析器。Bison是一个解析器生成器，你提供一个文法规范的输入，Bison将生成一个LALR(1)解析器来识别该文法的句子。这个解析器接受来自Flex的输入令牌流，以识别指定的上下文无关文法。</li>
<li><strong>Bison编码</strong>: 类似于Flex，Bison的源代码也包含可选的声明、定义和用户例程部分。你将为每个产生式关联一个动作，这允许你在使用该产生式进行规约时执行任何处理。你需要定义文法的每个非终结符，为每个规则指定优先级和结合性，并设置用于在词法分析器和解析器之间通信的全局变量。</li>
<li><strong>Bison特性</strong>: Bison还提供了一些高级特性，如符号位置信息、错误恢复和冲突解决机制等。这些特性可以帮助你更有效地实现语法分析器，并提供更稳健的错误处理和更精确的语法分析。</li>
</ul>
<p><strong>项目要求</strong>:</p>
<ul>
<li>你需要实现一个解析器，它接受单个命令行参数（BPL文件路径），并输出语法有效的BPL程序的语法树或报告代码中存在的所有词法&#x2F;语法错误。</li>
<li>你的解析器应该能够识别未定义字符或标记、结构非法等词法和语法错误，并为语法有效的BPL程序打印出其语法树。</li>
<li>你可以实现其他功能，如单行&#x2F;多行注释、宏预处理器、文件包含、for语句等。</li>
</ul>
<p>通过这个项目，你将学会如何使用现代的编译器工具（Flex和Bison）来自动化词法分析和语法分析过程，从而更深入地理解编译器前端的工作原理。同时，这也是构建编译器其他部分（如语义分析、中间代码生成、目标代码生成等）的基础。</p>
<p>lex.l</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;syntax.tab.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Head</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> is_end;</span><br><span class="line">    <span class="type">char</span> type[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> id[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> line;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Head</span> *child;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Head</span> *brother;</span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Head</span> *<span class="built_in">new_Node</span>(<span class="type">int</span> is_end, <span class="type">char</span> *type, <span class="type">char</span> *id,<span class="type">int</span> line, Node *child, Node *brother);</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">new_Node</span><span class="params">(<span class="type">int</span> is_end,<span class="type">char</span>* type, <span class="type">char</span>* id, <span class="type">int</span> line, Node* child,Node* brother)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span> (!newNode) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;Memory allocation error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;is_end = is_end;</span><br><span class="line">    <span class="keyword">if</span>(line==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        newNode-&gt;line=child-&gt;line;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        newNode-&gt;line=line;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(newNode-&gt;type,type);</span><br><span class="line">    <span class="keyword">if</span> (id)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(newNode-&gt;id,id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        newNode-&gt;id[<span class="number">0</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;child = child;</span><br><span class="line">    newNode-&gt;brother = brother;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_tree</span><span class="params">(Node* result,<span class="type">int</span> line)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(result==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(result-&gt;type,<span class="string">&quot;empty&quot;</span>)!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;line;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(result-&gt;is_end==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,result-&gt;type);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(result-&gt;type,<span class="string">&quot;ID&quot;</span>)==<span class="number">0</span>||<span class="built_in">strcmp</span>(result-&gt;type,<span class="string">&quot;TYPE&quot;</span>)==<span class="number">0</span>||<span class="built_in">strcmp</span>(result-&gt;type,<span class="string">&quot;INT&quot;</span>)==<span class="number">0</span>||</span><br><span class="line">        <span class="built_in">strcmp</span>(result-&gt;type,<span class="string">&quot;FLOAT&quot;</span>)==<span class="number">0</span>||<span class="built_in">strcmp</span>(result-&gt;type,<span class="string">&quot;CHAR&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;: %s&quot;</span>,result-&gt;id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(result-&gt;type,<span class="string">&quot;empty&quot;</span>)!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s (%d)\n&quot;</span>,result-&gt;type,result-&gt;line);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print_tree</span>(result-&gt;child,line+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">print_tree</span>(result-&gt;brother,line);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> line = <span class="number">1</span>;</span><br><span class="line">%&#125;</span><br><span class="line">%option noyywrap</span><br><span class="line"></span><br><span class="line">word_int        [<span class="number">0</span><span class="number">-9</span>]+|<span class="number">0</span>x[<span class="number">0</span><span class="number">-9</span>a-fA-F]+</span><br><span class="line">word_float      [<span class="number">0</span><span class="number">-9</span>]+<span class="string">&quot;.&quot;</span>[<span class="number">0</span><span class="number">-9</span>]+</span><br><span class="line">word_id         [a-zA-Z_][a-zA-Z0<span class="number">-9</span>_]*</span><br><span class="line">word_char       \<span class="string">&#x27;.\&#x27;</span>|\<span class="string">&#x27;\\x[0-9a-fA-F]&#123;2&#125;\&#x27;</span></span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"><span class="string">&quot;int&quot;</span>                   &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;TYPE&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> TYPE; &#125;</span><br><span class="line"><span class="string">&quot;float&quot;</span>                 &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;TYPE&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> TYPE; &#125;</span><br><span class="line"><span class="string">&quot;char&quot;</span>                  &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;TYPE&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> TYPE; &#125;</span><br><span class="line"><span class="string">&quot;struct&quot;</span>                &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;STRUCT&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> STRUCT; &#125;</span><br><span class="line"><span class="string">&quot;if&quot;</span>                    &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;IF&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> IF; &#125;</span><br><span class="line"><span class="string">&quot;else&quot;</span>                  &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;ELSE&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> ELSE; &#125;</span><br><span class="line"><span class="string">&quot;while&quot;</span>                 &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;WHILE&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> WHILE; &#125;</span><br><span class="line"><span class="string">&quot;return&quot;</span>                &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;RETURN&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> RETURN; &#125;</span><br><span class="line">&#123;word_int&#125;              &#123;yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;INT&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> INT;&#125;</span><br><span class="line">&#123;word_id&#125;               &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;ID&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> ID; &#125;</span><br><span class="line">&#123;word_char&#125;             &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;CHAR&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> CHAR; &#125;</span><br><span class="line">&#123;word_float&#125;            &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;FLOAT&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> FLOAT; &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;.&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;DOT&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> DOT; &#125;</span><br><span class="line"><span class="string">&quot;;&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;SEMI&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> SEMI; &#125;</span><br><span class="line"><span class="string">&quot;,&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;COMMA&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> COMMA; &#125;</span><br><span class="line"><span class="string">&quot;=&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;ASSIGN&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> ASSIGN; &#125;</span><br><span class="line"><span class="string">&quot;&lt;&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;LT&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> LT; &#125;</span><br><span class="line"><span class="string">&quot;&gt;&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;GT&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> GT; &#125;</span><br><span class="line"><span class="string">&quot;&lt;=&quot;</span>                    &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;LE&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> LE; &#125;</span><br><span class="line"><span class="string">&quot;&gt;=&quot;</span>                    &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;GE&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> GE; &#125;</span><br><span class="line"><span class="string">&quot;!=&quot;</span>                    &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;NE&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> NE; &#125;</span><br><span class="line"><span class="string">&quot;==&quot;</span>                    &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;EQ&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> EQ; &#125;</span><br><span class="line"><span class="string">&quot;+&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;PLUS&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> PLUS; &#125;</span><br><span class="line"><span class="string">&quot;-&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;MINUS&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> MINUS; &#125;</span><br><span class="line"><span class="string">&quot;*&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;MUL&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> MUL; &#125;</span><br><span class="line"><span class="string">&quot;/&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;DIV&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> DIV; &#125;</span><br><span class="line"><span class="string">&quot;&amp;&amp;&quot;</span>                    &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;AND&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> AND; &#125;</span><br><span class="line"><span class="string">&quot;||&quot;</span>                    &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;OR&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> OR; &#125;</span><br><span class="line"><span class="string">&quot;!&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;NOT&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> NOT; &#125;</span><br><span class="line"><span class="string">&quot;(&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;LP&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> LP; &#125;</span><br><span class="line"><span class="string">&quot;)&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;RP&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> RP; &#125;</span><br><span class="line"><span class="string">&quot;[&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;LB&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> LB; &#125;</span><br><span class="line"><span class="string">&quot;]&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;RB&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> RB; &#125;</span><br><span class="line"><span class="string">&quot;&#123;&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;LC&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> LC; &#125;</span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>                     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;RC&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>);<span class="keyword">return</span> RC; &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;//&quot;</span>.*$                 &#123; <span class="comment">/* ignore comments */</span> &#125;</span><br><span class="line"><span class="string">&quot;/*&quot;</span>([^*]|[*][^/]|[*][*]+[^*/])*<span class="string">&quot;*/&quot;</span>    &#123; <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(yytext); i++) <span class="keyword">if</span> (yytext[i] == <span class="string">&#x27;\n&#x27;</span>) line++; &#125;</span><br><span class="line">[ \t\r]+                &#123; <span class="comment">/* ignore whitespace */</span> &#125;</span><br><span class="line"><span class="string">&quot;\n&quot;</span>    &#123;line++;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>x([<span class="number">0</span><span class="number">-9</span>a-fA-F]|[g-zG-Z])+     &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;ILLEGAL_HEX_INT&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>); <span class="keyword">return</span> ILLEGAL_HEX_INT; &#125;</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>]&#123;word_id&#125;          &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;ILLEGAL_ID&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>); <span class="keyword">return</span> ILLEGAL_ID; &#125;</span><br><span class="line"><span class="string">&#x27;\\x.*&#x27;</span>                 &#123; yylval.node=<span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;ILLEGAL_CHAR&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>); <span class="keyword">return</span> ILLEGAL_CHAR; &#125;</span><br><span class="line">.                       &#123; yylval.node = <span class="built_in">new_Node</span>(<span class="number">1</span>,<span class="string">&quot;ILLEGAL&quot;</span>,yytext,line,<span class="literal">NULL</span>,<span class="literal">NULL</span>); <span class="keyword">return</span> ILLEGAL; &#125;</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>syntax.y</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lex.yy.c&quot;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">yyerror</span><span class="params">()</span></span>;</span><br><span class="line">    Node* result=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%<span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Head</span>* node; <span class="comment">/*&quot;struct&quot; is indispensable*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%token &lt;node&gt; ID INT FLOAT CHAR STRUCT RETURN IF ELSE WHILE PLUS MINUS MUL DIV AND OR LT LE GT GE NE EQ NOT ASSIGN TYPE LP RP LB RB LC RC SEMI COMMA DOT ILLEGAL ILLEGAL_ID ILLEGAL_HEX_INT ILLEGAL_CHAR</span><br><span class="line">%type &lt;node&gt; Program ExtDefList ExtDef ExtDecList Specifier StructSpecifier VarDec FunDec VarList ParamDec CompSt StmtList Stmt DefList Def DecList Dec Exp Args</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">Program: ExtDefList &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Program&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);result=$$;&#125;</span><br><span class="line"></span><br><span class="line">ExtDefList: ExtDef ExtDefList  &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDefList&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">          | <span class="comment">/* empty */</span>         &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;empty&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">100</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">ExtDef: Specifier ExtDecList SEMI   &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDef&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">      | Specifier ExtDecList error  &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing semicolon &#x27;;&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line);&#125;</span><br><span class="line">      | Specifier SEMI              &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDef&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">      | Specifier FunDec CompSt     &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDef&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">ExtDecList: VarDec                      &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDecList&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">           | VarDec COMMA ExtDecList    &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;ExtDecList&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">Specifier: TYPE                         &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Specifier&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">          | StructSpecifier             &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Specifier&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">StructSpecifier: STRUCT ID LC DefList RC    &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$<span class="number">3</span>-&gt;brother = $<span class="number">4</span>;$<span class="number">4</span>-&gt;brother = $<span class="number">5</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;StructSpecifier&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">               | STRUCT ID                  &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;StructSpecifier&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">VarDec: ID                              &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;VarDec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">       | ILLEGAL_ID error               &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: illegal identifier &#x27;%s&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line,$<span class="number">1</span>-&gt;id);&#125;</span><br><span class="line">       | VarDec LB INT RB               &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$<span class="number">3</span>-&gt;brother = $<span class="number">4</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;VarDec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">FunDec: ID LP VarList RP                &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$<span class="number">3</span>-&gt;brother = $<span class="number">4</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;FunDec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">       | ID LP RP                       &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;FunDec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">       | ID LP VarList error            &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing closing symbols &#x27;)&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line);&#125;  </span><br><span class="line">       | ID LP error                    &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing closing symbols &#x27;)&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line);&#125; </span><br><span class="line"></span><br><span class="line">VarList: ParamDec COMMA VarList         &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;VarList&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">        | ParamDec                      &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;VarList&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">ParamDec: Specifier VarDec              &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;ParamDec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">CompSt: LC DefList StmtList RC          &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$<span class="number">3</span>-&gt;brother = $<span class="number">4</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;CompSt&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">StmtList: Stmt StmtList                 &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;StmtList&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">         |Stmt Def StmtList error       &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: definition after statement\n&quot;</span>, $<span class="number">2</span>-&gt;line);&#125;</span><br><span class="line">         | <span class="comment">/* empty */</span>                  &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;empty&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">100</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">Stmt: Exp SEMI                          &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | CompSt                            &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | RETURN Exp SEMI                   &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | RETURN Exp error                  &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing semicolon &#x27;;&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line);&#125;     </span><br><span class="line">    | IF LP Exp RP Stmt                 &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$<span class="number">3</span>-&gt;brother = $<span class="number">4</span>;$<span class="number">4</span>-&gt;brother = $<span class="number">5</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | IF LP Exp RP Stmt ELSE Stmt       &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$<span class="number">3</span>-&gt;brother = $<span class="number">4</span>;$<span class="number">4</span>-&gt;brother = $<span class="number">5</span>;$<span class="number">5</span>-&gt;brother = $<span class="number">6</span>;$<span class="number">6</span>-&gt;brother = $<span class="number">7</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | WHILE LP Exp RP Stmt              &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$<span class="number">3</span>-&gt;brother = $<span class="number">4</span>;$<span class="number">4</span>-&gt;brother = $<span class="number">5</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Stmt&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">DefList: Def DefList                    &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;DefList&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">        | <span class="comment">/* empty */</span>                   &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;empty&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">100</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">Def: Specifier DecList SEMI             &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Def&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Specifier DecList error           &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing semicolon &#x27;;&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line);&#125;</span><br><span class="line"></span><br><span class="line">DecList: Dec                            &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;DecList&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">        | Dec COMMA DecList             &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;DecList&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">Dec: VarDec                             &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Dec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | VarDec ASSIGN Exp                 &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Dec&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">Exp: Exp ASSIGN Exp                     &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp AND Exp                       &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp OR Exp                        &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;    </span><br><span class="line">    | Exp LT Exp                        &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;    </span><br><span class="line">    | Exp LE Exp                        &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;    </span><br><span class="line">    | Exp GT Exp                        &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp GE Exp                        &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp NE Exp                        &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp EQ Exp                        &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp PLUS Exp                      &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp MINUS Exp                     &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp MUL Exp                       &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp DIV Exp                       &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | LP Exp RP                         &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | LP Exp error                      &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing closing symbols &#x27;)&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line);&#125;</span><br><span class="line">    | MINUS Exp                         &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | NOT Exp                           &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;  </span><br><span class="line">    | ID LP Args RP                     &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$<span class="number">3</span>-&gt;brother = $<span class="number">4</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | ID LP Args error                  &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type B at line %d: missing closing symbols &#x27;)&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line);&#125;</span><br><span class="line">    | ID LP RP                          &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp LB Exp RB                     &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$<span class="number">3</span>-&gt;brother = $<span class="number">4</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | Exp DOT ID                        &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | ID                                &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | INT                               &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | FLOAT                             &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | CHAR                              &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">    | ILLEGAL error                     &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: illegal character &#x27;%s&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line,$<span class="number">1</span>-&gt;id);&#125;</span><br><span class="line">    | ILLEGAL_HEX_INT error             &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: illegal hexadecimal integer &#x27;%s&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line,$<span class="number">1</span>-&gt;id);&#125;</span><br><span class="line">    | ILLEGAL_CHAR error                &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: illegal hex_character &#x27;%s&#x27;\n&quot;</span>, $<span class="number">1</span>-&gt;line,$<span class="number">1</span>-&gt;id);&#125;</span><br><span class="line">    | Exp ILLEGAL Exp error             &#123;<span class="built_in">printf</span>(<span class="string">&quot;Error type A at line %d: illegal operator &#x27;%s&#x27;\n&quot;</span>, $<span class="number">2</span>-&gt;line,$<span class="number">2</span>-&gt;id);&#125;</span><br><span class="line"></span><br><span class="line">Args: Exp COMMA Args                    &#123;$<span class="number">1</span>-&gt;brother = $<span class="number">2</span>;$<span class="number">2</span>-&gt;brother = $<span class="number">3</span>;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Args&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line">     | Exp                              &#123;$$=<span class="built_in">new_Node</span>(<span class="number">0</span>,<span class="string">&quot;Args&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,$<span class="number">1</span>,<span class="literal">NULL</span>);&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">yyerror</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Usage: %s &lt;file_path&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(yyin = <span class="built_in">fopen</span>(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>))) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">yyparse</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">print_tree</span>(result,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">FLEX=flex</span><br><span class="line">BISON=bison</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">.lex: lex.l</span></span><br><span class="line">	<span class="variable">$(FLEX)</span> lex.l</span><br><span class="line"><span class="section">.syntax: syntax.y</span></span><br><span class="line">	<span class="variable">$(BISON)</span> -t -d syntax.y</span><br><span class="line"><span class="section">bplc: .lex .syntax</span></span><br><span class="line">	<span class="variable">$(CC)</span> syntax.tab.c -lfl -ly -o bplc.out</span><br><span class="line">	@mkdir bin</span><br><span class="line">	touch bin/bplc</span><br><span class="line">	@chmod +x bin/bplc</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	@rm -f lex.yy.c syntax.tab.* *.out</span><br><span class="line">	@rm -rf bin/</span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: bplc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>bplc_test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DATA = pathlib.Path(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jsonparser_output</span>(<span class="params">json_file</span>):</span><br><span class="line">    out = subprocess.check_output([<span class="string">&#x27;./bplc.out&#x27;</span>, json_file])</span><br><span class="line">    <span class="keyword">return</span> out.decode().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_jsonchecker_fail_syntaxonly</span>():</span><br><span class="line">    data = DATA</span><br><span class="line">    <span class="keyword">for</span> bplfile <span class="keyword">in</span> data.glob(<span class="string">&#x27;*.bpl&#x27;</span>):</span><br><span class="line">        out = jsonparser_output(bplfile)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;For file <span class="subst">&#123;bplfile.name&#125;</span>:&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(out)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">60</span>)</span><br><span class="line">        subfolder_name = <span class="string">&quot;out&quot;</span></span><br><span class="line">        temp=bplfile.name[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">        file_name = <span class="string">f&quot;./<span class="subst">&#123;subfolder_name&#125;</span>/&quot;</span>+temp+<span class="string">&quot;.out&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># check_jsonchecker_fail_withlexical()</span></span><br><span class="line">check_jsonchecker_fail_syntaxonly()</span><br></pre></td></tr></table></figure>



<p>README.md</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># project1实验说明</span></span><br><span class="line"></span><br><span class="line">该项目中完成了词法分析器和语法分析器的编写，可以通过终端指令实现bplc的编译和运行。</span><br><span class="line"></span><br><span class="line"><span class="section">## 生成`bplc.out`文件</span></span><br><span class="line"></span><br><span class="line">生成指令</span><br><span class="line"></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">make bplc</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">成功运行后会反馈以下信息</span><br><span class="line"></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">flex lex.1</span></span><br><span class="line"><span class="code">bison -t -d syntax.y</span></span><br><span class="line"><span class="code">syntax.y: warning: 241 shift/reduce conflicts [-Wconflicts-sr]</span></span><br><span class="line"><span class="code">gcc syntax.tab.c -1f1 -ly -o bplc.out</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">并在根目录下生成<span class="code">`bplc.out`</span>文件</span><br><span class="line"></span><br><span class="line"><span class="section">## 运行编译检测功能</span></span><br><span class="line"></span><br><span class="line">执行python指令一键运行</span><br><span class="line"></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">python3 bplc_test.py</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line">运行结果会在终端反馈生成树和报错信息，并将每个文件的反馈信息以<span class="code">`.out`</span>的形式保存在<span class="code">`\out`</span>目录下</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>花指令及加密算法程序解flag</title>
    <url>/2023/08/04/Information_Security_Experiment/assembler_language/AL3/</url>
    <content><![CDATA[<p><strong>实验过程：</strong></p>
<p>这里0040105E指向转跳到401060+1，而401060又有转跳指令，说明这里指令存在错误，有花指令。并且是<em><strong>*jmp型花指令*</strong></em></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps23-1691140202258-5.jpg" alt="img"> </p>
<p>更改401060的前两个字符为90。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps24-1691140202258-1.jpg" alt="img"> </p>
<p>改完后可以按空格查看流程图。说明更改正确。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps25-1691140202258-4.jpg" alt="img"> </p>
<p>流程图中这里有一个add的单独指令，怀疑存在问题</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps26-1691140202258-2.jpg" alt="img"> </p>
<p>检查原指令栈情况，发现后续栈有问题</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps27-1691140202258-3.jpg" alt="img"> </p>
<p>将add esp，30 h  Nop掉</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps28-1691140202258-6.jpg" alt="img"> </p>
<p>在这里可以看出来将buffer数组每一位都异或1Dh(加密)</p>
<p>加密后将将command也就是下一层加密代码的地址压入栈</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps29-1691140202258-10.jpg" alt="img"> </p>
<p>编辑解密脚本</p>
<p>#include &lt;idc.idc&gt;</p>
<p>static xor_setp1(){</p>
<p>  auto addr &#x3D; 0x00403054;  &#x2F;&#x2F;这里填入要解密字节串的起始地址</p>
<p>  auto i &#x3D; 0;</p>
<p>  for(i&#x3D;0;addr+i&lt;0x004030DF;i++)  &#x2F;&#x2F;循环结束的条件为字节串的结束地址</p>
<p>  {</p>
<p>​    PatchByte(addr+i,Byte(addr+i)^0x1D);  &#x2F;&#x2F;异或的数字根据情况修改</p>
<p>  }</p>
<p>}</p>
<p>static main()</p>
<p>{</p>
<p>​	xor_setp1();</p>
<p>}</p>
<p>进行解密</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps30-1691140202258-7.jpg" alt="img"> </p>
<p>按快捷键C将字符串转换为汇编语言</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps31-1691140202258-9.jpg" alt="img"> </p>
<p>保存成新文件后打开，寻找加密模块</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps32-1691140202259-12.jpg" alt="img"> </p>
<p>其中a1为输入字符串。</p>
<p>If语句中解出第三位为a，四、七位为i，第八位为n，十一位为o</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps33-1691140202258-8.jpg" alt="img"> </p>
<p>while函数进行判断</p>
<p>“,VEJ”和a2^a1[x]做比对</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps34-1691140202259-11.jpg" alt="img"> </p>
<p>找到a2内容</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps35-1691140202259-14.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps36-1691140202259-15.jpg" alt="img"> </p>
<p>追踪到a2就是1D，解出密钥a1[0]&#x3D;1 a1[2]&#x3D;K a1[6]&#x3D;X a1[10]&#x3D;W</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps37-1691140202259-13.jpg" alt="img"> </p>
<p>在main函数中找到一个异常处理</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps38-1691140202259-17.jpg" alt="img"> </p>
<p>在except中可以看到转跳函数</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps39-1691140202259-16.jpg" alt="img"> </p>
<p>因此需要触发异常</p>
<p>异常为除零异常，当输入为12位时触发</p>
<p>进入异常后F5查看伪代码</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps40-1691140202259-18.jpg" alt="img"> </p>
<p>得知byte_4031D5是输入的一部分</p>
<p>要求输入第二位、第六位、第十位为“_”</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps41-1691140202259-19.jpg" alt="img"> </p>
<p>byte_4031E1 &#x3D; ‘_’+‘_’+‘_’&#x3D;1D（取低两位）</p>
<p>这也是之前用1D异或的原因</p>
<p>解得输入应为1_Kai_Xin_Wo</p>
<p><em><strong>*问题-1*</strong></em><em><strong>*：程序中一共有2处花指令干扰，分别是哪一种类型的花指令？*</strong></em></p>
<p><em><strong>*– 提示：结合动态调试，查看出现异常处的实际执行流程&#x2F;跳转情况；判断是不是为”永恒跳转“*</strong></em></p>
<p>第一处是jmp型花指令</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps42-1691140202259-20.jpg" alt="img">第二处是栈干扰指令</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps43-1691140202259-24.jpg" alt="img"> </p>
<p><em><strong>*问题-2*</strong></em><em><strong>*：程序中一共有两处异常处理，分别是哪一种？*</strong></em></p>
<p><em><strong>*– 提示：x32dbg 动态调试除零异常时，可通过在寄存器窗口修改除数对应的寄存器的值为0，来无条件触发*</strong></em></p>
<p><em><strong>*– 提示：注意审视对 SEH 的潜在 “惯性思维”，认为 它一定是“除零”，以及程序核心功能就一定藏 exception 处理里*</strong></em></p>
<p>第一处是除零异常</p>
<p>可以再try块中看到特征idiv语句</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps44-1691140202259-21.jpg" alt="img"> </p>
<p>第二处是判断输入异常</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps45-1691140202259-22.jpg" alt="img"> </p>
<p><em><strong>*问题-3*</strong></em><em><strong>*：程序使用了何种加密算法？在程序中总共使用了几次？各自用于实现什么目的？*</strong></em></p>
<p>使用了异或加密</p>
<ol>
<li>在主函数中对buffer加密</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps46-1691140202259-23.jpg" alt="img"> </p>
<p>实现对反编译的干扰，无法直接读取汇编代码内容</p>
<ol start="2">
<li>在处理输入flag时进行加密</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps47-1691140202259-25.jpg" alt="img"> </p>
<p><em><strong>*问题-4*</strong></em><em><strong>*：画出程序的算法流程图，给出输入正确f FLAG 时的 CMD 运行窗口截图*</strong></em></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps48-1691140202259-26.jpg" alt="img"> </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps49-1691140202259-27.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>23年汇编期末考试答案（个人答案）</title>
    <url>/2023/08/04/Information_Security_Experiment/assembler_language/AL4/</url>
    <content><![CDATA[<h1 id="一-题目1-本题20"><a href="#一-题目1-本题20" class="headerlink" title="(一) 题目1 (本题20&#96;)"></a><strong>(一)</strong> 题目1 (本题20&#96;)</h1><p>（前3步分析过程不停的掉到坑里，有好多分析是无用的，请简略看）</p>
<p>1.查看exe文件运行情况</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps50.jpg" alt="img"> </p>
<p>2.ida分析，查看结构图有无报红花指令报错，找main0，F5看伪代码</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps51.jpg" alt="img"> </p>
<ol start="3">
<li>密钥必须为18位</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps52-1691140441091-1.jpg" alt="img"> </p>
<ol start="4">
<li>发现有一个除零异常，先不管往后看</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps53-1691140441091-3.jpg" alt="img"> </p>
<ol start="5">
<li>看见加密模块，解析加密算法</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps54-1691140441091-2.jpg" alt="img"> </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps55-1691140441091-5.jpg" alt="img"> </p>
<p>依照次加密循环，只需将加密后密文加密两次就可以得到明文。</p>
<p>及efabcdgh-&gt;cdefabgh-&gt;abcdefgh。</p>
<ol start="6">
<li>回头看异常处理部分，动调看一下处理情况</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps56-1691140441091-4.jpg" alt="img"> </p>
<p>发现处理完后并不会回到程序继续运行，因此加密函数并不会使用主函数的后续功能，说明前面推导错误浪费了时间，真的模块在异常处理当中。</p>
<ol start="7">
<li>找到除零异常位置4012139</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps57-1691140441091-6.jpg" alt="img"> </p>
<ol start="8">
<li>在x32中下断点</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps58-1691140441091-7.jpg" alt="img"> </p>
<p>随便输入18位输入数据，动调找seh链，转跳到断点后看seh模块</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps59-1691140441091-8.jpg" alt="img"> </p>
<p>401005为自己设定的异常处理，回到ida找该处理模块。其他的异常不用管</p>
<ol start="9">
<li>追入模块内部</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps60-1691140441091-11.jpg" alt="img"> </p>
<p>追入sub_401020</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps61-1691140441091-13.jpg" alt="img"> </p>
<p>发现真正的加密模块。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps62-1691140441091-9.jpg" alt="img"> </p>
<p>&amp;3是和0011做异或，0x0C&#x3D;0000 1100,0xF0&#x3D;11110000所以有对每位char型的8比特值进行二进制操作</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps63-1691140441091-14.jpg" alt="img"> </p>
<p>按道理只需要将密文迭代三次可以得到原flag</p>
<p>10.byte_429A30就是密文信息</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps64-1691140441091-10.jpg" alt="img"> </p>
<p>复制密文信息  D5 96 C4 F6 07 45 57 77 76 E5 F6 48 47 F7 48 17</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps65-1691140441091-12.jpg" alt="img"> </p>
<p>11.下断点开始动调</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps66-1691140441091-18.jpg" alt="img"> </p>
<p>修改输入信息为密文</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps67-1691140441091-15.jpg" alt="img"> </p>
<p>步进后得到第一次加密结果 密文1：5D D9 9C 6F E0 A4 75 B7 B7 BE 00 C5 C5 10 95 92</p>
<ol start="12">
<li>重复以上步骤2次</li>
</ol>
<p>密文2：75 AD B9 87 1E 6A E7 BB FB DC 00 C5 C5 10 95 92</p>
<p>明文：57 BA EB A8 82 F6 7E 8C C0 5E 00 C5 C5 10 95 92</p>
<ol start="13">
<li>解不出来。原来是落下一步，还要先和序列号相加，前面的计算又浪费了</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps68-1691140441091-17.jpg" alt="img"> </p>
<p>那就手算吧</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps69-1691140441091-16.jpg" alt="img"> </p>
<p>根据加密过程可知逆运算需要：</p>
<p>高两位右移6位，中两位右移2位，低四位左移5位</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps70-1691140441091-19.jpg" alt="img"> </p>
<p>得到明文 57 65 41 6C 6C 4C 6F 76 65 52 65 76 65 72 73 65</p>
<p>小工具助我一臂之力：WeAllLoveReverse</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps71-1691140441092-23.jpg" alt="img"> </p>
<ol start="14">
<li>得到flag：WeAllLoveReverseXX，后两位任意</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps72-1691140441092-22.jpg" alt="img"> </p>
<h1 id="二-题目2-本题20"><a href="#二-题目2-本题20" class="headerlink" title="(二) 题目2 (本题20&#96;)"></a><strong>(二)</strong> 题目2 (本题20&#96;)</h1><p>1.查看exe文件运行情况</p>
<p>2.ida分析，查看结构图有无报红花指令报错，找main0，F5看伪代码，将比对数按R更改成字符</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps73-1691140441092-25.jpg" alt="img"> </p>
<p>可以看出来是一个a*x+b的仿射加密，但是区间范围改成了A~Y，是魔改的仿射。</p>
<p>其中a&#x3D;2,b&#x3D;7</p>
<ol start="3">
<li>找到密文Str2</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps74-1691140441092-20.jpg" alt="img"> </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps75-1691140441092-21.jpg" alt="img"> </p>
<p>密文是 HIPHSFUPSU</p>
<ol start="4">
<li>放入破译脚本中进行破解</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps76-1691140441092-28.jpg" alt="img"> </p>
<p>得到flag：ANEASYTEST</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps77-1691140441092-27.jpg" alt="img"> </p>
<h1 id="三-题目3-本题20"><a href="#三-题目3-本题20" class="headerlink" title="(三) 题目3 (本题20&#96;)"></a><strong>(三)</strong> 题目3 (本题20&#96;)</h1><p>1.查看exe文件运行情况</p>
<p>2.ida分析，查看结构图有无报红花指令报错，找main0，F5看伪代码</p>
<p>看不见输入函数部分，但是有个sub_401005</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps78-1691140441092-24.jpg" alt="img"> </p>
<p>追入sub_401005查看发生了什么</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps79-1691140441092-26.jpg" alt="img"> </p>
<p>继续追</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps80-1691140441092-30.jpg" alt="img"> </p>
<p>可以看出来这是一个文件的hook并不影响代码，因为考试原因不详细分析，知道这个函数实现了字符串输入，并最终把字符串传入了内存Str</p>
<ol start="3">
<li>分析加密部分</li>
</ol>
<p>Str为输入内容</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps81-1691140441092-29.jpg" alt="img"> </p>
<p>实现了两次异或加密。最后与密文相比对，其中输入必须为10字符。</p>
<p>由于异或的加解密相同，不管异或多少次，都可以用密文通过运行得到明文。</p>
<ol start="4">
<li>抓密文去喽</li>
</ol>
<p>格式不对？AU快捷键改一下</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps82-1691140441092-31.jpg" alt="img"> </p>
<p>抓到密文 RhSrppYzw,</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps83-1691140441092-33.jpg" alt="img"> </p>
<ol start="5">
<li>下断点开始计算明文，上图中断点已下好，断点下载比对加密后明文和密文的位置，运行到这里就已经加好密了</li>
</ol>
<p>动调输入密文，断点处查看内存中的加密结果就是明文</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps84-1691140441092-34.jpg" alt="img"> </p>
<ol start="6">
<li>抓到明文 IsHackBad?</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps85-1691140441092-32.jpg" alt="img"> </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps86-1691140441092-35.jpg" alt="img"> </p>
<ol start="7">
<li>验证</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps87-1691140441092-36.jpg" alt="img"> </p>
<h1 id="四-题目4-本题20"><a href="#四-题目4-本题20" class="headerlink" title="(四) 题目4 (本题20&#96;)"></a><strong>(四)</strong> 题目4 (本题20&#96;)</h1><p>1.查看exe文件运行情况</p>
<p>2.ida分析，查看结构图有无报红花指令报错，找main0，F5看伪代码</p>
<p>很明显的结构，输入固定8位，经算法后比对结果。那么算法就在sub_40100F或sub_401032中</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps88-1691140441092-37.jpg" alt="img"> </p>
<ol start="3">
<li>追入sub_40100F找加密算法</li>
</ol>
<p>函数很复杂，一层套一层，感觉不想简单的加密，应该属于DES&#x2F;MD5&#x2F;RC4&#x2F;SHA当中的了</p>
<p>开始找特征值，看见有48，还有Src[48]，很像DES的加密密钥嗷</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps89-1691140441092-39.jpg" alt="img"> </p>
<ol start="4">
<li>追入sub_401032找加密算法</li>
</ol>
<p>都是和48位密钥的操作，判断是des</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps90-1691140441092-41.jpg" alt="img"> </p>
<ol start="5">
<li>尝试动调对密码加密得到flag但是失败了，不过找到了密文</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps91-1691140441092-38.jpg" alt="img"> </p>
<p>密文为42 AC 43 D3 F1 44 B1 36</p>
<p>可以看出来V7就是密钥</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps92-1691140441092-40.jpg" alt="img"> </p>
<ol start="6">
<li>不能偷懒，还是用脚本老老实实破解吧</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps93-1691140441092-42.jpg" alt="img"> </p>
<p>破解flag 1_L0V5_@</p>
<ol start="7">
<li>验证</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps94-1691140441092-43.jpg" alt="img"> </p>
<h1 id="五-题目5-本题20"><a href="#五-题目5-本题20" class="headerlink" title="(五) 题目5 (本题20&#96;)"></a><strong>(五)</strong> 题目5 (本题20&#96;)</h1><ol>
<li>查看exe文件运行情况</li>
</ol>
<p>这道题还多了个提示，看起来应该很复杂</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps95-1691140441092-45.jpg" alt="img"> </p>
<ol start="2">
<li>ida分析，查看结构图有无报红花指令报错，找main0，F5看伪代码</li>
</ol>
<p>都是定义信息，看来加密内容应该在三个sub函数当中</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps96-1691140441092-46.jpg" alt="img"> </p>
<ol start="3">
<li>从sub_401028开始看</li>
</ol>
<p>该函数说明输入必须为6位，并返回了一个新函数，输入内容在主函数中为Source，不再是Str</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps97-1691140441092-44.jpg" alt="img"> </p>
<ol start="4">
<li>追入sub_40100A</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps98-1691140441092-48.jpg" alt="img"> </p>
<p>这一步实现了一个置换，让Str即初始输入变成逆序，返回结果result&#x3D;3</p>
<ol start="5">
<li>看函数sub_40100F</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps99-1691140441092-50.jpg" alt="img"> </p>
<p>给Str传入输入信息，但是只传了前四位，就是原flag的后四位</p>
<ol start="6">
<li>继续追入</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps100-1691140441092-47.jpg" alt="img"> </p>
<p>似曾相识的结构，追入函数查看</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps101-1691140441092-49.jpg" alt="img"> </p>
<p>这不是sha256的密钥输入嘛</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps102-1691140441092-51.jpg" alt="img"> </p>
<p>可以判定第二个函数是对明文进行加密了</p>
<ol start="7">
<li>继续看第三个函数sub_401014，追入查看</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps103-1691140441092-53.jpg" alt="img"> </p>
<p>原来就是比对结果</p>
<p>Big_Numbers3_42AA30是hash的散列密钥 这么长的密钥串，更加确定是sha，md5的128位没有这么长</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps104-1691140441092-52.jpg" alt="img"> </p>
<ol start="8">
<li>破解脚本，启动！</li>
</ol>
<p>感谢老师的工具和提示</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps105-1691140441092-54.jpg" alt="img"> </p>
<ol start="9">
<li>分析以上过程，可知flag为6位，后四位是逆序的love，前两为随意小写字母</li>
</ol>
<p>得到flag xxevol</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps106.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>包用包对的汇编破译小脚本</title>
    <url>/2023/08/04/Information_Security_Experiment/assembler_language/AL5/</url>
    <content><![CDATA[<h1 id="放射加密"><a href="#放射加密" class="headerlink" title="放射加密"></a>放射加密</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">affine_decrypt</span>(<span class="params">ciphertext, a, b, dictionary</span>):</span><br><span class="line">    decrypted = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext:</span><br><span class="line"></span><br><span class="line">        char_index = dictionary.index(char)</span><br><span class="line">        <span class="comment"># 计算字符的模逆</span></span><br><span class="line">        char_inverse = mod_inverse(a, <span class="built_in">len</span>(dictionary))</span><br><span class="line">        <span class="comment"># 应用仿射解密公式</span></span><br><span class="line">        decrypted_char_index = (char_inverse * (char_index - b)) % <span class="built_in">len</span>(dictionary)</span><br><span class="line">        decrypted += dictionary[decrypted_char_index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod_inverse</span>(<span class="params">a, m</span>):</span><br><span class="line">    <span class="comment"># 扩展欧几里得算法求模逆</span></span><br><span class="line">    g, x, _ = extended_gcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extended_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gcd, x, y = extended_gcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> gcd, y - (b // a) * x, x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义字典</span></span><br><span class="line">dictionary = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXY&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入密文和仿射加密的参数</span></span><br><span class="line">ciphertext = <span class="string">&quot;HIPHSFUPSU&quot;</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plaintext = affine_decrypt(ciphertext, a, b, dictionary)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;明文:&quot;</span>, plaintext)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="ASCII转码"><a href="#ASCII转码" class="headerlink" title="ASCII转码"></a>ASCII转码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hex_values = <span class="string">&quot;0x10, 0x2C, 0x02, 0xFC, 0xFB, 0x3B, 0x0D, 0x73, 0x6E, 0xBC, 0xB9, 0xA7, 0x6F, 0x2F &quot;</span></span><br><span class="line"></span><br><span class="line">hex_values_list = hex_values.split(<span class="string">&quot;, &quot;</span>)</span><br><span class="line"></span><br><span class="line">ascii_values = [<span class="built_in">int</span>(hex_value[:-<span class="number">1</span>], <span class="number">16</span>) <span class="keyword">for</span> hex_value <span class="keyword">in</span> hex_values_list]</span><br><span class="line"></span><br><span class="line">ascii_chars = [<span class="built_in">chr</span>(ascii_value) <span class="keyword">for</span> ascii_value <span class="keyword">in</span> ascii_values]</span><br><span class="line"></span><br><span class="line">ascii_representation = <span class="string">&#x27;&#x27;</span>.join(ascii_chars)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ASCII representation:&quot;</span>, ascii_representation)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">byte_sequence = <span class="string">b&quot;\x10\x2C\x02\xFC\xFB\x3B\x0D\x73\x6E\xBC\xB9\xA7\x6F\x2F&quot;</span></span><br><span class="line">string_representation = byte_sequence.decode(<span class="string">&#x27;ascii&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串表示:&quot;</span>, string_representation)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="des"><a href="#des" class="headerlink" title="des"></a>des</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_int</span>(<span class="params">hex_str</span>):</span><br><span class="line">    hex_str = hex_str.replace(<span class="string">&quot;h&quot;</span>, <span class="string">&quot;&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(hex_str, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    backend = default_backend()</span><br><span class="line">    cipher = Cipher(algorithms.TripleDES(key), modes.ECB(), backend=backend)</span><br><span class="line">    decryptor = cipher.decryptor()</span><br><span class="line">    plaintext = decryptor.update(ciphertext) + decryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line">ciphertext_str = <span class="string">&quot;42h,ACh,43h,D3h,F1h,44h,B1h,36h,&quot;</span></span><br><span class="line">key_str = <span class="string">&quot;23h, 24h, 31h, 32h, 2Ah, 26h, 5Eh, 29h,&quot;</span></span><br><span class="line"></span><br><span class="line">ciphertext_bytes = <span class="built_in">bytearray</span>(hex_to_int(x) <span class="keyword">for</span> x <span class="keyword">in</span> re.findall(<span class="string">r&#x27;[0-9a-fA-F]+&#x27;</span>, ciphertext_str))</span><br><span class="line">key_bytes = <span class="built_in">bytearray</span>(hex_to_int(x) <span class="keyword">for</span> x <span class="keyword">in</span> re.findall(<span class="string">r&#x27;[0-9a-fA-F]+&#x27;</span>, key_str))</span><br><span class="line"></span><br><span class="line">plaintext = des_decrypt(ciphertext_bytes, key_bytes)</span><br><span class="line">plaintext_str = plaintext.decode()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后的明文:&quot;</span>, plaintext_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">md5_hash = <span class="string">&quot;23d4a52c56357cb705137656744dc055&quot;</span>       <span class="comment">#散列值</span></span><br><span class="line">plaintext_length = <span class="number">4</span>                               <span class="comment">#明文长度</span></span><br><span class="line">charset = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>      <span class="comment">#字典 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 abcdefghijklmnopqrstuvwxyz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成所有可能的明文组合</span></span><br><span class="line">combinations = itertools.product(charset, repeat=plaintext_length)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试每个明文组合并进行MD5散列计算</span></span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> combinations:</span><br><span class="line">    plaintext = <span class="string">&quot;&quot;</span>.join(combination)</span><br><span class="line">    md5 = hashlib.md5(plaintext.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查计算的MD5散列值是否与给定的散列值匹配</span></span><br><span class="line">    <span class="keyword">if</span> md5 == md5_hash:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;解密成功！明文为:&quot;</span>, plaintext)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到匹配的明文。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    decrypted = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化S盒</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密数据</span></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> ciphertext:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        decrypted.append(byte ^ k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">ciphertext_str = <span class="string">&quot;1Bh, 0CAh, 0AEh, 0EFh, 1Eh, 95h, 4Bh, 0C2h, 0D5h, 0E3h, 33h, 76h, 4Fh, 0F9h, 4Fh, 0D2h, 0FCh, 60h&quot;</span></span><br><span class="line">ciphertext_bytes = <span class="built_in">bytearray</span>(<span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>), <span class="number">16</span>) <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> re.finditer(<span class="string">r&quot;([0-9A-Fa-f]+)h&quot;</span>, ciphertext_str))</span><br><span class="line"></span><br><span class="line">key_str = <span class="string">&quot;52h, 43h, 34h, 6Bh, 65h, 79h&quot;</span></span><br><span class="line">key_bytes = <span class="built_in">bytearray</span>(<span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>), <span class="number">16</span>) <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> re.finditer(<span class="string">r&quot;([0-9A-Fa-f]+)h&quot;</span>, key_str))</span><br><span class="line"></span><br><span class="line">plaintext = rc4_decrypt(ciphertext_bytes, key_bytes)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后的明文:&quot;</span>, plaintext.decode(<span class="string">&#x27;latin-1&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">hash_value = <span class="string">&quot;45c6c64ffd31a750bcb2e150519f1963e5424bafd380637cff33075c25d35334&quot;</span></span><br><span class="line">plaintext_length = <span class="number">4</span></span><br><span class="line">charset = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>  <span class="comment">#字典 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 abcdefghijklmnopqrstuvwxyz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_combinations</span>(<span class="params">length, charset</span>):</span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> charset:</span><br><span class="line">            <span class="keyword">for</span> combination <span class="keyword">in</span> generate_combinations(length - <span class="number">1</span>, charset):</span><br><span class="line">                <span class="keyword">yield</span> char + combination</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> generate_combinations(plaintext_length, charset):</span><br><span class="line">    hashed_combination = hashlib.sha256(combination.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> hashed_combination == hash_value:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Plaintext found:&quot;</span>, combination)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="XOR-异或"><a href="#XOR-异或" class="headerlink" title="XOR 异或"></a>XOR 异或</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">&quot;61h, 62h, 63h, 64h, 65h, 66h, 67h, 31h, 32h, 33h&quot;</span></span><br><span class="line">ciphertext = <span class="string">&quot;28h, 3Dh, 24h, 54h, 0Ah, 12h, 38h, 7Ah, 57h, 4Ah&quot;</span></span><br><span class="line"></span><br><span class="line">plaintext = plaintext.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">ciphertext = ciphertext.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">    hex_plain = re.sub(<span class="string">r&#x27;[^0-9a-fA-F]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, plaintext[i])</span><br><span class="line">    hex_cipher = re.sub(<span class="string">r&#x27;[^0-9a-fA-F]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, ciphertext[i])</span><br><span class="line">    decrypted = <span class="built_in">int</span>(hex_plain, <span class="number">16</span>) ^ <span class="built_in">int</span>(hex_cipher, <span class="number">16</span>)</span><br><span class="line">    result.append(<span class="built_in">chr</span>(decrypted))</span><br><span class="line"></span><br><span class="line">output = <span class="string">&quot;&quot;</span>.join(result)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>http、smtp抓包及分析实验</title>
    <url>/2023/07/30/Information_Security_Experiment/computer_network/CN1/</url>
    <content><![CDATA[<h1 id="一-实验内容"><a href="#一-实验内容" class="headerlink" title="一 实验内容"></a>一 实验内容</h1><p>1） 使用 Wireshark 软件捕获 HTTP 消息，分析其消息头，理解 HTTP 的通信原理； </p>
<p>2） 使用 Wireshark 软件捕获一次从客户端发送 Email 的过程，分析 SMTP 消息，理解 Email 系统中 </p>
<p>发送邮件的通信原理； </p>
<p>3）使用 Telnet 软件访问 Email 服务器，输入 SMTP 命令与 Email 服务器交互，理解 SMTP 的通信 </p>
<p>过程和 Base64 编码的概念。 </p>
<h1 id="二-实验报告"><a href="#二-实验报告" class="headerlink" title="二 实验报告"></a>二 实验报告</h1><p><strong>任务：</strong>本次实验主要通过Wireshark进行抓包，并对数据进行分析。随后使用Telnet访问Email 服务器。详细内容见实验内容部分。</p>
<p><strong>实验环境：</strong>win10系统、wireshark软件、telnet服务</p>
<p><strong>实验步骤：</strong></p>
<p>1下载并打开wireshark</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1-1690805315179-1.jpg" alt="img"> </p>
<p>2 启动 Wireshark，选择捕获接口为联网的本机网卡（本地连接或 WLAN），设置合适的捕获过滤器：对于 HTTP 消息，设置捕获过滤器为 tcp port 80</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2-1690805315179-2.jpg" alt="img"> </p>
<p>3 开始抓包后，访问<a href="http://www.xinhuanet.com,网页全部显示后停止捕获./">www.xinhuanet.com，网页全部显示后停止捕获。</a></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3-1690805315179-6.jpg" alt="img"> </p>
<p>4 筛选显示http协议</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4-1690805315179-8.jpg" alt="img"> </p>
<p>5 分析捕获到的消息</p>
<p>网页请求的 Get 消息</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5-1690805315179-3.jpg" alt="img"> </p>
<p>返回的 200 OK 应答消息</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6-1690805315179-4.jpg" alt="img"> </p>
<p>6 进行SMTP实验，下载Foxmail，配置发件服务器</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps7-1690805315179-5.jpg" alt="img"> </p>
<p>7 启动 Wireshark，选择捕获接口为联网的本机网卡（本地连接或 WLAN），设置合适的捕获过滤器：对于 SMTP 消息，设置捕获过滤器为 tcp port 25</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps8-1690805315179-7.jpg" alt="img"> </p>
<p>8 给自己发送邮件，捕获到协议数据</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps9-1690805315179-9.jpg" alt="img"> </p>
<p>9 停止捕获，分析数据</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps10-1690805315179-10.jpg" alt="img"> </p>
<p>10 进行邮件服务器交互实验</p>
<p>远程链接主机</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps11-1690805315179-11.jpg" alt="img"> </p>
<p>11 输入用户名和授权码，登录成功</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps12-1690805315179-12.jpg" alt="img"> </p>
<p>12 发送邮件成功并收到邮件</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps13-1690805315179-13.jpg" alt="img"> </p>
<p>HTTP 协议分析 </p>
<p>1） 根据捕获到的消息，对照讲义和教材，理解 HTTP 的功能和通信过程。</p>
<p>功能：建立客户端和服务器之间的连接，传输数据；定义客户端和服务器之间传输的数据格式；支持客户端向服务器请求数据，以及服务器向客户端提供数据；持不同类型的数据传输，如文本、图像、视频等；支持客户端和服务器之间的认证和安全性</p>
<p>通信过程：</p>
<p>建立连接：客户端与服务器之间通过 TCP&#x2F;IP 协议建立连接。</p>
<p>发送请求：客户端发送一个 HTTP 请求到服务器。</p>
<p>处理请求：服务器接收到客户端请求后，处理请求并返回一个响应消息给客户端。</p>
<p>关闭连接：在完成请求和响应之后，客户端和服务器之间的连接会被关闭。</p>
<p>2） 观察 HTTP 请求&#x2F;应答消息的各字段及消息头的内容，自己查找资料理解各消息头的功能，列表总结请求消息和应答消息中各字段及各消息头的功能及现有值的含义。 </p>
<table>
<thead>
<tr>
<th>来源</th>
<th>内容</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>网页请求的 Get 消息</td>
<td>[Expert Info (Chat&#x2F;sequence): GET &#x2F; HTTP&#x2F;1.1\r\n]</td>
<td>请求行</td>
</tr>
<tr>
<td>Host: <a href="http://www.xinhuanet.comlrin/">www.xinhuanet.comlrin</a></td>
<td>请求将要发送到的服务器主机名和端口号</td>
<td></td>
</tr>
<tr>
<td>User-Agent: Mozilla&#x2F;5.0</td>
<td>用户代理</td>
<td></td>
</tr>
<tr>
<td>Accept-Language: zh-CN,zh</td>
<td>通告哪些语言客户端是能够理解</td>
<td></td>
</tr>
<tr>
<td>Cookie:wdcid&#x3D;622352bc440b3475:arialoadData&#x3D;false:wdlast&#x3D;1680080588\nin</td>
<td>保持用户的登录状态</td>
<td></td>
</tr>
<tr>
<td>Connection: keep-alive</td>
<td>对 HTTP 连接进行说明</td>
<td></td>
</tr>
<tr>
<td>Cache-Control: max-age&#x3D;0</td>
<td>关于缓存的响应头</td>
<td></td>
</tr>
<tr>
<td>\r\n</td>
<td>表示消息结束</td>
<td></td>
</tr>
<tr>
<td>返回的 200 OK 应答消息</td>
<td>HTTP&#x2F;1.1 200 0K\r\n</td>
<td>状态行</td>
</tr>
<tr>
<td>Date: Wed，29 Mar 2923 99:06:18 GMT</td>
<td>消息发送的时间</td>
<td></td>
</tr>
<tr>
<td>Content-Length: 22611</td>
<td>告知数据的长度</td>
<td></td>
</tr>
<tr>
<td>Content-Tvpe: text&#x2F;html;charset&#x3D;utf-8</td>
<td>内容类型</td>
<td></td>
</tr>
<tr>
<td>Connection: keep-alive</td>
<td>对 HTTP 连接进行说明</td>
<td></td>
</tr>
<tr>
<td>Vary: Accept-Encoding</td>
<td>响应头部信息</td>
<td></td>
</tr>
<tr>
<td>Content-Encoding: gzip</td>
<td>对实体内容进行压缩编码</td>
<td></td>
</tr>
<tr>
<td>X-Cache: HIT from x-s-V-30\</td>
<td>代理动作</td>
<td></td>
</tr>
<tr>
<td>Accept-Ranges: bvtes</td>
<td>由服务器使用以通告其支持部分请求的标志物</td>
<td></td>
</tr>
<tr>
<td>\r\n</td>
<td>表示消息结束</td>
<td></td>
</tr>
</tbody></table>
<h1 id="三-SMTP-协议分析"><a href="#三-SMTP-协议分析" class="headerlink" title="三 SMTP 协议分析"></a>三 SMTP 协议分析</h1><p>1） 根据捕获到的消息，对照讲义和教材，理解 SMTP 的功能和通信过程。</p>
<p>功能：1 发送电子邮件。SMTP协议定义了如何将邮件从发件人传输到收件人的过程，包括邮件格式、编码方式、协议命令和参数等。</p>
<p>2 转发电子邮件。SMTP协议不仅可以将邮件从发送者传输到接收者，也可以将邮件从一个SMTP服务器传输到另一个SMTP服务器，实现邮件的转发功能。</p>
<p>通信过程</p>
<p>邮件客户端向SMTP服务器发送连接请求；</p>
<p>SMTP服务器对连接请求进行确认，并欢迎邮件客户端；</p>
<p>邮件客户端发送邮件发送者的地址、收件人的地址以及邮件内容等信息给SMTP服务器；</p>
<p>SMTP服务器接收到邮件信息并进行处理；</p>
<p>SMTP服务器尝试将邮件传送给收件人所在的服务器；</p>
<p>收件人所在的SMTP服务器接收到邮件并进行处理；</p>
<p>SMTP服务器向邮件客户端发送邮件状态代码，表示邮件发送是否成功；</p>
<p>邮件客户端关闭与SMTP服务器的连接。</p>
<p>2） 观察 SMTP 命令消息和响应状态码，自己查资料理解命令和状态码的功能，并画出一次完整通信过程所对应的消息序列图。 </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps14-1690805315179-14.jpg" alt="img"> </p>
<p>由抓包可知，流程图为：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps15-1690805315179-15.jpg" alt="img"> </p>
<h1 id="四-实验结论和实验心得"><a href="#四-实验结论和实验心得" class="headerlink" title="四 实验结论和实验心得"></a>四 实验结论和实验心得</h1><p>问题1：虚拟机中不知道哪个是正在传输数据</p>
<p>解决把所有接口都选上</p>
<p>问题2：实验三无法完成一直报错:</p>
<p>解决：要在邮箱开启相应smtp服务，输入密码时输入授权时的编码</p>
<p>心得：本次实验让我更加了解了计算机网络，深入了解计算机网络典型的应用层协议——HTTP 和 SMTP。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>计算机网络实验</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>计算机网络实验</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言基础代码解读</title>
    <url>/2023/08/04/Information_Security_Experiment/assembler_language/AL6/</url>
    <content><![CDATA[<p>8080汇编手册数据传输指令</p>
<p>──────────────────────────────</p>
<p>它们在存贮器和寄存器、寄存器和输入输出端口之间传送数据。</p>
<h1 id="1。-通用数据传送指令。"><a href="#1。-通用数据传送指令。" class="headerlink" title="1。 通用数据传送指令。"></a><strong>1。 通用数据传送指令。</strong></h1><p>MOV 传送字或字节。</p>
<p>MOVSX 先符号扩展，再传送。</p>
<p>MOVZX 先零扩展，再传送。</p>
<p>PUSH 把字压入堆栈。</p>
<p>POP 把字弹出堆栈。</p>
<p>PUSHA 把AX，CX，DX，BX，SP，BP，SI，DI依次压入堆栈。</p>
<p>POPA 把DI，SI，BP，SP，BX，DX，CX，AX依次弹出堆栈。</p>
<p>PUSHAD 把EAX，ECX，EDX，EBX，ESP，EBP，ESI，EDI依次压入堆栈。</p>
<p>POPAD 把EDI，ESI，EBP，ESP，EBX，EDX，ECX，EAX依次弹出堆栈。</p>
<p>BSWAP 交换32位寄存器里字节的顺序</p>
<p>XCHG 交换字或字节。( 至少有一个操作数为寄存器，段寄存器不可作为操作数)</p>
<p>CMPXCHG 比较并交换操作数。( 第二个操作数必须为累加器AL&#x2F;AX&#x2F;EAX )</p>
<p>XADD 先交换再累加。( 结果在第一个操作数里 )</p>
<p>XLAT 字节查表转换。</p>
<p>── BX 指向一张 256 字节的表的起点， AL 为表的索引值 (0-255，即</p>
<p>0-FFH); 返回 AL 为查表结果。 ( [BX+AL]-&gt;AL )</p>
<p>2。 输入输出端口传送指令。</p>
<p>IN I&#x2F;O端口输入。 ( 语法: IN 累加器， {端口号│DX} )</p>
<p>OUT I&#x2F;O端口输出。 ( 语法: OUT {端口号│DX}，累加器 )</p>
<p>输入输出端口由立即方式指定时， 其范围是 0-255; 由寄存器 DX 指定时，</p>
<p>其范围是 0-65535。</p>
<p>3。 目的地址传送指令。</p>
<p>LEA 装入有效地址。</p>
<p>例: LEA DX，string ;把偏移地址存到DX。</p>
<p>LDS 传送目标指针，把指针内容装入DS。</p>
<p>例: LDS SI，string ;把段地址:偏移地址存到DS:SI。</p>
<p>LES 传送目标指针，把指针内容装入ES。</p>
<p>例: LES DI，string ;把段地址:偏移地址存到ES:DI。</p>
<p>LFS 传送目标指针，把指针内容装入FS。</p>
<p>例: LFS DI，string ;把段地址:偏移地址存到FS:DI。</p>
<p>LGS 传送目标指针，把指针内容装入GS。</p>
<p>例: LGS DI，string ;把段地址:偏移地址存到GS:DI。</p>
<p>LSS 传送目标指针，把指针内容装入SS。</p>
<p>例: LSS DI，string ;把段地址:偏移地址存到SS:DI。</p>
<p>4。 标志传送指令。</p>
<p>LAHF 标志寄存器传送，把标志装入AH。</p>
<p>SAHF 标志寄存器传送，把AH内容装入标志寄存器。</p>
<p>PUSHF 标志入栈。</p>
<p>POPF 标志出栈。</p>
<p>PUSHD 32位标志入栈。</p>
<p>POPD 32位标志出栈。</p>
<h1 id="二、算术运算指令"><a href="#二、算术运算指令" class="headerlink" title="二、算术运算指令"></a><strong>二、算术运算指令</strong></h1><p>──────────────────────────────</p>
<p>ADD 加法。</p>
<p>ADC 带进位加法。</p>
<p>INC 加 1。</p>
<p>AAA 加法的ASCII码调整。</p>
<p>DAA 加法的十进制调整。</p>
<p>SUB 减法。</p>
<p>SBB 带借位减法。</p>
<p>DEC 减 1。</p>
<p>NEC 求反(以 0 减之)。</p>
<p>CMP 比较。(两操作数作减法，仅修改标志位，不回送结果)。</p>
<p>AAS 减法的ASCII码调整。</p>
<p>DAS 减法的十进制调整。</p>
<p>MUL 无符号乘法。</p>
<p>IMUL 整数乘法。</p>
<p>以上两条，结果回送AH和AL(字节运算)，或DX和AX(字运算)，</p>
<p>AAM 乘法的ASCII码调整。</p>
<p>DIV 无符号除法。</p>
<p>IDIV 整数除法。</p>
<p>以上两条，结果回送:</p>
<p>商回送AL，余数回送AH， (字节运算);</p>
<p>或 商回送AX，余数回送DX， (字运算)。</p>
<p>AAD 除法的ASCII码调整。</p>
<p>CBW 字节转换为字。 (把AL中字节的符号扩展到AH中去)</p>
<p>CWD 字转换为双字。 (把AX中的字的符号扩展到DX中去)</p>
<p>CWDE 字转换为双字。 (把AX中的字符号扩展到EAX中去)</p>
<p>CDQ 双字扩展。 (把EAX中的字的符号扩展到EDX中去)</p>
<h1 id="三、逻辑运算指令"><a href="#三、逻辑运算指令" class="headerlink" title="三、逻辑运算指令"></a><strong>三、逻辑运算指令</strong></h1><p>────────────────────────────</p>
<p>AND 与运算。</p>
<p>OR 或运算。</p>
<p>XOR 异或运算。</p>
<p>NOT 取反。</p>
<p>TEST 测试。(两操作数作与运算，仅修改标志位，不回送结果)。</p>
<p>SHL 逻辑左移。</p>
<p>SAL 算术左移。(&#x3D;SHL)</p>
<p>SHR 逻辑右移。</p>
<p>SAR 算术右移。(&#x3D;SHR)</p>
<p>ROL 循环左移。</p>
<p>ROR 循环右移。</p>
<p>RCL 通过进位的循环左移。</p>
<p>RCR 通过进位的循环右移。</p>
<p>以上八种移位指令，其移位次数可达255次。</p>
<p>移位一次时， 可直接用操作码。 如 SHL AX，1。</p>
<p>移位&gt;1次时， 则由寄存器CL给出移位次数。</p>
<p>如 MOV CL，04</p>
<p>SHL AX，CL</p>
<h1 id="四、串指令"><a href="#四、串指令" class="headerlink" title="四、串指令"></a><strong>四、串指令</strong></h1><p>───────────────────────────</p>
<p>DS:SI 源串段寄存器 :源串变址。</p>
<p>ES:DI 目标串段寄存器:目标串变址。</p>
<p>CX 重复次数计数器。</p>
<p>AL&#x2F;AX 扫描值。</p>
<p>D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量。</p>
<p>Z标志 用来控制扫描或比较操作的结束。</p>
<p>MOVS 串传送。</p>
<p>( MOVSB 传送字符。 MOVSW 传送字。 MOVSD 传送双字。 )</p>
<p>CMPS 串比较。</p>
<p>( CMPSB 比较字符。 CMPSW 比较字。 )</p>
<p>SCAS 串扫描。</p>
<p>把AL或AX的内容与目标串作比较，比较结果反映在标志位。</p>
<p>LODS 装入串。</p>
<p>把源串中的元素(字或字节)逐一装入AL或AX中。</p>
<p>( LODSB 传送字符。 LODSW 传送字。 LODSD 传送双字。 )</p>
<p>STOS 保存串。</p>
<p>是LODS的逆过程。</p>
<p>REP 当CX&#x2F;ECX&lt;&gt;0时重复。</p>
<p>REPE&#x2F;REPZ 当ZF&#x3D;1或比较结果相等，且CX&#x2F;ECX&lt;&gt;0时重复。</p>
<p>REPNE&#x2F;REPNZ 当ZF&#x3D;0或比较结果不相等，且CX&#x2F;ECX&lt;&gt;0时重复。</p>
<p>REPC 当CF&#x3D;1且CX&#x2F;ECX&lt;&gt;0时重复。</p>
<p>REPNC 当CF&#x3D;0且CX&#x2F;ECX&lt;&gt;0时重复。</p>
<h1 id="五、程序转移指令"><a href="#五、程序转移指令" class="headerlink" title="五、程序转移指令"></a><strong>五、程序转移指令</strong></h1><p>──────────────────────────</p>
<p>1&gt;无条件转移指令 (长转移)</p>
<p>JMP 无条件转移指令</p>
<p>CALL 过程调用</p>
<p>RET&#x2F;RETF过程返回。</p>
<p>2&gt;条件转移指令 (短转移，-128到+127的距离内)</p>
<p>( 当且仅当(SF XOR OF)&#x3D;1时，OP1 JA&#x2F;JNBE 不小于或不等于时转移。</p>
<p>JAE&#x2F;JNB 大于或等于转移。</p>
<p>JB&#x2F;JNAE 小于转移。</p>
<p>JBE&#x2F;JNA 小于或等于转移。</p>
<p>以上四条，测试无符号整数运算的结果(标志C和Z)。</p>
<p>JG&#x2F;JNLE 大于转移。</p>
<p>JGE&#x2F;JNL 大于或等于转移。</p>
<p>JL&#x2F;JNGE 小于转移。</p>
<p>JLE&#x2F;JNG 小于或等于转移。</p>
<p>以上四条，测试带符号整数运算的结果(标志S，O和Z)。</p>
<p>JE&#x2F;JZ 等于转移。</p>
<p>JNE&#x2F;JNZ 不等于时转移。</p>
<p>JC 有进位时转移。</p>
<p>JNC 无进位时转移。</p>
<p>JNO 不溢出时转移。</p>
<p>JNP&#x2F;JPO 奇偶性为奇数时转移。</p>
<p>JNS 符号位为 “0” 时转移。</p>
<p>JO 溢出转移。</p>
<p>JP&#x2F;JPE 奇偶性为偶数时转移。</p>
<p>JS 符号位为 “1” 时转移。</p>
<p>3&gt;循环控制指令(短转移)</p>
<p>LOOP CX不为零时循环。</p>
<p>LOOPE&#x2F;LOOPZ CX不为零且标志Z&#x3D;1时循环。</p>
<p>LOOPNE&#x2F;LOOPNZ CX不为零且标志Z&#x3D;0时循环。</p>
<p>JCXZ CX为零时转移。</p>
<p>JECXZ ECX为零时转移。</p>
<p>4&gt;中断指令</p>
<p>INT 中断指令</p>
<p>INTO 溢出中断</p>
<p>IRET 中断返回</p>
<p>5&gt;处理器控制指令</p>
<p>HLT 处理器暂停， 直到出现中断或复位信号才继续。</p>
<p>WAIT 当芯片引线TEST为高电平时使CPU进入等待状态。</p>
<p>ESC 转换到外处理器。</p>
<p>LOCK 封锁总线。</p>
<p>NOP 空操作。</p>
<p>STC 置进位标志位。</p>
<p>CLC 清进位标志位。</p>
<p>CMC 进位标志取反。</p>
<p>STD 置方向标志位。</p>
<p>CLD 清方向标志位。</p>
<p>STI 置中断允许位。</p>
<p>CLI 清中断允许位。</p>
<h1 id="六、伪指令"><a href="#六、伪指令" class="headerlink" title="六、伪指令"></a><strong>六、伪指令</strong></h1><p>───────────────────────────</p>
<p>DW 定义字(2字节)。</p>
<p>PROC 定义过程。</p>
<p>ENDP 过程结束。</p>
<p>SEGMENT 定义段。</p>
<p>ASSUME 建立段寄存器寻址。</p>
<p>ENDS 段结束。</p>
<p>END 程序结束。</p>
<h1 id="一-机械码-又称机器码"><a href="#一-机械码-又称机器码" class="headerlink" title="一.机械码,又称机器码."></a><strong>一.机械码,又称机器码.</strong></h1><p>ultraedit打开,编辑exe文件时你会看到</p>
<p>许许多多的由0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F组成的数码,这些数码</p>
<p>就是机器码.</p>
<p>修改程序时必须通过修改机器码来修改exe文件.</p>
<h1 id="二-需要熟练掌握的全部汇编知识-只有这么多"><a href="#二-需要熟练掌握的全部汇编知识-只有这么多" class="headerlink" title="二.需要熟练掌握的全部汇编知识(只有这么多)"></a><strong>二.需要熟练掌握的全部汇编知识(只有这么多)</strong></h1><p>不大容易理解,可先强行背住,混个脸儿熟,以后慢慢的就理解了</p>
<p>cmp a,b 比较a与b</p>
<p>mov a,b 把b的值送给a</p>
<p>ret 返回主程序</p>
<p>nop 无作用,英文“no operation”的简写，意思是“do nothing”(机器码90)***机器码的含义参看上面</p>
<p>(解释:ultraedit打开编辑exe文件时你看到90,等同于汇编语句nop)</p>
<p>call 调用子程序</p>
<p>je 或jz 若相等则跳(机器码74 或0F84)</p>
<p>jne或jnz 若不相等则跳(机器码75或0F85)</p>
<p>jmp 无条件跳(机器码EB)</p>
<p>jb 若小于则跳</p>
<p>ja 若大于则跳</p>
<p>jg 若大于则跳</p>
<p>jge 若大于等于则跳</p>
<p>jl 若小于则跳</p>
<p>jle 若小于等于则跳</p>
<p>pop 出栈</p>
<p>push 压栈</p>
<h1 id="三-常见修改-机器码"><a href="#三-常见修改-机器码" class="headerlink" title="三.常见修改(机器码)"></a>三.常见修改(机器码)</h1><p>74&#x3D;&gt;75 74&#x3D;&gt;90 74&#x3D;&gt;EB</p>
<p>75&#x3D;&gt;74 75&#x3D;&gt;90 75&#x3D;&gt;EB</p>
<p>jnz-&gt;nop</p>
<p>75-&gt;90(相应的机器码修改)</p>
<p>jnz -&gt; jmp</p>
<p>75 -&gt; EB(相应的机器码修改)</p>
<p>jnz -&gt; jz</p>
<p>75-&gt;74 (正常) 0F 85 -&gt; 0F 84(特殊情况下,有时,相应的机器码修改)</p>
<h1 id="四-两种不同情况的不同修改方法"><a href="#四-两种不同情况的不同修改方法" class="headerlink" title="四.两种不同情况的不同修改方法"></a>四.两种不同情况的不同修改方法</h1><p>1.修改为jmp</p>
<p>je(jne,jz,jnz) &#x3D;&gt;jmp相应的机器码EB （出错信息向上找到的第一个跳转）jmp的作用是绝对跳，无条件跳，从而跳过下面的出错信息</p>
<p>xxxxxxxxxxxx 出错信息，例如：注册码不对，sorry,未注册版不能…，”Function Not Avaible in Demo” 或 “Command Not Avaible” 或 “Can’t save in Shareware&#x2F;Demo”等 （我们希望把它跳过，不让它出现）</p>
<p>。。。</p>
<p>。。。</p>
<p>xxxxxxxxxxxx 正确路线所在</p>
<p>2.修改为nop</p>
<p>je(jne,jz,jnz) &#x3D;&gt;nop相应的机器码90 （正确信息向上找到的第一个跳转） nop的作用是抹掉这个跳转，使这个跳转无效，失去作用，从而使程序顺利来到紧跟其后的正确信息处</p>
<p>xxxxxxxxxxxx 正确信息，例如：注册成功，谢谢您的支持等（我们希望它不被跳过，让它出现，程序一定要顺利来到这里）</p>
<p>。。。</p>
<p>。。。</p>
<p>xxxxxxxxxxxx 出错信息（我们希望不要跳到这里，不让它出现）它们在存贮器和寄存器、寄存器和输入输出端口之间传送数据. </p>
<ol>
<li>通用数据传送指令.</li>
</ol>
<p>MOV 传送字或字节. </p>
<p>MOVSX 先符号扩展,再传送. </p>
<p>MOVZX 先零扩展,再传送. </p>
<p>PUSH 把字压入堆栈. </p>
<p>POP 把字弹出堆栈. </p>
<p>PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈. </p>
<p>POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈. </p>
<p>PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈. </p>
<p>POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈. </p>
<p>BSWAP 交换32位寄存器里字节的顺序 </p>
<p>XCHG 交换字或字节.( 至少有一个操作数为寄存器,段寄存器不可作为操作数)</p>
<p>CMPXCHG 比较并交换操作数.( 第二个操作数必须为累加器AL&#x2F;AX&#x2F;EAX )</p>
<p>XADD 先交换再累加.( 结果在第一个操作数里 )</p>
<p>XLAT 字节查表转换. </p>
<p>── BX 指向一张 256 字节的表的起点, AL 为表的索引值 (0-255,即 </p>
<p>0-FFH); 返回 AL 为查表结果. ( [BX+AL]-&gt;AL )</p>
<ol start="2">
<li>输入输出端口传送指令.</li>
</ol>
<p>IN I&#x2F;O端口输入. ( 语法: IN 累加器, {端口号│DX} )</p>
<p>OUT I&#x2F;O端口输出. ( 语法: OUT {端口号│DX},累加器 )</p>
<p>输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,</p>
<p>其范围是 0-65535.</p>
<ol start="3">
<li>目的地址传送指令.</li>
</ol>
<p>LEA 装入有效地址. </p>
<p>例: LEA DX,string ;把偏移地址存到DX. </p>
<p>LDS 传送目标指针,把指针内容装入DS. </p>
<p>例: LDS SI,string ;把段地址:偏移地址存到DS:SI. </p>
<p>LES 传送目标指针,把指针内容装入ES. </p>
<p>例: LES DI,string ;把段地址:偏移地址存到ESI. </p>
<p>LFS 传送目标指针,把指针内容装入FS. </p>
<p>例: LFS DI,string ;把段地址:偏移地址存到FSI. </p>
<p>LGS 传送目标指针,把指针内容装入GS. </p>
<p>例: LGS DI,string ;把段地址:偏移地址存到GSI. </p>
<p>LSS 传送目标指针,把指针内容装入SS. </p>
<p>例: LSS DI,string ;把段地址:偏移地址存到SSI. </p>
<ol start="4">
<li>标志传送指令.</li>
</ol>
<p>LAHF 标志寄存器传送,把标志装入AH. </p>
<p>SAHF 标志寄存器传送,把AH内容装入标志寄存器. </p>
<p>PUSHF 标志入栈. </p>
<p>POPF 标志出栈. </p>
<p>PUSHD 32位标志入栈. </p>
<p>POPD 32位标志出栈. </p>
<h1 id="二、算术运算指令-1"><a href="#二、算术运算指令-1" class="headerlink" title="二、算术运算指令"></a>二、算术运算指令</h1><p>─────────────────────────────────────── </p>
<p>ADD 加法. </p>
<p>ADC 带进位加法. </p>
<p>INC 加 1.</p>
<p>AAA 加法的ASCII码调整. </p>
<p>DAA 加法的十进制调整. </p>
<p>SUB 减法. </p>
<p>SBB 带借位减法. </p>
<p>DEC 减 1.</p>
<p>NEC 求反(以 0 减之). </p>
<p>CMP 比较.(两操作数作减法,仅修改标志位,不回送结果). </p>
<p>AAS 减法的ASCII码调整. </p>
<p>DAS 减法的十进制调整. </p>
<p>MUL 无符号乘法. </p>
<p>IMUL 整数乘法. </p>
<p>以上两条,结果回送AH和AL(字节运算),或DX和AX(字运算),</p>
<p>AAM 乘法的ASCII码调整. </p>
<p>DIV 无符号除法. </p>
<p>IDIV 整数除法. </p>
<p>以上两条,结果回送:</p>
<p>商回送AL,余数回送AH, (字节运算); </p>
<p>或 商回送AX,余数回送DX, (字运算). </p>
<p>AAD 除法的ASCII码调整. </p>
<p>CBW 字节转换为字. (把AL中字节的符号扩展到AH中去)</p>
<p>CWD 字转换为双字. (把AX中的字的符号扩展到DX中去)</p>
<p>CWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)</p>
<p>CDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去)</p>
<h1 id="三、逻辑运算指令-1"><a href="#三、逻辑运算指令-1" class="headerlink" title="三、逻辑运算指令"></a>三、逻辑运算指令</h1><p>─────────────────────────────────────── </p>
<p>AND 与运算. </p>
<p>OR 或运算. </p>
<p>XOR 异或运算. </p>
<p>NOT 取反. </p>
<p>TEST 测试.(两操作数作与运算,仅修改标志位,不回送结果). </p>
<p>SHL 逻辑左移. </p>
<p>SAL 算术左移.(&#x3D;SHL)</p>
<p>SHR 逻辑右移. </p>
<p>SAR 算术右移.(&#x3D;SHR)</p>
<p>ROL 循环左移. </p>
<p>ROR 循环右移. </p>
<p>RCL 通过进位的循环左移. </p>
<p>RCR 通过进位的循环右移. </p>
<p>以上八种移位指令,其移位次数可达255次. </p>
<p>移位一次时, 可直接用操作码. 如 SHL AX,1.</p>
<p>移位&gt;1次时, 则由寄存器CL给出移位次数. </p>
<p>如 MOV CL,04</p>
<p>SHL AX,CL </p>
<h1 id="四、串指令-1"><a href="#四、串指令-1" class="headerlink" title="四、串指令"></a>四、串指令</h1><p>─────────────────────────────────────── </p>
<p>DS:SI 源串段寄存器 :源串变址. </p>
<p>ESI 目标串段寄存器:目标串变址. </p>
<p>CX 重复次数计数器. </p>
<p>AL&#x2F;AX 扫描值. </p>
<p>D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量. </p>
<p>Z标志 用来控制扫描或比较操作的结束. </p>
<p>MOVS 串传送. </p>
<p>( MOVSB 传送字符. MOVSW 传送字. MOVSD 传送双字. )</p>
<p>CMPS 串比较. </p>
<p>( CMPSB 比较字符. CMPSW 比较字. )</p>
<p>SCAS 串扫描. </p>
<p>把AL或AX的内容与目标串作比较,比较结果反映在标志位. </p>
<p>LODS 装入串. </p>
<p>把源串中的元素(字或字节)逐一装入AL或AX中. </p>
<p>( LODSB 传送字符. LODSW 传送字. LODSD 传送双字. )</p>
<p>STOS 保存串. </p>
<p>是LODS的逆过程. </p>
<p>REP 当CX&#x2F;ECX&lt;&gt;0时重复. </p>
<p>REPE&#x2F;REPZ 当ZF&#x3D;1或比较结果相等,且CX&#x2F;ECX&lt;&gt;0时重复. </p>
<p>REPNE&#x2F;REPNZ 当ZF&#x3D;0或比较结果不相等,且CX&#x2F;ECX&lt;&gt;0时重复. </p>
<p>REPC 当CF&#x3D;1且CX&#x2F;ECX&lt;&gt;0时重复. </p>
<p>REPNC 当CF&#x3D;0且CX&#x2F;ECX&lt;&gt;0时重复. </p>
<h1 id="五、程序转移指令-1"><a href="#五、程序转移指令-1" class="headerlink" title="五、程序转移指令"></a>五、程序转移指令</h1><p>─────────────────────────────────────── </p>
<p>1&gt;无条件转移指令 (长转移)</p>
<p>JMP 无条件转移指令 </p>
<p>CALL 过程调用 </p>
<p>RET&#x2F;RETF过程返回. </p>
<p>2&gt;条件转移指令 (短转移,-128到+127的距离内)</p>
<p>( 当且仅当(SF XOR OF)&#x3D;1时,OP1&lt;OP2 )</p>
<p>JA&#x2F;JNBE 不小于或不等于时转移. </p>
<p>JAE&#x2F;JNB 大于或等于转移. </p>
<p>JB&#x2F;JNAE 小于转移. </p>
<p>JBE&#x2F;JNA 小于或等于转移. </p>
<p>以上四条,测试无符号整数运算的结果(标志C和Z). </p>
<p>JG&#x2F;JNLE 大于转移. </p>
<p>JGE&#x2F;JNL 大于或等于转移. </p>
<p>JL&#x2F;JNGE 小于转移. </p>
<p>JLE&#x2F;JNG 小于或等于转移. </p>
<p>以上四条,测试带符号整数运算的结果(标志S,O和Z). </p>
<p>JE&#x2F;JZ 等于转移. </p>
<p>JNE&#x2F;JNZ 不等于时转移. </p>
<p>JC 有进位时转移. </p>
<p>JNC 无进位时转移. </p>
<p>JNO 不溢出时转移. </p>
<p>JNP&#x2F;JPO 奇偶性为奇数时转移. </p>
<p>JNS 符号位为 “0” 时转移. </p>
<p>JO 溢出转移. </p>
<p>JP&#x2F;JPE 奇偶性为偶数时转移. </p>
<p>JS 符号位为 “1” 时转移. </p>
<p>3&gt;循环控制指令(短转移)</p>
<p>LOOP CX不为零时循环. </p>
<p>LOOPE&#x2F;LOOPZ CX不为零且标志Z&#x3D;1时循环. </p>
<p>LOOPNE&#x2F;LOOPNZ CX不为零且标志Z&#x3D;0时循环. </p>
<p>JCXZ CX为零时转移. </p>
<p>JECXZ ECX为零时转移. </p>
<p>4&gt;中断指令 </p>
<p>INT 中断指令 </p>
<p>INTO 溢出中断 </p>
<p>IRET 中断返回 </p>
<p>5&gt;处理器控制指令 </p>
<p>HLT 处理器暂停, 直到出现中断或复位信号才继续. </p>
<p>WAIT 当芯片引线TEST为高电平时使CPU进入等待状态. </p>
<p>ESC 转换到外处理器. </p>
<p>LOCK 封锁总线. </p>
<p>NOP 空操作. </p>
<p>STC 置进位标志位. </p>
<p>CLC 清进位标志位. </p>
<p>CMC 进位标志取反. </p>
<p>STD 置方向标志位. </p>
<p>CLD 清方向标志位. </p>
<p>STI 置中断允许位. </p>
<p>CLI 清中断允许位. </p>
<h1 id="六、伪指令-1"><a href="#六、伪指令-1" class="headerlink" title="六、伪指令"></a>六、伪指令</h1><p>─────────────────────────────────────── </p>
<p>DW 定义字(2字节). </p>
<p>PROC 定义过程. </p>
<p>ENDP 过程结束. </p>
<p>SEGMENT 定义段. </p>
<p>ASSUME 建立段寄存器寻址. </p>
<p>ENDS 段结束. </p>
<p>END 程序结束</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>支持Web Mail的SMTP邮件服务器</title>
    <url>/2023/07/30/Information_Security_Experiment/computer_network/CN2/</url>
    <content><![CDATA[<blockquote>
<h1 id="一-实验内容"><a href="#一-实验内容" class="headerlink" title="一 实验内容"></a>一 实验内容</h1><ol>
<li>作为 Web 服务器，接收浏览器的 TCP 连接请求， 接收 HTTP 命令和邮件数据，将邮件保存在文件中；</li>
<li>作为SMTP 客户端，建立到实际邮件服务器的TCP 连接，发送 SMTP 命令，将保存的邮件发送给实际邮件服 务器；</li>
<li>提供发件人和收件人 Email 地址格式检查功能，例 如 下 列 邮 件 地 址 是 错 误 的 ：  chengli ，  chengli@ ， bupt.edu.cn，  … .</li>
<li>提供邮件差错报告，要求处理两种差错：收件人不 存在、邮件超过规定长度，将差错报告转发给发件人；</li>
<li>支持一封邮件多个接收者，要求接收者属于不同的 域 (如 bupt.edu.cn、163.com、qq.com, … ) ；</li>
<li>在命令行窗口显示通信的主要过程，包括：通信对 端的 IP 地址和端口号；发送的消息 (或状态码) 、接收的 消息 (或状态码) 、</li>
<li>可选功能：支持 SSL 安全连接。</li>
</ol>
</blockquote>
<h1 id="一、实验内容和实验环境描述"><a href="#一、实验内容和实验环境描述" class="headerlink" title="一、实验内容和实验环境描述"></a>一、实验内容和实验环境描述</h1><h2 id="1-实验任务"><a href="#1-实验任务" class="headerlink" title="1.实验任务"></a>1.实验任务</h2><p>1 ) 作为 Web 服务器，接收浏览器的 TCP 连接请求，接收 HTTP 命令和邮 件数据，将邮件保存在文件中；</p>
<ol start="2">
<li>作为 SMTP 客户端，建立到实际邮件服务器的 TCP 连接，发送 SMTP 命令，将保存的邮件发送给实际邮件服务器；</li>
<li>提供发件人和收件人 Email 地址格式检查功能，例如下列邮件地址是错 误的：chengli ，chengli@ ，bupt.edu.cn ，  … .</li>
<li>提供邮件差错报告，要求处理两种差错：收件人不存在、邮件超过规定 长度，将差错报告转发给发件人；</li>
<li>支持一封邮件多个接收者，要求接收者属于不同的域 (如 bupt.edu.cn、 163.com、qq.com, … ) ；</li>
<li>在命令行窗口显示通信的主要过程，包括：通信对端的 IP 地址和端口号； 发送的消息 (或状态码) 、接收的消息 (或状态码) 、</li>
<li>可选功能：支持 SSL 安全连接。</li>
</ol>
<h2 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2.实验内容"></a>2.实验内容</h2><p>实验任务是编写一个邮件服务器程序，使用 SocketAPI 进行开发。该程序 需要作为 Web 服务器接收来自浏览器的TCP 连接请求，接收 HTTP 命令和邮 件数据，并将邮件保存在文件中。同时，作为 SMTP 客户端，它还需要建立到 实际邮件服务器的 TCP 连接，发送 SMTP 命令，将保存的邮件代理转发给实际 邮件服务器。</p>
<p>该实验的主要功能模块包括：</p>
<p>Web 服务器代理模块：接收浏览器的 TCP 连接请求，解析 HTTP 命令和邮 件数据，并将邮件保存在文件中。在保存邮件数据后，充当SMTP 客户端的角 色，使用SMTP 命令将保存的邮件数据转发到实际邮件服务器。</p>
<p>SMTP 客户端模块：建立到实际邮件服务器的 TCP 连接，发送 SMTP 命令，</p>
<p>将保存的邮件发送给实际邮件服务器。</p>
<p>地址格式检查模块：对发件人和收件人的 Email 地址进行格式检查，确保地 址的正确性。</p>
<p>差错处理模块：根据实际邮件服务器的响应码，处理差错情况</p>
<p>多接收者支持模块：支持一封邮件有多个接收者，且这些接收者属于不同的 域。</p>
<p>通信显示模块：在命令行窗口显示通信的主要过程，包括通信对端的 IP 地 址和端口号，发送的消息 (或状态码) 、接收的消息 (或状态码) 。</p>
<h2 id="3-实验环境"><a href="#3-实验环境" class="headerlink" title="3.实验环境"></a>3.实验环境</h2><p>操作系统：Windows</p>
<p>编程语言和库：C++和 Python ，需要安装相应的编译器和 Python 解 释 器 。 并 且 需 要 安 装 所 需 的 第 三 方 库 ，  可 以 使 用 pip  install -r requirements.txt 命令安装。</p>
<p>网络通信：程序需要与服务器进行 TCP&#x2F;IP 通信，确保网络连接正常， 并且可以访问目标服务器。</p>
<p>网络信息获取：程序需要获取本地网络信息，确保能够正常获取网卡 和 IP 地址。</p>
<p>线程支持：程序使用了多线程，确保操作系统支持多线程并设置合适 的线程数。</p>
<h1 id="二、软件设计"><a href="#二、软件设计" class="headerlink" title="二、软件设计"></a>二、软件设计</h1><h2 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h2><p>C++ 代码中主要有以下结构体&#x2F;类：</p>
<p>enum class TcpStatus</p>
<p>这个枚举类定义了TCP 连接的所有状态，其含有如下成员。 OK &#x3D; 0x00,</p>
<p>Closed &#x3D; 0x01,</p>
<p>WsaStartupFailed &#x3D; 0xFE,</p>
<p>GetAddrInfoFailed &#x3D; 0xFD,</p>
<p>SocketFailed &#x3D; 0xFB,</p>
<p>ConnServerFailed &#x3D; 0xF7,</p>
<p>RecvFailed &#x3D; 0xEF,</p>
<p>SendFailed &#x3D; 0xDF,</p>
<p>ShutdownFailed &#x3D; 0xBF,</p>
<p>UnknownError &#x3D; 0xFF,</p>
<p>class ClientTcp</p>
<p>这个类对 Winsock 2  提供的 socket 接口进行封装，用于进行客户端的 TCP 连接。其含有如下成员变量。</p>
<p>WSADATAwsaData;</p>
<p>SOCKET ConnectSocket;</p>
<p>struct addrinfo* result, * ptr, hints;</p>
<p>int iResult;</p>
<p>char* recvbuf;</p>
<p>size_t buflen;</p>
<p>std::function&lt;void(const char*)&gt; log;</p>
<p>TcpStatus status;</p>
<p>std::string status_info;</p>
<p>其中，wsaData ，ConnectSocket ，result ，ptr，hints 用于 socket 的构造， iResult 存储 socket 相关函数的返回值，recvbuf 作为接收 socket 数据的缓冲区， buflen 定义了动态分配缓冲区的长度，log 用于出错时回调输出信息，status ， status_info 用于向上层提供状态信息。</p>
<p>enum class SmtpReplyCode</p>
<p>这个枚举类定义了SMTP 所有可能的状态码。其含有如下成员。</p>
<p>CmdSyntaxErr &#x3D; 500,</p>
<p>ParamSyntaxErr &#x3D; 501,</p>
<p>CmdNotImpl &#x3D; 502,</p>
<p>BadCmdSeq &#x3D; 503,</p>
<p>ParamNotImpl &#x3D; 504,</p>
<p>SysStatus &#x3D; 211,</p>
<p>HelpMsg &#x3D; 214,</p>
<p>ServiceReady &#x3D; 220,</p>
<p>ServiceClosing &#x3D; 221,</p>
<p>ServiceUnavailable &#x3D; 421,</p>
<p>Completed &#x3D; 250,</p>
<p>Forward &#x3D; 251,</p>
<p>UnverifiedAccept &#x3D; 252,</p>
<p>UnableAccommodateParam &#x3D; 455,</p>
<p>MailParamNotImpl &#x3D; 555,</p>
<p>TransientMailboxUnavailable &#x3D; 450,</p>
<p>PermanentMailboxUnavailable &#x3D; 550,</p>
<p>ProcessingErr &#x3D; 451,</p>
<p>UserNotLocal &#x3D; 452,</p>
<p>InsufficientSysStorage &#x3D; 452,</p>
<p>ExceededStorageAllocation &#x3D; 552,</p>
<p>MailboxNotAllowed &#x3D; 553,</p>
<p>StartingMailInput &#x3D; 354,</p>
<p>TransactionFailed &#x3D; 554,</p>
<p>class BasicSmtp</p>
<p>这个类实现了基础的SMTP 客户端功能。其含有如下成员变量。 ClientTcp* tcp_conn;</p>
<p>SmtpStatus status;</p>
<p>SmtpReplyCode reply_code;</p>
<p>std::string reply_msg;</p>
<p>std::function&lt;void(const char*)&gt; log &#x3D; NULL;</p>
<p>std::string info;</p>
<p>其 中 ，tcp_conn 用于 TCP 连接 ，status 记录 当前 SMTP 连接状态 ， reply_code 与 reply_msg 记录服务器传回的消息，log 回调函数用于日志记录， info 用于与上层模块通信。</p>
<p>Python 代码中主要有以下类：</p>
<p>HttpRequestPacket</p>
<p>用于解析与储存收到的 HTTP 报文。其含有如下成员变量。</p>
<p>req_line：请求行</p>
<p>method：HTTP 方法</p>
<p>req_uri：HTTP 请求地址</p>
<p>version：HTTP 版本号</p>
<p>req_header：请求标头</p>
<p>headers：解析的标头字典</p>
<p>host：主机地址</p>
<p>req_data：请求数据</p>
<h2 id="2-模块结构"><a href="#2-模块结构" class="headerlink" title="2.模块结构"></a>2.模块结构</h2><p>如下图</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1.png" alt="img"> </p>
<h2 id="3-算法流程"><a href="#3-算法流程" class="headerlink" title="3.算法流程"></a>3.算法流程</h2><p>如上图</p>
<h2 id="4-主要功能模块的实现要点"><a href="#4-主要功能模块的实现要点" class="headerlink" title="4. 主要功能模块的实现要点"></a>4. 主要功能模块的实现要点</h2><h3 id="4-1-代理"><a href="#4-1-代理" class="headerlink" title="4.1 代理"></a>4.1 代理</h3><p>接收 HTTP 传入请求。对于 HTTP 连接，需要正确转发至目的地。对于 HTTPS 连接，需要为其建立专门的 TCP 连接。检测到疑似为 Webmail 的数据 包 (开头为 “POST <a href="http://mail.qq.com/cgi-bin/compose_send">http://mail.qq.com/cgi-bin/compose_send</a>“) 时，需要启动 后续模块的进程。</p>
<h3 id="4-2-解析包"><a href="#4-2-解析包" class="headerlink" title="4.2 解析包"></a>4.2 解析包</h3><p>需要对传入的数据包进行解析，得到 Webmail 发送的邮件信息。检查是否 有 关 键 字 段 缺 失 ( 发 件 人 “sendmailname” ，  收 件 人 “To” ，  邮 件 正 文 “content__html”) 。若检查无误，则写入文件，启动后续模块的进程。</p>
<h3 id="4-3-转发邮件"><a href="#4-3-转发邮件" class="headerlink" title="4.3  转发邮件"></a>4.3  转发邮件</h3><p>4.3.1 BasicSmtp 库的 TCP 客户端服务</p>
<p>该模块实现了一个基本的 TCP 发送客户端，用于转发电子邮件。以下是每 个功能模块的实现要点的总结：</p>
<p>构造函数和析构函数：</p>
<p>构造函数初始化了函数 MailProxy::ClientTcp::ClientTcp。初始化构造一个缓 冲区用来存放接收到的信息，同时又定义 log 变量用来存放错误信息。</p>
<p>析构函数中释放用来存放接受信息的缓冲区。</p>
<p>record_error()函数：</p>
<p>用来封装报错反馈功能，由于每个功能模块基本都有报错的可能，重复撰写 报错功能会占用大量空间，因此将其封装。</p>
<p>tcp_connect()函数：</p>
<p>TCP 协议链接函数，首先确保所有字段的初始值为 0 ，指定适用于 IPv4 或 IPv6 的地址，指定套接字类型为流式套接字 (TCP) ，指定使用TCP 协议。</p>
<p>解析服务器的地址和端口。将解析结果存储在指针中，并返回结果代码，循 环遍历解析结果。</p>
<p>使用socket 函数根据解析结果创建一个套接字。根据 ptr 指针中的地址族、 套接字类型和协议，创建一个用于连接服务器的套接字。</p>
<p>与服务器建立连接。</p>
<p>连接成功，跳出循环，完成 TCP 连接的建立。</p>
<p>tcp_send()函数：</p>
<p>向服务器发送数据。</p>
<p>关闭连接套接字，释放与服务器的 TCP 连接。</p>
<p>将连接套接字设置为无效的套接字，清理使用 Windows 套接字库的资源。 如果发送失败，会记录错误信息，并进行连接和资源的清理操作。</p>
<p>tcp_receive()函数：</p>
<p>从服务器接收数据</p>
<p>将接收到的数据放入缓冲区。</p>
<p>如果接收失败，会记录错误信息，并进行连接和资源的清理操作。</p>
<p>tcp_shutdown()函数：</p>
<p>检查 ConnectSocket 是否为有效的套接字。如果是有效的套接字，表示存 在一个与服务器建立的 TCP 连接，此函数用于判断是否存在连接并对其进行关 闭。</p>
<p>关闭连接。</p>
<p>如果关闭失败，会记录错误信息，并进行连接和资源的清理操作。</p>
<p>get_received()函数：</p>
<p>读取 received 的取指中存储的内容。</p>
<p>get_status()函数：</p>
<p>读取status 的取指中存储的内容。</p>
<p>get_status_info()函数：</p>
<p>读取 status_info 的取指中存储的内容。</p>
<p>4.3.2 BasicSmtp 库的 SMTP 客户端服务</p>
<p>实现了一个基本的 SMTP 客户端，用于发送电子邮件。以下是每个功能模 块的实现要点的总结：</p>
<p>构造函数和析构函数：</p>
<p>构造函数初始化了一个 MailProxy::ClientTcp 对象，并设置了一个 Lambda 函数作为参数，用于处理 TCP 连接的日志输出。</p>
<p>析构函数发送 QUIT 命令给 SMTP 服务器，接收响应并关闭 TCP 连接</p>
<p>smtp_login()函数：</p>
<p>使用给定的服务器地址、用户名和密码进行 SMTP 登录。</p>
<p>向 SMTP 服务器发送 EHLO 命令以建立与服务器的连接。</p>
<p>发送 AUTH LOGIN 命令以进行身份验证。</p>
<p>将用户名和密码以 base64 编码形式发送给服务器。</p>
<p>检查每个步骤的响应码和响应消息，根据情况设置 SMTP 状态。</p>
<p>smtp_send()函数：</p>
<p>发送电子邮件。</p>
<p>发送 MAIL FROM 命令以设置发件人。</p>
<p>发送 RCPT TO 命令以设置收件人 (包括 To、Cc 和 Bcc) 。 发送 DATA 命令以指示开始发送邮件内容。</p>
<p>构建邮件的头部和正文，并将其以字符串形式发送给服务器。 检查每个步骤的响应码和响应消息，根据情况设置 SMTP 状态。</p>
<p>smtp_send_raw()函数：</p>
<p>发送原始的电子邮件数据。</p>
<p>发送 MAIL FROM 命令以设置发件人。</p>
<p>发送 RCPT TO 命令以设置收件人。</p>
<p>发送 DATA 命令以指示开始发送邮件内容。</p>
<p>将原始数据以字符串形式发送给服务器。</p>
<p>检查每个步骤的响应码和响应消息，根据情况设置 SMTP 状态。</p>
<p>check_tcp()函数：</p>
<p>检查 TCP 连接状态，用于确定 TCP 连接是否正常。</p>
<p>如果连接状态不是 OK ，设置 SMTP 状态为 TcpErr，表明TCP 连接失败， 并返回 false ，否则返回 true。</p>
<p>check()函数：</p>
<p>在检查 TCP 连接状态的基础上，提取 SMTP 响应的响应码和响应消息，并 根据响应码判断 SMTP 状态，用于确定SMTP 是否正常。如果响应码以 4 或 5 开头，设置 SMTP 状态为 SmtpErr 并返回 false ，否则返回 true。</p>
<p>4.3.3 post 主程序</p>
<p>实现整个邮件发送流程，包括登录、构建邮件、发送和检查响应等。以下是 每个功能模块实现流程的总结：</p>
<p>构建邮件对象:  提取原始文件内容，构建邮件信息，把发件人、收件人、抄 送、密送、邮件标题和正文等信息作为参数，并根据这些信息创建一个包含邮件 头和内容的字符串。</p>
<p>编码登录名和授权码：调用 base64_encode 编码登录名和授权码，使用动 态分配的字符数存放登录名和授权码的 Base64  编码</p>
<p>SMTP 登录操作:  调用smtp_login 函数用于进行 SMTP 服务器的登录操作。 它接受 SMTP 服务器地址、用户名和密码作为参数，并通过建立 TCP 连接和 发送登录命令来完成登录过程。</p>
<p>发送邮件:  调用 smtp_send_raw 函数用于邮件发送。它接受邮件内容和 SMTP 服务器实例作为参数，并通过与服务器的交互来发送邮件。发送过程包 括发送邮件数据、处理服务器响应以及检查发送状态等步骤。</p>
<p>检查响应并处理：通过检查服务器的响应，并根据不同的响应状态进行相应 的处理。如果状态为 SmtpErr，输出 SMTP 错误码和错误信息，并发送反馈。 如果状态为 TcpErr ，输出 TCP 服务错误并退出程序。如果状态正常，输出成 功消息表示邮件发布成功。</p>
<h1 id="三、实验结果演示及分析"><a href="#三、实验结果演示及分析" class="headerlink" title="三、实验结果演示及分析"></a>三、实验结果演示及分析</h1><h2 id="1-功能测试"><a href="#1-功能测试" class="headerlink" title="1.功能测试"></a>1.功能测试</h2><p>代理服务器端查看主机 IP 地址</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2.png" alt="img"> </p>
<p>用户端使用网络代理</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3-1690805636246-1.jpg" alt="img"> </p>
<p>代理服务器端开启代理服务器</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4.png" alt="img"> </p>
<p>代理服务器端打开 wireshark 抓包</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5-1690805636246-2.jpg" alt="img"> </p>
<p>用户端发送文件</p>
<p>发送文件成功，并实现转发功能</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6.png" alt="img"> </p>
<p>代理服务器端可以看到邮件已经发送成功</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps7.png" alt="img"> </p>
<p>代理服务器端查看抓包，查找 HTTP 协议，可以看见发送邮件的内容。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps8.png" alt="img"> </p>
<p>代理服务器端查看抓包，查找 SMTP 协议，可以看见发送邮件的通信流程。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps9.png" alt="img"> </p>
<h2 id="2-差错处理"><a href="#2-差错处理" class="headerlink" title="2. 差错处理"></a>2. 差错处理</h2><h3 id="2-1TCP-差错处理"><a href="#2-1TCP-差错处理" class="headerlink" title="2.1TCP 差错处理"></a>2.1TCP 差错处理</h3><p>在 TCP 层的连接和发送中，主要由 record_error()函数封装报错内容。</p>
<p>record_error()函数接收参数分别用来保存错误状态、错误信息、错误代码， 并将错误信息记录到日志中。同时将错误信息记录格式化后储存，并作为参数传</p>
<p>递给 log ，以记录错误信息到日志中，便于在后续进行输出。</p>
<p>差错内容：</p>
<p>Winsock 初始化失败：WsaStartupFailed ，若在构造函数时网络编程接口 初始化失败报此内容。</p>
<p>getaddrinfo 失败：  GetAddrInfoFailed ，若在解析服务器的地址和端口时 失败报此内容。</p>
<p>Socket 初始化失败：SocketFailed ，若在建立接收解析服务器数据的内存 空间时失败报此内容。</p>
<p>发送数据失败：SendFailed ，在发送 TCP 协议文件时出现问题报此内容。 接收数据失败：RecvFailed ，在接收 TCP 协议文件时出现问题报此内容。 关闭连接失败：ShutdownFailed ，在关闭 TCP 连接时出现问题报此内容。 未知错误：UnknownError 在流程中出现其他未知错误时报此内容。</p>
<h3 id="2-2-SMTP-差错处理"><a href="#2-2-SMTP-差错处理" class="headerlink" title="2.2 SMTP 差错处理"></a>2.2 SMTP 差错处理</h3><p>在 SMTP 应用层，SMTP 差错处理的检查函数主要是 check_tcp()和 check()。 实现根据服务器的响应判断是否出现 TCP 错误或 SMTP 错误，并根据情况设置 相应的状态。这样可以根据 SMTP 状态来执行相应的处理逻辑，如输出错误信 息或成功消息。</p>
<p>针对邮件检验主要是 check_email_addr()函数，对基本的邮件地址验证， 以确保在发送邮件或处理邮件时使用的地址是有效的和合法的</p>
<p>check_tcp() 函 数 ： 用 于 检 查 TCP 连 接 的 状 态 ， 如 果 连 接 状 态 不 是 TcpStatus::OK ，则将 SMTP 状态设置为 SmtpStatus::TcpErr 并返回 false。</p>
<p>check()函数：首先通过 tcp_conn-&gt;get_received()获取服务器的响应消息。 然后从响应消息中截取出响应码 code 和响应信息 reply_msg 。将响应码转换为 枚举类型，并将其赋值给 reply_code 成员变量。接下来，根据响应码的第一位 数字判断 SMTP 状态。如果是以 4 或 5 开头的响应码，认为是 SMTP 错误，将 SMTP 状态设置为 SmtpErr 并返回false 。否则，将 SMTP 状态设置为 OK。</p>
<p>check_email_addr()函数：检查给定的邮件地址是否符合标准的电子邮件地 址格式。通过使用正则表达式来验证邮件地址是否满足特定的模式。该正则表达 式模式包含了电子邮件地址的各个部分，如用户名部分、域名部分等。它对地址 的格式进行了详细的验证，包括以下几个方面：</p>
<p>用户名部分可以包含字母、数字以及一些特定的符号，如点号、加号、减号、 下划线等。</p>
<p>域名部分可以是一个 IP 地址，形如 [x.x.x.x] ，也可以是一个域名，形如 example.com。</p>
<p>域名部分至少包含两个组成部分，如 example.com，而不是仅有一个部分， 如 example。</p>
<h3 id="2-3-解析包差错处理"><a href="#2-3-解析包差错处理" class="headerlink" title="2.3 解析包差错处理"></a>2.3 解析包差错处理</h3><p>对于格式不正确的包 (例如qq 邮箱保存至草稿箱的数据包) ，停止后续操 作并输出相关信息。</p>
<h2 id="2-和课堂上学习的-HTTP协议和SMTP-协议相比，-自制程序的不同之处"><a href="#2-和课堂上学习的-HTTP协议和SMTP-协议相比，-自制程序的不同之处" class="headerlink" title="2. 和课堂上学习的 HTTP协议和SMTP 协议相比， 自制程序的不同之处"></a>2. 和课堂上学习的 HTTP协议和SMTP 协议相比， 自制程序的不同之处</h2><p>HTTP 和 SMTP 协议是互联网中常用的协议，用于在网络中传输数据。它 们是通用协议，可以用来传输 Web 页面、 电子邮件等多种数据。而我们自制程 序只是针对特定邮件进行捕捉并转发成 SMTP 协议文件，对于其他 http 文件仅 进行中转功能。</p>
<p>在学习中，HTTP 和SMTP 协议是已经定义好的协议，有标准规范和实现。 而自制程序并没有封装好，需要定义自己的数据格式、错误捕捉等内容，只能在 tcp 基础上自己进行实现。</p>
<p>HTTP 和 SMTP 协议是复杂的协议，涉及多个不同的请求和响应类型、头 部字段、状态码等细节。我们的程序根据索要实现的功能需求进行了简化。</p>
<p>总之，学习 HTTP 和 SMTP 协议是了解和理解互联网通信的基本原理，而 自制程序则需要根据具体需求设计和实现自己的通信逻辑和协议。</p>
<h2 id="3-和实际的-Webmail-及-SMTP-服务器相比，程序的优点和不足"><a href="#3-和实际的-Webmail-及-SMTP-服务器相比，程序的优点和不足" class="headerlink" title="3. 和实际的 Webmail 及 SMTP 服务器相比，程序的优点和不足"></a>3. 和实际的 Webmail 及 SMTP 服务器相比，程序的优点和不足</h2><p>优点：</p>
<p>1 ) 我们的程序面向邮件转发而开发，对邮件的接收和转发有详细的过程记 录。可以快速发现出现问题的地方，并且保证了一定的安全性。</p>
<ol start="2">
<li>程序可以根据需求进行快速调节。可以根据想要使用进行转发的邮箱进 行更改，快速实现邮件转发功能，避免第三方软件介入，提高了便利性。</li>
<li>我们的程序可以随时根据需要进行功能扩展，通过各种语言对功能进行 添加。</li>
</ol>
<p>不足之处：</p>
<p>1 ) SMTP 服务和 HTTP 服务具有一定的复杂性。自制程序可能难以达到与</p>
<p>专业产品相同的复杂程度和稳定性。</p>
<ol start="2">
<li>SMTP 服务器和 Webmail 应用通常大量的身份验证、加密传输等安全措 施。 自制程序的安全性能相对匮乏，容易被攻击。</li>
<li>实际的 Webmail 和 SMTP 服务器经过广泛测试和兼容性验证，能够在 不同的操作系统和浏览器上正常运行。我们的程序有一定的兼容性问题，在新平 台上运行时还要适当提前进行配置。</li>
</ol>
<p>总体而言，我们的程序具有定制性和灵活性等优点，但在复杂性、安全性和 可用性方面还存在一些挑战。</p>
<h1 id="四、实验总结和心得体会"><a href="#四、实验总结和心得体会" class="headerlink" title="四、实验总结和心得体会"></a>四、实验总结和心得体会</h1><h2 id="1-实际上机调试时间"><a href="#1-实际上机调试时间" class="headerlink" title="1. 实际上机调试时间"></a>1. 实际上机调试时间</h2><p>TCP 实现部分：4h</p>
<p>SMTP 实现部分：4h</p>
<p>接受文件实现部分：6h</p>
<p>接口对接整体调试：5h</p>
<p>不同平台调试：4h</p>
<p>总用时：23h</p>
<h2 id="2-编程工具方面遇到的问题"><a href="#2-编程工具方面遇到的问题" class="headerlink" title="2. 编程工具方面遇到的问题"></a>2. 编程工具方面遇到的问题</h2><p>1 ) 运行 CMAKE 的工具：想运用 CMAKE 用于管理软件项目的构建过程， 后来发现 Developer PowerShell 提供了一个强大的命令行界面，可以很好实现 CMAKE 相关的任务和操作。它使得配置、构建和调试 CMake 项目变得更加方 柏霓，很好的满足了我们的需求</p>
<ol start="2">
<li>在最后代码汇总是使用的是 mac 系统，并且配置了一些代码库环境。后 续在其他电脑编译运行时需要重新配置环境。并根据 Windows 系统进行调整如 更改 Unicode 编码格式。</li>
</ol>
<h2 id="3-编程语言方面遇到的问题"><a href="#3-编程语言方面遇到的问题" class="headerlink" title="3. 编程语言方面遇到的问题"></a>3. 编程语言方面遇到的问题</h2><ol>
<li>C++的 list 容器使用：list 是与数组或向量等其他容器类型有所不同。 一开始缺少对链表结构的认识，对于迭代器的使用不够熟练，通过文档阅读和时</li>
</ol>
<p>间逐渐了解。</p>
<ol start="2">
<li>理解 lamba 函数：对 Lambda 函数的参数传递机制不清楚，不知道如 何传递参数给 Lambda 函数或在 Lambda 函数中使用外部参数。通过阅读使用 Lambda 函数的实际示例和代码片段，以便在实际应用中看到它们的用途和优势。</li>
</ol>
<h2 id="4-协议方面遇到的问题"><a href="#4-协议方面遇到的问题" class="headerlink" title="4.协议方面遇到的问题"></a>4.协议方面遇到的问题</h2><p>1 ) SMTP 的标准和规范理解：SMTP 的标准文档使用了大量的技术术语和 符号，理解和记忆这些术语需要一定的时间和实践。并且文档详细描述了协议的 各个方面，包括协议的命令、响应、消息格式、状态码等。描述过于细节，一开 始难以找到关键信息。</p>
<h2 id="5-通过本次试验，你认为-HTTP-协议和SMTP-协议有哪些不足？有何改进思路？"><a href="#5-通过本次试验，你认为-HTTP-协议和SMTP-协议有哪些不足？有何改进思路？" class="headerlink" title="5. 通过本次试验，你认为 HTTP 协议和SMTP 协议有哪些不足？有何改进思路？"></a>5. 通过本次试验，你认为 HTTP 协议和SMTP 协议有哪些不足？有何改进思路？</h2><h3 id="5-1-不足"><a href="#5-1-不足" class="headerlink" title="5.1 不足"></a>5.1 不足</h3><ol start="5">
<li>1.1 HTTP 不足</li>
</ol>
<p>明文传输：HTTP 协议默认使用明文传输，容易被窃听和篡改，缺乏安全性。 无状态性：HTTP 协议是无状态的，服务器无法保留客户端的状态信息。</p>
<p>安全性问题：HTTP 协议本身没有内置的身份验证和授权机制，容易受到中 间人攻击和伪造请求。</p>
<ol start="5">
<li>1.2 SMTP 不足</li>
</ol>
<p>明文传输：SMTP 协议默认使用明文传输，邮件内容和身份信息容易被窃听 和篡改。</p>
<p>垃圾邮件问题：SMTP 协议没有内置的垃圾邮件过滤机制，容易受到垃圾邮 件的滥用。</p>
<p>可信度和可靠性问题：SMTP 协议的可信度和可靠性较低，邮件可能会丢失、 延迟或被拒绝。</p>
<p>缺乏身份验证：SMTP 协议没有强制的身份验证机制，允许匿名发送邮件。</p>
<h3 id="5-2-改进思路"><a href="#5-2-改进思路" class="headerlink" title="5.2 改进思路"></a>5.2 改进思路</h3><p>5.2.1 HTTP 改进</p>
<p>针对明文传输问题：使用传输层安全性协议 (TLS) 来加密通信，利用对称 加密，客户端和服务器协商一个共享的对称密钥，该对称密钥用于加密和解密数 据。结合非加密服务器持有私钥，用于解密客户端发来的对称密钥，而客户端持 有服务器的公钥，用于加密对称密钥和加密通信内容。 比如现在广泛使用的 HTTPS 协议。</p>
<p>针对无状态性问题：可以引入会话管理机制，如引入会话标识符来跟踪客户 端状态，减轻服务器负担。 比如服务器在客户端首次请求时创建一个唯一的 Session 标识符，并将该标识符发送给客户端，通常通过 Cookie 进行存储。客 户端在后续的请求中会携带该 Session 标识符，服务器根据标识符查找对应的会 话信息，恢复客户端的状态。</p>
<p>针对安全性问题：可以引入更强大的身份验证和授权机制，如使用令牌、数 字签名等来确保请求的合法性和安全性。比如在与服务器建立 TLS 连接时，验 证服务器提供的数字证书的有效性和合法性，进行身份认证。</p>
<p>5.2.2 SMTP 改进</p>
<p>针对明文传输问题：可以通过使用加密算法来保护数据的机密性和完整性， 如 SMTP over SSL&#x2F;TLS (SMTPS) 等命令来保护通信的安全性。可以在建立 SMTP 连接之后，通过 SSL&#x2F;TLS 协议与服务器进行握手，建立安全的加密通道。</p>
<p>针对垃圾邮件问题：可以引入更强大的反垃圾邮件技术，如使用黑名单、白 名单、内容过滤等来过滤和拦截垃圾邮件。</p>
<p>针对可信度和可靠性问题：可以引入更可靠的投递和排队机制，如使用消息 队列或可靠的SMTP 代理来提高邮件的传递率和可靠性。</p>
<p>针对缺乏身份验证问题：可以引入强制的身份验证机制，如使用 SMTP 认 证或 DKIM 等技术来验证发件人的身份。</p>
<h2 id="6-实验总结"><a href="#6-实验总结" class="headerlink" title="6. 实验总结"></a>6. 实验总结</h2><p>这个实验加深了我对网络通信和协议的理解，提高了我的编程和软件设计能</p>
<p>力，培养了我解决问题和进行项目开发的能力，增强团队协作能力，和队友间建 立了深厚的友谊。</p>
<p>SOCKET 机制方面： 通过实现 TCP 连接和 SMTP 发送功能 ，我们对</p>
<p>SOCKET 机制有了更深入的理解。学会了如何建立和管理 TCP 连接，如何使用 SOCKET API 进行数据的发送和接收， 以及如何处理连接错误和异常情况。这 使我对网络通信的底层机制有了更全面的了解。</p>
<p>协议软件设计方面：在实现代理和 SMTP 发送功能的过程中，我们学会了 如何设计和实现协议软件。我们需要考虑协议的各个方面，包括命令和响应的格 式、状态管理、错误处理等，学会了将协议规范转化为可执行的代码，并进行测 试和调试，以确保软件的正确性和稳定性。</p>
<p>理论学习方面：通过这个实验，我们对网络通信和电子邮件协议的理论知识 有了更深入的了解。我们学习了 TCP&#x2F;IP 协议栈的工作原理，了解了SMTP 协议 的基本原理和命令格式。这使我们能够更好地理解实验中涉及的概念和技术，并 能够将理论知识应用到实际项目中。</p>
<p>软件工程方面：在实现这个实验的过程中，我们锻炼了软件工程方面的能力， 学会了进行需求分析和设计，合理划分模块和函数，编写可读性和可维护性高的 代码，进行单元测试和集成测试，以及进行错误处理和异常处理。我相信这些软 件工程的技能对于未来发展将会发挥至关重要的作用。</p>
<p>团队协作方面：在团队中，我们需要进行频繁的沟通与协调，共享信息和进 展，解决问题和取得共识。每个成员负责实现特定的功能模块。我们确保彼此之 间的工作是互相协调和兼容的，并及时进行交流和整合，共同努力找到最佳的解 决方案。让我们进一步认识到团队协作的伟力，增强了团队协作能力。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>计算机网络实验</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>计算机网络实验</tag>
      </tags>
  </entry>
  <entry>
    <title>鲁棒图像感知哈希实验</title>
    <url>/2023/08/02/Information_Security_Experiment/digital_content_security/DCS1/</url>
    <content><![CDATA[<h1 id="一、-实验目的"><a href="#一、-实验目的" class="headerlink" title="一、 *实验目的*"></a><strong>一、</strong> <em><strong>*实验目的*</strong></em></h1><p>了解鲁棒性内容感知哈希技术的基本特点，设计并实现基于 DCT 的鲁棒性图 </p>
<p>像感知哈希。了解鲁棒性内容感知哈希技术在数字内容保护中的作用，掌握基于 </p>
<p>鲁棒性感知哈希的内容保护方法</p>
<h1 id="二、-实验内容"><a href="#二、-实验内容" class="headerlink" title="二、 *实验内容*"></a><strong>二、</strong> <em><strong>*实验内容*</strong></em></h1><p>本实验实现一种基于视觉特性的图像感知哈希算法，可通过密钥控制哈希序 </p>
<p>列，保证安全性。</p>
<h1 id="三、-系统整体描述和分功能描述"><a href="#三、-系统整体描述和分功能描述" class="headerlink" title="三、 *系统整体描述和分功能描述*"></a><strong>三、</strong> <em><strong>*系统整体描述和分功能描述*</strong></em></h1><h2 id="系统整体描述"><a href="#系统整体描述" class="headerlink" title="*系统整体描述*"></a><em><strong>*系统整体描述*</strong></em></h2><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps23.jpg" alt="img"> </p>
<p>​    </p>
<h2 id="分功能描述"><a href="#分功能描述" class="headerlink" title="*分功能描述*"></a><em><strong>*分功能描述*</strong></em></h2><p>1）读入两幅图像，对图像做预处理</p>
<p>用到的函数rgb2gray()</p>
<p><a href="#buiz8mj-1-I">I</a> &#x3D; rgb2gray(<a href="#buiz8mj-1-RGB">RGB</a>) 将真彩色图像 RGB 转换为灰度图像 I。rgb2gray 函数通过消除色调和饱和度信息，同时保留亮度，来将 RGB 图像转换为灰度图。</p>
<p>2） 对标准化图像进行 8*8 子块划分</p>
<p>用到的函数imresize(Picture1,[64,64])</p>
<p><a href="#d124e713495">B</a> &#x3D; imresize(<a href="#d124e712839">A</a>,<a href="#d124e712884">scale</a>) 返回图像 B，它是将 A 的长宽大小缩放图像 scale 倍之后的图像。输入图像 A 可以是灰度图像、RGB 图像、二值图像或分类图像。</p>
<p>3） 依次对各子块进行二维离散余弦变换</p>
<p>用到的函数	(Picture1,[8 8],fun)</p>
<p>对图像进行分块处理</p>
<p>4)通过密钥伪随机生成服从标准正态的、的 64*64 矩阵</p>
<p>用到的函数	randn(‘state’,key)</p>
<p>返回一个从标准正态分布中得到的随机标量。</p>
<p>5）用高斯低通滤波器进行迭代滤波</p>
<p>用到的函数 fspecial(‘gaussian’)</p>
<p>创建具有指定 type 的二维滤波器</p>
<p>Y &#x3D; cell(1,Hashlen);</p>
<h1 id="四、-实验步骤、结果及分析"><a href="#四、-实验步骤、结果及分析" class="headerlink" title="四、 *实验步骤、结果及分析*"></a><strong>四、</strong> <em><strong>*实验步骤、结果及分析*</strong></em></h1><ol>
<li>读入两幅图像，对图像做预处理：如果读入的是彩色图像，将其转换为</li>
</ol>
<p>灰度图像（rgb2gray）；在灰度图像中利用差值方式将图像重采样为 64*64 </p>
<p>的标准化图表示（imresize） </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Picture1 = rgb2gray(Picture1);  </span><br><span class="line">Picture2 = rgb2gray(Picture2); </span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>对标准化图像进行 8<em>8 子块划分，将标准化图像划分为（64</em>64）&#x2F;（8*8）&#x3D;64 个子块，依次对各子块进行二维离散余弦变换1,1）置为 0； </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% 对标准化图像进行 8*8 子块划分 </span><br><span class="line">Picture1 = imresize(Picture1,[64,64]); </span><br><span class="line">Picture2 = imresize(Picture2,[64,64]); </span><br><span class="line">% 依次对各子块进行二维离散余弦变换 </span><br><span class="line">fun = @dct2; </span><br><span class="line">Picture1 = blkproc(Picture1,[8 8],fun); </span><br><span class="line">Picture2 = blkproc(Picture2,[8 8],fun); </span><br><span class="line">% 并依次将各分块的 DC 系数，即（1,1）置为 0 </span><br><span class="line">Picture1(1,1) = 0; </span><br><span class="line">Picture2(1,1) = 0; </span><br></pre></td></tr></table></figure>




</li>
<li><p>生成 N 个 64*64 伪随机矩阵：首先通过密钥伪随机生成服从标准正态的、</p>
</li>
</ol>
<p>的 64*64 矩阵（randn(‘state’,key)，randn），然后用高斯低通滤波器 </p>
<p>进行迭代滤波（K&#x3D;fspecial(‘gaussian’); Y&#x3D;filter2(K,Y);） </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% 通过密钥伪随机生成服从标准正态的、的 64*64 矩阵 </span><br><span class="line">randn(&#x27;state&#x27;,key); </span><br><span class="line">N = cell(1,Hashlen); </span><br><span class="line">% 用高斯低通滤波器进行迭代滤波 </span><br><span class="line">K = fspecial(&#x27;gaussian&#x27;); </span><br><span class="line">Y = cell(1,Hashlen); </span><br><span class="line">for i = 1:Hashlen </span><br><span class="line"></span><br><span class="line">N&#123;i&#125; = randn(64); </span><br><span class="line">Y&#123;i&#125; = filter2(K,N&#123;i&#125;); </span><br><span class="line">end </span><br></pre></td></tr></table></figure>



<ol start="4">
<li><p>设 DCT 敏感度矩阵 m，对矩阵 m 进行周期延拓得到大小为 64 ×64 的矩阵 M ,并将其每个元素作为 Ic 的对应位置频率系数在特征值计算中的权。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% DCT敏感度矩阵m,周期延拓至64*64 </span><br><span class="line">m = [ </span><br><span class="line">71.43 99.01 86.21 60.24 41.67 29.16 20.88 15.24; </span><br><span class="line">99.01 68.97 75.76 65.79 50.00 36.90 27.25 20.28; </span><br><span class="line">86.21 75.76 44.64 38.61 33.56 27.47 21.74 17.01; </span><br><span class="line">60.24 65.79 38.61 26.53 21.98 18.87 15.92 13.16; </span><br><span class="line">41.67 50.00 33.56 21.98 16.26 13.14 11.48 9.83; </span><br><span class="line">29.16 36.90 27.47 18.87 13.14 10.40 8.64 7.40; </span><br><span class="line">20.88 27.25 21.74 15.92 11.48 8.64 6.90 5.78; </span><br><span class="line">15.24 20.28 17.01 13.16 9.83 7.40 5.78 4.73]; </span><br><span class="line">% 矩阵m进行周期延拓得到大小为64 ×64 的矩阵M </span><br><span class="line">M = repmat(m,8,8); </span><br><span class="line">P1_Hash = ones(1,Hashlen); </span><br><span class="line">P2_Hash = ones(1,Hashlen); </span><br></pre></td></tr></table></figure>


</li>
<li><p>取第一个伪随机矩阵，计算如果 YN &lt;0，则 H(n)&#x3D;0，反之则 H(n)&#x3D;1； </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% 对Hashlen个伪随机矩阵遍历计算</span><br><span class="line">for k = 1:Hashlen</span><br><span class="line">    P1_sum = 0;</span><br><span class="line">    P2_sum = 0;</span><br><span class="line">    for i = 1:64</span><br><span class="line">        for j = 1:64</span><br><span class="line">            P1_sum = P1_sum + Picture1(i,j) * Y&#123;k&#125;(i,j) * M(i,j);</span><br><span class="line">            P2_sum = P2_sum + Picture2(i,j) * Y&#123;k&#125;(i,j) * M(i,j);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    if P1_sum &lt; 0</span><br><span class="line">        P1_Hash(k) = 0;</span><br><span class="line">    end</span><br><span class="line">    if P2_sum &lt; 0</span><br><span class="line">        P2_Hash(k) = 0;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>




</li>
<li><p>循环第 5 步，直到将所有的 N 个 64*64 伪随机矩阵都计算完，最终生成</p>
</li>
</ol>
<p>一个 N 比特的 Hash 向量 </p>
<ol start="7">
<li>比较两幅图像 hash 向量的汉明距离 dis，设定一个合适的阈值 tau，如</li>
</ol>
<p>果 dis&lt;tau，则两幅图像内容一致；反之则是内容不同的两幅图像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% 汉明距离</span><br><span class="line">dis = norm((P1_Hash-P2_Hash)/2*sqrt(norm(P1_Hash)*norm(P2_Hash)));</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>以 DemoImages 中的图片为测试集，分析实验结果。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% 与阈值比较</span><br><span class="line">if tau &lt; dis</span><br><span class="line">    ds = &#x27;不相似&#x27;;</span><br><span class="line">else</span><br><span class="line">    ds = &#x27;相似&#x27;;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<p>9.测试Tau和Hashlen的合理值</p>
<p>Hashlen所影响的是数据的精度，在合理范围内略微降低可以加快运行速率。</p>
<p>当Hashlen&#x3D;100时跑数据较快，从而固定Hashlen&#x3D;100，调试tau值。</p>
<p>Tau取值范围为（0,1）从而开始多次测试选取合适数值。</p>
<p>Tau&#x3D;0.5，结果正确，且多次试验稳定。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps24.jpg" alt="img"> </p>
<h2 id="实验结果及分析"><a href="#实验结果及分析" class="headerlink" title="实验结果及分析"></a><strong>实验结果及分析</strong></h2><p>运行脚本，对样本库进行比对</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps25.jpg" alt="img"> </p>
<p>比对结束后输出结果，结果正确</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps26.jpg" alt="img"> </p>
<h1 id="五、-实验中遇到的问题及改正的方法"><a href="#五、-实验中遇到的问题及改正的方法" class="headerlink" title="五、 *实验中遇到的问题及改正的方法*"></a><strong>五、</strong> <em><strong>*实验中遇到的问题及改正的方法*</strong></em></h1><p>1.不同版本的matlab支持的灰度处理函数不一样，需要选取对应版本的函数。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>数字内容安全实验</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>数字内容安全实验</tag>
        <tag>数学建模实验</tag>
      </tags>
  </entry>
  <entry>
    <title>GAN 的生成器产生图片及换脸检测</title>
    <url>/2023/08/02/Information_Security_Experiment/digital_content_security/DCS2/</url>
    <content><![CDATA[<h1 id="一、-实验目的"><a href="#一、-实验目的" class="headerlink" title="一、 *实验目的*"></a><strong>一、</strong> <em><strong>*实验目的*</strong></em></h1><p>（1） 掌握在 WINDOWS 下安装和使用 GAN 图片生成系统、换脸检测系统 </p>
<p>（2） 掌握 GAN 图片生成系统主要功能模块、换脸检测系统主要功能模块 </p>
<p>（3） GAN 图片生成系统的原理、换脸检测系统的原理</p>
<h1 id="二、-实验内容"><a href="#二、-实验内容" class="headerlink" title="二、 *实验内容*"></a><strong>二、</strong> <em><strong>*实验内容*</strong></em></h1><p>（1） 分析并调试 GAN 图片生成系统程序主要功能模块、换脸检测系统程序主要功能模块 </p>
<p>（2） 选取实验数据集 </p>
<p>（3） 运行 WINDOWS 下的 GAN 图片生成系统、换脸检测系统 </p>
<p>（4） 用 GAN 图片生成系统对实验数据集进行图片生成实验 </p>
<p>（5） 用换脸检测系统对实验数据集进行换脸检测实验</p>
<h1 id="三、-系统整体描述和分功能描述"><a href="#三、-系统整体描述和分功能描述" class="headerlink" title="三、 *系统整体描述和分功能描述*"></a><strong>三、</strong> <em><strong>*系统整体描述和分功能描述*</strong></em></h1><h2 id="系统整体描述"><a href="#系统整体描述" class="headerlink" title="*系统整体描述*"></a><em><strong>*系统整体描述*</strong></em></h2><p>DCGAN系统：</p>
<p>通过GAN来生成生成图片</p>
<p>Deepfakes CNN-Detection系统：</p>
<p>通过CNN算法对图像进行鉴别，辨别是否是伪造信息。</p>
<p>​    </p>
<h2 id="分功能描述"><a href="#分功能描述" class="headerlink" title="*分功能描述*"></a><em><strong>*分功能描述*</strong></em></h2><p>1）生成头像算法训练</p>
<p>建立图像样本库，用Python在动漫素材相关网站爬取或使用网络上已有的数据集，按照固定比例划分训练集和测试集，并对样本进行标准化处理，使图像大小保持，每一张图片拥有唯一ID。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps27.jpg" alt="img"> </p>
<p>其次，选择深度卷积网络，实现目标特征提取以及图像分类。使用Visdom实现训练过程的可视化，通过控制学习率、迭代次数、训练比例等参数，设置多组对照实验，观察实验结果并利用测试集进行多次测试。</p>
<p> python main.py train –gpu –vis&#x3D;False</p>
<p>2）生成动漫头像</p>
<p>使用训练好的生成模型，进行头像生成（说明文件给出的代码有误）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python main.py generate --nogpu --vis=False --netd-path=checkpoints/netd_200.pth --netg-path=checkpoints/netg_200.pth --gen-img=result.png --gen-num=64</span><br></pre></td></tr></table></figure>

<p>3）检测功能，检测一张照片真伪</p>
<p>读取到照片后进行检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python demo.py -f examples/real.png -m weights/blur_jpg_prob0.5.pth</span><br></pre></td></tr></table></figure>

<p>4）批量检测功能</p>
<p>读取照片集进行检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python train.py --name blur_jpg_prob0.5 --blur_prob 0.5 --blur_sig 0.0,3.0 --jpg_prob 0.5 --jpg_method cv2,pil --jpg_qual 30,100 --dataroot ./dataset/ --classes airplane,bird,bicycle,boat,bottle,bus,car,cat,cow,chair,diningtable,dog,person,pottedplant,motorbike,tvmonitor,train,sheep,sofa,horse</span><br></pre></td></tr></table></figure>

<h1 id="四、-实验步骤、结果及分析"><a href="#四、-实验步骤、结果及分析" class="headerlink" title="四、 *实验步骤、结果及分析*"></a><strong>四、</strong> <em><strong>*实验步骤、结果及分析*</strong></em></h1><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="*实验步骤*"></a><em><strong>*实验步骤*</strong></em></h2><p><strong>1.</strong> <em><strong>*安装PYcharm后配置环境*</strong></em></p>
<p>在命令行安装<a href="https://pytorch.org/">PyTorch</a></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps28.jpg" alt="img"> </p>
<p>安装其他支持文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps29.jpg" alt="img"> </p>
<p><strong>2.</strong> <em><strong>*准备数据*</strong></em></p>
<p>在老师给的压缩包中已经包含了准备好的数据。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps30.jpg" alt="img"> </p>
<p><strong>3.</strong> <em><strong>*通过已有数据进行训练*</strong></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python main.py train --gpu --vis=False</span><br></pre></td></tr></table></figure>

<p>这个过程比较慢，可以尝试使用训练好的数据（已在压缩包中给出）</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps31.jpg" alt="img"> </p>
<p>或者选择自己跑数据训练</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps32.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps33.jpg" alt="img"> </p>
<p><strong>4.</strong> <em><strong>*训练完成后即可生成图片*</strong></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python main.py generate --nogpu --vis=False --netd-path=checkpoints/netd_200.pth --netg-path=checkpoints/netg_200.pth --gen-img=result.png --gen-num=64</span><br></pre></td></tr></table></figure>

<p>生成结果会储存在DCGAN文件夹下，可根据修改日期看出是新生成的图片。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps34.jpg" alt="img"> </p>
<p>生成结果如下</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps35.jpg" alt="img"> </p>
<p>第一个实验到此结束。</p>
<p><strong>5.</strong> <em><strong>*配置Deepfakes CNN-Detection实验环境*</strong></em></p>
<p>基本不用发生更改，在第一次配置时已经完成</p>
<p><strong>6.</strong> <em><strong>*尝试运行一张图片，并检测真假*</strong></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python demo.py -f examples/real.png -m weights/blur_jpg_prob0.5.pth</span><br><span class="line"></span><br><span class="line">python demo.py -f examples/fake.png -m weights/blur_jpg_prob0.5.pth</span><br></pre></td></tr></table></figure>

<p>其中真照片运行结果如下</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps36.jpg" alt="img"> </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps37.jpg" alt="img"> </p>
<p>其中假照片运行结果如下</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps38.jpg" alt="img"> </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps39.jpg" alt="img"> </p>
<p>尝试运行数据集检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python demo_dir.py -d examples/realfakedir -m weights/blur_jpg_prob0.5.pth</span><br></pre></td></tr></table></figure>

<p>尝试跑自己的数据集，效果并不好（已在后文中说明）</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps40.jpg" alt="img"> </p>
<p>跑老师给的数据集（airplane）</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps41.jpg" alt="img"> </p>
<ol start="7">
<li>对数据集进行检测</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python eval.py --no_crop --batch_size 1</span><br></pre></td></tr></table></figure>

<p>实验二结束。</p>
<h2 id="实验结果及分析"><a href="#实验结果及分析" class="headerlink" title="实验结果及分析"></a><strong>实验结果及分析</strong></h2><ol>
<li>在实验一中进行多次实验，可以看出每次生成结果都不同。</li>
</ol>
<p>但仿真程度都不是很高</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps42.jpg" alt="img"> <img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps43.jpg" alt="img"> <img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps44.jpg" alt="img"></p>
<p>2.在实验二的单张检测中可以尝试对实验一的生成图片进行检测。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps45.jpg" alt="img"> </p>
<p>首先对总生成结果进行检测，由于其中元素较多识别出错，程旭认为其为真实图片。</p>
<p>但从中截取一幅生成图片进行检测，这次检测结果正确。</p>
<p>说明可以正确检验真伪。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps46.jpg" alt="img"> </p>
<p>3.使用另一种权重进行实验</p>
<p>对比实验可以看出二者之间的差别，0.1版本的准确度更高一些</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps47.jpg" alt="img"> </p>
<p>4.对数据集进行检验</p>
<p>老师给的数据集过大，因此在检测时选取了一个比对的数据集。</p>
<p>对airplane数据集进行测试，测试成功。准确率很高</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps48.jpg" alt="img"> </p>
<h1 id="五、-实验中遇到的问题及改正的方法"><a href="#五、-实验中遇到的问题及改正的方法" class="headerlink" title="五、 *实验中遇到的问题及改正的方法*"></a><strong>五、</strong> <em><strong>*实验中遇到的问题及改正的方法*</strong></em></h1><ol>
<li>在安装其他支持文件时经常安装失败，这里可以提供三种安装方法</li>
</ol>
<p>首先尝试直接使用命令pip install -r requirements.txt安装，如报连接失败错误可以尝试挂梯子再次链接。</p>
<p>其次可以尝试在Pycharm中单个添加。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps49.jpg" alt="img"> </p>
<p>如果上述方法都不可行，只能在官网或镜像站逐一下载，最后将其手动安装。</p>
<p>2.老师给的数据集过大，因此在检测时选取了一个deepfake人脸生成比对的数据集。</p>
<p>在测试前准备选取一真一假两张照片进行单张实验观察结果。由于deepfake技术效果比较好，比对结果显示为二者都为真的概率比较高。</p>
<p>这两张图片为：其中左图为真</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps50.png" alt="img">df0.jpg   <img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps51.png" alt="img">df1.jpg</p>
<p>进行检测的结果显示</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps52.jpg" alt="img"> </p>
<p>虽可以看出伪造成分，但无法证明右图为伪造图片。</p>
<p>其后更改算法权重为另一版本，效果略有升高。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps53.jpg" alt="img"> </p>
<p>但仍然达到不了50%以上，无法证明图片为伪造。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>数字内容安全实验</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>数字内容安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾邮件过滤系统</title>
    <url>/2023/08/02/Information_Security_Experiment/digital_content_security/DCS3/</url>
    <content><![CDATA[<h1 id="一、-实验目的"><a href="#一、-实验目的" class="headerlink" title="一、 *实验目的*"></a><strong>一、</strong> <em><strong>*实验目的*</strong></em></h1><p>（1） 掌握在 WINDOWS 下安装和使用垃圾邮件过滤系统 </p>
<p>（2） 掌握垃圾邮件过滤系统主要功能模块 </p>
<p>（3） 文本内容过滤的原理</p>
<h1 id="二、-实验内容"><a href="#二、-实验内容" class="headerlink" title="二、 *实验内容*"></a><strong>二、</strong> <em><strong>*实验内容*</strong></em></h1><p>（1） 分析并调试垃圾邮件过滤系统程序主要功能模块 </p>
<p>（2） 选取实验数据集 </p>
<p>（3） 运行 WINDOWS 下的垃圾邮件过滤系统 </p>
<p>（4） 用垃圾邮件过滤系统对实验数据集进行过滤实验</p>
<h1 id="三、-系统整体描述和分功能描述"><a href="#三、-系统整体描述和分功能描述" class="headerlink" title="三、 *系统整体描述和分功能描述*"></a><strong>三、</strong> <em><strong>*系统整体描述和分功能描述*</strong></em></h1><h2 id="系统整体描述"><a href="#系统整体描述" class="headerlink" title="*系统整体描述*"></a><em><strong>*系统整体描述*</strong></em></h2><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps54.jpg" alt="img"> </p>
<p>​    </p>
<h2 id="分功能描述"><a href="#分功能描述" class="headerlink" title="*分功能描述*"></a><em><strong>*分功能描述*</strong></em></h2><p>1）预测结果</p>
<p>首先要获得词典。如果列表中的词已在词典中，则加1，否则添加进去。通过计算每个文件中p(s|w)来得到对分类影响最大的15个词。随后计算贝叶斯概率，再计算预测结果正确率。</p>
<p>用到自定义函数</p>
<p>SpamEmailBayes()</p>
<p>2）计算贝叶斯概率</p>
<p> 计算在已知词向量$w&#x3D;(w_1,w_2,…,w_n)$的条件下求包含该词向量邮件是否为垃圾邮件的概率</p>
<p>用到的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calBayes</span>(<span class="params">self, wordList, spamdict, normdict</span>):</span><br><span class="line">  ps_w = <span class="number">1</span></span><br><span class="line">  ps_n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> word, prob <span class="keyword">in</span> wordList.items():</span><br><span class="line">    <span class="built_in">print</span>(word + <span class="string">&quot;/&quot;</span> + <span class="built_in">str</span>(prob))</span><br><span class="line">    ps_w *= (prob)</span><br><span class="line">    ps_n *= (<span class="number">1</span> - prob)</span><br><span class="line">  p = ps_w / (ps_w + ps_n)</span><br><span class="line">  \<span class="comment">#     print(str(ps_w)+&quot;////&quot;+str(ps_n))</span></span><br><span class="line">  <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure>

<p>3）通过计算每个文件中p(s|w)来得到对分类影响最大的15个词</p>
<p>用到的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getTestWords</span>(<span class="params">self, testDict, spamDict, normDict, normFilelen, spamFilelen</span>):</span><br><span class="line">  wordProbList = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> word, num <span class="keyword">in</span> testDict.items():</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> spamDict.keys() <span class="keyword">and</span> word <span class="keyword">in</span> normDict.keys():</span><br><span class="line">      \<span class="comment"># 该文件中包含词个数</span></span><br><span class="line">      pw_s = spamDict[word] / spamFilelen</span><br><span class="line">      pw_n = normDict[word] / normFilelen</span><br><span class="line">      ps_w = pw_s / (pw_s + pw_n)</span><br><span class="line">      wordProbList.setdefault(word, ps_w)</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> spamDict.keys() <span class="keyword">and</span> word <span class="keyword">not</span> <span class="keyword">in</span> normDict.keys():</span><br><span class="line">      pw_s = spamDict[word] / spamFilelen</span><br><span class="line">      pw_n = <span class="number">0.01</span></span><br><span class="line">      ps_w = pw_s / (pw_s + pw_n)</span><br><span class="line">      wordProbList.setdefault(word, ps_w)</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> spamDict.keys() <span class="keyword">and</span> word <span class="keyword">in</span> normDict.keys():</span><br><span class="line">      pw_s = <span class="number">0.01</span></span><br><span class="line">      pw_n = normDict[word] / normFilelen</span><br><span class="line">      ps_w = pw_s / (pw_s + pw_n)</span><br><span class="line">      wordProbList.setdefault(word, ps_w)</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> spamDict.keys() <span class="keyword">and</span> word <span class="keyword">not</span> <span class="keyword">in</span> normDict.keys():</span><br><span class="line">      \<span class="comment"># 若该词不在脏词词典中，概率设为0.4</span></span><br><span class="line">      wordProbList.setdefault(word, <span class="number">0.4</span>)</span><br><span class="line">  <span class="built_in">sorted</span>(wordProbList.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>], reverse=<span class="literal">True</span>)[<span class="number">0</span>:<span class="number">15</span>]</span><br><span class="line">  <span class="keyword">return</span> (wordProbList)</span><br></pre></td></tr></table></figure>

<h1 id="四、-实验步骤、结果及分析"><a href="#四、-实验步骤、结果及分析" class="headerlink" title="四、 *实验步骤、结果及分析*"></a><strong>四、</strong> <em><strong>*实验步骤、结果及分析*</strong></em></h1><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="*实验步骤*"></a><em><strong>*实验步骤*</strong></em></h2><p>1.配置相应实验环境</p>
<p>不报错即可</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps55.jpg" alt="img"> </p>
<p>2.运行成功</p>
<p>显示准确度为0.951530612244898</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps56.jpg" alt="img"> </p>
<p>实验结果及分析</p>
<p>运行后会返回关键词出现频率等信息</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps57.jpg" alt="img"> </p>
<p>最后返回本次运行的准确率</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps58.jpg" alt="img"> </p>
<h1 id="五、-实验中遇到的问题及改正的方法"><a href="#五、-实验中遇到的问题及改正的方法" class="headerlink" title="五、 *实验中遇到的问题及改正的方法*"></a><strong>五、</strong> <em><strong>*实验中遇到的问题及改正的方法*</strong></em></h1><p>本次实验未遇到操作问题</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>数字内容安全实验</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>数字内容安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>图像差分隐私保护方案实验</title>
    <url>/2023/08/02/Information_Security_Experiment/digital_content_security/DCS4/</url>
    <content><![CDATA[<h1 id="一、-实验目的"><a href="#一、-实验目的" class="headerlink" title="一、 *实验目的*"></a><strong>一、</strong> <em><strong>*实验目的*</strong></em></h1><p>了解差分隐私技术的基本特点，设计并实现基于离散傅立叶变换（DFT）的图像差分隐私保护算法。了解差分隐私技术在数字内容保护中的作用，掌握基于差分隐私的内容隐私保护方法。</p>
<h1 id="二、-实验内容"><a href="#二、-实验内容" class="headerlink" title="二、 *实验内容*"></a><strong>二、</strong> <em><strong>*实验内容*</strong></em></h1><p>本实验实现一种基于离散傅立叶变换的图像差分隐私保护算法，可通过隐私预算控制噪声规模，保证隐私安全性，具体过程如下：</p>
<ol>
<li>读入一幅图像，对图像做预处理：如果读入的是彩色图像，将其转换为灰度图像（rgb2gray）；在灰度图像中利用差值方式将图像重采样为128*128的标准化图表示（imresize）IM；</li>
<li>对标准化图像IM进行离散傅立叶变换，得到离散傅立叶变换矩阵FIM；</li>
<li>对离散傅立叶变换矩阵FIM，选取其前k×k个DFT系数，计算给定隐私预算<code>ε</code>时的拉普拉斯机制的参数<code>λ</code>的最小值，以确定拉普拉斯机制需要添加的噪声；</li>
<li>对离散傅立叶变换矩阵FIM，采样一组概率p，在参数<code>λ</code>最小时，计算相应的噪声值，以及融合噪声后的FIM’；</li>
<li>对于FIM和FIM’，分别输入PCA+SVM的人脸识别程序中进行人脸识别分类预测。</li>
<li>给出整个数据集上，人脸识别分类预测的准确率(Accuracy，测试集中分类器正确分类的样本数与总样本数之比)。</li>
<li>以LFW中随机80%的图片为训练集，剩余为测试集，分析实验结果。</li>
<li>关于实验报告</li>
</ol>
<p>（1）关于<code>ε</code>的选取，是一个经验值，其选取依据是根据测试集的准确率决定，给出选取过程。</p>
<p>（2）关于k的选取，k值越大噪声越大,隐私安全性越强，但对人脸识别任务的鲁棒性会降低,因而需设定合适的k值，以满足隐私保护的人脸图像在识别精度和隐私性之间的折衷，给出选取过程。</p>
<h1 id="三、-系统整体描述和分功能描述"><a href="#三、-系统整体描述和分功能描述" class="headerlink" title="三、 *系统整体描述和分功能描述*"></a><strong>三、</strong> <em><strong>*系统整体描述和分功能描述*</strong></em></h1><h2 id="系统整体描述"><a href="#系统整体描述" class="headerlink" title="*系统整体描述*"></a><em><strong>*系统整体描述*</strong></em></h2><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps63.jpg" alt="img"> </p>
<p>​    </p>
<h2 id="分功能描述"><a href="#分功能描述" class="headerlink" title="*分功能描述*"></a><em><strong>*分功能描述*</strong></em></h2><p>1）图像做预处理</p>
<p>如果是彩色图像，转换为灰度图像</p>
<p>将图像重采样为128×128的标准化图像</p>
<p>用到的函数：def preprocess_image(image)</p>
<p>2）对图像做离散傅立叶变换</p>
<p>对图像做离散傅立叶变换，并将结果移动到中心</p>
<p>选取中心的k×k个系数，并返回它们的幅度和相位</p>
<p>用到的函数：def dft_image(image)</p>
<p>3）生成一个服从标准均匀分布的随机数组</p>
<p>根据拉普拉斯分布的逆变换公式，计算噪声值</p>
<p>用到的函数：def laplace_noise(shape, b)</p>
<p>4）对离散傅立叶变换的系数添加拉普拉斯噪声，并还原图像</p>
<p>根据给定的隐私预算，计算拉普拉斯机制的参数b的最小值</p>
<p>采样一组概率p，决定是否添加噪声</p>
<p>计算相应的噪声值，并添加到幅度上</p>
<p>将幅度和相位合并为复数矩阵</p>
<p>进行逆离散傅立叶变换</p>
<p>取实部作为还原后的图像</p>
<p>用到的函数：def idft_image(magnitude_k, phase_k)</p>
<p>5）读取数据集中的图像，并返回一个列表和一个标签数组</p>
<p>遍历数据集中的每个文件夹，每个文件夹代表一个类别</p>
<p>将文件夹的名字转换为整数作为标签遍历每个文件夹中的每个图像文件</p>
<p>对图像做预处理</p>
<p>将图像添加到列表中</p>
<p>将标签添加到数组中</p>
<p>用到的函数：def read_dataset(path)</p>
<p>6）将图像列表转换为特征矩阵，并返回一个训练集和一个测试集</p>
<p> 将图像列表转换为特征矩阵，每个图像的DFT系数作为一行</p>
<p>将幅度矩阵展平为一维数组</p>
<p>利用sklearn的train_test_split函数，按照给定的比例划分训练集和测试集</p>
<p>用到的函数：def split_dataset(images, labels, test_ratio&#x3D;0.2)</p>
<p>7）利用PCA和SVM进行人脸识别，并返回准确率</p>
<p>利用sklearn的PCA模块，对特征矩阵进行降维，保留95%的方差</p>
<p>利用sklearn的SVM模块，对降维后的特征进行分类，使用线性核函数和默认参数 </p>
<p>利用sklearn的metrics模块，计算分类的准确率</p>
<p>用到的函数：def face_recognition(X_train, X_test, y_train, y_test)</p>
<h1 id="四、-实验步骤、结果及分析"><a href="#四、-实验步骤、结果及分析" class="headerlink" title="四、 *实验步骤、结果及分析*"></a><strong>四、</strong> <em><strong>*实验步骤、结果及分析*</strong></em></h1><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="*实验步骤*"></a><em><strong>*实验步骤*</strong></em></h2><ol>
<li>下载win10虚拟机</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps64.jpg" alt="img"> </p>
<ol start="2">
<li>开机后安装conda</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps65.jpg" alt="img"> </p>
<p>Conda安装好后检查版本</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps66.jpg" alt="img"> </p>
<p>配置好conda和pycharm</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps67.jpg" alt="img"> </p>
<p>因为环境配置出现了一些问题，没有使用已给的检测模型，自己进行编写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入所需的库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一些常量</span></span><br><span class="line">k = <span class="number">10</span> <span class="comment"># 选取前k×k个DFT系数</span></span><br><span class="line">p = <span class="number">0.5</span> <span class="comment"># 采样概率</span></span><br><span class="line">epsilon = <span class="number">0.1</span> <span class="comment"># 隐私预算</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，对图像做预处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_image</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="comment"># 如果是彩色图像，转换为灰度图像</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(image.shape) == <span class="number">3</span>:</span><br><span class="line">        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment"># 将图像重采样为128×128的标准化图像</span></span><br><span class="line">    image = cv2.resize(image, (<span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，对图像做离散傅立叶变换，并选取前k×k个系数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dft_image</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="comment"># 对图像做离散傅立叶变换，并将结果移动到中心</span></span><br><span class="line">    f = np.fft.fft2(image)</span><br><span class="line">    fshift = np.fft.fftshift(f)</span><br><span class="line">    <span class="comment"># 选取中心的k×k个系数，并返回它们的幅度和相位</span></span><br><span class="line">    rows, cols = fshift.shape</span><br><span class="line">    crow, ccol = rows//<span class="number">2</span>, cols//<span class="number">2</span></span><br><span class="line">    fshift_k = fshift[crow-k//<span class="number">2</span>:crow+k//<span class="number">2</span>, ccol-k//<span class="number">2</span>:ccol+k//<span class="number">2</span>]</span><br><span class="line">    magnitude_k = np.<span class="built_in">abs</span>(fshift_k)</span><br><span class="line">    phase_k = np.angle(fshift_k)</span><br><span class="line">    <span class="keyword">return</span> magnitude_k, phase_k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义laplace_noise函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">laplace_noise</span>(<span class="params">shape, b</span>):</span><br><span class="line">    <span class="comment"># 生成一个服从标准均匀分布的随机数组</span></span><br><span class="line">    u = np.random.uniform(-<span class="number">0.5</span>, <span class="number">0.5</span>, size=shape)</span><br><span class="line">    <span class="comment"># 根据拉普拉斯分布的逆变换公式，计算噪声值</span></span><br><span class="line">    noise = -b * np.sign(u) * np.log(<span class="number">1</span> - <span class="number">2</span> * np.<span class="built_in">abs</span>(u))</span><br><span class="line">    <span class="keyword">return</span> noise</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，对离散傅立叶变换的系数添加拉普拉斯噪声，并还原图像</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">idft_image</span>(<span class="params">magnitude_k, phase_k</span>):</span><br><span class="line">    <span class="comment"># 根据给定的隐私预算，计算拉普拉斯机制的参数b的最小值</span></span><br><span class="line">    b_min = magnitude_k.size / epsilon</span><br><span class="line">    <span class="comment"># 采样一组概率p，决定是否添加噪声</span></span><br><span class="line">    mask = np.random.binomial(<span class="number">1</span>, p, size=magnitude_k.shape)</span><br><span class="line">    <span class="comment"># 计算相应的噪声值，并添加到幅度上</span></span><br><span class="line">    noise = np.random.laplace(<span class="number">0</span>, b_min, size=magnitude_k.shape)</span><br><span class="line">    magnitude_k_noisy = magnitude_k + mask * noise</span><br><span class="line">    <span class="comment"># 将幅度和相位合并为复数矩阵</span></span><br><span class="line">    complex_k_noisy = magnitude_k_noisy * np.exp(<span class="number">1j</span> * phase_k)</span><br><span class="line">    <span class="comment"># 进行逆离散傅立叶变换</span></span><br><span class="line">    image_noisy = np.fft.ifft2(complex_k_noisy)</span><br><span class="line">    <span class="comment"># 取实部作为还原后的图像</span></span><br><span class="line">    image_noisy = np.real(image_noisy)</span><br><span class="line">    <span class="keyword">return</span> image_noisy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，读取数据集中的图像，并返回一个列表和一个标签数组</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_dataset</span>(<span class="params">path</span>):</span><br><span class="line">    images = [] <span class="comment"># 存储图像的列表</span></span><br><span class="line">    labels = [] <span class="comment"># 存储标签的数组</span></span><br><span class="line">    <span class="keyword">for</span> folder <span class="keyword">in</span> os.listdir(path): <span class="comment"># 遍历数据集中的每个文件夹，每个文件夹代表一个类别</span></span><br><span class="line">        label = <span class="built_in">int</span>(folder) <span class="comment"># 将文件夹的名字转换为整数作为标签</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(os.path.join(path, folder)): <span class="comment"># 遍历每个文件夹中的每个图像文件</span></span><br><span class="line">            image = cv2.imread(os.path.join(path, folder, file)) <span class="comment"># 读取图像文件</span></span><br><span class="line">            image = preprocess_image(image) <span class="comment"># 对图像做预处理</span></span><br><span class="line">            images.append(image) <span class="comment"># 将图像添加到列表中</span></span><br><span class="line">            labels.append(label) <span class="comment"># 将标签添加到数组中</span></span><br><span class="line">    <span class="keyword">return</span> images, np.array(labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，将图像列表转换为特征矩阵，并返回一个训练集和一个测试集</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_dataset</span>(<span class="params">images, labels, test_ratio=<span class="number">0.2</span></span>):</span><br><span class="line">    <span class="comment"># 将图像列表转换为特征矩阵，每个图像的DFT系数作为一行</span></span><br><span class="line">    features = []</span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">        magnitude_k, phase_k = dft_image(image)</span><br><span class="line">        feature = magnitude_k.flatten() <span class="comment"># 将幅度矩阵展平为一维数组</span></span><br><span class="line">        features.append(feature)</span><br><span class="line">    features = np.array(features)</span><br><span class="line">    <span class="comment"># 利用sklearn的train_test_split函数，按照给定的比例划分训练集和测试集</span></span><br><span class="line">    <span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=test_ratio, random_state=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> X_train, X_test, y_train, y_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，利用PCA和SVM进行人脸识别，并返回准确率</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_recognition</span>(<span class="params">X_train, X_test, y_train, y_test</span>):</span><br><span class="line">    <span class="comment"># 利用sklearn的PCA模块，对特征矩阵进行降维，保留95%的方差</span></span><br><span class="line">    <span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">    pca = PCA(n_components=<span class="number">0.95</span>)</span><br><span class="line">    pca.fit(X_train)</span><br><span class="line">    X_train_pca = pca.transform(X_train)</span><br><span class="line">    X_test_pca = pca.transform(X_test)</span><br><span class="line">    <span class="comment"># 利用sklearn的SVM模块，对降维后的特征进行分类，使用线性核函数和默认参数</span></span><br><span class="line">    <span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line">    svm = SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">    svm.fit(X_train_pca, y_train)</span><br><span class="line">    y_pred = svm.predict(X_test_pca)</span><br><span class="line">    <span class="comment"># 利用sklearn的metrics模块，计算分类的准确率</span></span><br><span class="line">    <span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">    accuracy = accuracy_score(y_test, y_pred)</span><br><span class="line">    <span class="keyword">return</span> accuracy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取数据集中的图像和标签</span></span><br><span class="line">    images = []</span><br><span class="line">    labels = []</span><br><span class="line"></span><br><span class="line">    dataset_path = <span class="string">r&#x27;C:\data\study\second_done\number_safe\exercise4\lfwp\Abel_Pacheco&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(dataset_path):</span><br><span class="line">        image_path = os.path.join(dataset_path, filename)</span><br><span class="line">        label = filename.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]  <span class="comment"># 使用文件名作为图像标签</span></span><br><span class="line">        image = cv2.imread(image_path)  <span class="comment"># 读取图像</span></span><br><span class="line">        images.append(image)</span><br><span class="line">        labels.append(label)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 划分训练集和测试集，按照80%和20%的比例</span></span><br><span class="line">    X_train, X_test, y_train, y_test = split_dataset(images, labels, test_ratio=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对测试集中的每个图像，添加拉普拉斯噪声，并还原为图像</span></span><br><span class="line">    images_noisy = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X_test)):</span><br><span class="line">        image = X_test[i]  <span class="comment"># 原始图像</span></span><br><span class="line">        magnitude_k, phase_k = dft_image(image)  <span class="comment"># DFT系数</span></span><br><span class="line">        image_noisy = idft_image(magnitude_k, phase_k)  <span class="comment"># 带噪声的图像</span></span><br><span class="line">        images_noisy.append(image_noisy)</span><br><span class="line">    images_noisy = np.array(images_noisy)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 划分训练集和测试集，使用带噪声的图像作为测试集，按照80%和20%的比例</span></span><br><span class="line">    X_train_noisy, X_test_noisy, y_train_noisy, y_test_noisy = split_dataset(images_noisy, labels, test_ratio=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行人脸识别，分别使用原始图像和带噪声的图像，并打印准确率</span></span><br><span class="line">    accuracy_original = face_recognition(X_train, X_test, y_train, y_test)</span><br><span class="line">    accuracy_noisy = face_recognition(X_train_noisy, X_test_noisy, y_train_noisy, y_test_noisy)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;人脸识别分类预测的准确率为:&#123;:.2f&#125;%&#x27;</span>.<span class="built_in">format</span>(accuracy_original * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 读取数据集中的图像和标签</span></span><br><span class="line">    <span class="comment"># images, labels = read_dataset(&#x27;dataset&#x27;)</span></span><br><span class="line">    <span class="comment"># # 划分训练集和测试集，按照80%和20%的比例</span></span><br><span class="line">    <span class="comment"># X_train, X_test, y_train, y_test = split_dataset(images, labels, test_ratio=0.2)</span></span><br><span class="line">    <span class="comment"># # 对测试集中的每个图像，添加拉普拉斯噪声，并还原为图像</span></span><br><span class="line">    <span class="comment"># images_noisy = []</span></span><br><span class="line">    <span class="comment"># for i in range(len(X_test)):</span></span><br><span class="line">    <span class="comment">#     image = images[i] # 原始图像</span></span><br><span class="line">    <span class="comment">#     magnitude_k, phase_k = dft_image(image) # DFT系数</span></span><br><span class="line">    <span class="comment">#     image_noisy = idft_image(magnitude_k, phase_k) # 带噪声的图像</span></span><br><span class="line">    <span class="comment">#     images_noisy.append(image_noisy)</span></span><br><span class="line">    <span class="comment"># images_noisy = np.array(images_noisy)</span></span><br><span class="line">    <span class="comment"># # 划分训练集和测试集，使用带噪声的图像作为测试集，按照80%和20%的比例</span></span><br><span class="line">    <span class="comment"># X_train_noisy, X_test_noisy, y_train_noisy, y_test_noisy = split_dataset(images_noisy, labels, test_ratio=0.2)</span></span><br><span class="line">    <span class="comment"># # 进行人脸识别，分别使用原始图像和带噪声的图像，并打印准确率</span></span><br><span class="line">    <span class="comment"># accuracy_original = face_recognition(X_train, X_test, y_train, y_test)</span></span><br><span class="line">    <span class="comment"># accuracy_noisy = face_recognition(X_train_noisy, X_test_noisy, y_train_noisy, y_test_noisy)</span></span><br><span class="line">    <span class="comment"># print(&#x27;原始图像的人脸识别准确率为：&#123;:.2f&#125;%&#x27;.format)</span></span><br></pre></td></tr></table></figure>



<h2 id="实验结果及分析"><a href="#实验结果及分析" class="headerlink" title="实验结果及分析"></a><strong>实验结果及分析</strong></h2><p>对检测图片集进行运行</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps68.jpg" alt="img"> </p>
<p>运行一段时间后反馈运行结果</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps69.jpg" alt="img"> </p>
<p>可以看见反馈结果精准</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>数字内容安全实验</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>数字内容安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>组合逻辑实验报告</title>
    <url>/2023/07/30/Information_Security_Experiment/digital_logic/DL1/</url>
    <content><![CDATA[<h1 id="实验一-8421码和格雷码的转换"><a href="#实验一-8421码和格雷码的转换" class="headerlink" title="实验一   8421码和格雷码的转换"></a>实验一   8421码和格雷码的转换</h1><h2 id="一、-实验内容"><a href="#一、-实验内容" class="headerlink" title="一、 实验内容"></a><strong>一、</strong> 实验内容</h2><p>利用 VHDL 语言设计一个 4 位 8421 码到 4 位格雷码的编码器。 </p>
<p>使用波形图仿真验证其功能。</p>
<h2 id="二、-设计过程"><a href="#二、-设计过程" class="headerlink" title="二、 设计过程"></a><strong>二、</strong> 设计过程</h2><p><img src="D:\my_data\blog\zyhblog-img\wps7.jpg" alt="img"> </p>
<p><img src="D:\my_data\blog\zyhblog-img\wps8.jpg" alt="img"> </p>
<h2 id="三、-源代码"><a href="#三、-源代码" class="headerlink" title="三、 源代码"></a><strong>三、</strong> 源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library ieee;</span><br><span class="line">use ieee.std_logic_1164.all;</span><br><span class="line">entity combination1 is</span><br><span class="line">port(a:in std_logic_vector (3 downto 0);</span><br><span class="line">	  b:out std_logic_vector (3 downto 0));</span><br><span class="line">end entity combination1;</span><br><span class="line">architecture a of combination1 is</span><br><span class="line">begin </span><br><span class="line">	b(0) &lt;= a(0);</span><br><span class="line">	b(1) &lt;= a(0) xor a(1); </span><br><span class="line">	b(2) &lt;= a(1) xor a(2);</span><br><span class="line">	b(3) &lt;= a(2) xor a(3);</span><br><span class="line">end architecture;</span><br></pre></td></tr></table></figure>



<h2 id="四、-仿真验证与实验结果"><a href="#四、-仿真验证与实验结果" class="headerlink" title="四、 仿真验证与实验结果"></a><strong>四、</strong> 仿真验证与实验结果</h2><p><img src="D:\my_data\blog\zyhblog-img\wps9.jpg" alt="img"> </p>
<p>由电路可以看出，满足真值表所要求效果。</p>
<h1 id="实验二-数值比较器"><a href="#实验二-数值比较器" class="headerlink" title="实验二 数值比较器"></a>实验二 数值比较器</h1><h2 id="一、-实验内容-1"><a href="#一、-实验内容-1" class="headerlink" title="一、 实验内容"></a><strong>一、</strong> 实验内容</h2><p>数值比较器是对两个位数相同的二进制数进行比较并判定其大小关系的算术运算电路。 </p>
<p>使用 if 语句编写对两个 4 位二进制数进行比较的 VHDL 程序，其中 A 和 B 分别是参与比较的两个 4 位二进制数，YA、YB、YC 是用来分别表示 A&gt;B、A&lt;B、A&#x3D;B 的 3 个输出端。 </p>
<p>使用波形图仿真验证其功能。</p>
<h2 id="二、-设计过程-1"><a href="#二、-设计过程-1" class="headerlink" title="二、 设计过程"></a><strong>二、</strong> 设计过程</h2><p>设计两个输入变量的比较器，只需将大于等于小于分三种情况输出即可。</p>
<h2 id="三、-源代码-1"><a href="#三、-源代码-1" class="headerlink" title="三、 源代码"></a><strong>三、</strong> 源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library ieee;</span><br><span class="line">	use ieee.std_logic_1164.all;</span><br><span class="line">	entity combination2 is</span><br><span class="line">		port(a,b:in std_logic_vector(3 downto 0);</span><br><span class="line">				y1,y2,y3:out std_logic);</span><br><span class="line">	end entity combination2;</span><br><span class="line">architecture b of combination2 is</span><br><span class="line">begin</span><br><span class="line">	process(a,b)</span><br><span class="line">	begin</span><br><span class="line">		if(a&gt;b)then </span><br><span class="line">			y1 &lt;= &#x27;1&#x27;;</span><br><span class="line">			y2 &lt;= &#x27;0&#x27;;</span><br><span class="line">			y3 &lt;= &#x27;0&#x27;;</span><br><span class="line">		elsif(a=b)then</span><br><span class="line">			y1 &lt;= &#x27;0&#x27;;</span><br><span class="line">			y2 &lt;= &#x27;1&#x27;;</span><br><span class="line">			y3 &lt;= &#x27;0&#x27;;</span><br><span class="line">		elsif(a&lt;b)then</span><br><span class="line">			y1 &lt;= &#x27;0&#x27;;</span><br><span class="line">			y2 &lt;= &#x27;0&#x27;;</span><br><span class="line">			y3 &lt;= &#x27;1&#x27;;</span><br><span class="line">		end if;</span><br><span class="line">	end process;</span><br><span class="line">end architecture;</span><br><span class="line">		</span><br></pre></td></tr></table></figure>



<h2 id="四、-仿真验证与实验结果-1"><a href="#四、-仿真验证与实验结果-1" class="headerlink" title="四、 仿真验证与实验结果"></a><strong>四、</strong> 仿真验证与实验结果</h2><p><img src="D:\my_data\blog\zyhblog-img\wps10.jpg" alt="img"> </p>
<p>为验证实验结果，采用a从0000累加1，b从0000累加4的方法，对比a、b的大小。其中可以观察到，0111|0011时大于端输出1；0100|0100时等于端输出1；0001|0101时小于端，说明实验成功。</p>
<h1 id="实验三-全加器"><a href="#实验三-全加器" class="headerlink" title="实验三 全加器"></a>实验三 全加器</h1><h2 id="一、实验内容"><a href="#一、实验内容" class="headerlink" title="一、实验内容"></a>一、实验内容</h2><p>把加数、被加数和低位进位逻辑三者加起来的电路称为全加器。其逻辑表达式为 </p>
<p>Si&#x3D;Ai⊕Bi⊕Ci-1，Ci&#x3D;(Ai⊕Bi)Ci-1+ AiBi。其真值表如下表所示。 </p>
<p><img src="D:\my_data\blog\zyhblog-img\wps11.jpg" alt="img"> </p>
<p>根据全加器的电路图和真值表，设计一个 VHDL 程序实现全加器。使用波形图仿真验 </p>
<p>证其功能</p>
<h2 id="二、设计过程"><a href="#二、设计过程" class="headerlink" title="二、设计过程"></a>二、设计过程</h2><p>逻辑表达式已经给出，根据给定逻辑表达式设计电路即可。</p>
<h2 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library ieee;</span><br><span class="line">	use ieee.std_logic_1164.all;</span><br><span class="line">	entity combination3 is</span><br><span class="line">		port(a,b,c:in std_logic;</span><br><span class="line">				co,so:out std_logic);</span><br><span class="line">end combination3;</span><br><span class="line">architecture a of combination3 is</span><br><span class="line">	begin</span><br><span class="line">		so&lt;=a xor b xor c;</span><br><span class="line">		co&lt;=((a xor b)and c)or(a and b);</span><br><span class="line">end architecture;	</span><br></pre></td></tr></table></figure>



<h2 id="四、-仿真验证与实验结果-2"><a href="#四、-仿真验证与实验结果-2" class="headerlink" title="四、 仿真验证与实验结果"></a><strong>四、</strong> 仿真验证与实验结果</h2><p><img src="D:\my_data\blog\zyhblog-img\wps12.jpg" alt="img"> </p>
<p>图中各种情况均以表现出来，数值与真值表中相同，说明实验成功。</p>
<h1 id="实验四-3-线-8线译码器"><a href="#实验四-3-线-8线译码器" class="headerlink" title="实验四  3 线-8线译码器"></a>实验四  3 线-8线译码器</h1><h2 id="一、实验内容-1"><a href="#一、实验内容-1" class="headerlink" title="一、实验内容"></a>一、实验内容</h2><p>译码器是一个多输入、多输出的组合逻辑电路。它的作用是把给定的代码进行“翻译”， </p>
<p>变成相应的状态，使输出通道中相应的一路有信号输出。译码器在数字系统中有广泛的用途， </p>
<p>不仅用于代码的转换、终端的数字显示，还用于数据分配、存储器寻址和组合控制信号等， </p>
<p>不同的功能可选用不同种类的译码器。 </p>
<p>译码器可分为通用译码器和数码显示译码器两大类，前者又分为变量译码器和代码变换 </p>
<p>译码器。 </p>
<p>描述一个 3 线-8 线译码器，使能端为 G1、G2A、G2B，地址选择端为 A[2..0]，输出端 </p>
<p>为总线 Y。</p>
<p><img src="D:\my_data\blog\zyhblog-img\wps13.jpg" alt="img"> </p>
<h2 id="二、设计过程-1"><a href="#二、设计过程-1" class="headerlink" title="二、设计过程"></a>二、设计过程</h2><p>根据给出的真值表，用 case 语句描述电路，利用真值表辅助，使用 VHDL 语言编写出程序。使用波形图仿真验证其功能。</p>
<h2 id="三、源代码-1"><a href="#三、源代码-1" class="headerlink" title="三、源代码"></a>三、源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library ieee;</span><br><span class="line">use ieee.std_logic_1164.all;</span><br><span class="line">entity combination4 is</span><br><span class="line">	port(G1,G2a,G2b:in std_logic;</span><br><span class="line">			A:in std_logic_vector(2 downto 0);</span><br><span class="line">			Y:out std_logic_vector(7 downto 0));</span><br><span class="line">end entity combination4;</span><br><span class="line">architecture a of combination4 is</span><br><span class="line">begin</span><br><span class="line">	process(A,G1,G2a,G2b)</span><br><span class="line">	begin</span><br><span class="line">		if(G1=&#x27;1&#x27; and G2a=&#x27;1&#x27; and G2b=&#x27;1&#x27;)then</span><br><span class="line">			case A is</span><br><span class="line">				when &quot;000&quot;=&gt;Y&lt;=&quot;00000001&quot;;</span><br><span class="line">				when &quot;001&quot;=&gt;Y&lt;=&quot;00000010&quot;;</span><br><span class="line">				when &quot;010&quot;=&gt;Y&lt;=&quot;00000100&quot;;</span><br><span class="line">				when &quot;011&quot;=&gt;Y&lt;=&quot;00001000&quot;;</span><br><span class="line">				when &quot;100&quot;=&gt;Y&lt;=&quot;00010000&quot;;</span><br><span class="line">				when &quot;101&quot;=&gt;Y&lt;=&quot;00100000&quot;;</span><br><span class="line">				when &quot;110&quot;=&gt;Y&lt;=&quot;01000000&quot;;</span><br><span class="line">				when &quot;111&quot;=&gt;Y&lt;=&quot;10000000&quot;;</span><br><span class="line">			end case;</span><br><span class="line">		else</span><br><span class="line">			y&lt;=&quot;00000000&quot;;</span><br><span class="line">		end if;</span><br><span class="line">	end process;</span><br><span class="line">end architecture;</span><br></pre></td></tr></table></figure>



<h2 id="四、-仿真验证与实验结果-3"><a href="#四、-仿真验证与实验结果-3" class="headerlink" title="四、 仿真验证与实验结果"></a><strong>四、</strong> 仿真验证与实验结果</h2><p><img src="D:\my_data\blog\zyhblog-img\wps14.jpg" alt="img"> </p>
<p>从波形图可以看出输出Y和输入的三位二进制数一一对应，功能实现。</p>
<h1 id="实验五表决器"><a href="#实验五表决器" class="headerlink" title="实验五表决器"></a>实验五表决器</h1><h2 id="一、实验内容-2"><a href="#一、实验内容-2" class="headerlink" title="一、实验内容"></a>一、实验内容</h2><p>用 VHDL 语言设计实现一个 4 人表决器，多数人赞成决议表示通过，否则决议不通过。 </p>
<p>使用波形图仿真验证其功能。</p>
<h2 id="二、设计过程-2"><a href="#二、设计过程-2" class="headerlink" title="二、设计过程"></a>二、设计过程</h2><p><img src="D:\my_data\blog\zyhblog-img\wps15.jpg" alt="img"> </p>
<p>得Y&#x3D;A1A2A3+A2A3A4+A1A2A4+A1A3A4+A1A2A3A4</p>
<h2 id="三、源代码-2"><a href="#三、源代码-2" class="headerlink" title="三、源代码"></a>三、源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library ieee;</span><br><span class="line">	use ieee.std_logic_1164.all;</span><br><span class="line">	entity combination5 is</span><br><span class="line">		port(A:in std_logic_vector(3 downto 0);</span><br><span class="line">				Y:out std_logic);</span><br><span class="line">end combination5;</span><br><span class="line">architecture a of combination5 is</span><br><span class="line">	begin</span><br><span class="line">		Y&lt;=(A(0) and A(1) and A(2)) or (A(0) and A(1) and A(3)) or (A(0) and A(3) and A(2)) or (A(3) and A(1) and A(2)) or (A(0) and A(1) and A(2) and A(3));</span><br><span class="line">end architecture;</span><br></pre></td></tr></table></figure>



<h2 id="四、-仿真验证与实验结果-4"><a href="#四、-仿真验证与实验结果-4" class="headerlink" title="四、 仿真验证与实验结果"></a><strong>四、</strong> 仿真验证与实验结果</h2><p><img src="D:\my_data\blog\zyhblog-img\wps16.jpg" alt="img"> </p>
<p>如图中信号，当输入用两个以上为1时，输出为1，满足题目要求。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>数字逻辑</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>数字逻辑实验</tag>
      </tags>
  </entry>
  <entry>
    <title>面向内容保护的区块链系统实验</title>
    <url>/2023/08/02/Information_Security_Experiment/digital_content_security/DCS5/</url>
    <content><![CDATA[<h1 id="一、-实验目的"><a href="#一、-实验目的" class="headerlink" title="一、 *实验目的*"></a><strong>一、</strong> <em><strong>*实验目的*</strong></em></h1><p>（1） 掌握在Linux下安装和使用版权保护区块链系统</p>
<p>（2） 掌握版权保护区块链系统主要功能模块</p>
<p>（3） 区块链的原理</p>
<h1 id="二、-实验内容"><a href="#二、-实验内容" class="headerlink" title="二、 *实验内容*"></a><strong>二、</strong> <em><strong>*实验内容*</strong></em></h1><p>（1） 分析并调试版权保护区块链系统程序主要功能模块</p>
<p>（2） 选取测试实验数据（txt文本、mp3音频、jpg图像）</p>
<p>（3） 运行Linux下的版权保护区块链系统</p>
<p>（4） 用版权保护区块链系统对实验测试数据提取版权信息进行不重复的上链。</p>
<h1 id="三、-系统整体描述和分功能描述"><a href="#三、-系统整体描述和分功能描述" class="headerlink" title="三、 *系统整体描述和分功能描述*"></a><strong>三、</strong> <em><strong>*系统整体描述和分功能描述*</strong></em></h1><h2 id="系统整体描述"><a href="#系统整体描述" class="headerlink" title="*系统整体描述*"></a><em><strong>*系统整体描述*</strong></em></h2><p>BitRights系统实现了基于区块链的数字版权保护概念验证。用户上传媒体文件，并永久声明其作品的所有权。网络上的任何人都可以查看已发表的作品并验证作者的正确性。此外，系统会检测上传作品与已发表作品是否过于相似，并进行禁止。目前支持音频、图像和文本文件。</p>
<p>每当用户上传文件时，一个新的区块就会被添加到区块链中。该块包含作品的标题、作者、下载文件的路径&#x2F;链接、文件的哈希值、作者的公钥、时间戳和前一个块的哈希值。其中使用文件的散列而不是原始数据来保持块大小较小。同时其中包含的公钥可以使作者知道相应的密钥，从而证明所有权。与任何区块链一样，前一个区块的哈希值允许用户验证该链是否未被篡改。</p>
<p>​    </p>
<h2 id="分功能描述"><a href="#分功能描述" class="headerlink" title="*分功能描述*"></a><em><strong>*分功能描述*</strong></em></h2><p>1）Blockchain上链</p>
<p>用来实现整个系统中所有交易数据的网络的概念。包含了一系列方法和属性，用于管理和操作区块链。该类可以包括创建新的区块、添加交易数据到区块链、验证区块的有效性、搜索特定的交易等功能。</p>
<p>2）verify_block(self, block)</p>
<p>这段代码通过迭代self.chain中的每个块来验证新块block的原创性。它首先检查新块和每个先前块的genre是否相同。然后，根据genre的类型执行相应的检查。</p>
<p>如果genre为Audio，则调用ac.calc_accuracy函数计算新块和先前块音频文件的相似度得分score。如果相似度得分大于0.9，表示新块的音频文件与先前块的音频文件相似度过高，返回0表示验证失败。</p>
<p>如果genre为Text，则调用tc.check_text_similarity函数检查新块和先前块文本文件的相似度得分score。如果相似度得分小于100，表示新块的文本文件与先前块的文本文件相似度过低，返回0表示验证失败。</p>
<p>如果genre为Image，则调用ic.calc_accuracy函数计算新块和先前块图像文件的相似度得分score。如果相似度得分小于0.4，表示新块的图像文件与先前块的图像文件相似度过低，返回0表示验证失败。</p>
<p>3）lookup(self, transaction)</p>
<p>这段代码通过迭代 self.chain 中的每个块来查找与给定交易数据 transaction 相关的先前块。它首先检查每个先前块的 genre 是否与给定交易的 genre 相同。然后，根据 genre 的类型执行相应的检查。</p>
<p>如果 genre 为 Audio，则调用 ac.calc_accuracy 函数计算给定交易的音频文件与先前块音频文件之间的相似度得分 score。如果相似度得分大于0.9，表示给定交易的音频文件与先前块的音频文件相似度过高，直接返回该先前块。</p>
<p>如果 genre 为 Text，则调用 tc.check_text_similarity 函数检查给定交易的文本文件与先前块文本文件之间的相似度得分 score。如果相似度得分小于100，表示给定交易的文本文件与先前块的文本文件相似度过低，直接返回该先前块。</p>
<p>如果 genre 为 Image，则调用 ic.calc_accuracy 函数计算给定交易的图像文件与先前块图像文件之间的相似度得分 score。如果相似度得分小于0.4，表示给定交易的图像文件与先前块的图像文件相似度过低，直接返回该先前块。</p>
<p>4）upload()</p>
<p>检查请求中是否包含名为 contentFile 的文件。如果没有该文件，返回一个带有错误信息的 JSON 响应。</p>
<p>接下来从请求中获取 contentFile 文件，并将其存储在变量 file 中。</p>
<p>根据请求中的 action 值进行不同的操作。如果 action 是 “lookup”，表示进行查找操作。它将上传的文件保存在临时文件夹中，并构建一个包含了文件的信息的字典 lookup_media。然后，调用 blockchain.lookup 方法来查找与该文件相关的先前块。如果找不到匹配的先前块，响应中的 unique 属性将为 True，表示该文件是唯一的。如果找到了匹配的先前块，响应中的 unique 属性将为 False，同时返回匹配的块信息和一条附加消息。</p>
<p>如果 action 是 “publish”，表示进行发布操作，即将文件添加到区块链中。</p>
<p>如果 action 不是 “lookup” 也不是 “publish”，则默认将文件保存到上传文件夹中。</p>
<p>最后，根据不同的响应结果，使用 jsonify 方法将响应转换为 JSON 格式，并返回 HTTP 状态码 200 表示成功。</p>
<h1 id="四、-实验步骤、结果及分析"><a href="#四、-实验步骤、结果及分析" class="headerlink" title="四、 *实验步骤、结果及分析*"></a><strong>四、</strong> <em><strong>*实验步骤、结果及分析*</strong></em></h1><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="*实验步骤*"></a><em><strong>*实验步骤*</strong></em></h2><ol>
<li>打开kali虚拟机</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps70.jpg" alt="img"> </p>
<ol start="2">
<li>检查python版本号</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps71.jpg" alt="img"> </p>
<ol start="3">
<li>sh文件内容运行失败，选择手动运行</li>
</ol>
<p>下载virtualenv</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps72.jpg" alt="img"> </p>
<p>再次运行install.sh</p>
<p>下载还是失败，挂一下清华源</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps73.jpg" alt="img"> </p>
<p>再次尝试，下载的很快</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps74.jpg" alt="img"> </p>
<p>但python版本不对，和软件包不兼容。</p>
<p>改用Anaconda，放弃编译环境了。</p>
<p>安装Anaconda</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps75.jpg" alt="img"> </p>
<p>安装完成</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps76.jpg" alt="img"> </p>
<p>随后再环境中安装软件包。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps77.jpg" alt="img"> </p>
<p>4.安装差不多了，仍然有安不上的</p>
<p>先运行一下程序试试</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps78.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps79.jpg" alt="img"> </p>
<p>安装报错所需要的文件包</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps80.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps81.jpg" alt="img"> </p>
<p>对于较为麻烦的image-match选择直接从github下载源文件安装</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps82.jpg" alt="img"> </p>
<p>5.程序运行成功</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps83.jpg" alt="img"> </p>
<p>可以打开网页界面</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps84.jpg" alt="img"> </p>
<p>但后续发现需要使用gpg生成密钥</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps85.jpg" alt="img"> </p>
<p>6.再去安装gpg</p>
<p>升级apt</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps86.jpg" alt="img"> </p>
<p>安装gog后生成密钥</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps87.jpg" alt="img"> </p>
<p>设置密码12345678</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps88.jpg" alt="img"> </p>
<p>证书生成完毕</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps89.jpg" alt="img"> </p>
<p>输入密钥</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps90.jpg" alt="img"> </p>
<p>上传成功</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps91.jpg" alt="img"> </p>
<h2 id="实验结果及分析"><a href="#实验结果及分析" class="headerlink" title="实验结果及分析"></a><strong>实验结果及分析</strong></h2><p>1.在实验过程基础上又上传了一个mp3文件</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps92.jpg" alt="img"> </p>
<p>此时可以在uploads文件夹下看见上传的文件</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps93.jpg" alt="img"> </p>
<p>通过view Blochain也可以看见上传的文件</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps94.jpg" alt="img"> </p>
<p>2.此时在上传一张蒙娜丽莎</p>
<p>先通过lookup检测，可以看见没有相似文件</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps95.jpg" alt="img"> </p>
<p>在进行上传</p>
<p>3.在尝试上传蒙娜丽莎2</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps96.jpg" alt="img"> </p>
<p>检测会报错，说已有相似图片。说明功能成功</p>
<p>（显示有点问题）已有功能图片显示在这里</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps97.jpg" alt="img"> </p>
<p>4.以上过程说明实验成功</p>
<p>证明了用版权保护区块链系统可以对实验测试数据实现提取版权信息进行不重复的上链。</p>
<h1 id="五、-实验中遇到的问题及改正的方法"><a href="#五、-实验中遇到的问题及改正的方法" class="headerlink" title="五、 *实验中遇到的问题及改正的方法*"></a><strong>五、</strong> <em><strong>*实验中遇到的问题及改正的方法*</strong></em></h1><ol>
<li>下载sh中文件会出错</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps98.jpg" alt="img"> </p>
<p>可以手动运行一步步下载。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps99.jpg" alt="img"> </p>
<p>2.安装时报错</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps100.jpg" alt="img"> </p>
<p>读代码知道要先按numpy 1.16.3,直接上清华源</p>
<p>pip install -U numpy&#x3D;&#x3D;1.16.3 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps101.jpg" alt="img"> </p>
<p>还是报错，选择用pycharm解决</p>
<p>安装pycharm</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps102.jpg" alt="img"> </p>
<p>重新配置了一下环境，再安装软件包</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps103.jpg" alt="img"> </p>
<ol start="2">
<li>配置环境需要python3.6的版本</li>
</ol>
<p>需要重新安装python再配置环境</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps104.jpg" alt="img"> </p>
<p>3.升级apt的时候报错</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps105.jpg" alt="img"> </p>
<p>需要安装</p>
<p>apt install binutils</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>数字内容安全实验</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>数字内容安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>建立SIR模型预测疫情走势</title>
    <url>/2023/08/02/Information_Security_Experiment/mathematics_modeling/MM1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>近年来，各种全新的传染病层出不穷，还有许多曾经被人类消灭和控制住的传染病也发生变异，再次出现在人们的视野中。这些流行病、传染病对我们造成的袭击事件时有出现，且都造成了程度不一的社会影响。现如今我们正面临着严峻的传染病威胁，在这种情况下如何最大限度的控制疫情，研究疫情走势，从而进行经济和民生调控，降低疫情对人们生活的影响，成为了一个十分重要的课题。流行病学模型分析正是对这一问题的主要解决方案，他可以有效对疫情形势走势进行预测，并提供有利的健康策略和科学措施。</p>
<p>在长期的科学研究中，人们在对传染病模型的研究中以微分方程为基本研究工具基于不同的假设发展出了SI, SIS和SIR模型等较为成熟的理论,这些理论都有助于我们对流行病学发展进行深入分析，从而预测出更为科学的结论。</p>
<p>在此，本文便对一些科学分析模型进行了研究与实践，并对主要的SIR模型加以深化，观察其预测结果并得出一系列结论。</p>
<h2 id="1-模型的建立"><a href="#1-模型的建立" class="headerlink" title="1 模型的建立"></a><strong>1 模型的建立</strong></h2><h3 id="1-1-基本假设"><a href="#1-1-基本假设" class="headerlink" title="1.1 基本假设"></a>1.1 <strong>基本假设</strong></h3><p>在疾病传染期内考察地区的总人数不变, 记为N。</p>
<p>人群分为：</p>
<p>S为易感者 (Susceptible)，指未得病者，但缺乏免疫能力，容易受到感染的人群；</p>
<p>E为暴露者 (Exposed)，指接触过感染者，但暂时无传播能力，处于潜伏期的人群；</p>
<p>I为感染者 (Infective)，指染上传染病的患者，可以传播给 S 类成员；</p>
<p>R为免疫者 (Recovered)，指具有一定强度免疫力的人，不会因接触I类成员而感染。</p>
<h3 id="1-2-常用模型"><a href="#1-2-常用模型" class="headerlink" title="1.2 常用模型"></a>1.2 <strong>常用模型</strong></h3><p>1）SI模型</p>
<p>SI模型只考虑易感者和感染者，易感者会因接触不断被感染。</p>
<p>其微分方程为：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1-1690963839564-4.jpg" alt="img"> </p>
<p>其中<img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2-1690963839564-2.jpg" alt="img">为感染率。</p>
<p>2）SIS模型 </p>
<p>该模型依然只考虑易感者和感染者，感染者得到治疗后会恢复成易感者，且恢复后依然可能得病。</p>
<p>其微分方程为：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3-1690963839564-3.jpg" alt="img"> </p>
<p>其中<img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4-1690963839564-1.jpg" alt="img">为感染率，<img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5-1690963839564-5.jpg" alt="img">为治愈率。</p>
<p>3）SIR模型</p>
<p>该模型最为常见且普遍。考虑易感者、感染者与康复者，其中感染者接受治疗成为康复者，康复者因为得到抗体不会再成为易感者。</p>
<p>其微分方程为：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6-1690963839566-6.jpg" alt="img"> </p>
<p>其中<img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps7-1690963839566-9.jpg" alt="img">为感染率，<img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps8-1690963839566-10.jpg" alt="img">为治愈率。</p>
<p>4）SIRS模型</p>
<p>该模型考虑易感者、感染者与康复者，其中康复者获得抗体能够抵抗一段时间，长时间后抗体浓度下降会成为易感者。</p>
<p>其微分方程为：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps9-1690963839566-7.jpg" alt="img"> </p>
<p>其中<img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps10-1690963839566-11.jpg" alt="img">为感染率，<img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps11-1690963839566-8.jpg" alt="img">为治愈率，<img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps12-1690963839566-12.jpg" alt="img">为复感率。</p>
<p>5）SEIR模型</p>
<p>该模型考虑易感者、潜伏者、感染者与康复者，其中易感人群感染后会经历一段时间潜伏期才会爆发。</p>
<h3 id="1-3-模型实现"><a href="#1-3-模型实现" class="headerlink" title="1.3 模型实现"></a>1.3 <strong>模型实现</strong></h3><p>对上述四种模型进行评估测试，都以0.1%感染率作为起始数据，初始治愈率设定为0.02%。在统一标准下进行数据测试。</p>
<p>SI模型</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps13-1690963839566-13.jpg" alt="img"> </p>
<p>SI模型运行结果为所有人都被感染。</p>
<p>SIS模型</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps14-1690963839566-14.jpg" alt="img"> </p>
<p>该模型最后感染人口和健康人口趋于平衡，达到动态平衡。</p>
<p>SIR模型</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps15-1690963839566-18.jpg" alt="img"> </p>
<p>通过波动调整，最后达到群体免疫。</p>
<p>SIRS模型</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps16-1690963839566-17.jpg" alt="img"> </p>
<p>波动后，最后达到动态平衡。</p>
<h3 id="1-4模型总结"><a href="#1-4模型总结" class="headerlink" title="1.4模型总结"></a><strong>1.4模型总结</strong></h3><p>通过对四种模型进行对比，可以看出SIR模型对现阶段突发性疫情有最准确的拟合效果。可以更加真实的反映出传染病疫情的发展趋势。</p>
<p>相比于SI模型，SIR模型能够更好地考虑康复因素，即感染者在一段时间后可能康复并具有免疫力，这使得SIR模型更能够准确地描述真实的疾病传播情况。</p>
<p>相比于SIS模型，SIR模型考虑了康复因素，这使得SIR模型能够更好地描述疾病在人群中的传播和扩散，特别是在长期时间尺度上。而SIS模型则认为感染者没有获得免疫力，因此该模型更适用于描述一些短暂的疾病流行。</p>
<p>相比于SIRS模型，SIR模型将免疫力获得和失去过程简化为了一次性事件，这样使得模型更加简单易懂，且更适用于描述病毒一次性感染后获得永久免疫力的情况。而SIRS模型则认为康复者可能会失去免疫力，需要重新变为易感者，这使得该模型更适用于描述疾病传播周期较长的情况。</p>
<p>此外SIR模型更加适用于大规模流行病，由于SIR模型考虑了康复因素和免疫力获得和失去过程，因此它更适合于描述大规模流行病的传播。在大规模流行病中，康复者人数占总感染人数的比例可能很高，因此需要一个能够反映康复者影响的模型。</p>
<p>总之，SIR模型可以对流行病疫情发展趋势进行最好的拟合，反映出最为真实的影响。</p>
<h2 id="2-基于SIR模型对新冠疫情走势进行探讨"><a href="#2-基于SIR模型对新冠疫情走势进行探讨" class="headerlink" title="2 基于SIR模型对新冠疫情走势进行探讨"></a><strong>2 基于SIR模型对新冠疫情走势进行探讨</strong></h2><h3 id="2-1通过SIR模型建模并实现与现实情况对比"><a href="#2-1通过SIR模型建模并实现与现实情况对比" class="headerlink" title="2.1通过SIR模型建模并实现与现实情况对比"></a><strong>2.1通过SIR模型建模并实现与现实情况对比</strong></h3><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps17-1690963839566-15.jpg" alt="img">SIR模型计算</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps18-1690963839566-19.jpg" alt="img"></h3><p>主要模型运用过程</p>
<h3 id="2-2对比结果"><a href="#2-2对比结果" class="headerlink" title="2.2对比结果"></a><strong>2.2对比结果</strong></h3><p>导入北京2020.1~2020.3的新冠疫情感染数据绘制图像如下</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps19-1690963839566-16.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps20-1690963839566-20.jpg" alt="img"> </p>
<p>导入英国2020.2~2020.3的新冠疫情感染数据绘制图像如下</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps21-1690963839566-21.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps22.jpg" alt="img"> </p>
<p>以上两组数据左图为每日感染人数，右图为治愈总人数。其中红线为真实值，蓝线为SIR模型推测结果。</p>
<h3 id="2-3结果分析"><a href="#2-3结果分析" class="headerlink" title="2.3结果分析"></a><strong>2.3结果分析</strong></h3><p>排除客观检测和数据收集不全等因素，由上表两组对比数据可以看出。</p>
<p>中国北京的推测曲线先有高峰期随后下降。这是由于根据数据推测，北京人口基数大，疫情传播迅速。但事实情况确实我们的发展曲线较为缓和。这是由于有利的疫情封控防护措施所导致的结果。因此由于感染人数较少，右图中的治愈曲线也相对较低，但总趋势与推测趋势相同。</p>
<p>下图中的英国采用的是全民免疫的野蛮发展策略，因此可以看见真实曲线与推测相吻合，说明推测较为成功。也证明SIR模型的推测具有一定的准确性。</p>
<h2 id="3-问题回答"><a href="#3-问题回答" class="headerlink" title="3 问题回答"></a><strong>3 问题回答</strong></h2><h3 id="3-1-一种疾病从出现到大规模流行再到遏制，其间三种人群关于时间的函数一般是不同的。例如在早期，感染人数可能大致呈指数增长；到后期，感染人数渐渐趋于0。初步建立的SIR模型是无法表示这种变化的。请读者阅读系列文献，思考改变哪些参数才能表现这种变化？"><a href="#3-1-一种疾病从出现到大规模流行再到遏制，其间三种人群关于时间的函数一般是不同的。例如在早期，感染人数可能大致呈指数增长；到后期，感染人数渐渐趋于0。初步建立的SIR模型是无法表示这种变化的。请读者阅读系列文献，思考改变哪些参数才能表现这种变化？" class="headerlink" title="3.1****一种疾病从出现到大规模流行再到遏制，其间三种人群关于时间的函数一般是不同的。例如在早期，感染人数可能大致呈指数增长；到后期，感染人数渐渐趋于0。初步建立的SIR模型是无法表示这种变化的。请读者阅读系列文献，思考改变哪些参数才能表现这种变化？"></a><strong>3.1****一种疾病从出现到大规模流行再到遏制，其间三种人群关于时间的函数一般是不同的。例如在早期，感染人数可能大致呈指数增长；到后期，感染人数渐渐趋于0。初步建立的SIR模型是无法表示这种变化的。请读者阅读系列文献，思考改变哪些参数才能表现这种变化？</strong></h3><p>可以更改的参数大约有一下几项：</p>
<p>β（传染率）：在疫情不同时期，人们的防护意识不同，社交活动范围也会发生变化，传染率可能会随时间推移降低。</p>
<p>γ（恢复率）：随着时间的推移，越来越多的人可能会因为治愈或死亡而从感染者群体中移除，因此恢复率也会随之增加。</p>
<p>μ（死亡率）：死亡率也可能会随着时间的推移而发生变化。在疫情初期，由于疾病的不确定性和缺乏有效的治疗手段，死亡率可能会比较高；而到了后期，随着医疗技术和治疗手段的不断进步，死亡率可能会逐渐降低。</p>
<p>N（总人口数）：在疫情初期，由于社交活动频繁和人员流动性较高，可能会有大量的人进入或离开某个地区，导致总人口数发生变化。</p>
<p>D（疾病持续时间）：在疫情初期，由于疾病的不确定性和缺乏有效的治疗手段，可能会有很多人长期感染；而到了后期，随着治疗手段的不断进步，感染者的平均恢复时间可能会逐渐缩短。</p>
<h3 id="3-2感染和治愈都是需要时间的。在无免疫力者转变为感染者和感染者转变为免疫者的过程中，出现了两类中间人群，他们分别具有那些不同的传染特性？试结合文献，在传统模型中加入这种因素。"><a href="#3-2感染和治愈都是需要时间的。在无免疫力者转变为感染者和感染者转变为免疫者的过程中，出现了两类中间人群，他们分别具有那些不同的传染特性？试结合文献，在传统模型中加入这种因素。" class="headerlink" title="3.2感染和治愈都是需要时间的。在无免疫力者转变为感染者和感染者转变为免疫者的过程中，出现了两类中间人群，他们分别具有那些不同的传染特性？试结合文献，在传统模型中加入这种因素。"></a><strong>3.2感染和治愈都是需要时间的。在无免疫力者转变为感染者和感染者转变为免疫者的过程中，出现了两类中间人群，他们分别具有那些不同的传染特性？试结合文献，在传统模型中加入这种因素。</strong></h3><p>SIR模型是忽略中间状态的一种模型，如果需要考虑中间状态。则需要将原本的I类人群更改为E类和I类。其中E类表示处于潜伏期的人群，他们已经感染了病毒，但尚未表现出明显的症状。I类则表示已经表现出症状的感染者。根据这一规律，可以使用之前提到的SEIR模型。</p>
<h3 id="3-3疫情的发生通常是一点爆发、扩散四周的，是否有可能是多点爆发呢？在多点爆发的情况下，疾病的扩散速度是否也是成倍增加呢？什么因素限制了疾病传播几乎无限的加快？"><a href="#3-3疫情的发生通常是一点爆发、扩散四周的，是否有可能是多点爆发呢？在多点爆发的情况下，疾病的扩散速度是否也是成倍增加呢？什么因素限制了疾病传播几乎无限的加快？" class="headerlink" title="3.3疫情的发生通常是一点爆发、扩散四周的，是否有可能是多点爆发呢？在多点爆发的情况下，疾病的扩散速度是否也是成倍增加呢？什么因素限制了疾病传播几乎无限的加快？"></a><strong>3.3疫情的发生通常是一点爆发、扩散四周的，是否有可能是多点爆发呢？在多点爆发的情况下，疾病的扩散速度是否也是成倍增加呢？什么因素限制了疾病传播几乎无限的加快？</strong></h3><p>疫情可以由单个感染者引起的一点爆发，然后扩散到周围的人群中。随后引发多点爆发的情况。</p>
<p>在多点爆发的情况下，疾病的扩散速度有可能会成倍增加。但受制于诸多因素，最终会放缓增长趋势。这其中包括感染源的数量、人群密度、人口总量等。</p>
<p>总的来说，控制措施、人口总量和人们的行为都影响着疫情的传播速率，他们限制着疫情不会无限传播。</p>
<h3 id="3-4传染病与卫生统计学强调人的作用。假如人的防疫工作效果可以被量化，那么这种效果主要体现在模型的哪些变量上呢？这些变量对于疾病未来的趋势的影响程度是一样的吗？"><a href="#3-4传染病与卫生统计学强调人的作用。假如人的防疫工作效果可以被量化，那么这种效果主要体现在模型的哪些变量上呢？这些变量对于疾病未来的趋势的影响程度是一样的吗？" class="headerlink" title="3.4传染病与卫生统计学强调人的作用。假如人的防疫工作效果可以被量化，那么这种效果主要体现在模型的哪些变量上呢？这些变量对于疾病未来的趋势的影响程度是一样的吗？"></a><strong>3.4传染病与卫生统计学强调人的作用。假如人的防疫工作效果可以被量化，那么这种效果主要体现在模型的哪些变量上呢？这些变量对于疾病未来的趋势的影响程度是一样的吗？</strong></h3><p>主要会体现在模型中的β（传染率）、γ（恢复率）和μ（死亡率）当中。</p>
<p>不同变量对于疾病未来趋势的影响程度必然是不是一样的。在早期阶段，感染率影响程度较大；后期阶段，治愈率和死亡率可能会占更大比重，因为随着时间的推移，越来越多的人可能被感染并且需要接受治疗。</p>
<h3 id="3-5-疫情防控就像一场赛跑，如果不能在疾病造成无法恢复的损失之前组织起有效的防卫，一个物种可能会迎来电影中的那种末日结局。从模型上看，是否存在某些结点，在决定抗疫结果中有着尤其关键的重要意义？"><a href="#3-5-疫情防控就像一场赛跑，如果不能在疾病造成无法恢复的损失之前组织起有效的防卫，一个物种可能会迎来电影中的那种末日结局。从模型上看，是否存在某些结点，在决定抗疫结果中有着尤其关键的重要意义？" class="headerlink" title="3.5****疫情防控就像一场赛跑，如果不能在疾病造成无法恢复的损失之前组织起有效的防卫，一个物种可能会迎来电影中的那种末日结局。从模型上看，是否存在某些结点，在决定抗疫结果中有着尤其关键的重要意义？"></a><strong>3.5****疫情防控就像一场赛跑，如果不能在疾病造成无法恢复的损失之前组织起有效的防卫，一个物种可能会迎来电影中的那种末日结局。从模型上看，是否存在某些结点，在决定抗疫结果中有着尤其关键的重要意义？</strong></h3><p>存在着这样的节点。</p>
<p>在感染者快速增长时：如果在此时能够及时采取有效的防疫措施，可以有效遏制疫情的传播，减缓增长速率，放缓防控压力。</p>
<p>在感染后期趋于平缓时：及时推广疫苗接种，并在适当的时间点实施疫苗接种，可以有效提高群体免疫水平，从而减少大面积复阳的风险。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a><strong>4 总结</strong></h2><h3 id="4-1建模分析"><a href="#4-1建模分析" class="headerlink" title="4.1建模分析"></a><strong>4.1建模分析</strong></h3><p>本次建模只是建立了一个较为基础的模型，可以满足较为基本的流行病学分析计算。但是对于较为复杂，外界影响因素较多的事件进行分析时会显得无法拟合。其他未考虑到的影响因素也应该对其进行数学转化，将其纳入考虑范围。同时面对不同的传染病问题。也应该根据该病特点进行特性化分析，从而采用各位合适的模型。</p>
<h3 id="4-2改进方向"><a href="#4-2改进方向" class="headerlink" title="4.2改进方向"></a><strong>4.2改进方向</strong></h3><p>本次建模也还有待改进，在设定传染率时，需要根据一定数据推算传染率，再将其手动填入计算过程当中。这一推算过程可能会受到样本容量影响，导致信息误差大，从而导致计算拟合度低。</p>
<p>数学模型虽然较为单一死板，与其相比真实情况往往会收到多重因素影响。但是如果能够周全考虑各种因素，就可以通过数学建模模拟出更为准确的发展情况。通过不断对模型进行更新升级，就可以用数学的方法解决许多生活中的常见问题，将数学真正应用起来。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>数学建模实验</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>数学建模实验</tag>
      </tags>
  </entry>
  <entry>
    <title>时序逻辑实验报告</title>
    <url>/2023/07/30/Information_Security_Experiment/digital_logic/DL2/</url>
    <content><![CDATA[<h1 id="实验一-序列检测器"><a href="#实验一-序列检测器" class="headerlink" title="实验一 序列检测器"></a>实验一 序列检测器</h1><h2 id="一、实验内容"><a href="#一、实验内容" class="headerlink" title="一、实验内容"></a>一、实验内容</h2><p>设计一个序列检测器检测序列 1110010。使用波形图进行仿真（至少要有一个检测成功 </p>
<p>的波形）。 </p>
<h2 id="二、设计过程"><a href="#二、设计过程" class="headerlink" title="二、设计过程"></a>二、设计过程</h2><p>每输入一个序列 1110010 则会在输出端输出一个 1，其余时间为 0。 </p>
<p>首先写出状态转移图，再利用 case 语句，根据状态转移图写出状态的转移及输出。 </p>
<p>检测序列为七位，所以可以设状态机状态数为 8 个； </p>
<p>输出信号由当前状态和输入条件决定，设计为 mealy 型状态机或 moore 型状态机，采用 </p>
<p>异步复位</p>
<p><img src="D:\my_data\blog\zyhblog-img\wps17.jpg" alt="img"> </p>
<h2 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library ieee;</span><br><span class="line">use ieee.std_logic_1164.all;</span><br><span class="line">use ieee.std_logic_unsigned.all;</span><br><span class="line">entity sequence1 is</span><br><span class="line">	port(cl,i,reset:in std_logic;</span><br><span class="line">			o: out std_logic);</span><br><span class="line">end sequence1;</span><br><span class="line"></span><br><span class="line">architecture a of sequence1 is</span><br><span class="line">type mytype is (A,B,C,D,E,F,G,H);</span><br><span class="line">signal ty:mytype;</span><br><span class="line">begin</span><br><span class="line">	process(cl,reset)</span><br><span class="line">	begin</span><br><span class="line">		if reset=&#x27;0&#x27; then</span><br><span class="line">			ty&lt;=A;</span><br><span class="line">		elsif cl&#x27;event and cl=&#x27;1&#x27; then</span><br><span class="line">			case ty is</span><br><span class="line">				when A=&gt;if i=&#x27;1&#x27; then ty&lt;=B;end if;</span><br><span class="line">				when B=&gt;if i=&#x27;1&#x27; then ty&lt;=C;</span><br><span class="line">					else ty&lt;=A;end if;</span><br><span class="line">				when C=&gt;if i=&#x27;1&#x27; then ty&lt;=D;</span><br><span class="line">					else ty&lt;=A;end if;</span><br><span class="line">				when D=&gt;if i=&#x27;0&#x27; then ty&lt;=E;</span><br><span class="line">					else ty&lt;=B;end if;</span><br><span class="line">				when E=&gt;if i=&#x27;0&#x27; then ty&lt;=F;</span><br><span class="line">					else ty&lt;=B;end if;</span><br><span class="line">				when F=&gt;if i=&#x27;1&#x27; then ty&lt;=G;</span><br><span class="line">					else ty&lt;=A;end if;</span><br><span class="line">				when G=&gt;if i=&#x27;0&#x27; then ty&lt;=H;</span><br><span class="line">					else ty&lt;=B;end if;</span><br><span class="line">				when H=&gt;if i=&#x27;1&#x27; then ty&lt;=B;</span><br><span class="line">					else ty&lt;=A;end if;</span><br><span class="line">			end case;</span><br><span class="line">		end if;</span><br><span class="line">	end process;</span><br><span class="line">	output_p:</span><br><span class="line">	process(ty)</span><br><span class="line">		begin</span><br><span class="line">			case ty is</span><br><span class="line">				when H=&gt;o&lt;=&#x27;1&#x27;;</span><br><span class="line">				when others=&gt;o&lt;=&#x27;0&#x27;;</span><br><span class="line">			end case;</span><br><span class="line">		end process;</span><br><span class="line">end architecture;</span><br></pre></td></tr></table></figure>



<h2 id="四、仿真验证与实验结果"><a href="#四、仿真验证与实验结果" class="headerlink" title="四、仿真验证与实验结果"></a>四、仿真验证与实验结果</h2><p><img src="D:\my_data\blog\zyhblog-img\wps18.jpg" alt="img"> </p>
<p>从波形图中可以看出输入“1110010”后输出1，当reset为“0”重置时，输出“1”变为“0”。</p>
<h1 id="实验二-计数器"><a href="#实验二-计数器" class="headerlink" title="实验二 计数器"></a>实验二 计数器</h1><h2 id="一、实验内容-1"><a href="#一、实验内容-1" class="headerlink" title="一、实验内容"></a>一、实验内容</h2><p>计数器是通过电路的状态反映驶入脉冲数目的电路。计数器是应用非常广泛的时序电路， </p>
<p>按照技术的特点分为二进制计数器、十进制计数器、环形计数器、扭环形计数器等。二进制 </p>
<p>计数器又分为加计数器、减计数器等。 </p>
<h2 id="二、设计过程-1"><a href="#二、设计过程-1" class="headerlink" title="二、设计过程"></a>二、设计过程</h2><p>用 VHDL 语言实现计数状态连续的模值为 2N的计数器。这是一个同步清零的 4 为二进 </p>
<p>制加计数器，其计数的状态是从“0000~1111”进行变化。整个的计数周期是 16 个时钟周期，即 24 个时钟周期。凡是这种技术周期为 2N且对计数状态无特殊要求的计数器，可以通过直接定义 N 位的计数信号和端口，对信号进行加或减操作，而不必进行计数状态的判断和控制。使用波形图进行仿真。</p>
<h2 id="三、源代码-1"><a href="#三、源代码-1" class="headerlink" title="三、源代码"></a>三、源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library ieee;</span><br><span class="line">use ieee.std_logic_unsigned.all;</span><br><span class="line">use ieee.std_logic_1164.all;</span><br><span class="line">entity sequence2 is</span><br><span class="line">	port(clk:in std_logic;</span><br><span class="line">			p:out std_logic;</span><br><span class="line">			q:out std_logic_vector(3 downto 0));</span><br><span class="line">end sequence2;</span><br><span class="line">architecture a of sequence2 is</span><br><span class="line">begin</span><br><span class="line">	process(clk)</span><br><span class="line">	variable x:std_logic_vector(3 downto 0);</span><br><span class="line">	begin</span><br><span class="line">		if clk&#x27;event and clk=&#x27;1&#x27; then</span><br><span class="line">			if x&lt;&quot;1111&quot; then x:=x+1;</span><br><span class="line">			else x:=&quot;0000&quot;;</span><br><span class="line">			end if;</span><br><span class="line">		end if;</span><br><span class="line">		if x=&quot;1111&quot; then p&lt;=&#x27;1&#x27;;</span><br><span class="line">		else p&lt;=&#x27;0&#x27;;</span><br><span class="line">		end if;</span><br><span class="line">		q&lt;=x;</span><br><span class="line">	end process;</span><br><span class="line">end architecture;</span><br></pre></td></tr></table></figure>

<p>​	</p>
<h2 id="四、仿真验证与实验结果-1"><a href="#四、仿真验证与实验结果-1" class="headerlink" title="四、仿真验证与实验结果"></a>四、仿真验证与实验结果</h2><p><img src="D:\my_data\blog\zyhblog-img\wps19.jpg" alt="img"> </p>
<p>实现加一功能，当达到1111时输出为1.</p>
<h1 id="实验三-8-位寄存器74374"><a href="#实验三-8-位寄存器74374" class="headerlink" title="实验三  8 位寄存器74374"></a>实验三  8 位寄存器74374</h1><h2 id="一、实验内容-2"><a href="#一、实验内容-2" class="headerlink" title="一、实验内容"></a>一、实验内容</h2><p>在数字系统中，寄存器可用来存储一组二进制代码，而触发器具有记忆功能，所以可以 </p>
<p>用触发器构成寄存器。本实验要求同学们完成 8 位寄存器 74374 的 VHDL 描述。74374 的逻辑框图如下图所示，功能表如下表所示。逻辑框图中 D 为寄存器的 8 位数据输入，Q 位寄存器的 8 位数据输出端，CLK 为时钟信号，OE 为控制信号。从功能表可以看出 OE 为低电平时,在时钟上升沿输入端信号从输出端输出，其他时刻输出保持；而 OE 为高电平时， 输出一直保持为高阻。</p>
<p><img src="D:\my_data\blog\zyhblog-img\wps20.jpg" alt="img"> </p>
<h2 id="二、设计过程-2"><a href="#二、设计过程-2" class="headerlink" title="二、设计过程"></a>二、设计过程</h2><p>根据 74374 的逻辑框图和真值表，用 VHDL 语言实现 74374 的功能。并使用波形图进 </p>
<p>行仿真。</p>
<h2 id="三、源代码-2"><a href="#三、源代码-2" class="headerlink" title="三、源代码"></a>三、源代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library ieee;</span><br><span class="line">use ieee.std_logic_1164.all;</span><br><span class="line">use ieee.std_logic_unsigned.all;</span><br><span class="line">entity sequence3 is</span><br><span class="line">	port(OE,CLK:in std_logic;</span><br><span class="line">			D:in std_logic_vector(7 downto 0);</span><br><span class="line">			Q:out std_logic_vector(7 downto 0));</span><br><span class="line">end sequence3;</span><br><span class="line">architecture a of sequence3 is</span><br><span class="line">begin</span><br><span class="line">process(CLK,OE,D)</span><br><span class="line">begin</span><br><span class="line">	if OE=&#x27;1&#x27; then</span><br><span class="line">		Q&lt;=&quot;11111111&quot;;</span><br><span class="line">	elsif CLK&#x27;event and CLK=&#x27;1&#x27; then</span><br><span class="line">		Q&lt;=D;</span><br><span class="line">	end if;</span><br><span class="line">end process;</span><br><span class="line">end architecture;</span><br></pre></td></tr></table></figure>



<h2 id="四、仿真验证与实验结果-2"><a href="#四、仿真验证与实验结果-2" class="headerlink" title="四、仿真验证与实验结果"></a>四、仿真验证与实验结果</h2><p><img src="D:\my_data\blog\zyhblog-img\wps21.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>数字逻辑</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>数字逻辑实验</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂原料分配问题</title>
    <url>/2023/08/02/Information_Security_Experiment/mathematics_modeling/MM2/</url>
    <content><![CDATA[<blockquote>
<p>某工厂需要利用三种原材料（分别记为1、2、3）混合调配出三种不同的产品（甲、乙、丙）。具体材料要求及产品利润如下表所示。请建立数学模型，为该厂安排生产规划，使其利润最大。</p>
</blockquote>
<p><img src="D:\my_data\blog\zyhblog-img\image-20230802173413762.png" alt="image-20230802173413762"></p>
<h2 id="1-具体变量说明；"><a href="#1-具体变量说明；" class="headerlink" title="1.具体变量说明；"></a>1.具体变量说明；</h2><p>Xij为i原材料向j产品提供的数量，i&#x3D;1,2,3为三个验材料名称，j&#x3D;1,2,3分别为甲乙丙三个产品。</p>
<h1 id="2-具体优化模型建立过程；"><a href="#2-具体优化模型建立过程；" class="headerlink" title="2.具体优化模型建立过程；"></a>2.具体优化模型建立过程；</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAX=-15*x11-30*x12-40*x13+25*x21+10*x22+15*x31-10*x33</span><br><span class="line">x11+x12+x13&lt;=100</span><br><span class="line">x21+x22+x23&lt;=100</span><br><span class="line">x31+x32+x33&lt;=60</span><br><span class="line">-X11+x21+x31&lt;0</span><br><span class="line">-x11+3*x21-x31&lt;0</span><br><span class="line">-3*X12+x22+x32&lt;0</span><br><span class="line">-x12+x22-x32&lt;0</span><br></pre></td></tr></table></figure>



<h1 id="3-打印相应程序代码；"><a href="#3-打印相应程序代码；" class="headerlink" title="3.打印相应程序代码；"></a>3.打印相应程序代码；</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">C= [15 30 40 -25 -10 0 -15 0 10];</span><br><span class="line">A= [-1 0 0 1 0 0 1 0 0;-1 0 0 3 0 0 -1 0 0;</span><br><span class="line">  0 -3 0 0 1 0 0 1 0;0 -1 0 0 1 0 0 -1 0;</span><br><span class="line">  1 1 1 0 0 0 0 0 0;0 0 0 1 1 1 0 0 0;</span><br><span class="line">  0 0 0 0 0 0 1 1 1];</span><br><span class="line">b= [0;0;0;0;100;100;60];</span><br><span class="line">Aeq= [];</span><br><span class="line">beq= [];</span><br><span class="line">LB= zeros(9,1);</span><br><span class="line">UB= [];</span><br><span class="line">[x,fval]= linprog(C,A,b,Aeq,beq,LB,UB);</span><br></pre></td></tr></table></figure>



<h1 id="4-给出模型结果，并对应返回问题给出问题的解答。"><a href="#4-给出模型结果，并对应返回问题给出问题的解答。" class="headerlink" title="4.给出模型结果，并对应返回问题给出问题的解答。"></a>4.给出模型结果，并对应返回问题给出问题的解答。</h1><p>结果x&#x3D;[100;0;0;50;0;0;50;0;0]   fval&#x3D;-500</p>
<p>生产的三种原材料全部供给到产品甲获利最多，比例为2:1:1，获利500元。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>数学建模实验</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>数学建模实验</tag>
      </tags>
  </entry>
  <entry>
    <title>系统快速重装部署网站</title>
    <url>/2023/08/21/Information_Security_Experiment/network_attack/NA2/</url>
    <content><![CDATA[<p>重装系统后：</p>
<h1 id="开始配置："><a href="#开始配置：" class="headerlink" title="开始配置："></a><strong>开始配置：</strong></h1><ol>
<li><p>安装依赖库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel </span><br></pre></td></tr></table></figure>
</li>
<li><p>安装编译工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel </span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否已安装Git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure>

<p>返回的结果<code>git version 1.8.3.1</code>即可</p>
</li>
<li><p>配置Git环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=$PATH:/usr/local/git/bin&#x27; &gt;&gt; /etc/bashrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/bashrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Git用户并修改权限</p>
<p>创建后期上传hexo的git指定用户，这里以hyh为例(这个用户名可以自定义，但是要保证后面的需要用户名的地方需要改成自己自定义的用户名即可)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adduser zyh</span><br><span class="line">passwd zyh</span><br></pre></td></tr></table></figure>

<p>需要注意的便是在设置密码时，设置密码时是没有回显的</p>
<p>赋予zyh用户相关权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers   # 设置权限</span><br><span class="line">vim /etc/sudoers # 编辑/etc/sudoers</span><br></pre></td></tr></table></figure>

<p>使用 set: nu 显示行号，找到100行左右，添加如下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root ALL=(ALL)  ALL</span><br><span class="line">zyh  ALL=(ALL)   ALL  #主要添加这句话（这里zyh是你刚才创建的用户名）</span><br></pre></td></tr></table></figure>

<p>直接:<code>wq!</code>，进行保存，保存后再次修改权限。因为 <code>sudoers</code>是只读文件，所有要使用 <code>!</code>进行保存，否则会失败。</p>
<p>将&#x2F;etc&#x2F;sudoers 修改成只读类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 /etc/sudoers   //改回权限</span><br></pre></td></tr></table></figure>



<p>创建hexo文件夹及赋予文件夹权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /home/hexo  #这个也是自定义的</span><br><span class="line">chown hyh:hyh -R /home/hexo #授予权限</span><br></pre></td></tr></table></figure>



<p>安装Nginx<br>这里基本没啥好说的，直接运行就可以，然后看到最后一行显示Complete就说明完事了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y nginx  </span><br></pre></td></tr></table></figure>



<p>这个时候我们可以通过以下命令，启动一下，看看效果，如果没有报错的话就ok</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>



<p>配置Nginx文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>在38行进行修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">	listen 80 default_server; </span><br><span class="line">	listen [::]:80 default_server; </span><br><span class="line">	server_name zhangyuanhe.top; #域名 </span><br><span class="line">	root /home/hexo; #网站目录</span><br></pre></td></tr></table></figure>

<p>保存退出后，重启服务器，<br>修改完配置以后，需要重启一下Nginx服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl reload nginx.service  </span><br></pre></td></tr></table></figure></li>
</ol>
<p>建立git仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/zyh</span><br><span class="line">git init --bare zyh.git</span><br><span class="line">chown zyh:zyh -R zyh.git</span><br></pre></td></tr></table></figure>

<p>同步网站根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim zyh.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>向其中加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/home/hexo --git-dir=/home/zyh/zyh.git checkout -f</span><br></pre></td></tr></table></figure>

<p>修改权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /home/zyh/zyh.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>在Windows10本地Hexo目录修改_config.yml文件（一般已经修改）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: zyh@62.234.219.169:/home/zyh/zyh.git    #用户名@服务器Ip:git仓库位置</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>然后就可以通过以下命令进行推送了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo -d</span><br></pre></td></tr></table></figure>

<p><strong>这时候应该可以用http访问了</strong></p>
<h1 id="部署ssl证书："><a href="#部署ssl证书：" class="headerlink" title="部署ssl证书："></a>部署ssl证书：</h1><h2 id="云服务器安装FTP服务"><a href="#云服务器安装FTP服务" class="headerlink" title="云服务器安装FTP服务"></a>云服务器安装FTP服务</h2><ol>
<li><p>安装vsftpd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure>

<p>修改第12行，禁止匿名用户登录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">anonymous_enable=No </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="部署证书"><a href="#部署证书" class="headerlink" title="部署证书"></a>部署证书</h2><ol>
<li><p>文件默认上传至我们的用户文件夹下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/zyh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhangyuanhe.top.zip  zhangyuanhe.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压缩文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhangyuanhe.top.zip</span><br></pre></td></tr></table></figure>

<p>再ls查看目录返回的结果是：</p>
<p><img src="D:\my_data\blog\zyhblog-img\image-20230729112613573-1692606705013-4.png" alt="image-20230729112613573"></p>
<p>可以看见有四个文件，这里只需要crt文件和key文件。</p>
</li>
<li><p>将Nginx文件夹下的文件复制到新建的文件夹下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /etc/nginx/ssl/</span><br><span class="line">cd /home/zhangyuanhe/Nginx</span><br></pre></td></tr></table></figure>

<p>用ls查看目录返回结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhangyuanhe.top_bundle.crt  zhangyuanhe.top.key</span><br></pre></td></tr></table></figure>

<p>复制到ssl文件夹下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp zhangyuanhe.top_bundle.crt /etc/nginx/ssl/</span><br><span class="line">cp zhangyuanhe.top.key /etc/nginx/ssl/</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开nginx.conf 文件夹 修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>删除掉下方最前面注释并进行更改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">        server_name  liuruibin.com; #域名</span><br><span class="line">        root         /home/hexo;    #网站主目录</span><br><span class="line"></span><br><span class="line">        ssl_certificate &quot;/etc/nginx/ssl/zhangyuanhe.top_bundle.crt&quot;; #crt文件路径</span><br><span class="line">        ssl_certificate_key &quot;/etc/nginx/ssl/zhangyuanhe.top.key&quot;;    #key文件路径</span><br><span class="line">        ssl_session_cache shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  10m;</span><br><span class="line">        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">		</span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line">        </span><br><span class="line">	   #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">                root /home/hexo;</span><br><span class="line">			  #定义首页索引文件名称</span><br><span class="line">                index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否有报错，无报错重启服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>安全实验</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
        <tag>网络安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>一次失败的木马攻击防御————系统快速重装部署网站</title>
    <url>/2023/08/21/Information_Security_Experiment/network_attack/NA1/</url>
    <content><![CDATA[<p>前两天收到信息，服务器疑似被人异地登录并植入病毒</p>
<p>上去一看cpu占用100%，估计是被人挖矿了</p>
<p>啥也不懂，上网查解决办法</p>
<p><a href="https://zhuanlan.zhihu.com/p/401296641">了解这几步，教你处理Linux挖矿木马 - 知乎 (zhihu.com)</a></p>
<p>使用top查看情况，可以看见zyh用户占用大量资源，这是我之前创建上传博客资源的用户</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230820230030521.png" alt="image-20230820230030521"></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230820230112690.png" alt="image-20230820230112690"></p>
<p>根据腾讯云的反馈信息看到了这样一个文件夹。其中DOTA3就是木马的压缩文件</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230820230633801.png" alt="image-20230820230633801"></p>
<p>在<code>.rsync</code>中还有<code>a</code> <code>b</code> <code>c</code> 三个文件夹，疑似是木马的三个操作，可以盗用我的系统账户和启用攻击程序</p>
<p>在<code>b</code>中的<code>run</code>程序里是64位编码格式的代码</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230820230714421.png" alt="image-20230820230714421"></p>
<p>具体代码没太看明白，最后在tmp文件夹下找到了这个文本，里面存放的是入侵者爆破出来我的用户和密码</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/image-20230820230650948.png" alt="image-20230820230650948"></p>
<p>根据网上的说明尝试删除木马文件，但还需要删除zyh这个用户和用户信息。</p>
<p>由于我的博客都依赖于这个用户，所以想着直接删除木马后改密码，但尝试失败，网站信息页打不开了。</p>
<p>最后还是用最原始的重装解决问题吧，以后再遇到在尝试别的方法。</p>
]]></content>
      <categories>
        <category>安全实验</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
        <tag>网络安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>c++网络编程传输密文</title>
    <url>/2023/07/30/Information_Security_Experiment/network_security/NS1/</url>
    <content><![CDATA[<h1 id="1-实验内容及原理"><a href="#1-实验内容及原理" class="headerlink" title="1. 实验内容及原理"></a><strong>1.</strong> 实验内容及原理</h1><p>使用c&#x2F;c++进行网络编程，实现两台电脑之间的信息传输</p>
<h1 id="2-实验环境"><a href="#2-实验环境" class="headerlink" title="2. 实验环境"></a><strong>2.</strong> 实验环境</h1><p><em>（实验拓扑、节点介绍）</em></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1-1690797715615-1.jpg" alt="img"> </p>
<h1 id="3-程序概要设计-或使用的工具介绍"><a href="#3-程序概要设计-或使用的工具介绍" class="headerlink" title="3. 程序概要设计(或使用的工具介绍)"></a><strong>3.</strong> 程序概要设计(或使用的工具介绍)</h1><p>虚拟实验平台、VS编程软件、Xftp传输工具</p>
<h1 id="4-实验步骤、实验结果、分析"><a href="#4-实验步骤、实验结果、分析" class="headerlink" title="4. 实验步骤、实验结果、分析"></a><strong>4.</strong> 实验步骤、实验结果、分析</h1><p>一：编写两端代码</p>
<p>发送端代码（client.cpp）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">\#include &lt;stdio.h&gt;</span><br><span class="line">\#include &lt;string.h&gt;</span><br><span class="line">\#include &lt;unistd.h&gt;</span><br><span class="line">\#include &lt;stdlib.h&gt;</span><br><span class="line">\#include &lt;netdb.h&gt;</span><br><span class="line">\#include &lt;sys/types.h&gt;</span><br><span class="line">\#include &lt;sys/socket.h&gt;</span><br><span class="line">\#include &lt;arpa/inet.h&gt;</span><br><span class="line">\#include &lt;string&gt;</span><br><span class="line">\#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">  if (argc != 3)</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;Using:./client ip port\nExample:./client 127.0.0.1 5005\n\n&quot;); return -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   // 第1步：创建客户端的socket。</span><br><span class="line">  int sockfd;</span><br><span class="line">  if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) &#123; perror(&quot;socket&quot;); return -1; &#125;</span><br><span class="line"></span><br><span class="line">   // 第2步：向服务器发起连接请求。</span><br><span class="line">  struct hostent* h;</span><br><span class="line">  if ((h = gethostbyname(argv[1])) == 0)  // 指定服务端的ip地址。</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;gethostbyname failed.\n&quot;); close(sockfd); return -1;</span><br><span class="line">  &#125;</span><br><span class="line">  struct sockaddr_in servaddr;</span><br><span class="line">  memset(&amp;servaddr, 0, sizeof(servaddr));</span><br><span class="line">  servaddr.sin_family = AF_INET;</span><br><span class="line">  servaddr.sin_port = htons(atoi(argv[2])); // 指定服务端的通信端口。</span><br><span class="line">  memcpy(&amp;servaddr.sin_addr, h-&gt;h_addr, h-&gt;h_length);</span><br><span class="line">  if (connect(sockfd, (struct sockaddr*)&amp;servaddr, sizeof(servaddr)) != 0)  // 向服务端发起连接清求。</span><br><span class="line">  &#123;</span><br><span class="line">    perror(&quot;connect&quot;); close(sockfd); return -1;</span><br><span class="line">  &#125;</span><br><span class="line">   char buffer[1024];</span><br><span class="line"> </span><br><span class="line">  // 第3步：与服务端通信，发送一个报文后等待回复，然后再发下一个报文。</span><br><span class="line">  char a[100]=&#123;0&#125;;</span><br><span class="line">  cout &lt;&lt; &quot;please enter the key:&quot;;</span><br><span class="line">  cin.getline(a, 100);</span><br><span class="line">  cout &lt;&lt; &quot;the key is:&quot;&lt;&lt;a;</span><br><span class="line">  int i = 0;</span><br><span class="line">  for (i = 0; i &lt; 100; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    a[i] += 5;</span><br><span class="line">  &#125;</span><br><span class="line">    int iret;</span><br><span class="line">    strcpy(buffer, a);</span><br><span class="line">//    memset(buffer, 0, sizeof(buffer));</span><br><span class="line">    cout &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">    if ((iret = send(sockfd, buffer, strlen(buffer), 0)) &lt;= 0) // 向服务端发送请求报文。</span><br><span class="line">    &#123;</span><br><span class="line">      perror(&quot;send&quot;); //break;</span><br><span class="line">    &#125;</span><br><span class="line">//     printf(&quot;%s\n&quot;, buffer);</span><br><span class="line">     memset(buffer, 0, sizeof(buffer));</span><br><span class="line">    if ((iret = recv(sockfd, buffer, sizeof(buffer), 0)) &lt;= 0) // 接收服务端的回应报文。</span><br><span class="line">    &#123;</span><br><span class="line">      printf(&quot;iret=%d\n&quot;, iret); //break;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;receive:%s\n&quot;, buffer);</span><br><span class="line"></span><br><span class="line">  // 第4步：关闭socket，释放资源。</span><br><span class="line">  close(sockfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>接收端代码（servers.cpp）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Using:./server port\nExample:./server 5005\n\n&quot;</span>); <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第1步：创建服务端的socket。</span></span><br><span class="line">  <span class="type">int</span> listenfd;</span><br><span class="line">  <span class="keyword">if</span> ((listenfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>) &#123; <span class="built_in">perror</span>(<span class="string">&quot;socket&quot;</span>); <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第2步：把服务端用于通信的地址和端口绑定到socket上。</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> servaddr;   <span class="comment">// 服务端地址信息的数据结构。</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="built_in">sizeof</span>(servaddr));</span><br><span class="line">  servaddr.sin_family = AF_INET;  <span class="comment">// 协议族，在socket编程中只能是AF_INET。</span></span><br><span class="line">  servaddr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);      <span class="comment">// 任意ip地址。</span></span><br><span class="line">  <span class="comment">//servaddr.sin_addr.s_addr = inet_addr(&quot;192.168.190.134&quot;); // 指定ip地址。</span></span><br><span class="line">  servaddr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));  <span class="comment">// 指定通信端口。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">bind</span>(listenfd, (<span class="keyword">struct</span> sockaddr*)&amp;servaddr, <span class="built_in">sizeof</span>(servaddr)) != <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;bind&quot;</span>); <span class="built_in">close</span>(listenfd); <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第3步：把socket设置为监听模式。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">listen</span>(listenfd, <span class="number">5</span>) != <span class="number">0</span>) &#123; <span class="built_in">perror</span>(<span class="string">&quot;listen&quot;</span>); <span class="built_in">close</span>(listenfd); <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第4步：接受客户端的连接。</span></span><br><span class="line">  <span class="type">int</span> clientfd;          <span class="comment">// 客户端的socket。</span></span><br><span class="line">  <span class="type">int</span> socklen = <span class="built_in">sizeof</span>(<span class="keyword">struct</span> sockaddr_in); <span class="comment">// struct sockaddr_in的大小</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> clientaddr;  <span class="comment">// 客户端的地址信息。</span></span><br><span class="line">  clientfd = <span class="built_in">accept</span>(listenfd, (<span class="keyword">struct</span> sockaddr*)&amp;clientaddr, (<span class="type">socklen_t</span>*)&amp;socklen);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;client(%s)has connect.\n&quot;</span>, <span class="built_in">inet_ntoa</span>(clientaddr.sin_addr));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第5步：与客户端通信，接收客户端发过来的报文后，回复ok。</span></span><br><span class="line">  <span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;the receive key is:&quot;</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> iret;</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="built_in">sizeof</span>(buffer));</span><br><span class="line">    <span class="keyword">if</span> ((iret = <span class="built_in">recv</span>(clientfd, buffer, <span class="built_in">sizeof</span>(buffer), <span class="number">0</span>)) &lt;= <span class="number">0</span>) <span class="comment">// 接收客户端的请求报文。</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;iret=%d\n&quot;</span>, iret); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      buffer[i] -= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buffer);</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, <span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ((iret = <span class="built_in">send</span>(clientfd, buffer, <span class="built_in">strlen</span>(buffer), <span class="number">0</span>)) &lt;= <span class="number">0</span>) <span class="comment">// 向客户端发送响应结果。</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">perror</span>(<span class="string">&quot;send&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cent:%s\n&quot;</span>, buffer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第6步：关闭socket，释放资源。</span></span><br><span class="line">  <span class="built_in">close</span>(listenfd); <span class="built_in">close</span>(clientfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：将编写好的代码通过xftp软件传输到两端的虚拟机中。</p>
<p>打开接收端虚拟机运行代码，选择合适的端口，我这里使用的是5001。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2-1690797715615-2.jpg" alt="img"> </p>
<p>随后进入等待阶段，等待数据传入。</p>
<p>三：打开发送端虚拟机，同样运行编写好的cpp文件并输入要访问的ip地址和端口</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3.jpg" alt="img"> </p>
<p>这样就可以输入要传输的密码了。</p>
<p>四：输入密码并传输</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5.jpg" alt="img"> </p>
<p>这时收到接收端返回的ok说明传输成功。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6.jpg" alt="img"> </p>
<p>在接收端也可以看见已经被解密的密文。</p>
<h1 id="5-实现过程中遇到的问题、原因和解决"><a href="#5-实现过程中遇到的问题、原因和解决" class="headerlink" title="5.实现过程中遇到的问题、原因和解决"></a>5.实现过程中遇到的问题、原因和解决</h1><p>编写代码会有困难需要查阅大量相关库文件</p>
<p>传输信息是容易出错</p>
<h1 id="6-实验总结"><a href="#6-实验总结" class="headerlink" title="6.实验总结"></a>6.实验总结</h1><p>该实验让我了解了如何使用简易的网络编程，并大概了解了网络编程的原理和TCP协议的三次握手原理。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>网络安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>拒绝服务攻击检测</title>
    <url>/2023/07/30/Information_Security_Experiment/network_security/NS2/</url>
    <content><![CDATA[<h1 id="1-实验内容及原理"><a href="#1-实验内容及原理" class="headerlink" title="1.实验内容及原理"></a>1.实验内容及原理</h1><p>实验内容：理解拒绝服务攻击导致的资源消耗原理和危害，自主设计构建网络攻击场景。</p>
<p>开发和执行拒绝服务攻击程序，并从网络用户端对比存在和不存在网络 攻击两种场景下访问网络应用的情况。</p>
<p>使用网络流量分析工具 Wireshark 等观察、分析和总结拒绝服务攻击流 量特征。</p>
<p>实验原理：DoS攻击是指故意的攻击网络协议实现的缺陷或直接通过野蛮手段残忍地耗尽被攻击对象的资源，目的是让目标计算机或网络无法提供正常的服务或资源访问，使目标系统服务系统停止响应甚至崩溃，而在此攻击中并不包括侵入目标服务器或目标网络设备。这些服务资源包括网络带宽，文件系统空间容量，开放的进程或者允许的连接。这种攻击会导致资源的匮乏，无论计算机的处理速度多快、内存容量多大、网络带宽的速度多快都无法避免这种攻击带来的后果。</p>
<h1 id="2-实验环境"><a href="#2-实验环境" class="headerlink" title="2. 实验环境"></a><strong>2.</strong> 实验环境</h1><p><em>（实验拓扑、节点介绍）</em></p>
<p>网络安全虚拟仿真实验系统</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1-1690798085557-1.jpg" alt="img"> </p>
<h1 id="3-程序概要设计-或使用的工具介绍"><a href="#3-程序概要设计-或使用的工具介绍" class="headerlink" title="3. 程序概要设计(或使用的工具介绍)"></a><strong>3.</strong> 程序概要设计(或使用的工具介绍)</h1><p>攻击端使用Python脚本，入侵检测使用攻击wireshark。</p>
<h1 id="4-实验步骤、实验结果、分析"><a href="#4-实验步骤、实验结果、分析" class="headerlink" title="4. 实验步骤、实验结果、分析"></a><strong>4.</strong> 实验步骤、实验结果、分析</h1><h2 id="实验1：使用Windows攻击"><a href="#实验1：使用Windows攻击" class="headerlink" title="实验1：使用Windows攻击"></a>实验1：使用Windows攻击</h2><h3 id="1步骤一"><a href="#1步骤一" class="headerlink" title="1步骤一"></a>1步骤一</h3><p>1）登录<a href="https://vse.bupt.edu.cn/practice/show_topo/?to=life">网络安全虚拟仿真实验系统 (bupt.edu.cn)</a></p>
<p>2）创建网络拓扑。创建拒绝服务攻击网络拓扑。选择“实例管理-创建实例拓扑”，通过拖拽方式在场景中构建 Web 拒绝服务攻击者、网络用户、Web 服务器、交换机、入侵检测设备，通过绘制连接线完成设备之间的网络互联。右键设置设备的具体信息，攻击者、网络用户和Web服务器均可选择Win10_DoS_WebAttacker模板，入侵检测设备网络配置中需要将交换机设为目标节点。</p>
<p>3）保存并部署。</p>
<h3 id="2-步骤二"><a href="#2-步骤二" class="headerlink" title="2 步骤二"></a>2 步骤二</h3><p>1）使用用户端访问服务器端的ip，并查看任务管理器相关情况。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2-1690798085557-2.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3-1690798085557-3.jpg" alt="img">2）打开攻击端，该版本的windos已经配置好Python文件，直接在控制台启动即可。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4-1690798085557-4.jpg" alt="img"> </p>
<p>3）代码执行后打开攻击端和服务器的任务管理器，观察cpu情况。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5-1690798085557-5.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6-1690798085557-6.jpg" alt="img"> </p>
<p>可以看出二者CPU占用率都很高。</p>
<p>4）打开用户端再次访问服务器。已经不能再访问的。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps7-1690798085557-7.jpg" alt="img"> </p>
<p>5）打开攻击检测的Wireshark，开始抓包</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps8-1690798085557-8.jpg" alt="img"> </p>
<p>这里我的攻击检测端模式选错了所以又做了一遍，这是新的数据</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps9-1690798085557-9.jpg" alt="img"> </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps10-1690798085557-10.jpg" alt="img"> </p>
<p>6）结束攻击端的工作，将其关机。用户再次访问服务器ip，一切恢复正常。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps11-1690798085557-11.jpg" alt="img"> </p>
<h2 id="实验2：使用linux攻击"><a href="#实验2：使用linux攻击" class="headerlink" title="实验2：使用linux攻击"></a>实验2：使用linux攻击</h2><h3 id="1步骤一-1"><a href="#1步骤一-1" class="headerlink" title="1步骤一"></a>1步骤一</h3><p>1）登录<a href="https://vse.bupt.edu.cn/practice/show_topo/?to=life">网络安全虚拟仿真实验系统 (bupt.edu.cn)</a></p>
<p>2）创建网络拓扑。创建拒绝服务攻击网络拓扑。选择“实例管理-创建实例拓扑”，通过拖拽方式在场景中构建 Web 拒绝服务攻击者、网络用户、Web 服务器、交换机、入侵检测设备，通过绘制连接线完成设备之间的网络互联。右键设置设备的具体信息，攻击者、网络用户和Web服务器均可选择Win10_DoS_WebAttacker模板，入侵检测设备网络配置中需要将交换机设为目标节点。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps12-1690798085557-12.jpg" alt="img"> </p>
<p>3）保存并部署。</p>
<h3 id="2-步骤二-1"><a href="#2-步骤二-1" class="headerlink" title="2 步骤二"></a>2 步骤二</h3><p>1）使用用户端访问服务器端的ip，并查看任务管理器相关情况。访问服务器一切正常。</p>
<p>2）打开攻击端。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps13-1690798085557-13.jpg" alt="img"> </p>
<p>此时cpu使用情况。</p>
<p>使用hping指令实施攻击。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps14-1690798085558-14.jpg" alt="img"> </p>
<p>3）代码执行后打开攻击端和服务器的任务管理器，观察cpu情况。</p>
<p>此时CPU占用率很高。但用户仍可以访问</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps15-1690798085558-15.jpg" alt="img"> </p>
<p>4）使用多台攻击后，打开用户端再次访问服务器。已经不能再访问的。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps16-1690798085558-16.jpg" alt="img"> </p>
<p>5）结束攻击端的工作，将其关机。用户再次访问服务器ip，一切恢复正常。</p>
<h2 id="3测试与结果"><a href="#3测试与结果" class="headerlink" title="3测试与结果"></a>3测试与结果</h2><p>（测试网络拓扑、测试数据、测试步骤、测试结果及分析）</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps17-1690798085558-17.jpg" alt="img"> </p>
<p>根据wireshark的抓包数据可以看出，攻击端在不断向服务器发送链接请求，导致服务器瘫痪无法回复正常用户的请求。</p>
<h2 id="4-实现过程中遇到的问题、原因和解决"><a href="#4-实现过程中遇到的问题、原因和解决" class="headerlink" title="4.实现过程中遇到的问题、原因和解决"></a>4.实现过程中遇到的问题、原因和解决</h2><p>1攻击端桌面的Python程序打不开会闪退，只能打开cmd直接运行。</p>
<p>2执行攻击后攻击端会非常卡，需要耐心等待。</p>
<p>3入侵检测一定要配置成监听模式，不然无法检测。</p>
<p>4 用linux系统的hping功能进行攻击，由于ping的强度不够高，导致虽然可以攻击但是却不影响服务器和用户的正常交互，所以要使用多台攻击端进行大量攻击。</p>
<h1 id="5-实验总结"><a href="#5-实验总结" class="headerlink" title="5.实验总结"></a>5.实验总结</h1><p>这次实验我了解了Dos攻击的原理和应用方法，也懂得了如何对DoS攻击进行甄别和防范。对网络安全和计算机网络的相关知识有了一定的概念。DoS攻击虽然只是实现占满服务器的访问空间，但是实现方法却有很多种，自己编写代码虽较为麻烦，不过灵活性最高，可以更好理解各个层面的攻击，其次就是使用已经成型的软件进行攻击，软件功能完备，使用起来较为方便。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>网络安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验二——ARP欺骗实验</title>
    <url>/2023/11/03/Information_Security_Experiment/network_security/NS4/</url>
    <content><![CDATA[<h1 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h1><p>选择Ettercap或WInArpAttacker工具实验进行ARP欺骗操作，对过程中捕获的数据包进行分析，分析攻击的原理：</p>
<p>a. 查看虚拟机IP信息以及ARP缓存表，并测试互ping情况；</p>
<p>b. 使用Ettercap或WInArpAttacker扫描在线主机并找到靶机；</p>
<p>c. 根据软件功能实施“禁止上网”、“中间人”、 “IP冲突”等攻击；</p>
<p>选择Winpcap（或其它网络开发包Libpcap&#x2F;Jpcap&#x2F;Scapy等）编写程序，完成以下步骤：</p>
<p>a. 查看本机、受害者虚拟机以及网关的IP和物理地址，以及ARP缓存表，测试连通情况；</p>
<p>b. 定义ARP数据包；</p>
<p>c. 根据IP和物理地址构造ARP欺骗包；（实现禁止上网or中间人or IP冲突攻击）</p>
<p>d. 发送ARP欺骗包，查看攻击成功后的arp缓存表和上网状态等</p>
<h1 id="二、-实验环境"><a href="#二、-实验环境" class="headerlink" title="二、*实验环境*"></a><strong>二、</strong><em><strong>*实验环境*</strong></em></h1><p>攻击机：Kali-linux 2022.3</p>
<p>靶机：windows xp</p>
<p>软件：ettercap-0.8.31，wireshark</p>
<p>攻击主机：Windows 10</p>
<p>受害者主机：Windows XP SP3 2002</p>
<p>Tools：Winpcap 4.1.3、WpdPack 4.1.2</p>
<p>虚拟机之间采用NAT方式进行连接</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps46.png" alt="img"> </p>
<h1 id="三、-实验过程与结果"><a href="#三、-实验过程与结果" class="headerlink" title="三、*实验过程与结果*"></a><strong>三、</strong><em><strong>*实验过程与结果*</strong></em></h1><ol>
<li>使用Ettercap工具进行ARP欺骗操作</li>
</ol>
<p>1.1 登录两台虚拟机查看网卡<br>更改联网方式<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps47-1705501910194-1.jpg" alt="img"><br>kali系统<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps48-1705501910194-2.jpg" alt="img"><br>win xp系统<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps49-1705501910195-5.jpg" alt="img"><br>两虚拟机之间应能互相ping通<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps50-1705501910195-3.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps51-1705501910195-4.jpg" alt="img"><br>利用命令arp -a查看靶机被攻击前的arp信息<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps52-1705501910195-6.jpg" alt="img"></p>
<p>1.2 在kali中，使用命令sudo ettercap -G打开ettercap<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps53-1705501910195-9.jpg" alt="img"><br>扫描靶机<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps54-1705501910195-7.jpg" alt="img"><br>分别将靶机IP和网关地址设为目标1和目标2<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps55-1705501910195-8.jpg" alt="img"></p>
<p>1.3 在MITM菜单中选择ARP Poisoning<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps56-1705501910195-10.jpg" alt="img"></p>
<p>1.4 查看被arp投毒后的靶机arp信息，物理地址已经发生对调<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps57-1705501910195-11.jpg" alt="img"></p>
<p>1.5 启动wireshark抓包，抓到靶机信息<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps58-1705501910195-14.jpg" alt="img"><br>靶机申请访问网页<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps59-1705501910195-12.jpg" alt="img"><br>攻击机截获SYN请求，说明成功后截获的靶机网络流量<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps60-1705501910195-13.jpg" alt="img"></p>
<ol start="2">
<li>查看本机、受害者虚拟机以及网关的IP和物理地址</li>
</ol>
<p>攻击端<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps61-1705501910195-15.jpg" alt="img"><br>靶机ARP缓存表<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps62-1705501910195-16.jpg" alt="img"><br>测试连通情况<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps63-1705501910195-17.jpg" alt="img"></p>
<ol start="3">
<li>根据ARP包格式定义数据包的数据结构</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//以太帧</span><br><span class="line"></span><br><span class="line">typedef struct _eth_header &#123;</span><br><span class="line"></span><br><span class="line">​	unsigned char dst_mac[6];</span><br><span class="line"></span><br><span class="line">​	unsigned char src_mac[6];</span><br><span class="line"></span><br><span class="line">​	unsigned short type;</span><br><span class="line"></span><br><span class="line">&#125; ETH_HEADER;</span><br><span class="line"></span><br><span class="line">//ARP</span><br><span class="line"></span><br><span class="line">typedef struct _arp_header &#123;</span><br><span class="line"></span><br><span class="line">​	unsigned short hardware_type;//硬件类型</span><br><span class="line"></span><br><span class="line">​	unsigned short protocol_type;//协议类型</span><br><span class="line"></span><br><span class="line">​	unsigned char hardware_len;//硬件地址长度</span><br><span class="line"></span><br><span class="line">​	unsigned char protocol_len;//协议地址长度</span><br><span class="line"></span><br><span class="line">​	unsigned short option;//ARP请求为1，ARP应答为2</span><br><span class="line"></span><br><span class="line">​	unsigned char src_mac[6];//源MAC</span><br><span class="line"></span><br><span class="line">​	unsigned long src_ip;//源IP</span><br><span class="line"></span><br><span class="line">​	unsigned char dst_mac[6];//目的MAC</span><br><span class="line"></span><br><span class="line">​	unsigned long dst_ip;//目的IP</span><br><span class="line"></span><br><span class="line">&#125;ARP_HEADER;</span><br><span class="line"></span><br><span class="line">typedef struct _arp_packet &#123;</span><br><span class="line"></span><br><span class="line">​	ETH_HEADER eth_header;</span><br><span class="line"></span><br><span class="line">​	ARP_HEADER arp_header;</span><br><span class="line"></span><br><span class="line">&#125;ARP_PACKET;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>构造ARP欺骗包，欺骗受害者网关物理地址为一个不存在的地址。</li>
</ol>
<p>补全信息<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps64-1705501910195-18.jpg" alt="img"><br>填充数据包<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps65-1705501910195-19.jpg" alt="img"></p>
<ol start="5">
<li>查看欺骗效果</li>
</ol>
<p>欺骗数据包发送成功<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps66-1705501910195-20.jpg" alt="img"></p>
<ol start="6">
<li>查看欺骗效果</li>
</ol>
<p>增加循环语句持续实现欺骗</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps67-1705501910195-21.jpg" alt="img"> </p>
<p>靶机网站无响应</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps68-1705501910195-22.jpg" alt="img"> </p>
<p>可以抓包查看效果<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps69-1705501910195-23.jpg" alt="img"></p>
<p>可见网关会将返回地址反馈给错误的靶机物理地址，实现ARP攻击</p>
<h1 id="四、实验总结"><a href="#四、实验总结" class="headerlink" title="四、实验总结"></a>四、实验总结</h1><p>通过本次实验，我认识到ARP攻击就是通过伪造IP地址和MAC地址实现欺骗的一种攻击手段。攻击者通过伪装自己的MAC地址来欺骗目标设备，使其将网络数据包发送到错误的物理地址，从而将流量重定向到攻击者控制的位置。这种攻击可用于中间人攻击、数据窃取或网络干扰，因此在管理时需要采取防范措施，如网络监控和使用安全工具，来检测和防御ARP欺骗攻击，以确保网络的安全性和可靠性。使用ARP攻击，攻击者可以轻松地拦截、篡改或窃取网络流量，对目标设备进行数据间谍操作。然而，ARP欺骗也容易被检测到，而且在伪装MAC地址的过程中，攻击者需要在目标网络上产生不稳定性，容易引起怀疑。此外，ARP欺骗攻击通常需要本地网络访问权限，因此无法用于跨互联网的攻击，存在一定的缺陷。想要防御ARP欺骗可以使用网络防火墙、网络监控工具和安全认证措施。网络管理员可以配置网络设备以限制ARP流量，实施静态ARP条目，或使用ARP监控工具来检测异常ARP请求和响应。此外，强制双因素身份验证、使用虚拟专用网络（VPN）以及定期更新操作系统和网络设备的软件也可以增强网络的安全性，减少ARP欺骗风险。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>网络安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验一——网络扫描</title>
    <url>/2023/11/03/Information_Security_Experiment/network_security/NS3/</url>
    <content><![CDATA[<h1 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h1><p>1、 用Nmap对主机进行主机扫描、ping扫描、端口扫描、TCP connect扫描、操作系统识别、漏洞扫描等，获取尽可能全面的主机信息，抓包分析扫描原理；提交要求见实验指导书。</p>
<p>2、 配置包含漏洞虚拟机，使用AWVS扫描漏洞主机发现漏洞；</p>
<p>3、 了解Metasploit Framework工具渗透测试工具，对含漏洞虚拟机进行渗透测试。</p>
<h1 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h1><p>攻击机：kali		192.168.75.136</p>
<p>靶机1：win xp		192.168.75.137</p>
<p>靶机2：ubantu	192.168.75.138</p>
<p>虚拟机之前采用NAT方式。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps20.png" alt="img"> </p>
<h1 id="三、实验过程与结果"><a href="#三、实验过程与结果" class="headerlink" title="三、实验过程与结果"></a>三、实验过程与结果</h1><ol>
<li>使用Nmap对主机进行主机扫描</li>
</ol>
<p>登录两台虚拟机查看网卡<br>更改联网方式<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps21-1705501827467-1.jpg" alt="img"><br>kali系统<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps22-1705501827468-2.jpg" alt="img"><br>win xp系统<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps23-1705501827468-3.jpg" alt="img"><br>两虚拟机之间应能互相ping通<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps24-1705501827468-4.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps25-1705501827468-5.jpg" alt="img"></p>
<ol start="2">
<li>在kali中使用nmap工具进行扫描</li>
</ol>
<p>ping扫描<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps26-1705501827468-6.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps27-1705501827468-7.jpg" alt="img"><br>对靶机进行端口扫描<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps28-1705501827469-8.jpg" alt="img"><br>操作系统扫描<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps29-1705501827469-9.jpg" alt="img"><br>主机全面扫描<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps30-1705501827469-10.jpg" alt="img"><br>漏洞扫描<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps31-1705501827469-11.jpg" alt="img"></p>
<ol start="3">
<li>启动wireshark进行抓包，对扫描原理进行分析</li>
</ol>
<p>3.1 主机扫描<br>nmap -sP 192.168.75.137<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps32-1705501827469-12.jpg" alt="img"><br>可见两组应答包分别是攻击机像广播询问靶机位置和网关位置，并获得应答<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps33-1705501827469-13.jpg" alt="img"><br>应答包中的信息就是扫描到所需要的信息<br>3.2 操作系统扫描<br>nmap -O 192.168.75.137<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps34-1705501827469-14.jpg" alt="img"><br>该扫描中通过tcp协议的应答获得靶机端口的开启状态，最后再通过arp协议获取基本信息。在截图部分仅出现了135端口的应答检测，在这一次扫描中还有许多其他端口的扫描并未在截图中体现。</p>
<p>3.3 TCP SYN扫描<br>nmap -sS 192.168.75.137</p>
<p>SYN扫描最默认最受欢迎的扫描选项，在一个没有入侵防火墙的快速网络上，每秒钟可以扫描数千个端口。 SYN 扫描相对来说不张扬，不易被注意到，因为它从来不完成 TCP 连接。它发送一个 SYN 报文，就像您真的要打开一个连接，然后等待响应。 SYN&#x2F;ACK 表示端口在监听 (开放) ，而 RST (复位)表示没有监听者。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps35-1705501827469-15.jpg" alt="img"> </p>
<p>与上一扫描过程相似，但明显可以看出，如如中橙圈为例，攻击机请求连接靶机22端口，靶机进行了[RST,ACK]包的相应并保持端口开放，但未再获得攻击机的响应包，实现了半连接扫描。</p>
<p>3.4 UDP扫描</p>
<p>nmap -sU 192.168.75.137</p>
<p>发送UDP包，若发现了一个可以自动回复信息的端口，判断为open。其它端口回送了端口不可达的报文，表示端口关闭。若是其它ICMP类型的则表示端口是filtered。UDP扫描的好处在一它可以穿过一些只过滤了TCP包的防火墙，但是UDP扫描的一个问题是效率较低。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps36-1705501827469-16.jpg" alt="img"></p>
<ol start="4">
<li>选做实验</li>
</ol>
<p>4.1 首先启动docker容器，进入环境所在目录启动环境。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps37-1705501827469-17.jpg" alt="img"><br>环境启动成功</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps38-1705501827469-18.jpg" alt="img"> </p>
<p>4.2 在主机安装配置AWVS，对有漏洞的靶机进行扫描。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps39-1705501827469-19.jpg" alt="img"> </p>
<p>扫描成功</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps40-1705501827469-20.jpg" alt="img"> </p>
<p>4.3在kali中，通过nmap命令扫描靶机。</p>
<p>nmap -sV -p 8443 –script ssl-heartbleed.nse 192.168.75.138</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps41-1705501827469-21.jpg" alt="img"> </p>
<p>使用msf利用漏洞</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps42-1705501827469-23.jpg" alt="img"> </p>
<p>打开msf后，运用命令search heartbleed查找heartbleed模块。查看需要设置哪些选项。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps43-1705501827469-22.jpg" alt="img"> </p>
<p>设置靶机地址RHOSTS和靶机端口号RPORT。同时设置verbose以看到泄露的信息。</p>
<p>刚开始连接失败，后来扫描到漏洞</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps44-1705501827469-25.jpg" alt="img"> </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps45-1705501827469-24.jpg" alt="img"> </p>
<h1 id="四、实验总结"><a href="#四、实验总结" class="headerlink" title="四、实验总结"></a>四、实验总结</h1><p>Nmap（Network Mapper）是一款强大的开源网络扫描工具，用于探测和分析目标网络的设备、开放端口、服务和操作系统信息。它通过发送精心设计的网络数据包，可以帮助网络管理员评估网络安全性、发现漏洞、识别潜在的攻击目标，以及规划网络配置。Nmap的灵活性和可配置性使其成为网络安全领域的重要工具，不仅用于维护和保护网络，还用于探测和评估网络的脆弱性。与此同时，Nmap网络扫描也可以采用多种手段检测，检测是否存在Nmap网络扫描通常涉及监控网络流量和分析数据包，寻找特定的Nmap扫描特征，如Nmap的TCP或UDP探测数据包、特定的请求响应序列以及Nmap默认的端口扫描范围等。此外，防火墙、入侵检测系统（IDS）和网络监控工具也可用于识别和记录Nmap扫描活动，以及采取相应的防御措施来减轻潜在威胁。<br>Heartbleed漏洞是一种在OpenSSL加密库中存在的严重安全漏洞，攻击者可以利用它来获取服务器端内存中的敏感数据，如私钥、用户凭证等。利用Heartbleed漏洞，攻击者发送恶意的心跳请求，并获取服务器未经授权的内存内容。</p>
<p>检测Heartbleed漏洞可通过扫描目标服务器的OpenSSL版本，特别关注受影响的版本范围，包括0.9.8至1.0.1之间的版本。工具如Nmap和专门的漏洞扫描器可以帮助识别受影响的服务器。修复漏洞通常涉及升级OpenSSL到不受漏洞影响的版本，替换受影响的SSL证书，并重新生成私钥。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>网络安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验三——防火墙实验</title>
    <url>/2023/11/03/Information_Security_Experiment/network_security/NS5/</url>
    <content><![CDATA[<h1 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h1><h2 id="1-配置linux系统下iptables防火墙"><a href="#1-配置linux系统下iptables防火墙" class="headerlink" title="*1. 配置linux系统下iptables防火墙*"></a><em><strong>*1. 配置linux系统下iptables防火墙*</strong></em></h2><p>（1）Iptables防火墙基本操作</p>
<p>（2）设置Iptables防火墙的包过滤规则，实现以下功能：</p>
<p>   禁止所有主机ping本地主机；</p>
<p>   允许某特定IP主机远程ping本地主机；</p>
<p>   允许每10秒钟通过1个ping包；</p>
<p>   阻断来自某个MAC地址的数据包。</p>
<p>（3）实现特定远端主机SSH连接本地主机</p>
<h2 id="2-实现内网服务的发布"><a href="#2-实现内网服务的发布" class="headerlink" title="*2.实现内网服务的发布*"></a><em><strong>*2.实现内网服务的发布*</strong></em></h2><p>（1） 配置网络环境，测试网络连通情况</p>
<p>（2） 开启防火墙路由转发，设置iptables规则</p>
<p>（3） 验证公网主机能否通过访问防火墙获得内网服务</p>
<h1 id="二、-实验环境"><a href="#二、-实验环境" class="headerlink" title="二、*实验环境*"></a><strong>二、</strong><em><strong>*实验环境*</strong></em></h1><p>实验1：</p>
<p>防火墙部署：Kali-linux 2022.3	192.168.8.129</p>
<p>客户端：	windows xp		192.168.8.130<br>            windows xp		192.168.8.131</p>
<p>Kali-linux 2022.3	192.168.8.132</p>
<p>Kali-linux 2022.3	192.168.8.133</p>
<p>实验2：</p>
<p>防火墙部署：Kali-linux 2022.3	192.168.8.129</p>
<p>客户端：	windows xp		192.168.8.130（原）  10.21.240.150（新）<br>            windows xp		192.168.8.131</p>
<p>软件：iptables、putty</p>
<p>虚拟机之间采用仅主机模式进行连接</p>
<h1 id="三、-实验过程与结果"><a href="#三、-实验过程与结果" class="headerlink" title="三、*实验过程与结果*"></a><strong>三、</strong><em><strong>*实验过程与结果*</strong></em></h1><p>（一）<em><strong>*访问控制实验*</strong></em></p>
<ol>
<li>先通过ifconfig命令查看防火墙所在主机网络配置信息</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps70-1705501972878-1.jpg" alt="img"><br>通过ping测试防火墙和其他主机的连通性，发现可以连通<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps71-1705501972879-2.jpg" alt="img"></p>
<ol start="2">
<li>通过查看iptables文档，选择对应的参数，设置iptables规则实现：（截图提交）</li>
</ol>
<p>Ø 禁止所有主机ping本地主机</p>
<h4 id="直接拒绝icmp-的请求包"><a href="#直接拒绝icmp-的请求包" class="headerlink" title="直接拒绝icmp 的请求包"></a>直接拒绝icmp 的请求包</h4><h4 id="sudo-iptables-A-INPUT-p-icmp-–icmp-type-echo-request-j-REJECT"><a href="#sudo-iptables-A-INPUT-p-icmp-–icmp-type-echo-request-j-REJECT" class="headerlink" title="sudo iptables -A INPUT -p icmp –icmp-type echo-request -j REJECT"></a>sudo iptables -A INPUT -p icmp –icmp-type echo-request -j REJECT</h4><h4 id="ping失败"><a href="#ping失败" class="headerlink" title=" ping失败 "></a><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps72-1705501972879-3.jpg" alt="img"> ping失败 <img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps73-1705501972879-4.jpg" alt="img"></h4><p>Ø 仅允许某特定IP主机ping本地主机</p>
<p>iptables -I INPUT -p icmp –icmp-type echo-request -s 192.168.8.130 -j ACCEPT<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps74-1705501972879-6.jpg" alt="img"><br>131访问失败<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps75-1705501972879-5.jpg" alt="img"><br>130访问成功<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps76-1705501972879-7.jpg" alt="img"></p>
<p>Ø 允许每10秒钟通过1个ping包</p>
<p>先清除之前的规则iptables -F。</p>
<p>依次输入iptables -I INPUT -p icmp -m limit –limit 6&#x2F;min –limit-burst 1 -j ACCEPT </p>
<p>和iptables -A INPUT -p icmp -j DROP，以实现允许每10s通过一个ping包<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps77-1705501972879-8.jpg" alt="img"><br>可见7个包用了68583ms，也就是10秒一个包<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps78-1705501972879-9.jpg" alt="img"></p>
<p>Ø 阻断来自某个mac地址的数据包</p>
<p>阻止MAC地址为00:0c:29:d5:b7:8f（xp 192.168.8.130）主机的所有通信：</p>
<p> iptables -A INPUT -m mac –mac-source 00:0c:29:d5:b7:8f -j DROP<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps79-1705501972879-10.jpg" alt="img"><br>拦截成功<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps80-1705501972879-12.jpg" alt="img"></p>
<p><strong>3.</strong> <em><strong>*配置iptables，允许特定的远端客户机器SSH连接本地主机*</strong></em></p>
<p>1） 在SSH服务器上打开服务，使得客户端可以通过22端口连接</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps81-1705501972879-11.jpg" alt="img"> </p>
<p>查看服务器状态<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps82-1705501972879-13.jpg" alt="img"></p>
<p>ssh <a href="mailto:kali@192.168.8.129">kali@192.168.8.129<br>客户端1<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps83-1705501972879-14.jpg" alt="img"></a></p>
<p>客户端2<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps84-1705501972879-15.jpg" alt="img"></p>
<p>客户端连接后，SSH服务器上会留下记录<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps85-1705501972879-16.jpg" alt="img"></p>
<p>2） 配置iptables，只允许特定远端主机SSH连接本地主机。</p>
<p>iptables -I INPUT -p tcp –dport 22 -s 192.168.8.132 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp –dport 22 -j DROP<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps86-1705501972879-17.jpg" alt="img"></p>
<p>3） 验证防火墙效果</p>
<p>在iptables中允许连接的客户端1仍可远程SSH连接</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps87-1705501972879-18.jpg" alt="img"> </p>
<p>客户端2已经无法操作<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps88-1705501972879-19.jpg" alt="img"></p>
<p>（二）<em><strong>*NAT实验*</strong></em></p>
<ol>
<li>配置网络环境</li>
</ol>
<p>首先，给作为firewall的ubuntu（或kali）增设网卡，并设置两张网卡处在不同的网络中，ifconfig查看ip</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps89-1705501972879-20.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps90-1705501972879-21.jpg" alt="img"><br>由上图可知，网关的配置如下：</p>
<p>内网ip：10.21.240.149 子网掩码：255.255.128.0</p>
<p>公网ip：192.168.8.129 子网掩码：255.255.255.0</p>
<ol start="2">
<li>设置PC1的网络适配器，与firewall网络适配器ens33处于一个网段（Vmnet0）；PC2使用物理主机（或使用另一台虚拟机，网络设置同firewall的网络适配器ens38（Vmnet1））。</li>
</ol>
<p>PC1:<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps91-1705501972879-22.jpg" alt="img"></p>
<p>PC2:<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps92-1705501972879-23.jpg" alt="img"></p>
<p>设置PC1的网关为firewall，并测试网络连通性。应实现：PC1可以与firewall互相ping通；PC2可以与firewall互相ping通；PC1与PC2无法互ping。（PC2如果是物理主机，请使用指定网卡进行ping操作，参考命令ping -S <specific_ip> <target_ip>）<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps93-1705501972879-24.jpg" alt="img"></p>
<p>PC1 ping kali：<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps94-1705501972879-26.jpg" alt="img"></p>
<p>PC21 ping kali：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps95-1705501972879-25.jpg" alt="img"> </p>
<ol start="3">
<li>开启firewall的路由转发</li>
</ol>
<p>echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps96-1705501972879-27.jpg" alt="img"></p>
<ol start="4">
<li>设置NAT规则</li>
</ol>
<p>对公网来的访问数据设置DNAT规则，将其访问目标地址通过NAT修改为提供服务的ip，以便将请求转发到内网对应IP上。</p>
<p>iptables -t nat -A PREROUTING -i ens38 -p tcp -d 192.168.8.130 –dport 80 -j DNAT –to-destination 10.21.240.150 </p>
<p>设置一条SNAT的规则，以便内网对公网数据访问的回应信息能够到达请求的客户。</p>
<p>iptables -t nat -A POSTROUTING -o ens38 -p tcp -j SNAT –to-source 192.168.8.130</p>
<p>在FORWARD链上设置允许访问内网的规则。</p>
<p>iptables -A FORWARD -i ens38 -p tcp -d 10.21.240.150 –dport 80 -j ACCEPT</p>
<p>iptables -A FORWARD -p tcp -m state –state established,related -j ACCEPT</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps97-1705501972879-28.jpg" alt="img"> </p>
<ol start="5">
<li>启动PC1的nginx开启http服务</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps98-1705501972879-30.jpg" alt="img"></p>
<ol start="6">
<li>在PC2上验证能否通过firewall的ip访问内网主机服务。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps99-1705501972879-29.jpg" alt="img"></p>
<ol start="7">
<li>解释上述使用的iptables规则，并分析NAT的实现原理</li>
</ol>
<p>这一实验中的iptables规则主要有以下几条<br>iptables -t nat -A PREROUTING -i ens38 -p tcp -d 192.168.8.130 –dport 80 -j DNAT –to-destination 10.21.240.150 </p>
<p>这个iptables规则的作用是将进入ens38接口，目标地址为192.168.8.130，目标端口为80的TCP数据包的目标地址修改为10.21.240.150，用于实现端口转发。<br>iptables -t nat -A POSTROUTING -o ens38 -p tcp -j SNAT –to-source 192.168.8.130</p>
<p>这个iptables规则的作用是将离开ens38接口的所有TCP数据包的源地址修改为192.168.8.130。在NAT环境中，将内部主机的私有IP地址替换为网关的公共IP地址，以便在Internet上进行通信。<br>iptables -A FORWARD -i ens38 -p tcp -d 10.21.240.150 –dport 80 -j ACCEPT</p>
<p>iptables -A FORWARD -p tcp -m state –state established,related -j ACCEPT</p>
<p>这两个iptables规则用于配置包转发策略。第一个规则允许进入接口ens38的目标地址为10.21.240.150，目标端口为80的TCP数据包通过系统。第二个规则允许已建立的连接或与已建立连接相关的TCP数据包通过系统的转发。这通常用于处理与先前已建立的连接相关的数据包，以确保它们被正确转发。</p>
<p>因此可知，NAT的实现就是通过防火墙阻隔内网和外网之间的通讯，并为内网的所有IP地址分配相对应的外网网段地址。防火墙起到了地址转换的作用，当其对外网进行收发信息的时候会将内网地址转化为外网分配IP，或将外网IP根据对应表转化为内网地址。从而实现信息中专功能。</p>
<h1 id="四、实验总结"><a href="#四、实验总结" class="headerlink" title="四、实验总结"></a>四、实验总结</h1><p>在本次实验中，学习到了iptables的相关用法和NAT的原理知识。iptables是Linux操作系统中用于配置IPv4包过滤规则、进行网络地址转换（NAT）和包队列处理的强大工具。通过iptables命令，用户可以定义防火墙规则，控制数据包的流动，并实现网络安全策略，包括端口转发、地址转换等功能，以保护系统免受网络攻击。iptables的灵活性和可定制性使其成为Linux系统中网络管理和安全配置的关键组件。</p>
<p>NAT将内部私有网络中的局域网IP地址映射为外部公共网络上的一个或多个公共IP地址。这通过在数据包经过设备时修改其源或目标IP地址来实现。NAT允许多个内部设备共享同一个公共IP地址，有效地解决了IPv4地址短缺的问题。它的基本原理是在数据包经过设备时，根据预定义的转换规则，更新数据包的IP地址信息，使其在内外网络之间传递时能够正确路由。这种技术广泛用于家庭网络和企业环境，为多个设备提供对互联网的访问，同时提供一定程度的网络安全和隐私保护。</p>
<p>通过本次的实验我认识到NAT的实现原理相对简单，但需要对每一次内外网连接操作进行IP转换，相对来说较为繁琐，当内网中主机数目不断增加，网关的负载程度也会大规模增加。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>网络安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验五——IDS入侵检测</title>
    <url>/2023/11/03/Information_Security_Experiment/network_security/NS7/</url>
    <content><![CDATA[<h1 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h1><ol>
<li>在linux平台建立基于Snort的IDS。</li>
<li>在部署Snort的本机建立规则，实现对DoS攻击、Nmap扫描和SSH连接的检测。</li>
<li>针对heartbleed漏洞的攻击的检测实验。（选做）</li>
</ol>
<h1 id="二、-实验环境"><a href="#二、-实验环境" class="headerlink" title="二、*实验环境*"></a><strong>二、</strong><em><strong>*实验环境*</strong></em></h1><p>实验1：</p>
<p>服务器：kali</p>
<p>客户机：kali</p>
<p>软件：snort</p>
<h1 id="三、-实验过程与结果"><a href="#三、-实验过程与结果" class="headerlink" title="三、*实验过程与结果*"></a><strong>三、</strong><em><strong>*实验过程与结果*</strong></em></h1><p><em><strong>*安装Snort*</strong></em></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps132.jpg" alt="img"> </p>
<p>修改默认配置</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps133.jpg" alt="img"> </p>
<p>在部署Snort的本机建立规则，实现对DoS攻击、Nmap扫描和SSH连接的检测<br>主机互相ping通<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps134.jpg" alt="img"></p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps135.jpg" alt="img"> </p>
<p><em><strong>*Snort检测DoS（syn flood）攻击*</strong></em></p>
<p>Snort&#x2F;rules目录下的local.rules文件中，设置如下规则：</p>
<p>alert tcp any any -&gt;  $HOME_NET 80 (msg:”DoS attack”; flags:S; threshold:type threshold, track by_dst, count 100, seconds 60; sid:2000003)</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps136.jpg" alt="img"> </p>
<p>打开snort.conf，注释掉</p>
<p>include $RULE_PATH&#x2F;icmp-info.rules（608行）</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps137.jpg" alt="img"> </p>
<p>之后启动snort</p>
<p>sudo snort -c &#x2F;etc&#x2F;snort&#x2F;snort.conf -A fast -l &#x2F;var&#x2F;log&#x2F;snort -i eth0</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps138.jpg" alt="img"> </p>
<p>使用另一台kali使用hping3攻击（在dos实验中使用过的）</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps139.jpg" alt="img"> </p>
<p>在日志中查看检测报告(cat &#x2F;var&#x2F;log&#x2F;snort&#x2F;alert)：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps140.jpg" alt="img"> </p>
<p><em><strong>*Snort检测nmap扫描*</strong></em></p>
<p>以nmap NULL扫描为例：</p>
<p>同理在local.rules中写下如下规则：</p>
<p>alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any (msg:”Nmap Null PortScan!”; flags:0;  threshold:type both,track by_dst,count 20,seconds 60; sid:10000012; rev:1;)<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps141.jpg" alt="img"></p>
<p>nmap NULL扫描是nmap秘密扫描的一种，相对比较隐蔽，通过向目标主机端口发送标志位flags为0的包进行扫描。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps142.jpg" alt="img"> </p>
<p>使用kali中的nmap对主机进行NULL扫描。查看snort报警信息。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps143.jpg" alt="img"> </p>
<p>Snort检测ssh连接</p>
<p>首先将两台机器（可以是主机和虚拟机）的ssh服务开启。</p>
<p>kali开启ssh服务命令：sudo &#x2F;etc&#x2F;init.d&#x2F;ssh start</p>
<p>查看服务状态：sudo systemctl status ssh</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps144.jpg" alt="img"> </p>
<p>之后自主编写规则local.rules，检测ssh连接行为。</p>
<p>alert TCP any any -&gt;$HOME_NET 22 ( msg:“ssh connection”; sid:100000003)</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps145.jpg" alt="img"> </p>
<p>成功链接</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps146.jpg" alt="img"> </p>
<p>连接成功日志</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps147.jpg" alt="img"> </p>
<p><em><strong>*选做实验*</strong></em></p>
<p>借鉴网络扫描实验中对Heartbleed漏洞的利用</p>
<p>启动docker环境，启动待攻击网站</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps148.jpg" alt="img"> </p>
<p>同样在kali中使用msf，msf在进行到“exploit“时投放攻击载荷实现攻击。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps149.jpg" alt="img"> </p>
<p>自主编写规则实现针对Heartbleed漏洞攻击的检测</p>
<p>分析包结构可知，控制0x18、0x03、0x01和倒数2比特的0x01后只要0xffff位的内容大于0x0003位的内容则发出警告</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps150.jpg" alt="img"> </p>
<p>报告中要说明自定义规则的意义。</p>
<p>alert tcp any any -&gt; $HOME_NET 8443 (msg:”Heartbleed Attack”;  content:”|18 03 01 00 03 01 ff ff|”;  sid:1000001; rev:1;)</p>
<p>攻击成功</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps151.jpg" alt="img"> </p>
<h1 id="四、实验总结"><a href="#四、实验总结" class="headerlink" title="四、实验总结"></a>四、实验总结</h1><p>Snort是一个领先的开源网络入侵预防和检测系统。这个软件主要用来监测网络流量，以便发现潜在的不良数据包、恶意活动，和网络攻击。Snort基于规则来分析网络数据，并且有能力进行实时流量分析及包日志记录。在本次实验中使用Snort并自定义规则实现了对DoS攻击、Nmap扫描、SSH连接和heartbleed漏洞攻击的检测。</p>
<p>通过实验可以看出，Snort可以对多种多样的攻击实现检测和警报，但是使用Snort进行网络监测和攻击检测需要合理配置规则来识别不同类型的恶意流量。要有效地实施这些检测，网络管理员需要定期更新Snort规则，并适当调整规则的阈值（thresholds）和条件以匹配网络环境的特点。还需要定期查看Snort的日志和警报来评估潜在的威胁，并根据需要调整规则的严格性。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>网络安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全实验四——VPN实验</title>
    <url>/2023/11/03/Information_Security_Experiment/network_security/NS6/</url>
    <content><![CDATA[<h1 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h1><p>通过实验掌握虚拟专用网的实现原理、协议和结构，理解并掌握在 Cisco 网络环境下 IPSec VPN（IP 协议安全协议）配置的方法，理解并掌握在 Windows 操作系统中IPSec（IP 协议安全协议）配置 VPN 网络的方法。</p>
<h1 id="二、-实验环境"><a href="#二、-实验环境" class="headerlink" title="二、*实验环境*"></a><strong>二、</strong><em><strong>*实验环境*</strong></em></h1><p>实验1：</p>
<p>服务器：win xp</p>
<p>客户机：win xp</p>
<p>实验2：</p>
<p>主机：win10</p>
<h1 id="三、-实验过程与结果"><a href="#三、-实验过程与结果" class="headerlink" title="三、*实验过程与结果*"></a><strong>三、</strong><em><strong>*实验过程与结果*</strong></em></h1><h2 id="3-1-Windows-IPSec实验-（1）配置Windows内置的IPSec安全策略"><a href="#3-1-Windows-IPSec实验-（1）配置Windows内置的IPSec安全策略" class="headerlink" title="*3.1 Windows IPSec实验** **（1）配置Windows内置的IPSec安全策略*"></a><em><strong>*3.1 Windows IPSec实验*</strong></em><em><strong>* *</strong></em><em><strong>*（1）配置Windows内置的IPSec安全策略*</strong></em></h2><p>在运行中输入“secpol.msc”打开本地安全设置窗口，右击“安全服务器”，点击“指派”，右侧“策略已指派”中的选项将由 “否”变为“是”，这样将此计算机设置为 “安全服务器”。 </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps100-1705502052476-1.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps101-1705502052476-2.jpg" alt="img"><br>打开“身份认证方法”，点击“添加”，则弹出如图所示菜单。在这个菜单中指定了三种身份认证方法，我们选择“预共享密钥”的方法，设置共享密钥 111，点击确定。<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps102-1705502052476-4.jpg" alt="img"><br>将另一台Windows XP计算机也做同样的配置，然后从一台计算机用 ping 命令测试两者之间的连接，显示下图所示状态。这说明，通过上面的配置，两台计算 机在建立安全的 IPSec 连接之前，首先对 IP 安全规则的 SA 进行协商，显示“Negotiating IP Security”，以协商建立相互通讯时共享的安全参数及验证的密钥。协商完成后，可以看出两台计算机处于连通状态。<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps103-1705502052476-5.jpg" alt="img"><br>抓包分析IP 安全规则的密钥协商和安全传输的协商过程数据包</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps104-1705502052476-3.jpg" alt="img"> </p>
<p>包1：确定加密算法和认证方式</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps105-1705502052477-6.jpg" alt="img"> </p>
<p>包2：参数比对成功，反馈和第一个包相似内容</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps106-1705502052477-7.jpg" alt="img"> </p>
<p>包3：发送DH公共值和Nonce随机值</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps107-1705502052477-8.jpg" alt="img"> </p>
<p>包4：生成随机数，返回随机数和DH公共值</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps108-1705502052477-9.jpg" alt="img"> </p>
<p>包5：发送预共享密钥，发起身份验证</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps109-1705502052477-10.jpg" alt="img"> </p>
<p>包6：回应预共享密钥，验证身份</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps110-1705502052477-12.jpg" alt="img"> </p>
<p>包7：协商封装方式、加密算法等</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps111-1705502052477-11.jpg" alt="img"> </p>
<p>包8：相应包7内信息，同意传输</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps112-1705502052477-13.jpg" alt="img"> </p>
<p>包9：确认报文</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps113.jpg" alt="img"> </p>
<p>包10：确认报文</p>
<h3 id="（2）配置专用的IPSec安全策略"><a href="#（2）配置专用的IPSec安全策略" class="headerlink" title=" *（2）配置专用的IPSec安全策略*"></a><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps114.jpg" alt="img"> <em><strong>*（2）配置专用的IPSec安全策略*</strong></em></h3><p>除了利用 windows 内置的 IPSec 安全策略外，我们还可以自己定制专用的 IPSec 安全 策略。右击 “IP 安全策略，在本地计算机”，选择“创建 IP 安全策略”，则弹出IP 安全策略向导界面。点击下一步，要求输入新 IP 安全策略的名称和描述， 再点击下一步弹出安全通讯请求，我们选择清除“激活默认响应规则”，最后就到了“完成 IP 规则向导”，选中“编辑属性”后点击完成。在弹出的创建 IP 安全规则向导窗口中，点击“添加”，会依次设置：隧道方式（默认“此规则不知道隧道”），网络类型（默认“所有网络连接”），身份验证方法如图所示，我们选择采用预共享密钥的方式进行身份认证，在这里我们设置一个简单的密钥 111，点击 “下一步”。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps115.jpg" alt="img"> </p>
<p>下面进入 IP 筛选器列表的配置项，在这项里设置哪些地址和网络协议的数据包使用 IPSec 安全连接。点击“添加”，就可以设置一个新的 IP 筛选器列表了。此时列表为空，点击 “添加”，我们在 IP 筛选器列表中添加一个 IP 筛选器。点击“下一步”对IP地址进行设置。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps116.jpg" alt="img"><br>这里将“我的 IP 地址”作为源地址，选择“任何 IP 地址”作为目标地址。在 “选择协议类型”中选中“任意”。 点击“下一步”，则完成 IP 筛选器编辑。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps117.jpg" alt="img"> </p>
<p>完成“新 IP 筛选器列表”的建立后，点击“下一步”，编辑这个筛选器列表的操作，“筛选器列表的操作”是指当有 IP 数据包符合筛选器中定义的条件时， IPSec 对符合条件的数据包如何处理，如何操作。添加一条筛选器操作，点击“添加’”，会出现 IP 筛选器操作向导，点击“下一步”，直到选择筛选器操作常规选项，即对于符合筛选器列表中定义的数据包，将如何处理，选中“协商安全”，让其进行 IPSec 安全协商。选中“不和不支持 IPSec 的计算机通讯”，以要求必须 在 IPSec 基础上进行连接，点击“下一步”。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps118.jpg" alt="img"> </p>
<p>决定进行通信过程中是否加密和完整性检验，为了更加清楚这其中采用的协议，选择“自定义”然后点击“设置”。 可以看到 AH 和 ESP 协议的不同功能，即 AH 协议不进行加密，而 ESP 可进行加密和完整性检验，相关算法也都可以选择，点击确定即完成了 IP 筛选器操作向导。<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps119.jpg" alt="img">筛选器操作完成后，下面我们可以看到新建立的筛选器操作名称，点击“下一步”，即完成了新增 IP 安全规则向导的设置，我们会看到新增加的安全规则，包括新 IP 筛选器列表、新筛选器操作等。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps120.jpg" alt="img"> </p>
<p>对另一台虚拟机做同样配置，通过ping测试在建立安全的IPSec连接之前，是否会协商建立相互通 讯时共享的安全参数及验证的密钥。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps121.jpg" alt="img"><br><em><strong>*3.2 路由器VPN实验*</strong></em></p>
<p><em><strong>*（1）配置网络*</strong></em></p>
<p>安装cisco 模拟器，将两个路由器拖到工作区域，等待路由器启动。输入 no，回车。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps122.jpg" alt="img"> </p>
<p>为路由器设置公网地址和内网地址</p>
<p>输入“enable” 进入特权模式，只有在特权模式下才可以对路由器进行配置，接着设置内网和外网地址：</p>
<p>Router 1 </p>
<p>外网：10.0.0.1	内网：192.168.1.1</p>
<p>Router 2</p>
<p>外网：10.0.0.2	内网：192.168.2.1</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps123.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps124.jpg" alt="img"> </p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps125.jpg" alt="img"> </p>
<p>测试连通性</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps126.jpg" alt="img"> </p>
<h3 id="（2）配置IPSec-VPN"><a href="#（2）配置IPSec-VPN" class="headerlink" title="*（2）配置IPSec VPN*"></a><em><strong>*（2）配置IPSec VPN*</strong></em></h3><p>配置router1</p>
<p>定义IKE；定义数据加密方式和认证方式，配置IPSec；将map映射到公网端口</p>
<p>用相似的方式配置router1</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps127.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps128.jpg" alt="img"> </p>
<h3 id="（3）-测试-IPSec-VPN"><a href="#（3）-测试-IPSec-VPN" class="headerlink" title="（3）*测试 IPSec VPN*"></a><strong>（3）</strong><em><strong>*测试 IPSec VPN*</strong></em></h3><h3 id="进入-simulation-mode，再次ping捕获数据包，并分析密钥协商和数据加密过程。"><a href="#进入-simulation-mode，再次ping捕获数据包，并分析密钥协商和数据加密过程。" class="headerlink" title="进入 simulation mode，再次ping捕获数据包，并分析密钥协商和数据加密过程。"></a>进入 simulation mode，再次ping捕获数据包，并分析密钥协商和数据加密过程。</h3><p>包1：确定加密算法和认证方式，进行秘钥协商</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps129.jpg" alt="img"></h3><h3 id="包7：密钥协商已经完成，使用协商好密钥进行内容传输协商"><a href="#包7：密钥协商已经完成，使用协商好密钥进行内容传输协商" class="headerlink" title="包7：密钥协商已经完成，使用协商好密钥进行内容传输协商"></a>包7：密钥协商已经完成，使用协商好密钥进行内容传输协商</h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps130.jpg" alt="img"></h3><p>传输文件包：已经在数用协商好的ESP进行加密了</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps131.jpg" alt="img"> </p>
<h1 id="四、实验总结"><a href="#四、实验总结" class="headerlink" title="四、实验总结"></a>四、实验总结</h1><p>IPSec VPN是一种网络安全协议套件，用于在公共或不受信任的网络上建立安全的、加密的连接，以确保通过互联网传输的数据的机密性、完整性和身份验证。IPSec VPN通过使用加密和认证技术，提供了一种安全的方式，使远程用户、分支机构或合作伙伴能够安全地访问公司网络。它使用IP协议来封装和保护数据包，同时提供身份验证和密钥管理机制，确保通信的安全性，从而在企业环境中广泛用于建立安全的远程访问连接。通过本次实验，我了解到了IP 协议安全协议的工作原理，同时掌握了如何在 Windows 操作系统中IPSec配置 VPN 网络。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>网络安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安全实验二——淹没返回地址</title>
    <url>/2023/07/30/Information_Security_Experiment/software_security/SSE2/</url>
    <content><![CDATA[<h1 id="一、-实验目标"><a href="#一、-实验目标" class="headerlink" title="一、 *实验目标*"></a><strong>一、</strong> <em><strong>*实验目标*</strong></em></h1><ol>
<li>通过对程序输入的密码的长度、内容等修改用Ollydbg来验证缓冲区溢出的发生</li>
<li>完成淹没相邻变量改变程序流程实验</li>
<li>完成淹没返回地址改变程序流程实验</li>
</ol>
<h1 id="二、-测试步骤与结果"><a href="#二、-测试步骤与结果" class="headerlink" title="二、 *测试步骤与结果*"></a><strong>二、</strong> *测试步骤与结果*</h1><h2 id="（一）-用Ollydbg验证缓冲区溢出发生"><a href="#（一）-用Ollydbg验证缓冲区溢出发生" class="headerlink" title="（一） 用Ollydbg验证缓冲区溢出发生"></a>（一） 用Ollydbg验证缓冲区溢出发生</h2><ol>
<li>找到strcpy()函数设置断点，运行程序并输入错误的密码12345。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1-1705498890448-1.jpg" alt="img"> </p>
<p>可知存储区中存在0012FAC4，随后被转存到0012FB18.</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2-1705498890448-3.jpg" alt="img"> </p>
<p>看到返回结果为FFFFFFFF,即为-1的补码，说明密码对比不正确。</p>
<ol start="2">
<li>重新启动程序，输入正确结果1234567</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3-1705498890448-2.jpg" alt="img"> </p>
<p>返回结果00000000，说明密码对比正确。</p>
<ol start="3">
<li>由于输入过长字符串时程序并没有设置限制，而是继续在栈中写入，从而导致缓冲区溢出，尝试输入1111111111（10个1）</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4-1705498890448-4.jpg" alt="img"> </p>
<p>程序溢出，溢出到了返回值的栈空间中。</p>
<p>可见存储区栈结构如下：</p>
<table>
<thead>
<tr>
<th>主函数main（）</th>
</tr>
</thead>
<tbody><tr>
<td>return address</td>
</tr>
<tr>
<td>ebp返回地址</td>
</tr>
<tr>
<td><em>authenticated</em></td>
</tr>
<tr>
<td>buff[8]</td>
</tr>
</tbody></table>
<h2 id="（二）-完成淹没相邻变量改变程序流程实验"><a href="#（二）-完成淹没相邻变量改变程序流程实验" class="headerlink" title="（二） 完成淹没相邻变量改变程序流程实验"></a>（二） 完成淹没相邻变量改变程序流程实验</h2><ol>
<li><p>由实验（一）已知，当字符串长度超过八位时，会发生栈溢出，多余位数会溢出到<em>authenticated</em>所在空间，因此当输入8位字符时，末尾结束符“00”会发生溢出，使得<em>authenticated</em>所在栈空间为0.导致输出正确结果</p>
</li>
<li><p>输入87654321验证</p>
</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5-1705498890448-5.jpg" alt="img"> </p>
<p>结果显示0012FB20为00000000说明会输出正确结果</p>
<h2 id="（三）-完成淹没返回地址改变程序流程实验"><a href="#（三）-完成淹没返回地址改变程序流程实验" class="headerlink" title="（三） 完成淹没返回地址改变程序流程实验"></a>（三） 完成淹没返回地址改变程序流程实验</h2><ol>
<li>如果想要将返回地址也淹没的话需要输入超长字符串，即：8位buf[8] + 4位<em>authenticated</em>存储空间 + 4位EBP回调存储空间 + 想要其返回的地址位置</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6-1705498890448-6.jpg" alt="img"> </p>
<p>可见在00401116处为输入正确语句，因此要转跳到00401116处</p>
<ol start="2">
<li>将00401116按照编码进行转换</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps7-1705498890448-7.jpg" alt="img"> </p>
<p>拼接后进行输入：<code>1111222233334444VQ@</code></p>
<p>3.尝试输入该字符串，修改成功。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps8-1705498890448-8.jpg" alt="img"> </p>
<p>绘制修改原理的图示</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps9-1705498890449-10.jpg" alt="img"> </p>
<h1 id="三、-测试结论"><a href="#三、-测试结论" class="headerlink" title="三、 *测试结论*"></a><strong>三、</strong> <em><strong>*测试结论*</strong></em></h1><p>通过这一实验测试，可以看出栈溢出对程序的准确运行有很大的危害，如果不对栈空间进行保护的话，系统中很容易存在栈溢出漏洞。攻击者通过漏洞只要到达最近的传地址位置就可以转跳到任何想要转跳的地方，存在着相当大的风险。因此要对程序栈进行保护，严格限制管理外部数据对栈的操作，从而避免因为栈溢出而存在漏洞。</p>
<h1 id="四、-思考题"><a href="#四、-思考题" class="headerlink" title="四、 *思考题*"></a><strong>四、</strong> <em><strong>*思考题*</strong></em></h1><p><em>在不修改源代码的情况下，修改OverFlow_EXE程序的流程，通过弧注入的方式，不植入可执行代码，让其调用MessageBoxA函数（函数地址：0x77E23D68）弹出对话框（对话框显示bupt），之后调用ExitProcess函数（函数地址：0x77E7B0BB）退出进程。写明其他方法的主要思路，破解过程，并附带截图及破解程序。</em></p>
<ol>
<li>通过源代码可以发现，在读入password后程序调用verify_password函数，瑞国想通过弧注入方式进行攻击所使用函数栈应该：buffer[0-44] 44字节+authenticated 4字节+EBP 4字节+返回地址</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps10-1705498890448-9.jpg" alt="img">2. 2. 根据需求地址调用编辑password</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps11-1705498890449-11.jpg" alt="img"> </p>
<p>3.重新运行程序，实验成功。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps12-1705498890449-13.jpg" alt="img"> </p>
<p>栈内存结构：</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps13-1705498890449-12.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>软件安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安全实验一——存在栈溢出的代码</title>
    <url>/2023/07/30/Information_Security_Experiment/software_security/SSE1/</url>
    <content><![CDATA[<h1 id="1、-目标"><a href="#1、-目标" class="headerlink" title="1、 目标"></a>1、 目标</h1><ol>
<li>读懂并能够独立编写密码验证的小程序。</li>
<li>运行Ollydbg，并学习用其调试密码验证小程序。</li>
<li>学习安全漏洞的基本原理，通过修改汇编语句来修改程序的判断条件，改变程序的运行路线。</li>
<li>破解crackme.exe程序，尝试绕过密码验证逻辑，至少采用2种破解方式方法。</li>
</ol>
<h1 id="2、-测试步骤与结果"><a href="#2、-测试步骤与结果" class="headerlink" title="2、 测试步骤与结果"></a>2、 测试步骤与结果</h1><p>1.通过查看源代码可以看出来main函数实现了一个密码比对功能，只有输入密码为1234567时才能通过。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1-1705498578311-5.jpg" alt="img"> </p>
<p>根据代码画出程序流程图</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2-1705498578311-4.jpg" alt="img"> </p>
<p>2.打开Win2000虚拟机系统，使用VC软件新建工程。</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3-1705498578310-1.jpg" alt="img"> </p>
<p>3.新建C++文件</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4-1705498578311-2.jpg" alt="img"> </p>
<p>4.导入程序代码进行生成</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5-1705498578311-3.jpg" alt="img"> </p>
<p>5.对初始代码进行调试，可以正常运行</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6-1705498578311-6.jpg" alt="img"> </p>
<p>6.使用ollyDbg打开刚才生成的exe程序，可以看见exe反汇编后的汇编语言程序</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps7-1705498578311-9.jpg" alt="img"> </p>
<p>7.找到判断语句区域，打下断点，如果输入错误密码会重复执行该区域语句</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps8-1705498578311-7.jpg" alt="img"> </p>
<p>8.找到判断语句，修改源代码</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps9-1705498578311-8.jpg" alt="img"> </p>
<p>9.将其从74改为75，实现取反，这样输入错误密码就会通过</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps10-1705498578311-10.jpg" alt="img"> </p>
<p>10.此时输入正确密码反而无法通过</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps11-1705498578311-11.jpg" alt="img"> </p>
<p>随机输入一个错误密码，程序通过，自动关闭。</p>
<h1 id="3、-测试结论"><a href="#3、-测试结论" class="headerlink" title="3、 测试结论"></a>3、 测试结论</h1><p>通过本次实验测试，我认识到了软件安全的重要性，尽管开发人员可以对软件进行封装，但攻击者依旧可以对源代码进行篡改实现攻击。使用简单的判断逻辑进行信息保护还是有较大风险性存在的，因此也可以尝试更为复杂的逻辑判断从而加大破译难度，或者也可以将数据传回云服务器进行验证，从而避开用户更改本地代码这一攻击手段。由此，我认为还是应当好好学习这门课程，加深自己对软件安全的认识和理解，从而在以后的工作中设计出更为安全的软件，避免因缺乏安全知识，使得设计的软件漏洞百出不看重用。</p>
<h1 id="4、-思考题"><a href="#4、-思考题" class="headerlink" title="4、 思考题"></a>4、 思考题</h1><p>本部分共使用三种方法实现</p>
<h2 id="1）通过更改判断语句逻辑实现"><a href="#1）通过更改判断语句逻辑实现" class="headerlink" title="1）通过更改判断语句逻辑实现"></a>1）通过更改判断语句逻辑实现</h2><p>1.直接点击exe文件进行初次尝试，查看运行效果，找到关键字符串“注册失败”</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps12-1705498578311-13.jpg" alt="img"> </p>
<p>2.导入虚拟机，使用ollyDbg进行调试</p>
<p>从存储区可以看到00403020处存储的是“注册失败”字符串</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps13-1705498578311-12.jpg" alt="img"> </p>
<p>3.通过查找常量找到伪代码中调用地址的位置</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps14-1705498578311-14.jpg" alt="img"> </p>
<p>4.往上就进找到判断语句，该语句应为正否判断</p>
<p>更改判断逻辑75改为74，此时随意输入内容可以通过</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps15-1705498578311-15.jpg" alt="img"> </p>
<h2 id="2-删除判断语句，强制执行注册成功部分代码实现"><a href="#2-删除判断语句，强制执行注册成功部分代码实现" class="headerlink" title="2)删除判断语句，强制执行注册成功部分代码实现"></a>2)删除判断语句，强制执行注册成功部分代码实现</h2><p>1.分析伪代码可知：JNZ语句执行判断，如果满足条件则正常执行，不满足则向下跳转到注册失败语句</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps16-1705498578311-18.jpg" alt="img"> </p>
<p>2.因此如果将这句判断注释掉，就可以正常按顺序执行成功语句</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps17-1705498578311-16.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps18-1705498578311-20.jpg" alt="img"> </p>
<p>3.此时输入任何信息都可以输出通过</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps19-1705498578311-17.jpg" alt="img"> </p>
<h2 id="3）动态调试实现"><a href="#3）动态调试实现" class="headerlink" title="3）动态调试实现"></a>3）动态调试实现</h2><p>1.在寄存器中z控制判断反馈结果，因此在判断语句打下断点，通过更改寄存器值可以直接通过</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps20-1705498578311-21.jpg" alt="img"> </p>
<p>2.输入错误密码，运行到断点处，程序等待响应，此时z&#x3D;0</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps21-1705498578311-19.jpg" alt="img"> </p>
<p>3.将其改为1后，程序判定判断语句通过，输出正确选项</p>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps22-1705498578311-22.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>软件安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安全实验三——shellcode注入</title>
    <url>/2023/07/30/Information_Security_Experiment/software_security/SSE3/</url>
    <content><![CDATA[<h1 id="一、-实验目标"><a href="#一、-实验目标" class="headerlink" title="一、 *实验目标*"></a><strong>一、</strong> <em><strong>*实验目标*</strong></em></h1><ol>
<li>了解shellcode注入原理 </li>
<li>理解给出的弹出对话框的汇编代码 </li>
<li>通过淹没静态地址来实现shellcod的代码植入 </li>
<li>通过跳板来实现shellcode的代码入 </li>
<li>尝试修改汇编语句的shellcode实现修改标题等 简单操作</li>
</ol>
<h1 id="二、-测试步骤与结果"><a href="#二、-测试步骤与结果" class="headerlink" title="二、 *测试步骤与结果*"></a><strong>二、</strong> <em><strong>*测试步骤与结果*</strong></em></h1><ol>
<li>创建可执行程序</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps1-1705499015461-2.jpg" alt="img"></p>
<ol start="2">
<li>运行程序成功后开始寻找dll中函数地址</li>
</ol>
<p>运行dependency walker程序剖析exe文件<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps2-1705499015461-5.jpg" alt="img"><br>点 击 kernel32.dll ， 在 右 侧 能 找 到exitprocess的函数入口点(右侧两个窗口中靠下的那个在下面的窗口中能够查到kernel32.dll的实际基址<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps3-1705499015460-1.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps4-1705499015461-3.jpg" alt="img"><br>两个地址相加即可得到exitprocess的入口地址： 0x0001B0BB+0x77E60000&#x3D;0x77E7B0BB。</p>
<ol start="3">
<li>调试shellcode</li>
</ol>
<p>新建工程文件，将code&#x2F;shellcode文件夹中main.cpp的内容粘贴进新建的工程文件中<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps5-1705499015461-4.jpg" alt="img"><br>入口地址与刚才计算的一致，能够成功运行<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps6-1705499015461-6.jpg" alt="img"></p>
<ol start="4">
<li>使用ollydbg打开刚才生成的exe文件，找到编写shellcode的汇编语言</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps7-1705499015461-7.jpg" alt="img"><br>复制选定需要的部分：从xor ebx,ebx开始，到call eax结束(调用exit process的那个call eax)，并右键保存到文件，<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps8-1705499015461-8.jpg" alt="img"></p>
<ol start="5">
<li>通过淹没静态地址来实现shellcode的代码植入</li>
</ol>
<p>新建password文本文件<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps9-1705499015461-9.jpg" alt="img"><br>在ollydbg中打开overflow.exe，并在strcpy处设置断点<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps10-1705499015461-10.jpg" alt="img"><br>运行到断点处，指向地址0x0012FAF0，其为数组的存放起始位置，也就是shellcode注入的起始位置。<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps11-1705499015461-11.jpg" alt="img"></p>
<ol start="6">
<li>用Ultraedit在password.txt中写入payload，存储结构：shellcode+填充字符+shellcode在缓冲区的起始地址。其中shellcode为前面获得的操作码，填充字符应保证其与shellcode的和为52字节，shellcode缓冲区地址为dest指向地址</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps12-1705499015461-12.jpg" alt="img"><br>重新运行overflow.exe，可以看到弹出窗口，说明通过淹没静态地址成功实现了shellcode的代码<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps13-1705499015461-13.jpg" alt="img"></p>
<ol start="7">
<li>通过跳板来实现shellcode的代码植入</li>
</ol>
<p>用ollydbg打开overflow.exe，在strcpy函数上设置断点，运行至断点，进行搜索<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps14-1705499015461-14.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps15-1705499015461-15.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps16-1705499015461-16.jpg" alt="img"><br>可以看到一条在user32.text中的JMP ESP指令的地址为0x77E2E32A。</p>
<ol start="8">
<li>打开password.txt，这次的文件结构为 52字节填充物 + 4字节JMP ESP地址（逆序）+ shellcode (可选 + 若干0x90）</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps17-1705499015461-17.jpg" alt="img"><br>输出成功<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps18-1705499015461-18.jpg" alt="img"></p>
<h1 id="三、-测试结论"><a href="#三、-测试结论" class="headerlink" title="三、 *测试结论*"></a><strong>三、</strong> <em><strong>*测试结论*</strong></em></h1><p>Shellcode攻击是通过利用计算机程序中的安全漏洞，将恶意代码注入到目标系统的内存中，然后利用该恶意代码来执行恶意操作，通过这一手段可以获取系统权限或者执行恶意操作，如植入后门、窃取信息等。这种攻击通常涉及精心构建的二进制代码，通常是汇编语言编写，用于利用特定漏洞来绕过系统的安全措施，然后执行攻击者所期望的操作。 Shellcode攻击是一种常见的攻击手法，通常需要深入了解目标系统的底层结构和漏洞，以便成功执行攻击。</p>
<p>通过这次测试，我深刻认识到了软件安全的重要性以及它所面临的巨大挑战。我们需要积极扩展知识储备，掌握更强大的安全工具，以便保护软件免受威胁。栈溢出漏洞在程序安全方面构成了严重威胁，因为它可以让攻击者通过不正当手段获取系统权限。因此，必须对保存在栈上的数据的可执行权限进行严格管理，并实施措施来检测和防范栈溢出漏洞，以确保系统的安全性。</p>
<p>​    </p>
<h1 id="四、-思考题"><a href="#四、-思考题" class="headerlink" title="四、 *思考题*"></a><strong>四、</strong> <em><strong>*思考题*</strong></em></h1><p>在不修改StackOverrun程序源代码的情况下，构造shellcode，通过JMP ESP的方式实现通过记事本打开shellcode.txt（可使用CreateProcessA或WinExec等API）。</p>
<ol>
<li>strcpy将输入的内容复制到栈中，导致栈溢出漏洞。另外main函数有两个参数，第一个参数int argc为传入的字符串个数，第二个参数是字符串指针数组，用于存放传入的字符串指针。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps19-1705499015461-19.jpg" alt="img"></p>
<ol start="2">
<li>选用WinExec(“cmd.exe,SW_SHOWNORMAL”)，其第一个参数为要打开的程序名称，第二个参数为窗口大小。当调用该命令时还需要加入cmd的参数，&#x2F;k dir表示执行完dir命令后不关闭命令窗口，命令如下：WinExec(“cmd.exe &#x2F;k dir &gt; shellcode.txt”, SW_SHOWNORMAL)将WinExec的参数用十六进制表示</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps20-1705499015461-20.jpg" alt="img"></p>
<ol start="3">
<li>利用Dependency Walker获取WinExec函数的地址</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps21-1705499015461-21.jpg" alt="img"><br>根据地址计算到其真实地址0x0018601 + 0x77E60000 &#x3D; 0x77E78601。</p>
<ol start="4">
<li>编写shellcode，并编译生成exe文件</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps22-1705499015461-22.jpg" alt="img"><br>打开刚刚生成的exe文件，找到对应的汇编语句，并右键复制到文件获取机器码<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps23-1705499015461-27.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps24-1705499015461-28.jpg" alt="img"></p>
<ol start="5">
<li>打开stackoverrun.exe，在strcpy函数处下断点，搜索JMP ESP</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps25-1705499015461-25.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps26-1705499015461-23.jpg" alt="img"></p>
<ol start="6">
<li>构造的payload</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps27-1705499015461-26.jpg" alt="img"></p>
<ol start="7">
<li>打开stackoverrun.exe，添加参数“payload”</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps28-1705499015461-24.jpg" alt="img"></p>
<ol start="8">
<li>重新运行程序，可以看到程序跳到了编写的shellcode汇编处结束</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps29-1705499015461-29.jpg" alt="img"><br>并且会自动打卡shellcode.exe文件<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps30-1705499015461-30.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>软件安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安全实验五——SEH攻击</title>
    <url>/2023/07/30/Information_Security_Experiment/software_security/SSE5/</url>
    <content><![CDATA[<h1 id="一、-实验目标"><a href="#一、-实验目标" class="headerlink" title="一、 *实验目标*"></a><strong>一、</strong> <em><strong>*实验目标*</strong></em></h1><p>(1) 了解SEH攻击及虚函数攻击的基本原理</p>
<p>(2) 通过调试SEH攻击代码，理解Windows异常处理机制，掌握针对SEH的攻击方式，并利用OllyDbg跟踪异常状态。</p>
<p>(3) 调试虚函数攻击代码，理解虚函数工作机制与内存分布方式，掌握基本的虚函数攻击与计算方式，并可以用OllyDbg追踪。</p>
<h1 id="二、-测试步骤与结果"><a href="#二、-测试步骤与结果" class="headerlink" title="二、 *测试步骤与结果*"></a><strong>二、</strong> <em><strong>*测试步骤与结果*</strong></em></h1><p>（一）实验一：通过调试SEH攻击代码，理解Windows异常处理机制，掌握针对SEH的攻击方式，并利用OllyDbg跟踪异常状态。</p>
<ol>
<li>阅读代码</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps59-1705499217523-2.jpg" alt="img"></p>
<ol start="2">
<li>为了能触发int 3断点时启动OllyDbg，我们选择选项中的实时调试设置选择设置OllyDbg为实时调试器，然后当我们运行exe文件时，int 3 断点触发后就会启动OllyDbg：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps60-1705499217523-6.jpg" alt="img"></p>
<ol start="3">
<li>运行SEH.exe，发现要求创建UDD目录：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps61-1705499217523-1.jpg" alt="img"><br>按照要求创建UDD目录：<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps62-1705499217523-7.jpg" alt="img"></p>
<ol start="4">
<li>两个路径设置成功后，重新运行SEH.exe程序，成功在int 3上启动OllyDbg：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps63-1705499217523-3.jpg" alt="img"></p>
<ol start="5">
<li>在strcpy函数处设置断点，程序运行到此处时观察右下角缓冲区数据，可以看到在执行strcpy函数之前，shellcode的起始地址为0x0012FE48：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps64-1705499217523-4.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps65-1705499217523-5.jpg" alt="img"></p>
<ol start="6">
<li>点击查看菜单中的S.E.H链，可以看到S.E.H链的情况：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps66-1705499217523-8.jpg" alt="img"></p>
<ol start="7">
<li>查看地址0x0012FF18的记录，发现其指向下一个SEH指针，接着是异常处理程序, 只需要把0x0012FF1C这个地址的内容改成shellcode起始地址即可：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps67-1705499217523-9.jpg" alt="img"></p>
<ol start="8">
<li>由于shellcode的起始地址为 0x0012FE48，第一个S.E.H地址为 0x0012FF18(指向下一个S.E.H的指针) 0x0012FF1C(异常处理地址)，因此shellcode需要使用0x0012FF1C-0x0012FE48&#x3D;212个字节进行填充，且注释掉__asm int 3。修改后的程序如下：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps68-1705499217523-10.jpg" alt="img"></p>
<ol start="9">
<li>运行程序，成功出现弹框：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps69-1705499217523-11.jpg" alt="img"><br>此时shellcode已经被执行，但是点击确定却没有反应，这是因为shellcode已经被当作系统异常处理来进行了，所以点击确定不会退出程序。</p>
<p>（二）实验二：调试虚函数攻击代码，理解虚函数工作机制与内存分布方式，掌握基本的虚函数攻击与计算方式，并可以用OllyDbg追踪。</p>
<ol>
<li>代码分析如下：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps70-1705499217524-12.jpg" alt="img"></p>
<ol start="2">
<li>设置VC6的build版本为release：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps71-1705499217524-15.jpg" alt="img"></p>
<ol start="3">
<li>在strcpy函数处设置断点，程序运行到此处时观察右下角缓冲区数据，可以看到在执行strcpy函数之前，shellcode的起始地址为0x0042E27C：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps72-1705499217524-16.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps73-1705499217524-18.jpg" alt="img"></p>
<ol start="4">
<li>根据shellcode起始地址0042E27C改写shellcode，shellCode长度为 216 Bytes，换算成十六进制为D8，故shellcode的末尾后四个字节地址是0x0042E27C+0xD8–0x4&#x3D;0x0042E350。修改后的程序如下：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps74-1705499217524-13.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps75-1705499217524-14.jpg" alt="img"></p>
<ol start="5">
<li>启动程序，成功出现弹框，shellcode植入成功：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps76-1705499217524-21.jpg" alt="img"></p>
<h1 id="三、-测试结论"><a href="#三、-测试结论" class="headerlink" title="三、 *测试结论*"></a><strong>三、</strong> <em><strong>*测试结论*</strong></em></h1><p>通过本次实验，对SEH的初步理解，S.E.H结构体存放在系统栈中。</p>
<p>如果程序源代码中使用了__try{}__except{}或者Assert宏等异常处理机制，编译器将最终通过向当前函数栈帧中安装一个S.E.H来实现异常处理。栈中的多个S.E.H通过链表指针在栈内由栈顶向栈底串成单向链表，位于链表最顶端的S.E.H通过T.E.B（线程环境块）0字节偏移处的指针标识，FS寄存器指向TEB的位置。当异常发生时，操作系统会中断程序，并首先从T.E.B的0字节偏移处取出距离栈顶最近的S.E.H，使用异常处理函数句柄所指向的代码来处理异常。因此S.E.H存放在栈内，溢出缓冲区的数据有可能淹没S.E.H。精心制造的溢出数据可以把S.E.H中异常处理函数的入口地址更改为shellcode的起始地址。当Windows开始处理溢出后的异常时，会错误地把shellcode当做异常处理函数而执行，从而达到攻击效果。</p>
<p>对于虚函数攻击，一般在一个类中一旦有多态产生就会有虚函数表存在，该表一般位于类的成员变量上方。当实例化一个类时，成员函数与静态成员都不算在类对象内部。只算成员变量的大小，所以也可以那么认为: 存储类实例化对象上方就是虚函数表的地址。在这种情况下，假设类中有栈内有分配了空间，那我们用指针就可以寻找到该空间的上面4字节(32位)就可以修改对应的虚表指针转到自己的shellcode上了，在调用了对应的虚表指针指向的虚函数，就相当于调用了自己的shellcode了。</p>
<h1 id="四、-思考题"><a href="#四、-思考题" class="headerlink" title="四、 *思考题*"></a><strong>四、</strong> <em><strong>*思考题*</strong></em></h1><p><em>针对Arrayindexerror数组索引思考题程序，在不修改源代码的情况下，研究如何攻击目标代码，并调用<strong>bar</strong>函数。</em></p>
<ol>
<li>查看源码发现，需要传入两个参数</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps77-1705499217524-17.jpg" alt="img"></p>
<ol start="2">
<li>尝试传入参数  1 2  ，步进查看返回信息</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps78-1705499217524-19.jpg" alt="img"><br>需要将转跳地址改为0x00401005才能实现bar转跳。</p>
<ol start="3">
<li>返回地址位置打断点，查看返回指针位置</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps79-1705499217524-20.jpg" alt="img"><br>找到返回地址0x00430068<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps80-1705499217524-25.jpg" alt="img"></p>
<ol start="4">
<li>因此要回溯到bar地址</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps81-1705499217524-22.jpg" alt="img"><br>即0x0012FFC4-0x00430068&#x3D;0xFFCF FF5C。由于输入信息为int型，因此计算是按照四倍计算，需要除4得到结果，即0xFFCF FF5C&#x2F;4 &#x3D; -786514。<br>第二个参数为bar的地址10进制0x00401005 &#x3D; 4198405。因此传入参数 -786514 4198405<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps82-1705499217524-24.jpg" alt="img"></p>
<ol start="5">
<li>重新运行程序</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps83-1705499217524-26.jpg" alt="img"><br>运行成功<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps84-1705499217524-23.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>软件安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安全实验四——fuzz测试代码</title>
    <url>/2023/07/30/Information_Security_Experiment/software_security/SSE4/</url>
    <content><![CDATA[<h1 id="一、-实验目标"><a href="#一、-实验目标" class="headerlink" title="一、 *实验目标*"></a><strong>一、</strong> <em><strong>*实验目标*</strong></em></h1><ol>
<li>了解漏洞挖掘的基本思想 </li>
<li>掌握基本的fuzz测试的工具与技巧  </li>
<li>尝试自己编写fuzz测试代码</li>
</ol>
<h1 id="二、-测试步骤与结果"><a href="#二、-测试步骤与结果" class="headerlink" title="二、 *测试步骤与结果*"></a><strong>二、</strong> <em><strong>*测试步骤与结果*</strong></em></h1><ol>
<li>打开虚拟机桌面上的Quick FTP的文件夹</li>
</ol>
<p>打开exe文件，接着设置开放匿名用户<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps31-1705499115446-2.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps32-1705499115446-1.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps33-1705499115446-3.jpg" alt="img"></p>
<ol start="2">
<li>打开ftpfuzz的exe文件</li>
</ol>
<p>左下角下拉框选择Deselect All<br>在USER选项中的Command Argument中填入anonymous<br>在PASS选项中的Command Argument中填入anonymous<br>在LIST选项中勾选fuzz this ftp command选项<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps34-1705499115446-5.jpg" alt="img"><br>不要忘了update chang</p>
<ol start="3">
<li>点击config菜单，然后选中Fuzzing data选项卡，设定要设置的脏数据，先只选择”..?”</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps35-1705499115446-4.jpg" alt="img"></p>
<ol start="4">
<li>配置host</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps36-1705499115446-6.jpg" alt="img"><br>启动攻击</p>
<ol start="5">
<li>启动后可以看到相关的信息（更改timeout时间）</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps37-1705499115446-8.jpg" alt="img"><br>虚拟机里面FTP主机直接崩溃<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps38-1705499115446-9.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps39-1705499115446-7.jpg" alt="img"></p>
<ol start="6">
<li>打开桌面上的Home Ftp Server</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps40-1705499115446-10.jpg" alt="img"></p>
<ol start="7">
<li>点击下方的FTP SERVER选项卡</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps41-1705499115447-11.jpg" alt="img"></p>
<ol start="8">
<li>点击New Member创立新成员</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps42-1705499115447-12.jpg" alt="img"></p>
<ol start="9">
<li>按照要求填入帐号密码文件夹地址和权限等相关参数</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps43-1705499115447-13.jpg" alt="img"></p>
<ol start="10">
<li>然后点击start server，左下角提示running表示</li>
</ol>
<p>服务器已经开始运行<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps44-1705499115447-17.jpg" alt="img"></p>
<ol start="11">
<li>打开开始菜单中的Python程序中的GUI</li>
</ol>
<p>选择fuzz实验文件夹中的fuzz.py文件<br>打开后我们可以看到我们的Python文件中的代码<br>读懂了之后就可以编写Fuzz工具了<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps45-1705499115447-14.jpg" alt="img"></p>
<ol start="12">
<li>运行fuzz，可以看到运行结果如下，发现很多次失败的情况，其实回去观察服务器情况可以发现是Fuzz已经成功导致服务已经关停。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps46-1705499115447-19.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps47-1705499115447-15.jpg" alt="img"></p>
<h1 id="三、-测试结论"><a href="#三、-测试结论" class="headerlink" title="三、 *测试结论*"></a><strong>三、</strong> <em><strong>*测试结论*</strong></em></h1><p>在本次实验中使用了fuzz攻击工具对ftp服务器进行了有效供给，并导致了服务器的崩溃。通常使用的fuzz攻击工具是集合好的软件，但本次实验中我们也通过编写python脚本实现了攻击。在通过OllyDbg进行分析时，虽然能够转跳到攻击所在位置，但是很难获取到攻击使得服务器崩溃的原因。通过本次实验，我对软件安全和栈溢出也有了更加深刻的认识，意识到了软件安全的重要性。</p>
<h1 id="四、-思考题"><a href="#四、-思考题" class="headerlink" title="四、 *思考题*"></a><strong>四、</strong> <em><strong>*思考题*</strong></em></h1><p><em>开发一个针对FTP协议的fuzzing程序，针对easy ftp server，使服务器停止工作，至少找出<strong>3</strong>个崩溃的异常（代码位置不同）。通过OD找到出现异常崩溃的代码位置及寄存器状态，并判断其是否存在缓冲区溢出漏洞，并植入shellcode。</em></p>
<ol>
<li>下载<em>easy ftp server*<em>并用ollydbg运行</em></em></li>
</ol>
<p><strong>运行Ftpconsole.exe，点击启动按钮</strong><br>*<img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps48-1705499115447-16.jpg" alt="img"><br>OllyDbg点击附加<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps49-1705499115447-18.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps50-1705499115447-21.jpg" alt="img"><br>点击OllyDbg运行。</p>
<ol start="2">
<li>网上查询得知读入信息存在于WS2_32.dll中，查询输入地址74FBAA7B</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps51-1705499115447-24.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps52-1705499115447-20.jpg" alt="img"></p>
<ol start="3">
<li>编写fuzz脚本进行攻击，找到WS2_32，查找栈空间开辟大小</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps53-1705499115447-28.jpg" alt="img"></p>
<ol start="4">
<li>运行脚本进行攻击，发生报错</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps54-1705499115447-22.jpg" alt="img"><br>可以看见数据栈信息输入<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps55-1705499115447-23.jpg" alt="img"></p>
<ol start="5">
<li>编写shellcode注入文件，只需让返回地址为输入内容的起始地址，并从起始地址位置写入shellcode代码，其余位置补全</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps56-1705499115447-25.jpg" alt="img"></p>
<ol start="6">
<li>引入新的输入文件</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps57-1705499115447-26.jpg" alt="img"></p>
<ol start="7">
<li>重新进行fuzz攻击</li>
</ol>
<p>数据栈被修改，并成功输出shellcode重写成果<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps58-1705499115447-27.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>软件安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安全实验六——sprintf()函数</title>
    <url>/2023/07/30/Information_Security_Experiment/software_security/SSE6/</url>
    <content><![CDATA[<h1 id="一、-实验目标"><a href="#一、-实验目标" class="headerlink" title="一、 *实验目标*"></a><strong>一、</strong> <em><strong>*实验目标*</strong></em></h1><p>%x查看栈内容</p>
<p>%s查看指定地址内容</p>
<p>è 复习缓冲区溢出覆写返回地址跳转shellcode的操作流程</p>
<p>è 了解sprintf()函数缺陷所在</p>
<p>è 分析shellcode的构造原理</p>
<p>è 实际操作对格式化输出函数漏洞进行利用</p>
<h1 id="二、-测试步骤与结果"><a href="#二、-测试步骤与结果" class="headerlink" title="二、 *测试步骤与结果*"></a><strong>二、</strong> <em><strong>*测试步骤与结果*</strong></em></h1><p>（一）通过%x来查看栈内容，重建栈内存，获得该frame的返回地址；</p>
<ol>
<li>代码如下</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps85-1705499301109-1.jpg" alt="img"><br>如上所示，执行printf时第四个%x没有提供对应的参数，因此会显示本应该是参数所在位置的栈内容</p>
<ol start="2">
<li>运行至CALL test._printf处，可以看到显示了本应该是参数所在位置的栈内容。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps86-1705499301110-5.jpg" alt="img"></p>
<ol start="3">
<li>通过更多的%x可以重建更多的栈内存：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps87-1705499301110-3.jpg" alt="img"><br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps88-1705499301110-2.jpg" alt="img"></p>
<p>（二）通过%s查看指定地址内容；</p>
<ol>
<li>分析源代码</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps89-1705499301110-6.jpg" alt="img"></p>
<ol start="2">
<li>在OllyDbg中打开程序，并执行printf函数：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps90-1705499301110-7.jpg" alt="img"><br> 1,2,3是提供3个参数。利用%x步进，将%s的参数对应到77E61010，因此可以输出77E61010开始的字符串直到遇到截断符。0x0012FF58为format字符串起始地址，前四个字节即我们想要查看的内存地址77E61010：</p>
<p>（三）对sprintf函数及shellcode做解释分析；<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps91-1705499301110-4.jpg" alt="img"><br> 作为向字符数组中写入数据的格式化输出函数，sprintf会假定存在任意长度的缓冲区。此处将字符数组user作为由用户构造的输入，其中出现了非常规字符%497d，是此次实验成功的关键。\x39\x4a\x42\x00是shellcode的起始地址，用来覆盖返回地址。\x90…\x33…\xD0…\x90为此次的弹框的shellcode：<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps92-1705499301110-8.jpg" alt="img"></p>
<p>（四）通过格式化字符串造成的缓冲区溢出覆盖返回地址，执行shellcode；</p>
<ol>
<li>运行ollidbg，打下两处断点</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps93-1705499301110-9.jpg" alt="img"></p>
<ol start="2">
<li>运行至第一个 sprintf 处步过，观察缓冲区，可见存储位置从0012FB2C开始。由于后续被\x00截断，不在复制user后续内容</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps94-1705499301110-11.jpg" alt="img"> </p>
<p>继续运行到第二个断点后，运行结果指向0012FD2C<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps95-1705499301110-17.jpg" alt="img"><br>可以看到第二个存储栈的内容<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps96-1705499301110-12.jpg" alt="img"><br>为满足%497d，中间使用\x20填充。最后写入\x39\x4a\x42\x00的十进制格式<br><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps97-1705499301110-10.jpg" alt="img"></p>
<ol start="3">
<li>由于“ERR Wrong command:”+若干个补充字符’\x20’+1245056D+0x00424A39&#x3D;516字节，大于存储结构定义时的512，多余的四个字节会将返回地址覆盖淹没。返回地址转跳到shellcode代码地址。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps98-1705499301110-16.jpg" alt="img"></p>
<h1 id="三、-测试结论"><a href="#三、-测试结论" class="headerlink" title="三、 *测试结论*"></a><strong>三、</strong> <em><strong>*测试结论*</strong></em></h1><p>格式化字符串漏洞是由于程序员在使用诸如printf这类的格式化输出函数时未能正确验证输入，导致攻击者可以通过构造特定的输入来控制格式化字符串的行为。如果格式化函数如sprintf或printf使用了用户控制的输入作为格式化参数，攻击者可能会插入恶意格式化指令，这些指令可以读取或写入内存，导致缓冲区溢出或其他安全问题，例如执行任意代码。这种类型的漏洞在软件安全中是严重且常见的，因为它允许攻击者绕过正常的权限检查来危害系统。</p>
<p>本次实验中了解到了格式化字符串造成缓冲区溢出的具体原理，并对其危害和效果进行了尝试。</p>
<h1 id="四、-思考题"><a href="#四、-思考题" class="headerlink" title="四、 *思考题*"></a><strong>四、</strong> <em><strong>*思考题*</strong></em></h1><p>*破解<strong>foo.exe</strong>程序，在不改变源代码的情况下，要求通过命令行输入，利用格式化字符串漏洞<strong>n%<strong>的方式，调用隐藏的</strong>foo</strong>函数，并尝试调用一个shellcode。*</p>
<ol>
<li>使用ollydbg启动程序，并在输出函数打断点。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps99-1705499301110-13.jpg" alt="img"></p>
<ol start="2">
<li>尝试输入%x做参数，查看输出效果</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps100-1705499301110-14.jpg" alt="img"></p>
<ol start="3">
<li>查看输出结果</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps101-1705499301110-15.jpg" alt="img"></p>
<ol start="4">
<li>查看栈空间</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps102-1705499301110-19.jpg" alt="img"><br>可见存储从0012FD18开始，由于设定	char buf[512]因此会一直存储到0012FF18。但是_snprintf(buf, sizeof(buf)-1, “Can’tFind%s”, file);所以无法实现对0012FF18的直接写入。</p>
<ol start="5">
<li>查看%x的指针调用位置。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps103-1705499301110-21.jpg" alt="img"><br>可见，指针是从0012FCCC开始调用的。</p>
<ol start="6">
<li>因此进行分析：如果想调用foo函数，需要在返回地址，即0012FF18写入foo函数地址00401014，而现有转跳是00401005。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps104-1705499301110-18.jpg" alt="img"><br>因此可以使用%hn替换其低四位内容，即%hn输出前字符串输出1014。并且使指针通过%x遍历，最后停止在0012FF18的地址上。<br>参数格式应为%x%x%x%x……%x%x%x%x%hn \x00 \x12 \xFF \x18</p>
<ol start="7">
<li>计算%x个数。1014转换为10进制为4116,由此构造输出位数，结果如下。</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps105-1705499301110-20.jpg" alt="img"></p>
<ol start="8">
<li>尝试运行，运行成功</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps106-1705499301111-22.jpg" alt="img"><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps107.jpg" alt="img"></p>
<ol start="9">
<li>同理构造shellcode。由于shellcode构造在参数部分，即0012FD20。因此在转跳时需要转跳此处，需要把0012FF18处内容00401005全部替换。构造如下：</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps108.jpg" alt="img"></p>
<ol start="10">
<li>运行结果</li>
</ol>
<p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps109.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>软件安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安全作业一——安全的strcpy_s函数</title>
    <url>/2023/12/30/Information_Security_Experiment/software_security/SSH1/</url>
    <content><![CDATA[<h1 id="详述函数编写思路和流程"><a href="#详述函数编写思路和流程" class="headerlink" title="详述函数编写思路和流程"></a>详述函数编写思路和流程</h1><p>本次实现的strcpy_s函数需要实现以下功能：</p>
<p>a) 不会产生缓冲区溢出</p>
<p>b) 不产生无结尾的字符串</p>
<p>c) 不意外截断字符串</p>
<p>因此需要对输入字符串进行判断。</p>
<p>定义符号：</p>
<table>
<thead>
<tr>
<th>RSIZE_MAX</th>
<th>栈空间大小</th>
</tr>
</thead>
<tbody><tr>
<td>s1</td>
<td>待复制空间</td>
</tr>
<tr>
<td>s1max</td>
<td>待复制字符串长度</td>
</tr>
<tr>
<td>s2</td>
<td>输入字符串</td>
</tr>
<tr>
<td>s1len</td>
<td>允许复制长度</td>
</tr>
</tbody></table>
<p>对于需求a：需要比对s1max和RSIZE_MAX的大小，即比较申请的复制空间是否超出缓冲区限制，如果s1max &gt; RSIZE_MAX就会发生栈溢出。</p>
<p>对于需求b和c:需要使得s1max &gt; s1len，否则会发生空结尾错误或发生截断。如果s1max &#x3D; s1len则没有给最后一位空值留出空间，发生空结尾错误。如果s1max &lt; s1len会发生截断。</p>
<h1 id="函数源代码"><a href="#函数源代码" class="headerlink" title="函数源代码"></a>函数源代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">errno_t</span> <span class="title">strcpy_s</span><span class="params">(<span class="type">char</span> *s1, <span class="type">rsize_t</span> s1max, <span class="type">const</span> <span class="type">char</span> *s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (s1 == <span class="literal">NULL</span> || s2 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 无效的参数</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (s1max &gt; RSIZE_MAX) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// s1max 超过了允许的最大值</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> s1len = <span class="built_in">strlen</span>(s2); <span class="comment">// 查找s2的长度，不超过s1max</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (s1len == s1max) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>; <span class="comment">// s2的长度与s1max相同，发生空结尾错误</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (s1len &lt; s1max) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(s1, s2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 复制成功</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>; <span class="comment">// s2的长度超过了s1max，会导致截断</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="运行结果需要截图证明（3种典型错误）"><a href="#运行结果需要截图证明（3种典型错误）" class="headerlink" title="运行结果需要截图证明（3种典型错误）"></a>运行结果需要截图证明（3种典型错误）</h1><p><img src="https://zyhblog-1318929733.cos.ap-beijing.myqcloud.com/wps110.jpg" alt="img"> </p>
<p>实验中第一次复制成功；</p>
<p>第二次字符串长于复制空间，会被截断；</p>
<p>第三次字符串长度&#x3D;复制空间长度，发生空结尾错误；</p>
<p>最后一次申请的复制空间大于缓冲区空间（20），因此会发生缓冲区溢出。</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>软件安全实验</tag>
      </tags>
  </entry>
  <entry>
    <title>软件安全作业二——安全的sprintf函数</title>
    <url>/2023/12/30/Information_Security_Experiment/software_security/SSH2/</url>
    <content><![CDATA[<ol>
<li>详述函数编写思路和流程</li>
</ol>
<p>本次实现的sprintf函数需要实现以下功能：</p>
<p>a) 不会产生缓冲区溢出</p>
<p>b) 不能被格式字符串控制输出内容</p>
<p>c) 实现安全的变参</p>
<p>为实现以上功能：<br>函数首先检查传入的目标缓冲区指针和大小是否有效，若无效则返回 -1 表示参数无效。</p>
<p>使用 va_list 类型的变量 args 来处理可变数量的参数，通过 va_start 宏初始化。</p>
<p>使用一个循环遍历格式化字符串 format，逐个处理其中的字符：</p>
<p>对于普通字符，直接将其复制到目标缓冲区中；对于 %s 格式符，从参数中获取字符串，计算其长度，然后将其复制到目标缓冲区中；对于 %d 格式符，从参数中获取整数，将其转换为字符串，然后复制到目标缓冲区中。</p>
<p>在复制字符串时，会检查缓冲区是否足够大，若不足则返回 -1。</p>
<p>循环结束后，添加字符串终止符 \0 到目标缓冲区的末尾。</p>
<p>最后，释放可变参数列表并返回写入目标缓冲区的字符数量（不包括终止符）。如果参数不匹配或缓冲区不足，也返回 -1。</p>
<ol start="2">
<li><p>函数源代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">safe_sprintf</span><span class="params">(<span class="type">char</span>* buffer, <span class="type">size_t</span> sizeOfBuffer, <span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (buffer == <span class="literal">NULL</span> || sizeOfBuffer == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">// 参数无效</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	va_list args;</span><br><span class="line">	<span class="built_in">va_start</span>(args, format);</span><br><span class="line">	<span class="type">size_t</span> i = <span class="number">0</span>;  <span class="comment">// 记录写入字符的位置</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (*format != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">// 处理格式化字符串中的普通字符</span></span><br><span class="line">		<span class="keyword">if</span> (*format != <span class="string">&#x27;%&#x27;</span> &amp;&amp; i &lt; sizeOfBuffer - <span class="number">1</span>) &#123;</span><br><span class="line">			buffer[i++] = *format;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;%&#x27;</span> &amp;&amp; *(format + <span class="number">1</span>) == <span class="string">&#x27;s&#x27;</span>) </span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 处理 %s 格式符</span></span><br><span class="line">			<span class="type">const</span> <span class="type">char</span>* str = <span class="built_in">va_arg</span>(args, <span class="type">const</span> <span class="type">char</span>*);</span><br><span class="line">			<span class="type">size_t</span> len = <span class="number">0</span>;</span><br><span class="line">			<span class="comment">// 计算字符串长度</span></span><br><span class="line">			<span class="keyword">if</span> (str == <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">				<span class="comment">//参数不匹配</span></span><br><span class="line">				<span class="built_in">va_end</span>(args);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span> (str[len] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">				len++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (i + len &lt; sizeOfBuffer) &#123;</span><br><span class="line">				<span class="comment">// 复制字符串到缓冲区</span></span><br><span class="line">				<span class="type">size_t</span> j;</span><br><span class="line">				<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">					buffer[i + j] = str[j];</span><br><span class="line">				&#125;</span><br><span class="line">				i += len;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 缓冲区不足</span></span><br><span class="line">				<span class="built_in">va_end</span>(args);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="comment">// 判断是否能容纳整个字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="comment">// 移动 format 指针到 %s 后面</span></span><br><span class="line">			format += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (*format == <span class="string">&#x27;%&#x27;</span> &amp;&amp; *(format + <span class="number">1</span>) == <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 处理 %d 格式符</span></span><br><span class="line">			<span class="type">long</span> <span class="type">int</span> num = <span class="built_in">va_arg</span>(args, <span class="type">long</span> <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 分配足够的内存来存储整数的字符串表示</span></span><br><span class="line">			<span class="type">char</span> str[<span class="number">200</span>];  <span class="comment">// 调整大小以适应你的需要</span></span><br><span class="line">			<span class="built_in">sprintf_s</span>(str, <span class="built_in">sizeof</span>(str), <span class="string">&quot; %d&quot;</span>, num);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 检查参数是否匹配</span></span><br><span class="line">			<span class="keyword">if</span> (str==<span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">				<span class="comment">// 参数不匹配</span></span><br><span class="line">				<span class="built_in">va_end</span>(args);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 计算字符串长度</span></span><br><span class="line">			<span class="type">size_t</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 判断是否能容纳整个字符串</span></span><br><span class="line">			<span class="keyword">if</span> (i + len &lt; sizeOfBuffer) &#123;</span><br><span class="line">				<span class="comment">// 复制字符串到缓冲区</span></span><br><span class="line">				<span class="type">size_t</span> j;</span><br><span class="line">				<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">					buffer[i + j] = str[j];</span><br><span class="line">				&#125;</span><br><span class="line">				i += len;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 缓冲区不足</span></span><br><span class="line">				<span class="built_in">va_end</span>(args);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			format += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 未知的格式化符号</span></span><br><span class="line">			<span class="built_in">va_end</span>(args);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		++format;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 在字符串末尾添加终止符</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; sizeOfBuffer) &#123;</span><br><span class="line">		buffer[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 缓冲区不足</span></span><br><span class="line">		<span class="built_in">va_end</span>(args);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">va_end</span>(args);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> i;  <span class="comment">// 返回写入字符的数量（不包括终止符）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> buffer[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Normal output example:\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> result = <span class="built_in">safe_sprintf</span>(buffer, <span class="built_in">sizeof</span>(buffer), <span class="string">&quot;Hello, %s%d!&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="number">1111</span>, <span class="string">&quot;-1&quot;</span>);		<span class="comment">//正常输出</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (result &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Formatted string: %s\n&quot;</span>, buffer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error occurred: %d\n&quot;</span>, result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Example of Scalable Buffer:\n&quot;</span>);</span><br><span class="line">	result = <span class="built_in">safe_sprintf</span>(buffer, <span class="built_in">sizeof</span>(buffer), <span class="string">&quot;Helloooooooooooooooooooooooooooooooooooooooo, %s%d!&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="number">11111</span>, <span class="string">&quot;-1&quot;</span>);	</span><br><span class="line">	<span class="keyword">if</span> (result &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Formatted string: %s\n&quot;</span>, buffer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error occurred: %d\n&quot;</span>, result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Example of viewing stack content:\n&quot;</span>);</span><br><span class="line">	result = <span class="built_in">safe_sprintf</span>(buffer, <span class="built_in">sizeof</span>(buffer), <span class="string">&quot;Hello, %s%d%s%s%s!&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="number">11111</span>, <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (result &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Formatted string: %s\n&quot;</span>, buffer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error occurred: %d\n&quot;</span>, result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Memory Overwrite Example:\n&quot;</span>);</span><br><span class="line">	result = <span class="built_in">safe_sprintf</span>(buffer, <span class="built_in">sizeof</span>(buffer), <span class="string">&quot;Hello, %s%d%s!&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="number">11111</span>, <span class="string">&quot;Memory Overwrite Memory Overwrite Memory Overwrite&quot;</span>, <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (result &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Formatted string: %s\n&quot;</span>, buffer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Error occurred: %d\n&quot;</span>, result);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




</li>
<li><p>运行结果需要截图证明</p>
</li>
</ol>
<p><img src="D:\my_data\blog\zyhblog-img\wps111.jpg" alt="img"> </p>
<p>运行结果</p>
<p><img src="D:\my_data\blog\zyhblog-img\wps112.jpg" alt="img"> </p>
<p>测试样例</p>
<p>实验中第一次输出成功；</p>
<p>第二次验证可伸展的缓冲区和程序崩溃，报错中断；</p>
<p>第三次验证查看栈内容，报错中断；</p>
<p>第二次验证内容覆写，报错中断；</p>
]]></content>
      <categories>
        <category>信安课程实验</category>
        <category>软件安全</category>
      </categories>
      <tags>
        <tag>北邮信安</tag>
        <tag>实验报告</tag>
        <tag>软件安全实验</tag>
      </tags>
  </entry>
</search>
